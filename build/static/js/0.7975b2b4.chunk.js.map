{"version":3,"sources":["../node_modules/datatables.net-buttons/js/buttons.html5.js","../node_modules/datatables.net-colreorder-bs/js/colReorder.bootstrap.js","../node_modules/datatables.net/js/jquery.dataTables.js","../node_modules/datatables.net-bs/js/dataTables.bootstrap.js","../node_modules/datatables.net-buttons/js/dataTables.buttons.js","../node_modules/datatables.net-buttons-bs/js/buttons.bootstrap.js","../node_modules/datatables.net-buttons/js/buttons.colVis.js","../node_modules/datatables.net-buttons/js/buttons.flash.js","../node_modules/datatables.net-colreorder/js/dataTables.colReorder.js","../node_modules/datatables.net-buttons/js/buttons.print.js","../node_modules/datatables.net-responsive-bs/js/responsive.bootstrap.js","../node_modules/datatables.net-select-bs/js/select.bootstrap.js","../node_modules/datatables.net-responsive/js/dataTables.responsive.js","../node_modules/datatables.net-select/js/dataTables.select.js"],"names":["__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","__webpack_require__","undefined","$","window","document","jszip","pdfmake","DataTable","fn","dataTable","_jsZip","JSZip","_pdfMake","pdfMake","Buttons","_","m_ake","_saveAs","view","navigator","test","userAgent","doc","get_URL","URL","webkitURL","save_link","createElementNS","can_use_save_link","is_safari","HTMLElement","safari","is_chrome_ios","throw_outside","ex","setImmediate","setTimeout","revoke","file","revokeObjectURL","remove","auto_bom","blob","type","Blob","String","fromCharCode","FileSaver","name","no_auto_bom","object_url","filesaver","this","force","dispatch_all","event_types","event","i","concat","length","listener","call","dispatch","split","readyState","INIT","createObjectURL","href","download","node","MouseEvent","dispatchEvent","click","DONE","FileReader","reader","onloadend","url","result","replace","popup","open","location","readAsDataURL","opened","fs_error","FS_proto","prototype","msSaveOrOpenBlob","abort","WRITING","error","onwritestart","onprogress","onwrite","onabort","onerror","onwriteend","self","content","fileSave","_sheetname","config","sheetName","_newLine","newline","match","_exportData","dt","newLine","data","buttons","exportData","exportOptions","boundary","fieldBoundary","separator","fieldSeparator","reBoundary","RegExp","escapeChar","join","a","s","ien","header","footer","body","push","str","rows","_isDuffSafari","indexOf","version","createCellPos","n","ordA","charCodeAt","ordZ","len","Math","floor","_ieExcel","_serialiser","XMLSerializer","t","_createNode","nodeName","opts","tempNode","createElement","attr","children","each","key","value","appendChild","text","createTextNode","_excelColWidth","col","lineSplit","max","point","toString","sort","b","excelStrings","_rels/.rels","xl/_rels/workbook.xml.rels","[Content_Types].xml","xl/workbook.xml","xl/worksheets/sheet1.xml","xl/styles.xml","_excelSpecials","style","fmt","d","ext","copyHtml5","className","i18n","action","e","button","processing","that","info","exportInfo","output","hiddenDiv","css","height","width","overflow","position","top","left","title","messageTop","messageBottom","customize","textarea","val","appendTo","queryCommandSupported","table","container","focus","select","successful","execCommand","1","message","append","closest","close","off","on","keyCode","csvHtml5","bom","available","charset","characterSet","filename","extension","excelHtml5","dataStartRow","dataEndRow","currentRow","rowNode","rowPos","getXml","parseXML","rels","relsGet","getElementsByTagName","xlsx","_rels",".rels","xl","workbook.xml.rels","workbook.xml","styles.xml","worksheets","sheet1.xml","addRow","row","r","cellId","cell","createEmptyCells","originalContent","trim","j","jen","special","xml:space","customizeData","mergeCells","colspan","ref","parseFloat","ie","cols","prepend","min","customWidth","workbook","autoFilter","before","localSheetId","hidden","zip","zipConfig","mimeType","_addToZip","obj","serializeToString","isPlainObject","newDir","folder","worksheet","childNodes","attrs","attributes","attrName","attrValue","nodeValue","removeAttribute","createAttribute","setAttributeNode","generateAsync","then","generate","pdfHtml5","map","pageSize","pageOrientation","orientation","headerRows","layout","styles","tableHeader","bold","fontSize","color","fillColor","alignment","tableBodyEven","tableBodyOdd","tableFooter","defaultStyle","unshift","margin","pdf","createPdf","factory","apply","exports","module","_ext","_Api2","_api_register","_api_registerPlural","options","sSelector","oOpts","api","traditional","_fnSettingsFromNode","iApiIndex","fnAddData","redraw","isArray","add","draw","flatten","toArray","fnAdjustColumnSizing","bRedraw","columns","adjust","settings","scroll","oScroll","sX","sY","_fnScrollDraw","fnClearTable","clear","fnClose","nTr","child","hide","fnDeleteRow","target","callback","aoData","fnDestroy","destroy","fnDraw","complete","fnFilter","sInput","iColumn","bRegex","bSmart","bShowGlobal","bCaseInsensitive","search","column","fnGetData","src","toLowerCase","fnGetNodes","iRow","nodes","fnGetPosition","toUpperCase","index","columnVisible","fnIsOpen","isShown","fnOpen","mHtml","sClass","show","fnPageChange","mAction","page","fnSetColumnVis","iCol","bShow","visible","fnSettings","fnSort","aaSort","order","fnSortListener","nNode","fnCallback","fnUpdate","mData","mRow","bAction","fnVersionCheck","_that","emptyInit","oApi","internal","_fnExternApiFunc","iLen","oInit","_fnExtend","sId","getAttribute","bInitHandedOff","defaults","$this","_fnCompatOpts","_fnCompatCols","_fnCamelToHungarian","extend","allSettings","nTable","nTHead","parentNode","nTFoot","bRetrieve","bDestroy","oInstance","_fnLog","sTableId","id","splice","_unique","oSettings","models","sDestroyWidth","sInstance","_fnLanguageCompat","oLanguage","aLengthMenu","iDisplayLength","_fnMap","oFeatures","_fnCallbackReg","fnDrawCallback","fnServerParams","fnStateSaveParams","fnStateLoadParams","fnStateLoaded","fnRowCallback","fnCreatedRow","fnHeaderCallback","fnFooterCallback","fnInitComplete","fnPreDrawCallback","rowIdFn","_fnGetObjectDataFn","rowId","_fnBrowserDetect","oClasses","classes","addClass","sTable","iInitDisplayStart","iDisplayStart","_iDisplayStart","iDeferLoading","bDeferLoading","tmp","_iRecordsDisplay","_iRecordsTotal","sUrl","ajax","dataType","success","json","_fnInitialise","asStripeClasses","sStripeOdd","sStripeEven","stripeClasses","rowOne","find","eq","inArray","el","hasClass","removeClass","asDestroyStripes","slice","aoColumnsInit","anThs","nThead","_fnDetectHeader","aoHeader","_fnGetUniqueThs","aoColumns","_fnAddColumn","_fnApplyColumnDefs","aoColumnDefs","oDef","_fnColumnOptions","filter","features","loadedInit","aaSorting","sorting","asSorting","_fnSortingClasses","bSort","bSorted","aSort","_fnSortFlatten","sortedColumns","dir","_fnCallbackFire","_fnSortAria","_fnDataSource","bDeferRender","captions","_captionSide","thead","tbody","nTBody","tfoot","sNoFooter","aoFooter","aaData","_fnAddData","_fnAddTr","aiDisplay","aiDisplayMaster","bInitialised","bStateSave","_fnSaveState","_fnLoadState","_re_dic","_re_new_lines","_re_html","_re_date","_re_escape_regex","_re_formatted_numeric","_empty","_intVal","integer","parseInt","isNaN","isFinite","_numToDecimal","num","decimalPoint","_fnEscapeRegex","_isNumber","formatted","strType","_htmlNumeric","html","_isHtml","_stripHtml","_pluck","prop","prop2","out","_pluck_order","_range","start","end","_removeEmpty","sorted","last","_areAllUnique","k","again","_fnHungarianMap","o","newKey","_hungarianMap","user","hungarianKey","charAt","lang","defaultDecimal","sDecimal","_addNumericSort","zeroRecords","sZeroRecords","sEmptyTable","sLoadingRecords","sInfoThousands","sThousands","decimal","util","throttle","freq","timer","frequency","now","Date","args","arguments","clearTimeout","escapeRegex","_fnCompatMap","knew","old","init","sScrollX","scrollX","searchCols","aoSearchCols","oSearch","dataSort","aDataSort","__browser","browser","scrollLeft","outer","inner","barWidth","offsetWidth","clientWidth","bScrollOversize","bScrollbarLeft","round","offset","bBounding","getBoundingClientRect","oBrowser","iBarWidth","_fnReduce","inc","isSet","hasOwnProperty","nTh","oDefaults","oCol","oColumn","sTitle","innerHTML","idx","aoPreSearchCols","oOptions","th","sWidthOrig","mDataProp","sType","_sManualType","iDataSort","mDataSrc","mRender","attrTest","_bAttrSrc","_setter","rowData","meta","innerData","fnSetData","_fnSetObjectDataFn","_rowReadObject","bSortable","sSortableNone","bAsc","bDesc","sSortingClass","sSortableAsc","sSortingClassJUI","sSortJUIAscAllowed","sSortableDesc","sSortJUIDescAllowed","sSortable","sSortJUI","_fnAdjustColumnSizing","bAutoWidth","_fnCalculateColumnWidths","sWidth","_fnVisibleToColumnIndex","iMatch","aiVis","_fnGetColumns","_fnColumnIndexToVisible","iPos","_fnVisbleColumns","vis","bVisible","sParam","_fnColumnTypes","ken","detectedType","cache","types","detect","_fnGetCellData","aoColDefs","aoCols","jLen","kLen","def","aTargets","targets","aDataIn","anTds","oData","oRow","_aData","aIds","_fnCreateTr","trs","_fnGetRowElements","cells","rowIdx","colIdx","iDraw","defaultContent","sDefaultContent","cellData","iDrawError","_fnSetCellData","__reArray","__reFn","_fnSplitObjNotation","mSource","fetchData","arrayNotation","funcNotation","innerSrc","substring","setData","aLast","_fnGetDataMaster","_fnClearTable","_fnDeleteIndex","iTarget","iTargetIndex","_fnInvalidate","cellWrite","removeChild","firstChild","anCells","_aSortData","_aFilterData","_fnRowAttributes","contents","tds","td","objectRead","setter","cellProcess","nextSibling","nTrIn","nTd","_DT_RowIndex","sCellType","_DT_CellIndex","fnCreatedCell","setAttribute","tr","DT_RowClass","__rowc","DT_RowAttr","DT_RowData","_fnBuildHead","createHeader","iTabIndex","_fnSortAttachListener","_fnRenderer","sHeaderTH","sFooterTH","nTf","_fnDrawHead","aoSource","bIncludeHidden","nLocalTr","iRowspan","iColspan","aoLocal","aApplied","iColumns","_fnDraw","aPreDraw","anRows","iRowCount","iStripes","oLang","aoOpenRows","bServerSide","bDrawing","fnRecordsDisplay","iDisplayEnd","fnDisplayEnd","_fnProcessingDisplay","bDestroying","_fnAjaxUpdate","iStart","iEnd","iDataIndex","nRow","sStripe","_sRowStripe","sZero","fnRecordsTotal","class","valign","colSpan","sRowEmpty","detach","bFiltered","_fnReDraw","holdPosition","bFilter","_fnSort","_fnFilterComplete","oPreviousSearch","_drawHold","_fnAddOptionsHtml","holding","insertBefore","insert","sWrapper","nHolding","nTableWrapper","nTableReinsertBefore","featureNode","cOption","nNewNode","cNext","sAttr","aDom","sDom","sJUIHeader","sJUIFooter","aSplit","substr","parent","bPaginate","bLengthChange","_fnFeatureHtmlLength","_fnFeatureHtmlFilter","bProcessing","_fnFeatureHtmlProcessing","_fnFeatureHtmlTable","bInfo","_fnFeatureHtmlInfo","_fnFeatureHtmlPaginate","feature","aoFeatures","cFeature","fnInit","aanFeatures","replaceWith","aLayout","nCell","l","iColShifted","bUnique","nTrs","fnShiftCol","unique","nHeader","aReturn","bSortCellsTop","_fnBuildAjax","rbracket","ajaxData","instance","jqXHR","newData","baseAjax","sError","sServerMethod","xhr","_error","thrown","ret","oAjaxData","fnServerData","sAjaxSource","bAjaxDataGet","_fnAjaxParameters","_fnAjaxUpdateDraw","dataProp","columnSearch","columnCount","preSearch","preColSearch","displayStart","displayLength","_iDisplayLength","param","sSearch","regex","sName","searchable","bSearchable","orderable","legacy","compat","modern","_fnAjaxDataSrc","recordsTotal","recordsFiltered","_bInitComplete","_fnInitComplete","dataSrc","sAjaxDataProp","tableId","language","previousSearch","input","sFilterInput","f","sFilter","searchFn","searchDelay","jqFilter","sSearchPlaceholder","_fnThrottle","ev","activeElement","oInput","iForce","oPrevSearch","aoPrevSearch","fnSaveFilter","oFilter","fnRegex","bEscapeRegex","_fnFilter","_fnFilterColumn","_fnFilterCustom","filters","displayRows","merge","searchStr","smart","caseInsensitive","display","rpSearch","_fnFilterCreateSearch","invalidated","prevSearch","displayMaster","filtered","_fnFilterData","_sFilterRow","word","m","__filter_div","__filter_div_textContent","textContent","filterData","fomatters","wasInvalidated","innerText","_fnSearchToCamel","_fnSearchToHung","tid","sInfo","aoDrawCallback","_fnUpdateInfo","total","sInfoEmpty","sInfoFiltered","sInfoPostFix","_fnInfoMacros","fnInfoCallback","formatter","fnFormatNumber","all","ceil","iAjaxStart","deferLoading","_fnStringToCss","aData","_fnLengthChange","_fnLengthOverflow","menu","d2","lengths","aria-controls","sLengthSelect","Option","div","sLength","sLengthMenu","outerHTML","sPaginationType","plugin","pager","sPaging","p","visRecords","pages","_fnPageChange","records","changed","sProcessing","scrollY","caption","captionSide","headerClone","cloneNode","footerClone","_div","size","scroller","sScrollWrapper","sScrollHead","border","sScrollHeadInner","box-sizing","sXInner","removeAttr","sScrollBody","sScrollFoot","sScrollFootInner","scrollHead","scrollBody","scrollFoot","bCollapse","nScrollHead","nScrollBody","nScrollFoot","headerTrgEls","footerTrgEls","headerSrcEls","footerSrcEls","headerCopy","footerCopy","correction","sanityWidth","scrollXInner","divHeader","divHeaderStyle","divHeaderInner","divHeaderInnerStyle","divHeaderTable","divBodyEl","divBody","divBodyStyle","divFooter","divFooterInner","divFooterTable","tableEl","tableStyle","ie67","dtHeaderCells","headerWidths","footerWidths","headerContent","footerContent","zeroOut","nSizer","paddingTop","paddingBottom","borderTopWidth","borderBottomWidth","scrollBarVis","scrollHeight","clientHeight","clone","prependTo","_fnApplyToChildren","outerWidth","offsetHeight","nToSize","iOuterWidth","bScrolling","padding","scrollTop","an1","an2","nNode1","nNode2","nodeType","__re_html_remove","columnIdx","visibleColumns","headerCells","tableWidthAttr","tableContainer","userInputs","styleWidth","_fnConvertToWidth","tmpTable","_fnGetWidestNode","sContentPadding","holder","right","bounding","_reszEvt","bindResize","_fnGetMaxLenString","maxIdx","srcCol","fixed","aaSortingFixed","fixedObj","nestedSort","pre","post","_idx","sortCol","aiOrig","oExtSort","formatters","_fnSortData","x","y","dataA","dataB","label","nextSort","oAria","sSortAscending","sSortDescending","_fnSortListener","nextSortIdx","next","bSortMulti","sortIdx","attachTo","_fnBindAction","shiftKey","oldSort","aLastSort","sortClass","sSortColumn","bSortClasses","customData","customSort","sSortDataType","state","time","oSavedState","fnStateSaveCallback","loaded","abStateLoad","duration","iStateDuration","oLoadedState","fnStateLoadCallback","level","msg","tn","console","log","sErrMode","errMode","alert","Error","mappedName","extender","breakRefs","blur","which","preventDefault","sStore","callbackArr","eventName","reverse","Event","trigger","renderer","host","__apiStruct","__arrayProto","Array","context","ctxSettings","mixed","jq","tables","_toSettings","selector","Api","any","count","ctx","iterator","alwaysNew","items","item","apiInst","_selector_row_indexes","apiSelector","lastIndexOf","pluck","pop","reduce","reduceRight","shift","to$","toJQuery","scope","__dt_wrapper","struct","methodScoping","struc","methodExt","propExt","register","method","heir","registerPlural","pluralName","singularName","__table_selector","paging","recordsDisplay","serverSide","__reload","one","resetPaging","_selector_run","selectFn","res","selectorType","_selector_opts","_selector_first","inst","displayFiltered","displayFilteredMap","sel","selInt","cellIdx","rowObj","__row_selector","hash","thatIdx","loopRow","loopCells","newRows","modRows","__details_remove","_details","_detailsShow","__details_display","insertAfter","__details_events","drawEvent","_child_obj","klass","created","__details_add","_child_mth","__re_column_selector","__columnData","r1","r2","names","visColumns","jqResult","__column_selector","calc","__setColumnVis","rowSelector","columnSelector","allCells","fnSelector","__cell_selector","set","caseInsen","versionCheck","iThis","iThat","aThis","aThat","isDataTable","fnIsDataTable","get","is","head","foot","fnTables","camelToHungarian","jqRows","orig","jqTable","jqTbody","jqWrapper","removedMethod","arg1","arg2","arg3","arg4","token","plural","resolved","bScrollCollapse","toFormat","JSON","parse","sessionStorage","localStorage","getItem","pathname","setItem","stringify","oPaginate","sFirst","sLast","sNext","sPrevious","sScrollXInner","sScrollY","aoRowCallback","aoHeaderCallback","aoFooterCallback","aoRowCreatedCallback","aoPreDrawCallback","aoInitComplete","aoStateSaveParams","aoStateLoadParams","aoStateLoaded","aoStateSave","aoStateLoad","aoServerParams","aoDestroyCallback","paginate","oPlugins","builder","pageButton","oJUIClasses","sVersion","afnFiltering","aTypes","ofnSearch","oSort","afnSortData","oStdClasses","oPagination","sPageButton","sPageButtonActive","sPageButtonDisabled","sSortAsc","sSortDesc","sSortJUIAsc","sSortJUIDesc","sSortJUIWrapper","sSortIcon","extPagination","_numbers","numbers","numbers_length","half","DT_el","simple","full","simple_numbers","full_numbers","first_last_numbers","btnDisplay","btnClass","activeEl","aria","counter","attach","clickHandler","aria-label","data-dt-idx","tabindex","empty","parsed","string","__numericReplace","decimalPlace","re1","re2","Infinity","num-fmt","html-num","html-num-fmt","date-pre","ts","html-pre","string-pre","string-asc","string-desc","jqueryui","__htmlEscapeEntities","render","number","thousands","precision","prefix","postfix","negative","flo","toFixed","abs","intPart","floatPart","_fnNodeToDataIndex","_fnNodeToColumnIndex","_fnCalculateEnd","dataTableSettings","dataTableExt","dom","bootstrap","currentTarget","_infoTimer","_instCounter","_buttonCounter","_dtButtons","c","listenKeys","namespace","tag","_constructor","_action","_nodeToButton","conf","active","flag","jqNode","toggleClass","base","_expandButton","_draw","disable","disabled","buttonInsts","enable","_node","_nodeToHost","_removeKey","buttonLiner","collection","linerTag","inCollection","opt","dtSettings","_buttons","character","_keypress","_addKey","inserter","attachPoint","_resolveExtends","built","_buildButton","collectionDom","_collection","buttonDom","linerDom","triggerHandler","clickBlurs","liner","enabled","titleAttr","buttonContainer","buttonCreated","_buttonsHandled","run","altKey","ctrlKey","metaKey","recurse","toConfObject","loop","objArray","originalClassName","postfixButtons","prefixButtons","background","fade","insertPoint","stop","fadeIn","fadeOut","instanceSelector","group","v","process","buttonSelector","insts","nodeBuilder","baseIdx","indexes","tabIndex","siblings","backgroundClassName","wasExpanded","collectionParent","parents","hostPosition","multiLevel","lastChild","collectionTitle","collectionLayout","outerHeight","tableBottom","listBottom","bottomOverflow","listTop","tableTop","topOverflow","dropup","rightAlignClassName","listRight","tableRight","listOffsetRight","back","addBack","autoClose","aria-haspopup","copy","copyFlash","csv","csvFlash","excel","excelFlash","pdfFlash","pageLength","lengthMenu","vals","-1","buttonGroup","_groupSelector","groupSelector","_filename","_title","_message","_stringOrFunction","option","side","_exportTextarea","inOpts","modifier","orthogonal","stripHtml","stripNewlines","decodeEntities","format","strip","selected","rowIndexes","selectedCells","cellNodes","cellCounter","_init","colvis","columnText","columnsToggle","columnToggle","columnsVisibility","visibility","columnVisibility","_columnText","curr","details","mapping","colvisRestore","_visOriginal","every","colReorder","transpose","colvisGroup","ZeroClipboard_TableTools","clients","moviePath","nextId","thingy","getElementById","setMoviePath","path","client","receiveEvent","getDOMObjectPosition","offsetLeft","offsetTop","offsetParent","Client","elem","handlers","movieId","glue","ready","movie","clipText","fileName","handCursorEnabled","cssEffects","sized","domElement","zIndex","box","getHTML","positionElement","flash","flashvars","protocol","reposition","clearText","appendText","newText","setText","setFileName","setSheetData","setAction","addEventListener","func","setHandCursor","setCSSEffects","recoverActive","hasFlash","fo","ActiveXObject","mimeTypes","enabledPlugin","_setText","parts","flashButton","swfPath","_fromFlash","_glue","_flash","xml","_xlsxToStrings","totalWidth","ratios","colWidth","fnInvertKeyValues","aIn","aRet","fnArraySwitch","aArray","iFrom","iTo","mStore","fnDomSwitch","nParent","anTags","nStore","fnColReorder","drop","invalidateRows","iCols","attrMap","aiMapping","aiInvertMapping","iVisibleIndex","iInsertBeforeIndex","invalidate","from","to","ColReorder","_colReorder","fixedRight","reorderCallback","mouse","startX","startY","offsetX","offsetY","targetIndex","fromIndex","aoTargets","drag","pointer","bEnable","_fnConstruct","fnEnable","fnDisable","fnReset","_fnOrderColumns","fnOrder","fnGetCurrentOrder","original","_ColReorder_iOrigCol","fnTranspose","iFixedColumns","iFixedColumnsLeft","iFixedColumnsRight","fnReorderCallback","_fnMouseListener","oS","_fnStateSave","aiOrder","resort","bDone","_fnSetColumnIndexes","currIndex","oState","iOrigColumn","aSearchCopy","abVisCols","stateColumnsCopy","_fnMouseDown","_fnCursorPosition","_fnRegions","_fnMouseMove","_fnMouseUp","pow","_fnCreateDragNode","bSet","lastToIndex","toIndex","bRealtime","iToPoint","scrolling","origCell","origTr","origThead","origTable","cloneCell","originalEvent","touches","dtInit","oColReorder","sFeature","_link","_relToAbs","linkHost","print","columnClasses","dataOut","win","_styleToAbs","img","autoPrint","_display","Responsive","_original","modal","_modal","update","current","responsive","dtPrivateSettings","oldWindowWidth","_responsive","_resize","_setColumnVis","breakpoints","_classLogic","_resizeAuto","_detailsInit","_timer","_redrawChildren","rowIds","_detailsDisplay","_columnsVisiblity","breakpoint","priority","auto","minWidth","includeIn","requiredWidth","bar","widthAvailable","usedWidth","control","showControl","never","responsivePriority","dataPriority","operator","matched","_find","classNames","brokenPoint","re","_detailsObj","_tabIndexes","targetIdx","columnIndex","rowIndex","oldVis","columnsVis","collapsedClass","isEmptyObject","_childNodeStore","_childNodesRestore","clonedTable","clonedHeader","clonedBody","clonedFooter","footerCells","inserted","showHide","removeData","childRow","childRowImmediate","hasHidden","stopPropagation","store","parentChildren","listHiddenNodes","ul","found","_childNodes","listHidden","tableAll","tableClass","li","cellRange","columnIndexes","selectColumns","record","selectRows","deselect","disableMouseSelection","_select","enableMouseSelection","matchSelection","getSelection","selection","anchorNode","wrapperClass","eventTrigger","isDefaultPrevented","cellIndex","typeSelect","_select_lastCell","blurable","0","exisiting","rowColumnRange","idx1","idx2","isSelected","setStyle","_select_selected","_selected_cells","apiRegister","apiRegisterPlural","namespacedEvents","_eventNamespace","_select_init","ids","cellSelected","_buttonNamespace","limitTo","selectedSingle","selectAll","selectNone","lc"],"mappings":"6EAAA,IAAAA,EAAAC,EAUID,EAAO,CAACE,EAAA,GAAUA,EAAA,KAAkBA,EAAA,WAEnCC,KAF4DF,EAAA,SAAEG,GACnE,OAuBC,SAAAA,EAAAC,EAAAC,EAAAC,EAAAC,EAAAL,GACD,aAEA,IAAAM,EAAAL,EAAAM,GAAAC,UAGA,SAAAC,IACA,OAAAL,GAAAF,EAAAQ,MAGA,SAAAC,IACA,OAAAN,GAAAH,EAAAU,QAGAN,EAAAO,QAAAD,QAAA,SAAAE,GACA,IAAAA,EACA,OAAAH,IAGAN,EAAAU,OAGAT,EAAAO,QAAAT,MAAA,SAAAU,GACA,IAAAA,EACA,OAAAL,IAGAL,EAAAU,GASA,IAAAE,EAAA,SAAAC,GAGA,0BAAAA,GAAA,qBAAAC,WAAA,eAAAC,KAAAD,UAAAE,YAAA,CAIA,IAAAC,EAAAJ,EAAAd,SAEAmB,EAAA,WACA,OAAAL,EAAAM,KAAAN,EAAAO,WAAAP,GAEAQ,EAAAJ,EAAAK,gBAAA,oCACAC,EAAA,aAAAF,EAKAG,EAAA,eAAAT,KAAAF,EAAAY,cAAAZ,EAAAa,OACAC,EAAA,eAAAZ,KAAAD,UAAAE,WACAY,EAAA,SAAAC,IACAhB,EAAAiB,cAAAjB,EAAAkB,YAAA,WACA,MAAAF,GACO,IAMPG,EAAA,SAAAC,GAWAF,WAVA,WACA,kBAAAE,EAEAf,IAAAgB,gBAAAD,GAGAA,EAAAE,UATA,MA+BAC,EAAA,SAAAC,GAGA,mFAA+DtB,KAAAsB,EAAAC,MAC/D,IAAAC,KAAA,CAAAC,OAAAC,aAAA,OAAAJ,GAAA,CACAC,KAAAD,EAAAC,OAIAD,GAEAK,EAAA,SAAAL,EAAAM,EAAAC,GACAA,IACAP,EAAAD,EAAAC,IAIA,IAGAQ,EAHAC,EAAAC,KACAT,EAAAD,EAAAC,KACAU,EApDA,6BAoDAV,EAEAW,EAAA,YArCA,SAAAH,EAAAI,EAAAC,GAIA,IAFA,IAAAC,GADAF,EAAA,GAAAG,OAAAH,IACAI,OAEAF,KAAA,CACA,IAAAG,EAAAT,EAAA,KAAAI,EAAAE,IAEA,uBAAAG,EACA,IACAA,EAAAC,KAAAV,EAAAK,GAAAL,GACW,MAAAjB,GACXD,EAAAC,KA2BA4B,CAAAX,EAAA,qCAAAY,MAAA,OA8CA,GAFAZ,EAAAa,WAAAb,EAAAc,KAEArC,EAUA,OATAsB,EAAA3B,IAAA2C,gBAAAxB,QACAN,WAAA,WACAV,EAAAyC,KAAAjB,EACAxB,EAAA0C,SAAApB,EApHA,SAAAqB,GACA,IAAAb,EAAA,IAAAc,WAAA,SACAD,EAAAE,cAAAf,GAmHAgB,CAAA9C,GACA4B,IACAjB,EAAAa,GACAC,EAAAa,WAAAb,EAAAsB,QAnDA,WACA,IAAAzC,GAAAqB,GAAAxB,IAAAX,EAAAwD,WAAA,CAEA,IAAAC,EAAA,IAAAD,WAcA,OAZAC,EAAAC,UAAA,WACA,IAAAC,EAAA7C,EAAA2C,EAAAG,OAAAH,EAAAG,OAAAC,QAAA,eAAyF,yBACzFC,EAAA9D,EAAA+D,KAAAJ,EAAA,UACAG,IAAA9D,EAAAgE,SAAAf,KAAAU,GACAA,EAAA5E,EAEAkD,EAAAa,WAAAb,EAAAsB,KACAnB,KAGAqB,EAAAQ,cAAAzC,QACAS,EAAAa,WAAAb,EAAAc,MASA,GAJAf,IACAA,EAAA3B,IAAA2C,gBAAAxB,IAGAW,EACAnC,EAAAgE,SAAAf,KAAAjB,MACS,CACT,IAAAkC,EAAAlE,EAAA+D,KAAA/B,EAAA,UAEAkC,IAEAlE,EAAAgE,SAAAf,KAAAjB,GAIAC,EAAAa,WAAAb,EAAAsB,KACAnB,IACAjB,EAAAa,GAkBAmC,IAEAC,EAAAvC,EAAAwC,UAMA,2BAAApE,qBAAAqE,iBACA,SAAA9C,EAAAM,EAAAC,GAOA,OANAD,KAAAN,EAAAM,MAAA,WAEAC,IACAP,EAAAD,EAAAC,IAGAvB,UAAAqE,iBAAA9C,EAAAM,KAIAsC,EAAAG,MAAA,aAEAH,EAAAtB,WAAAsB,EAAArB,KAAA,EACAqB,EAAAI,QAAA,EACAJ,EAAAb,KAAA,EACAa,EAAAK,MAAAL,EAAAM,aAAAN,EAAAO,WAAAP,EAAAQ,QAAAR,EAAAS,QAAAT,EAAAU,QAAAV,EAAAW,WAAA,KAtBA,SAAAvD,EAAAM,EAAAC,GACA,WAAAF,EAAAL,EAAAM,GAAAN,EAAAM,MAAA,WAAAC,MA/IA,CAsKG,qBAAAiD,YAAA,qBAAA/F,MAAAiD,KAAA+C,SAIH5F,EAAA6F,SAAAnF,EAWA,IAAAoF,EAAA,SAAAC,GACA,IAAAC,EAAA,SAMA,OAJAD,EAAAC,YACAA,EAAAD,EAAAC,UAAAxB,QAAA,yBAGAwB,GAUAC,EAAA,SAAAF,GACA,OAAAA,EAAAG,QAAAH,EAAAG,QAAAtF,UAAAE,UAAAqF,MAAA,wBAYAC,EAAA,SAAAC,EAAAN,GA4BA,IA3BA,IAAAO,EAAAL,EAAAF,GAEAQ,EAAAF,EAAAG,QAAAC,WAAAV,EAAAW,eACAC,EAAAZ,EAAAa,cACAC,EAAAd,EAAAe,eACAC,EAAA,IAAAC,OAAAL,EAAA,KACAM,EAAAlB,EAAAkB,aAAAvH,EAAAqG,EAAAkB,WAAA,KAEAC,EAAA,SAAAC,GAIA,IAHA,IAAAC,EAAA,GAGAlE,EAAA,EAAAmE,EAAAF,EAAA/D,OAAqCF,EAAAmE,EAASnE,IAC9CA,EAAA,IACAkE,GAAAP,GAGAO,GAAAT,KAAA,GAAAQ,EAAAjE,IAAAsB,QAAAuC,EAAAE,EAAAN,KAAAQ,EAAAjE,GAGA,OAAAkE,GAGAE,EAAAvB,EAAAuB,OAAAJ,EAAAX,EAAAe,QAAAhB,EAAA,GACAiB,EAAAxB,EAAAwB,QAAAhB,EAAAgB,OAAAjB,EAAAY,EAAAX,EAAAgB,QAAA,GACAC,EAAA,GAEAtE,EAAA,EAAAmE,EAAAd,EAAAiB,KAAApE,OAA2CF,EAAAmE,EAASnE,IACpDsE,EAAAC,KAAAP,EAAAX,EAAAiB,KAAAtE,KAGA,OACAwE,IAAAJ,EAAAE,EAAAN,KAAAZ,GAAAiB,EACAI,KAAAH,EAAApE,SAWAwE,EAAA,WACA,IAAApG,GAAA,IAAAZ,UAAAE,UAAA+G,QAAA,gBAAAjH,UAAAE,UAAA+G,QAAA,gBAAAjH,UAAAE,UAAA+G,QAAA,SAEA,IAAArG,EACA,SAGA,IAAAsG,EAAAlH,UAAAE,UAAAqF,MAAA,2BAEA,SAAA2B,KAAA1E,OAAA,KAAA0E,EAAA,WAaA,SAAAC,EAAAC,GAMA,IALA,IAAAC,EAAA,IAAAC,WAAA,GACAC,EAAA,IAAAD,WAAA,GACAE,EAAAD,EAAAF,EAAA,EACAb,EAAA,GAEAY,GAAA,GACAZ,EAAA9E,OAAAC,aAAAyF,EAAAI,EAAAH,GAAAb,EACAY,EAAAK,KAAAC,MAAAN,EAAAI,GAAA,EAGA,OAAAhB,EAGA,IACA,IAEAmB,EAFAC,EAAA,IAAAC,cAGG,MAAAC,IAwFH,SAAAC,EAAA5H,EAAA6H,EAAAC,GACA,IAAAC,EAAA/H,EAAAgI,cAAAH,GAkBA,OAhBAC,IACAA,EAAAG,MACArJ,EAAAmJ,GAAAE,KAAAH,EAAAG,MAGAH,EAAAI,UACAtJ,EAAAuJ,KAAAL,EAAAI,SAAA,SAAAE,EAAAC,GACAN,EAAAO,YAAAD,KAIA,OAAAP,EAAAS,MAAAT,EAAAS,OAAA5J,GACAoJ,EAAAO,YAAAtI,EAAAwI,eAAAV,EAAAS,QAIAR,EAUA,SAAAU,EAAAjD,EAAAkD,GACA,IACArB,EAAAsB,EAAAhC,EADAiC,EAAApD,EAAAe,OAAAmC,GAAArG,OAGAmD,EAAAgB,QAAAhB,EAAAgB,OAAAkC,GAAArG,OAAAuG,IACAA,EAAApD,EAAAgB,OAAAkC,GAAArG,QAGA,QAAAF,EAAA,EAAAmE,EAAAd,EAAAiB,KAAApE,OAA2CF,EAAAmE,EAASnE,IAAA,CACpD,IAAA0G,EAAArD,EAAAiB,KAAAtE,GAAAuG,GAmBA,IAfA,KAHA/B,EAAA,OAAAkC,OAAAlK,EAAAkK,EAAAC,WAAA,IAGAhC,QAAA,QACA6B,EAAAhC,EAAAlE,MAAA,OACAsG,KAAA,SAAA3C,EAAA4C,GACA,OAAAA,EAAA3G,OAAA+D,EAAA/D,SAEAgF,EAAAsB,EAAA,GAAAtG,QAEAgF,EAAAV,EAAAtE,OAGAgF,EAAAuB,IACAA,EAAAvB,GAIAuB,EAAA,GACA,UAMA,OAFAA,GAAA,MAEA,EAAAA,EAAA,EAIA,IAAAK,EAAA,CACAC,cAAA,0SACAC,6BAAA,0aACAC,sBAAA,ouBACAC,kBAAA,2iBACAC,2BAAA,0aACAC,gBAAA,iuSAUAC,EAAA,EACApE,MAAA,gBACAqE,MAAA,GACAC,IAAA,SAAAC,GACA,OAAAA,EAAA,MAGA,CACAvE,MAAA,kBACAqE,MAAA,GACAC,IAAA,SAAAC,GACA,OAAAA,EAAA,MAGA,CACAvE,MAAA,qBACAqE,MAAA,IAEA,CACArE,MAAA,uBACAqE,MAAA,IAEA,CACArE,MAAA,yBACAqE,MAAA,IAEA,CACArE,MAAA,WACAqE,MAAA,IAEA,CACArE,MAAA,kBACAqE,MAAA,IAEA,CACArE,MAAA,eACAqE,MAAA,GACAC,IAAA,SAAAC,GACA,SAAAA,EAAAlG,QAAA,gBAGA,CACA2B,MAAA,sBACAqE,MAAA,GACAC,IAAA,SAAAC,GACA,SAAAA,EAAAlG,QAAA,gBAGA,CACA2B,MAAA,cACAqE,MAAA,IAEA,CACArE,MAAA,qBACAqE,MAAA,KAikBA,OAvjBAxK,EAAA2K,IAAAnE,QAAAoE,UAAA,CACAC,UAAA,6BACAvB,KAAA,SAAAjD,GACA,OAAAA,EAAAyE,KAAA,wBAEAC,OAAA,SAAAC,EAAA3E,EAAA4E,EAAAlF,GACAlD,KAAAqI,YAAA,GACA,IAAAC,EAAAtI,KAEA4D,EAAAL,EAAAC,EAAAN,GAEAqF,EAAA/E,EAAAG,QAAA6E,WAAAtF,GAEAG,EAAAD,EAAAF,GAEAuF,EAAA7E,EAAAiB,IACA6D,EAAA5L,EAAA,UAAA6L,IAAA,CACAC,OAAA,EACAC,MAAA,EACAC,SAAA,SACAC,SAAA,QACAC,IAAA,EACAC,KAAA,IAGAV,EAAAW,QACAT,EAAAF,EAAAW,MAAA7F,IAAAoF,GAGAF,EAAAY,aACAV,EAAAF,EAAAY,WAAA9F,IAAAoF,GAGAF,EAAAa,gBACAX,IAAApF,IAAAkF,EAAAa,eAGAlG,EAAAmG,YACAZ,EAAAvF,EAAAmG,UAAAZ,EAAAvF,EAAAM,IAGA,IAAA8F,EAAAxM,EAAA,wBAAAyM,IAAAd,GAAAe,SAAAd,GAEA,GAAA1L,EAAAyM,sBAAA,SACAf,EAAAc,SAAAhG,EAAAkG,QAAAC,aACAL,EAAA,GAAAM,QACAN,EAAA,GAAAO,SAEA,IACA,IAAAC,EAAA9M,EAAA+M,YAAA,QAGA,GAFArB,EAAAtJ,SAEA0K,EAMA,OALAtG,EAAAG,QAAA4E,KAAA/E,EAAAyE,KAAA,yCAAAzE,EAAAyE,KAAA,uBACA+B,EAAA,8BACArM,EAAA,+BACaiG,EAAAkB,MAAA,UACb9E,KAAAqI,YAAA,GAGS,MAAAxC,KAIT,IAAAoE,EAAAnN,EAAA,SAAA0G,EAAAyE,KAAA,yLAAAiC,OAAAxB,GACAlF,EAAAG,QAAA4E,KAAA/E,EAAAyE,KAAA,yCAAAgC,EAAA,GAGAX,EAAA,GAAAM,QACAN,EAAA,GAAAO,SAEA,IAAAF,EAAA7M,EAAAmN,GAAAE,QAAA,mBAEAC,EAAA,WACAT,EAAAU,IAAA,sBACAvN,EAAAE,GAAAqN,IAAA,iBACA7G,EAAAG,QAAA4E,MAAA,IAGAoB,EAAAW,GAAA,qBAAAF,GACAtN,EAAAE,GAAAsN,GAAA,gCAAAnC,GACA,KAAAA,EAAAoC,UAEAH,IACA9B,EAAAD,YAAA,MAEOiC,GAAA,gDACPF,IACA9B,EAAAD,YAAA,MAGAxE,cAAA,GACAI,eAAA,KACAF,cAAA,GACAU,QAAA,EACAC,QAAA,EACAwE,MAAA,IACAC,WAAA,IACAC,cAAA,KAKAjM,EAAA2K,IAAAnE,QAAA6G,SAAA,CACAC,KAAA,EACAzC,UAAA,4BACA0C,UAAA,WACA,OAAA3N,EAAAuE,aAAAzE,GAAAE,EAAAyC,MAEAiH,KAAA,SAAAjD,GACA,OAAAA,EAAAyE,KAAA,sBAEAC,OAAA,SAAAC,EAAA3E,EAAA4E,EAAAlF,GACAlD,KAAAqI,YAAA,GAEA,IAAAI,EAAAlF,EAAAC,EAAAN,GAAA2B,IAEA0D,EAAA/E,EAAAG,QAAA6E,WAAAtF,GACAyH,EAAAzH,EAAAyH,QAEAzH,EAAAmG,YACAZ,EAAAvF,EAAAmG,UAAAZ,EAAAvF,EAAAM,KAGA,IAAAmH,GACAA,IACAA,EAAA3N,EAAA4N,cAAA5N,EAAA2N,SAGAA,IACAA,EAAA,YAAsBA,IAGtBA,EAAA,GAGAzH,EAAAuH,MACAhC,EAAA,SAAAA,GAGA5K,EAAA,IAAA2B,KAAA,CAAAiJ,GAAA,CACAlJ,KAAA,WAAAoL,IACOpC,EAAAsC,UAAA,GAEP7K,KAAAqI,YAAA,IAEAwC,SAAA,IACAC,UAAA,OACAjH,cAAA,GACAI,eAAA,IACAF,cAAA,IACAK,WAAA,IACAuG,QAAA,KACAlG,QAAA,EACAC,QAAA,GAKAvH,EAAA2K,IAAAnE,QAAAoH,WAAA,CACA/C,UAAA,8BACA0C,UAAA,WACA,OAAA3N,EAAAuE,aAAAzE,GAAAS,MAAAT,IAAAkI,KAAAY,GAEAc,KAAA,SAAAjD,GACA,OAAAA,EAAAyE,KAAA,0BAEAC,OAAA,SAAAC,EAAA3E,EAAA4E,EAAAlF,GACAlD,KAAAqI,YAAA,GACA,IAEA2C,EAAAC,EA2BAC,EAAAC,EA7BA7C,EAAAtI,KACAoL,EAAA,EAGAC,EAAA,SAAA9L,GACA,IAAAsF,EAAAsC,EAAA5H,GAEA,OAAAzC,EAAAwO,SAAAzG,IAGA0G,EAAAF,EAAA,4BACAG,EAAAD,EAAAE,qBAAA,gBACAC,EAAA,CACAC,MAAA,CACAC,QAAAP,EAAA,gBAEAQ,GAAA,CACAF,MAAA,CACAG,oBAAAT,EAAA,+BAEAU,eAAAV,EAAA,mBACAW,aAAAX,EAAA,iBACAY,WAAA,CACAC,aAAAX,IAGAjE,sBAAA+D,EAAA,wBAEA3H,EAAAF,EAAAG,QAAAC,WAAAV,EAAAW,eAGAsI,EAAA,SAAAC,GAEAjB,EAAArF,EAAAyF,EAAA,OACApF,KAAA,CACAkG,EAHAnB,EAAAE,EAAA,KAOA,QAAA/K,EAAA,EAAAmE,EAAA4H,EAAA7L,OAAyCF,EAAAmE,EAASnE,IAAA,CAElD,IAAAiM,EAAApH,EAAA7E,GAAA,GAAA6K,EACAqB,EAAA,KAEA,UAAAH,EAAA/L,IAAA+L,EAAA/L,KAAAxD,GAAA,KAAAuP,EAAA/L,GAAA,CACA,QAAA6C,EAAAsJ,iBAGA,SAFAJ,EAAA/L,GAAA,GAMA,IAAAoM,EAAAL,EAAA/L,GACA+L,EAAA/L,GAAAvD,EAAA4P,KAAAN,EAAA/L,IAEA,QAAAsM,EAAA,EAAAC,EAAAlF,EAAAnH,OAAsDoM,EAAAC,EAASD,IAAA,CAC/D,IAAAE,EAAAnF,EAAAiF,GAIA,GAAAP,EAAA/L,GAAAiD,QAAA8I,EAAA/L,GAAAiD,MAAA,UAAA8I,EAAA/L,GAAAiD,MAAAuJ,EAAAvJ,OAAA,CACA,IAAAiG,EAAA6C,EAAA/L,GAAAsB,QAAA,iBAEAkL,EAAAjF,MACA2B,EAAAsD,EAAAjF,IAAA2B,IAGAgD,EAAAzG,EAAAyF,EAAA,KACApF,KAAA,CACAkG,EAAAC,EACA/H,EAAAsI,EAAAlF,OAEAvB,SAAA,CAAAN,EAAAyF,EAAA,KACA9E,KAAA8C,OAGA,OAIA,IAAAgD,EACA,qBAAAH,EAAA/L,IAAA+L,EAAA/L,GAAAiD,OAAA8I,EAAA/L,GAAAiD,MAAA,qBAAA8I,EAAA/L,GAAAiD,MAAA,SAGAiJ,EAAAzG,EAAAyF,EAAA,KACApF,KAAA,CACAN,EAAA,IACAwG,EAAAC,GAEAlG,SAAA,CAAAN,EAAAyF,EAAA,KACA9E,KAAA2F,EAAA/L,YAGa,CAEb,IAAAoG,EAAAgG,EAAA9K,QAAA8K,EAAA9K,QAAA,6CAAA8K,EACAF,EAAAzG,EAAAyF,EAAA,KACApF,KAAA,CACAN,EAAA,YACAwG,EAAAC,GAEAlG,SAAA,CACAgG,IAAAtG,EAAAyF,EAAA,MACAnF,SAAA,CACAgG,IAAAtG,EAAAyF,EAAA,KACA9E,OACAN,KAAA,CACA2G,YAAA,oBAUA3B,EAAA3E,YAAA+F,GAGAf,EAAAhF,YAAA2E,GACAC,KAGAlI,EAAA6J,eACA7J,EAAA6J,cAAArJ,GAGA,IAAAsJ,EAAA,SAAAZ,EAAAa,GACA,IAAAD,EAAAlQ,EAAA,aAAAyO,GACAyB,EAAA,GAAAxG,YAAAV,EAAAyF,EAAA,aACApF,KAAA,CACA+G,IAAA,IAAAd,EAAA,IAAAlH,EAAA+H,GAAAb,MAGAY,EAAA7G,KAAA,QAAAgH,WAAAH,EAAA7G,KAAA,aACArJ,EAAA,WAAAsP,EAAA,SAAAb,GAAApF,KAAA,WAIAqC,EAAAhF,EAAAG,QAAA6E,WAAAtF,GAEAsF,EAAAU,QACAiD,EAAA,CAAA3D,EAAAU,QACA8D,EAAA5B,EAAA1H,EAAAe,OAAAlE,OAAA,IAGAiI,EAAAW,aACAgD,EAAA,CAAA3D,EAAAW,aACA6D,EAAA5B,EAAA1H,EAAAe,OAAAlE,OAAA,IAIA2C,EAAAuB,SACA0H,EAAAzI,EAAAe,QACA3H,EAAA,aAAAyO,GAAApF,KAAA,UAGA6E,EAAAI,EAEA,QAAAjG,EAAA,EAAAiI,EAAA1J,EAAAiB,KAAApE,OAA4C4E,EAAAiI,EAAQjI,IACpDgH,EAAAzI,EAAAiB,KAAAQ,IAGA8F,EAAAG,EAEAlI,EAAAwB,QAAAhB,EAAAgB,SACAyH,EAAAzI,EAAAgB,QACA5H,EAAA,aAAAyO,GAAApF,KAAA,UAIAqC,EAAAY,gBACA+C,EAAA,CAAA3D,EAAAY,gBACA4D,EAAA5B,EAAA1H,EAAAe,OAAAlE,OAAA,IAIA,IAAA8M,EAAAvH,EAAAyF,EAAA,QAEAzO,EAAA,YAAAyO,GAAA+B,QAAAD,GAEA,QAAAhN,EAAA,EAAAmE,EAAAd,EAAAe,OAAAlE,OAA+CF,EAAAmE,EAASnE,IACxDgN,EAAA7G,YAAAV,EAAAyF,EAAA,OACApF,KAAA,CACAoH,IAAAlN,EAAA,EACAyG,IAAAzG,EAAA,EACAwI,MAAAlC,EAAAjD,EAAArD,GACAmN,YAAA,MAMA,IAAAC,EAAA/B,EAAAG,GAAA,gBACA/O,EAAA,eAAA2Q,GAAAtH,KAAA,OAAAlD,EAAAC,IAEAA,EAAAwK,aACA5Q,EAAA,aAAAyO,GAAAoC,OAAA7H,EAAAyF,EAAA,cACApF,KAAA,CACA+G,IAAA,IAAAlC,EAAA,IAAA9F,EAAAxB,EAAAe,OAAAlE,OAAA,GAAA0K,MAGAnO,EAAA,eAAA2Q,GAAAvD,OAAApE,EAAA2H,EAAA,eACAtH,KAAA,CACAvG,KAAA,wBACAgO,aAAA,IACAC,OAAA,GAEApH,KAAAxD,EAAAC,GAAA,OAAA8H,EAAA,IAAA9F,EAAAxB,EAAAe,OAAAlE,OAAA,GAAA0K,MAKA/H,EAAAmG,WACAnG,EAAAmG,UAAAqC,EAAAxI,EAAAM,GAIA,IAAA1G,EAAA,aAAAyO,GAAAnF,WAAA7F,QACAzD,EAAA,aAAAyO,GAAAnM,SAGA,IAEA0O,EAAA,IAFAxQ,KAGAyQ,EAAA,CACAxO,KAAA,OACAyO,SAAA,sEA9mBA,SAAAC,EAAAH,EAAAI,GACAxI,IAAA7I,IAGA6I,GAAA,IAAAC,EAAAwI,kBAAArR,EAAAwO,SAAAnE,EAAA,8BAAAnC,QAAA,YAGAlI,EAAAuJ,KAAA6H,EAAA,SAAAtO,EAAA2J,GACA,GAAAzM,EAAAsR,cAAA7E,GAAA,CACA,IAAA8E,EAAAP,EAAAQ,OAAA1O,GAEAqO,EAAAI,EAAA9E,OACO,CACP,GAAA7D,EAAA,CAMA,IACArF,EAAAmE,EADA+J,EAAAhF,EAAAiF,WAAA,GAEAC,EAAA,GAEA,IAAApO,EAAAkO,EAAAG,WAAAnO,OAAA,EAAmDF,GAAA,EAAQA,IAAA,CAC3D,IAAAsO,EAAAJ,EAAAG,WAAArO,GAAA0F,SACA6I,EAAAL,EAAAG,WAAArO,GAAAwO,WAEA,IAAAF,EAAA3J,QAAA,OACAyJ,EAAA7J,KAAA,CACAhF,KAAA+O,EACApI,MAAAqI,IAEAL,EAAAO,gBAAAH,IAIA,IAAAtO,EAAA,EAAAmE,EAAAiK,EAAAlO,OAAyCF,EAAAmE,EAASnE,IAAA,CAClD,IAAA8F,EAAAoD,EAAAwF,gBAAAN,EAAApO,GAAAT,KAAA+B,QAAA,+BACAwE,EAAAI,MAAAkI,EAAApO,GAAAkG,MACAgI,EAAAS,iBAAA7I,IAIA,IAAAtB,EAAAc,EAAAwI,kBAAA5E,GAGA7D,KAEA,IAAAb,EAAAG,QAAA,WACAH,EAAA,0DAAAA,GAMAA,GAFAA,IAAAlD,QAAA,gCAEAA,QAAA,kCAKAkD,IAAAlD,QAAA,4CACAmM,EAAA5O,KAAAU,EAAAiF,MAojBAoJ,CAAAH,EAAApC,GAEAoC,EAAAmB,cAEAnB,EAAAmB,cAAAlB,GAAAmB,KAAA,SAAA5P,GACAzB,EAAAyB,EAAAkJ,EAAAqC,UAEAvC,EAAAD,YAAA,MAIAxK,EAAAiQ,EAAAqB,SAAApB,GAAAvF,EAAAqC,UAEA7K,KAAAqI,YAAA,KAGAwC,SAAA,IACAC,UAAA,QACAjH,cAAA,GACAY,QAAA,EACAC,QAAA,EACAwE,MAAA,IACAC,WAAA,IACAC,cAAA,IACAoD,kBAAA,EACAkB,YAAA,EACAvK,UAAA,IAKAhG,EAAA2K,IAAAnE,QAAAyL,SAAA,CACApH,UAAA,4BACA0C,UAAA,WACA,OAAA3N,EAAAuE,aAAAzE,GAAAW,KAEAiJ,KAAA,SAAAjD,GACA,OAAAA,EAAAyE,KAAA,sBAEAC,OAAA,SAAAC,EAAA3E,EAAA4E,EAAAlF,GACAlD,KAAAqI,YAAA,GACA,IACA3E,EAAAF,EAAAG,QAAAC,WAAAV,EAAAW,eACA0E,EAAA/E,EAAAG,QAAA6E,WAAAtF,GACA4B,EAAA,GAEA5B,EAAAuB,QACAK,EAAAF,KAAA9H,EAAAuS,IAAA3L,EAAAe,OAAA,SAAAoD,GACA,OACApB,KAAA,kBAAAoB,MAAA,GACAF,MAAA,kBAKA,QAAAtH,EAAA,EAAAmE,EAAAd,EAAAiB,KAAApE,OAA6CF,EAAAmE,EAASnE,IACtDyE,EAAAF,KAAA9H,EAAAuS,IAAA3L,EAAAiB,KAAAtE,GAAA,SAAAwH,GAKA,OAJA,OAAAA,OAAAhL,IACAgL,EAAA,IAGA,CACApB,KAAA,kBAAAoB,MAAA,GACAF,MAAAtH,EAAA,qCAKA6C,EAAAwB,QAAAhB,EAAAgB,QACAI,EAAAF,KAAA9H,EAAAuS,IAAA3L,EAAAgB,OAAA,SAAAmD,GACA,OACApB,KAAA,kBAAAoB,MAAA,GACAF,MAAA,kBAKA,IAAAzJ,EAAA,CACAoR,SAAApM,EAAAoM,SACAC,gBAAArM,EAAAsM,YACAzM,QAAA,EACA2G,MAAA,CACA+F,WAAA,EACA9K,KAAAG,GAEA4K,OAAA,cAEAC,OAAA,CACAC,YAAA,CACAC,MAAA,EACAC,SAAA,GACAC,MAAA,QACAC,UAAA,UACAC,UAAA,UAEAC,cAAA,GACAC,aAAA,CACAH,UAAA,WAEAI,YAAA,CACAP,MAAA,EACAC,SAAA,GACAC,MAAA,QACAC,UAAA,WAEA9G,MAAA,CACA+G,UAAA,SACAH,SAAA,IAEA7F,QAAA,IAEAoG,aAAA,CACAP,SAAA,KAIAvH,EAAAY,YACAjL,EAAA6E,QAAAuN,QAAA,CACA7J,KAAA8B,EAAAY,WACAxB,MAAA,UACA4I,OAAA,aAIAhI,EAAAa,eACAlL,EAAA6E,QAAA6B,KAAA,CACA6B,KAAA8B,EAAAa,cACAzB,MAAA,UACA4I,OAAA,aAIAhI,EAAAW,OACAhL,EAAA6E,QAAAuN,QAAA,CACA7J,KAAA8B,EAAAW,MACAvB,MAAA,QACA4I,OAAA,aAIArN,EAAAmG,WACAnG,EAAAmG,UAAAnL,EAAAgF,EAAAM,GAGA,IAAAgN,EAAAhT,IAAAiT,UAAAvS,GAEA,SAAAgF,EAAAlC,UAAA+D,IAGAyL,EAAAxP,SAAAuH,EAAAsC,UAFA2F,EAAA3O,OAKA7B,KAAAqI,YAAA,IAEAa,MAAA,IACA2B,SAAA,IACAC,UAAA,OACAjH,cAAA,GACA2L,YAAA,WACAF,SAAA,KACA7K,QAAA,EACAC,QAAA,EACAyE,WAAA,IACAC,cAAA,IACAC,UAAA,KACArI,SAAA,YAEA7D,EAAAO,QAtoCAgT,CAAA5T,EAAAC,OAAAC,WACK2T,MAAAC,EAAAlU,MAAAmU,EAAAD,QAAAjU,wBCZL,IAAAD,EAAAC,EAMID,EAAO,CAACE,EAAA,GAAUA,EAAA,KAAqBA,EAAA,WAEtCC,KAFkEF,EAAA,SAAEG,GACzE,OAuBC,SAAAA,EAAAC,EAAAC,EAAAH,GACD,OAAAC,EAAAM,GAAAC,UAxBAqT,CAAA5T,EAAAC,OAAAC,WACK2T,MAAAC,EAAAlU,MAAAmU,EAAAD,QAAAjU,wBCRL,IAAAD,EAAAC,GA0BA,SAAA+T,GACA,aAIIhU,EAAO,CAACE,EAAA,SAEPC,KAFgBF,EAAA,SAAEG,GACvB,OAsBC,SAAAA,EAAAC,EAAAC,EAAAH,GAmCD,IAsoCAiU,EAGAC,EAGAC,EAGAC,EA/oCA9T,EAAA,SAAAA,EAAA+T,GAqCAlR,KAAAlD,EAAA,SAAAqU,EAAAC,GACA,OAAApR,KAAAqR,KAAA,GAAAvU,EAAAqU,EAAAC,IAoDApR,KAAArC,EAAA,SAAAwT,EAAAC,GACA,OAAApR,KAAAqR,KAAA,GAAAvM,KAAAqM,EAAAC,GAAA1N,QAaA1D,KAAAqR,IAAA,SAAAC,GACA,WAAAP,EAAAO,EAAAC,GAAAvR,KAAA8Q,EAAAU,YAAAxR,OA0CAA,KAAAyR,UAAA,SAAA/N,EAAAgO,GACA,IAAAL,EAAArR,KAAAqR,KAAA,GAGAvM,EAAAhI,EAAA6U,QAAAjO,KAAA5G,EAAA6U,QAAAjO,EAAA,KAAA5G,EAAAsR,cAAA1K,EAAA,KAAA2N,EAAAvM,KAAA8M,IAAAlO,GAAA2N,EAAAjF,IAAAwF,IAAAlO,GAMA,OAJAgO,IAAA7U,GAAA6U,IACAL,EAAAQ,OAGA/M,EAAAgN,UAAAC,WAyBA/R,KAAAgS,qBAAA,SAAAC,GACA,IAAAZ,EAAArR,KAAAqR,KAAA,GAAAa,QAAAC,SACAC,EAAAf,EAAAe,WAAA,GACAC,EAAAD,EAAAE,QAEAL,IAAApV,GAAAoV,EACAZ,EAAAQ,MAAA,GACO,KAAAQ,EAAAE,IAAA,KAAAF,EAAAG,IAEPC,GAAAL,IAmBApS,KAAA0S,aAAA,SAAAT,GACA,IAAAZ,EAAArR,KAAAqR,KAAA,GAAAsB,SAEAV,IAAApV,GAAAoV,IACAZ,EAAAQ,QA6BA7R,KAAA4S,QAAA,SAAAC,GACA7S,KAAAqR,KAAA,GAAAjF,IAAAyG,GAAAC,MAAAC,QAsBA/S,KAAAgT,YAAA,SAAAC,EAAAC,EAAAxB,GACA,IAAAL,EAAArR,KAAAqR,KAAA,GACAvM,EAAAuM,EAAAvM,KAAAmO,GACAb,EAAAtN,EAAAsN,WAAA,GACA1O,EAAA0O,EAAAe,OAAArO,EAAA,OAWA,OAVAA,EAAA1F,SAEA8T,GACAA,EAAAzS,KAAAT,KAAAoS,EAAA1O,IAGAgO,IAAA7U,GAAA6U,IACAL,EAAAQ,OAGAnO,GAkBA1D,KAAAoT,UAAA,SAAAhU,GACAY,KAAAqR,KAAA,GAAAgC,QAAAjU,IAkBAY,KAAAsT,OAAA,SAAAC,GAGAvT,KAAAqR,KAAA,GAAAQ,KAAA0B,IAuBAvT,KAAAwT,SAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAzC,EAAArR,KAAAqR,KAAA,GAEA,OAAAqC,OAAA7W,EACAwU,EAAA0C,OAAAN,EAAAE,EAAAC,EAAAE,GAEAzC,EAAA2C,OAAAN,GAAAK,OAAAN,EAAAE,EAAAC,EAAAE,GAGAzC,EAAAQ,QAyCA7R,KAAAiU,UAAA,SAAAC,EAAAtN,GACA,IAAAyK,EAAArR,KAAAqR,KAAA,GAEA,GAAA6C,IAAArX,EAAA,CACA,IAAA0C,EAAA2U,EAAAnO,SAAAmO,EAAAnO,SAAAoO,cAAA,GACA,OAAAvN,IAAA/J,GAAA,MAAA0C,GAAA,MAAAA,EAAA8R,EAAA9E,KAAA2H,EAAAtN,GAAAlD,OAAA2N,EAAAjF,IAAA8H,GAAAxQ,QAAA,KAGA,OAAA2N,EAAA3N,OAAAqO,WAsBA/R,KAAAoU,WAAA,SAAAC,GACA,IAAAhD,EAAArR,KAAAqR,KAAA,GACA,OAAAgD,IAAAxX,EAAAwU,EAAAjF,IAAAiI,GAAApT,OAAAoQ,EAAAvM,OAAAwP,QAAAxC,UAAAC,WAgCA/R,KAAAuU,cAAA,SAAAtT,GACA,IAAAoQ,EAAArR,KAAAqR,KAAA,GACAtL,EAAA9E,EAAA8E,SAAAyO,cAEA,SAAAzO,EACA,OAAAsL,EAAAjF,IAAAnL,GAAAwT,QACO,SAAA1O,GAAA,MAAAA,EAAA,CACP,IAAAwG,EAAA8E,EAAA9E,KAAAtL,GAAAwT,QACA,OAAAlI,EAAAH,IAAAG,EAAAmI,cAAAnI,EAAAyH,QAGA,aA2BAhU,KAAA2U,SAAA,SAAA9B,GACA,OAAA7S,KAAAqR,KAAA,GAAAjF,IAAAyG,GAAAC,MAAA8B,WAkCA5U,KAAA6U,OAAA,SAAAhC,EAAAiC,EAAAC,GACA,OAAA/U,KAAAqR,KAAA,GAAAjF,IAAAyG,GAAAC,MAAAgC,EAAAC,GAAAC,OAAAlC,QAAA,IAoBA9S,KAAAiV,aAAA,SAAAC,EAAAjD,GACA,IAAAZ,EAAArR,KAAAqR,KAAA,GAAA8D,KAAAD,IAEAjD,IAAApV,GAAAoV,IACAZ,EAAAQ,MAAA,IAqBA7R,KAAAoV,eAAA,SAAAC,EAAAC,EAAArD,GACA,IAAAZ,EAAArR,KAAAqR,KAAA,GAAA2C,OAAAqB,GAAAE,QAAAD,IAEArD,IAAApV,GAAAoV,IACAZ,EAAAa,QAAAC,SAAAN,QAqBA7R,KAAAwV,WAAA,WACA,OAAAjE,GAAAvR,KAAA8Q,EAAAU,aAmBAxR,KAAAyV,OAAA,SAAAC,GACA1V,KAAAqR,KAAA,GAAAsE,MAAAD,GAAA7D,QAoBA7R,KAAA4V,eAAA,SAAAC,EAAAnC,EAAAoC,GACA9V,KAAAqR,KAAA,GAAAsE,MAAAnV,SAAAqV,EAAAnC,EAAAoC,IA0BA9V,KAAA+V,SAAA,SAAAC,EAAAC,EAAAvC,EAAAzB,EAAAiE,GACA,IAAA7E,EAAArR,KAAAqR,KAAA,GAgBA,OAdAqC,IAAA7W,GAAA,OAAA6W,EACArC,EAAAjF,IAAA6J,GAAAvS,KAAAsS,GAEA3E,EAAA9E,KAAA0J,EAAAvC,GAAAhQ,KAAAsS,IAGAE,IAAArZ,GAAAqZ,IACA7E,EAAAa,QAAAC,UAGAF,IAAApV,GAAAoV,IACAZ,EAAAQ,OAGA,GAqBA7R,KAAAmW,eAAArF,EAAAqF,eAEA,IAAAC,EAAApW,KAEAqW,EAAAnF,IAAArU,EACA0I,EAAAvF,KAAAO,OAQA,QAAAnD,KANAiZ,IACAnF,EAAA,IAGAlR,KAAAsW,KAAAtW,KAAAuW,SAAAzF,EAAAyF,SAEApZ,EAAA2K,IAAAyO,SACAnZ,IACA4C,KAAA5C,GAAAoZ,GAAApZ,IAkaA,OA9ZA4C,KAAAqG,KAAA,WAGA,IAMAoQ,EALAC,EAAAnR,EAAA,EACAoR,GAFA,GAEAzF,GAAA,GAAAA,EAGA7Q,EAAA,EAMAuW,EAAA5W,KAAA6W,aAAA,MACAC,GAAA,EACAC,EAAA5Z,EAAA4Z,SACAC,EAAAla,EAAAkD,MAGA,YAAAA,KAAA+F,SAAAoO,cAAA,CAQA8C,EAAAF,GAEAG,EAAAH,EAAA/C,QAIAmD,EAAAJ,KAAA,GAEAI,EAAAJ,EAAA/C,OAAA+C,EAAA/C,QAAA,GAIAmD,EAAAJ,EAAAja,EAAAsa,OAAAV,EAAAM,EAAAtT,SAIA,IAAA2T,EAAAla,EAAAiV,SAEA,IAAA/R,EAAA,EAAAoW,EAAAY,EAAA9W,OAA4CF,EAAAoW,EAAUpW,IAAA,CACtD,IAAAkE,EAAA8S,EAAAhX,GAGA,GAAAkE,EAAA+S,QAAAtX,MAAAuE,EAAAgT,QAAAhT,EAAAgT,OAAAC,YAAAxX,MAAAuE,EAAAkT,QAAAlT,EAAAkT,OAAAD,YAAAxX,KAAA,CACA,IAAA0X,EAAAhB,EAAAgB,YAAA7a,EAAA6Z,EAAAgB,UAAAX,EAAAW,UACAC,EAAAjB,EAAAiB,WAAA9a,EAAA6Z,EAAAiB,SAAAZ,EAAAY,SAEA,GAAAtB,GAAAqB,EACA,OAAAnT,EAAAqT,UACW,GAAAD,EAAA,CACXpT,EAAAqT,UAAAxE,YACA,MAIA,YAFAyE,GAAAtT,EAAA,qCAYA,GAAAA,EAAAuT,UAAA9X,KAAA+X,GAAA,CACAV,EAAAW,OAAA3X,EAAA,GACA,OAMA,OAAAuW,GAAA,KAAAA,IACAA,EAAA,oBAAAzZ,EAAA2K,IAAAmQ,UACAjY,KAAA+X,GAAAnB,GAKA,IAAAsB,EAAApb,EAAAsa,QAAA,KAAuCja,EAAAgb,OAAAD,UAAA,CACvCE,cAAApB,EAAA,GAAArP,MAAAkB,MACAwP,UAAAzB,EACAkB,SAAAlB,IAEAsB,EAAAZ,OAAAtX,KACAkY,EAAA5B,KAAAF,EAAAG,SACA2B,EAAAxB,QACAW,EAAAzS,KAAAsT,GAGAA,EAAAN,UAAA,IAAAxB,EAAA7V,OAAA6V,EAAAY,EAAA3Z,YAEA4Z,EAAAP,GAEA4B,EAAA5B,EAAA6B,WAGA7B,EAAA8B,cAAA9B,EAAA+B,iBACA/B,EAAA+B,eAAA3b,EAAA6U,QAAA+E,EAAA8B,YAAA,IAAA9B,EAAA8B,YAAA,MAAA9B,EAAA8B,YAAA,IAKA9B,EAAAC,GAAA7Z,EAAAsa,QAAA,KAAyCL,GAAAL,GAEzCgC,GAAAR,EAAAS,UAAAjC,EAAA,6IAEAgC,GAAAR,EAAAxB,EAAA,2UACA,wGAEAgC,GAAAR,EAAA5F,QAAAoE,EAAA,mGAEAgC,GAAAR,EAAAK,UAAA7B,EAAA,kBAIAkC,GAAAV,EAAA,iBAAAxB,EAAAmC,eAAA,QAEAD,GAAAV,EAAA,iBAAAxB,EAAAoC,eAAA,QAEAF,GAAAV,EAAA,oBAAAxB,EAAAqC,kBAAA,QAEAH,GAAAV,EAAA,oBAAAxB,EAAAsC,kBAAA,QAEAJ,GAAAV,EAAA,gBAAAxB,EAAAuC,cAAA,QAEAL,GAAAV,EAAA,gBAAAxB,EAAAwC,cAAA,QAEAN,GAAAV,EAAA,uBAAAxB,EAAAyC,aAAA,QAEAP,GAAAV,EAAA,mBAAAxB,EAAA0C,iBAAA,QAEAR,GAAAV,EAAA,mBAAAxB,EAAA2C,iBAAA,QAEAT,GAAAV,EAAA,iBAAAxB,EAAA4C,eAAA,QAEAV,GAAAV,EAAA,oBAAAxB,EAAA6C,kBAAA,QAEArB,EAAAsB,QAAAC,EAAA/C,EAAAgD,OAGAC,EAAAzB,GAEA,IAAA0B,EAAA1B,EAAA0B,SAUA,GATA9c,EAAAsa,OAAAwC,EAAAzc,EAAA2K,IAAA+R,QAAAnD,EAAAkD,UACA5C,EAAA8C,SAAAF,EAAAG,QAEA7B,EAAA8B,oBAAAnd,IAEAqb,EAAA8B,kBAAAtD,EAAAuD,cACA/B,EAAAgC,eAAAxD,EAAAuD,eAGA,OAAAvD,EAAAyD,cAAA,CACAjC,EAAAkC,eAAA,EACA,IAAAC,EAAAvd,EAAA6U,QAAA+E,EAAAyD,eACAjC,EAAAoC,iBAAAD,EAAA3D,EAAAyD,cAAA,GAAAzD,EAAAyD,cACAjC,EAAAqC,eAAAF,EAAA3D,EAAAyD,cAAA,GAAAzD,EAAAyD,cAKA,IAAA5B,EAAAL,EAAAK,UACAzb,EAAAsa,QAAA,EAAAmB,EAAA7B,EAAA6B,WAEAA,EAAAiC,OAKA1d,EAAA2d,KAAA,CACAC,SAAA,OACAjZ,IAAA8W,EAAAiC,KACAG,QAAA,SAAAC,GACAtC,EAAAsC,GAEAzD,EAAAJ,EAAAwB,UAAAqC,GAEA9d,EAAAsa,QAAA,EAAAmB,EAAAqC,GAEAC,GAAA3C,IAEA3V,MAAA,WAEAsY,GAAA3C,MAGApB,GAAA,GAOA,OAAAJ,EAAAoE,kBACA5C,EAAA4C,gBAAA,CAAAlB,EAAAmB,WAAAnB,EAAAoB,cAKA,IAAAC,EAAA/C,EAAA4C,gBACAI,EAAAlE,EAAA5Q,SAAA,SAAA+U,KAAA,MAAAC,GAAA,IAIO,IAFPte,EAAAue,SAAA,EAAAve,EAAAuS,IAAA4L,EAAA,SAAAK,EAAAjb,GACA,OAAA6a,EAAAK,SAAAD,QAEAxe,EAAA,WAAAkD,MAAAwb,YAAAP,EAAA5W,KAAA,MACA6T,EAAAuD,iBAAAR,EAAAS,SAQA,IACAC,EADAC,EAAA,GAEAC,EAAA7b,KAAAyL,qBAAA,SAUA,GARA,IAAAoQ,EAAAtb,SACAub,GAAA5D,EAAA6D,SAAAF,EAAA,IAEAD,EAAAI,GAAA9D,IAKA,OAAAxB,EAAAuF,UAGA,IAFAN,EAAA,GAEAtb,EAAA,EAAAoW,EAAAmF,EAAArb,OAAwCF,EAAAoW,EAAUpW,IAClDsb,EAAA/W,KAAA,WAGA+W,EAAAjF,EAAAuF,UAKA,IAAA5b,EAAA,EAAAoW,EAAAkF,EAAApb,OAA8CF,EAAAoW,EAAUpW,IACxD6b,EAAAhE,EAAA0D,IAAAvb,GAAA,MAaA,GARA8b,EAAAjE,EAAAxB,EAAA0F,aAAAT,EAAA,SAAAtG,EAAAgH,GACAC,EAAApE,EAAA7C,EAAAgH,KAOAnB,EAAA3a,OAAA,CACA,IAAA+D,EAAA,SAAAiI,EAAA3M,GACA,cAAA2M,EAAAsK,aAAA,QAAAjX,KAAA,MAGA9C,EAAAoe,EAAA,IAAA9U,SAAA,UAAAC,KAAA,SAAAhG,EAAAkM,GACA,IAAA3F,EAAAsR,EAAA+D,UAAA5b,GAEA,GAAAuG,EAAAoP,QAAA3V,EAAA,CACA,IAAA4G,EAAA3C,EAAAiI,EAAA,SAAAjI,EAAAiI,EAAA,SACAgQ,EAAAjY,EAAAiI,EAAA,WAAAjI,EAAAiI,EAAA,UAEA,OAAAtF,GAAA,OAAAsV,IACA3V,EAAAoP,MAAA,CACArY,EAAA0C,EAAA,WACA4G,KAAA,OAAAA,EAAA5G,EAAA,UAAA4G,EAAApK,EACA0C,KAAA,OAAA0H,EAAA5G,EAAA,UAAA4G,EAAApK,EACA0f,OAAA,OAAAA,EAAAlc,EAAA,UAAAkc,EAAA1f,GAGAyf,EAAApE,EAAA7X,OAMA,IAAAmc,EAAAtE,EAAAS,UAEA8D,EAAA,WAOA,GAAA/F,EAAAgG,YAAA7f,EAAA,CACA,IAAA8f,EAAAzE,EAAAwE,UAEA,IAAArc,EAAA,EAAAoW,EAAAkG,EAAApc,OAA4CF,EAAAoW,EAAUpW,IACtDsc,EAAAtc,GAAA,GAAA6X,EAAA+D,UAAA5b,GAAAuc,UAAA,GAQAC,GAAA3E,GAEAsE,EAAAM,OACAlE,GAAAV,EAAA,4BACA,GAAAA,EAAA6E,QAAA,CACA,IAAAC,EAAAC,GAAA/E,GAEAgF,EAAA,GACApgB,EAAAuJ,KAAA2W,EAAA,SAAA3c,EAAAkJ,GACA2T,EAAA3T,EAAA2K,KAAA3K,EAAA4T,MAGAC,GAAAlF,EAAA,cAAAA,EAAA8E,EAAAE,IAEAG,GAAAnF,MAKAU,GAAAV,EAAA,6BACAA,EAAA6E,SAAA,QAAAO,GAAApF,IAAAsE,EAAAe,eACAV,GAAA3E,IAES,MAQT,IAAAsF,EAAAxG,EAAA5Q,SAAA,WAAAC,KAAA,WACArG,KAAAyd,aAAA3gB,EAAAkD,MAAA2I,IAAA,kBAEA+U,EAAA1G,EAAA5Q,SAAA,SAEA,IAAAsX,EAAAnd,SACAmd,EAAA5gB,EAAA,YAAA0M,SAAAwN,IAGAkB,EAAAX,OAAAmG,EAAA,GACA,IAAAC,EAAA3G,EAAA5Q,SAAA,SAEA,IAAAuX,EAAApd,SACAod,EAAA7gB,EAAA,YAAA0M,SAAAwN,IAGAkB,EAAA0F,OAAAD,EAAA,GACA,IAAAE,EAAA7G,EAAA5Q,SAAA,SAkBA,GAhBA,IAAAyX,EAAAtd,QAAAid,EAAAjd,OAAA,SAAA2X,EAAA5F,QAAAC,IAAA,KAAA2F,EAAA5F,QAAAE,MAGAqL,EAAA/gB,EAAA,YAAA0M,SAAAwN,IAGA,IAAA6G,EAAAtd,QAAA,IAAAsd,EAAAzX,WAAA7F,OACAyW,EAAA8C,SAAAF,EAAAkE,WACSD,EAAAtd,OAAA,IACT2X,EAAAT,OAAAoG,EAAA,GAEA/B,GAAA5D,EAAA6F,SAAA7F,EAAAT,SAKAf,EAAAsH,OACA,IAAA3d,EAAA,EAAqBA,EAAAqW,EAAAsH,OAAAzd,OAAyBF,IAC9C4d,EAAA/F,EAAAxB,EAAAsH,OAAA3d,SAES6X,EAAAkC,eAAA,OAAAkD,GAAApF,KAKTgG,EAAAhG,EAAApb,EAAAob,EAAA0F,QAAAxX,SAAA,OAKA8R,EAAAiG,UAAAjG,EAAAkG,gBAAA1C,QAGAxD,EAAAmG,cAAA,GAKA,IAAAvH,GACA+D,GAAA3C,IAMAxB,EAAA4H,YACA9B,EAAA8B,YAAA,EAEA1F,GAAAV,EAAA,iBAAAqG,GAAA,cAEAC,GAAAtG,EAAAxB,EAAA+F,IAEAA,SArYA5E,GAAA,yCAAA7X,KAAA+F,SAAA,SAwYAqQ,EAAA,KACApW,MA6BAye,EAAA,GACAC,EAAA,UACAC,EAAA,SAGAC,EAAA,kFAEAC,EAAA,IAAA1a,OAAA,mDAAiG,IAAK,kBAAAE,KAAA,gBActGya,EAAA,sEAEAC,EAAA,SAAAlX,GACA,OAAAA,IAAA,IAAAA,GAAA,MAAAA,GAGAmX,EAAA,SAAAza,GACA,IAAA0a,EAAAC,SAAA3a,EAAA,IACA,OAAA4a,MAAAF,IAAAG,SAAA7a,GAAA0a,EAAA,MAKAI,EAAA,SAAAC,EAAAC,GAMA,OAJAd,EAAAc,KACAd,EAAAc,GAAA,IAAApb,OAAAqb,GAAAD,GAAA,MAGA,kBAAAD,GAAA,MAAAC,EAAAD,EAAA3d,QAAA,UAAAA,QAAA8c,EAAAc,GAAA,KAAAD,GAGAG,EAAA,SAAA5X,EAAA0X,EAAAG,GACA,IAAAC,EAAA,kBAAA9X,EAIA,QAAAkX,EAAAlX,KAIA0X,GAAAI,IACA9X,EAAAwX,EAAAxX,EAAA0X,IAGAG,GAAAC,IACA9X,IAAAlG,QAAAmd,EAAA,MAGAK,MAAAhS,WAAAtF,KAAAuX,SAAAvX,KAQA+X,EAAA,SAAA/X,EAAA0X,EAAAG,GACA,GAAAX,EAAAlX,GACA,SAGA,IAAAgY,EATA,SAAAhY,GACA,OAAAkX,EAAAlX,IAAA,kBAAAA,EAQAiY,CAAAjY,GAEA,OAAAgY,KAAAJ,EAAAM,EAAAlY,GAAA0X,EAAAG,IAAA,MAGAM,EAAA,SAAA1b,EAAA2b,EAAAC,GACA,IAAAC,EAAA,GACA9f,EAAA,EACAmE,EAAAF,EAAA/D,OAGA,GAAA2f,IAAArjB,EACA,KAAYwD,EAAAmE,EAASnE,IACrBiE,EAAAjE,IAAAiE,EAAAjE,GAAA4f,IACAE,EAAAvb,KAAAN,EAAAjE,GAAA4f,GAAAC,SAIA,KAAY7f,EAAAmE,EAASnE,IACrBiE,EAAAjE,IACA8f,EAAAvb,KAAAN,EAAAjE,GAAA4f,IAKA,OAAAE,GAKAC,EAAA,SAAA9b,EAAAqR,EAAAsK,EAAAC,GACA,IAAAC,EAAA,GACA9f,EAAA,EACAmE,EAAAmR,EAAApV,OAGA,GAAA2f,IAAArjB,EACA,KAAYwD,EAAAmE,EAASnE,IACrBiE,EAAAqR,EAAAtV,IAAA4f,IACAE,EAAAvb,KAAAN,EAAAqR,EAAAtV,IAAA4f,GAAAC,SAIA,KAAY7f,EAAAmE,EAASnE,IACrB8f,EAAAvb,KAAAN,EAAAqR,EAAAtV,IAAA4f,IAIA,OAAAE,GAGAE,EAAA,SAAA9a,EAAA+a,GACA,IACAC,EADAJ,EAAA,GAGAG,IAAAzjB,GACAyjB,EAAA,EACAC,EAAAhb,IAEAgb,EAAAD,EACAA,EAAA/a,GAGA,QAAAlF,EAAAigB,EAAuBjgB,EAAAkgB,EAASlgB,IAChC8f,EAAAvb,KAAAvE,GAGA,OAAA8f,GAGAK,EAAA,SAAAlc,GAGA,IAFA,IAAA6b,EAAA,GAEA9f,EAAA,EAAAmE,EAAAF,EAAA/D,OAAmCF,EAAAmE,EAASnE,IAC5CiE,EAAAjE,IAEA8f,EAAAvb,KAAAN,EAAAjE,IAIA,OAAA8f,GAGAJ,EAAA,SAAAlY,GACA,OAAAA,EAAAlG,QAAAgd,EAAA,KAwCA1G,EAAA,SAAA/D,GACA,GA5BA,SAAAA,GACA,GAAAA,EAAA3T,OAAA,EACA,SAMA,IAHA,IAAAkgB,EAAAvM,EAAAwH,QAAAzU,OACAyZ,EAAAD,EAAA,GAEApgB,EAAA,EAAAmE,EAAAic,EAAAlgB,OAAwCF,EAAAmE,EAASnE,IAAA,CACjD,GAAAogB,EAAApgB,KAAAqgB,EACA,SAGAA,EAAAD,EAAApgB,GAGA,SAYAsgB,CAAAzM,GACA,OAAAA,EAAAwH,QAOA,IACAnS,EACAlJ,EAEAsM,EAJAwT,EAAA,GAGA3b,EAAA0P,EAAA3T,OAEAqgB,EAAA,EAEAC,EAAA,IAAAxgB,EAAA,EAAsBA,EAAAmE,EAASnE,IAAA,CAG/B,IAFAkJ,EAAA2K,EAAA7T,GAEAsM,EAAA,EAAiBA,EAAAiU,EAAOjU,IACxB,GAAAwT,EAAAxT,KAAApD,EACA,SAAAsX,EAIAV,EAAAvb,KAAA2E,GACAqX,IAGA,OAAAT,GA+DA,SAAAW,EAAAC,GACA,IACAzd,EACA0d,EACA3R,EAAA,GACAvS,EAAAuJ,KAAA0a,EAAA,SAAAza,EAAAiD,IACAjG,EAAAgD,EAAAhD,MAAA,yBAEA,IAPA,8BAOA0B,QAAA1B,EAAA,UACA0d,EAAA1a,EAAA3E,QAAA2B,EAAA,GAAAA,EAAA,GAAA6Q,eACA9E,EAAA2R,GAAA1a,EAEA,MAAAhD,EAAA,IACAwd,EAAAC,EAAAza,OAIAya,EAAAE,cAAA5R,EAeA,SAAA8H,EAAAjD,EAAAgN,EAAAjhB,GAKA,IAAAkhB,EAJAjN,EAAA+M,eACAH,EAAA5M,GAIApX,EAAAuJ,KAAA6a,EAAA,SAAA5a,EAAAiD,IACA4X,EAAAjN,EAAA+M,cAAA3a,MAEAzJ,IAAAoD,GAAAihB,EAAAC,KAAAtkB,IAEA,MAAAskB,EAAAC,OAAA,IAEAF,EAAAC,KACAD,EAAAC,GAAA,IAGArkB,EAAAsa,QAAA,EAAA8J,EAAAC,GAAAD,EAAA5a,IAEA6Q,EAAAjD,EAAAiN,GAAAD,EAAAC,GAAAlhB,IAEAihB,EAAAC,GAAAD,EAAA5a,MAcA,SAAAgS,EAAA+I,GAGA,IAAAtK,EAAA5Z,EAAA4Z,SAAAwB,UAEA+I,EAAAvK,EAAAwK,SAMA,GAJAD,GACAE,GAAAF,GAGAD,EAAA,CACA,IAAAI,EAAAJ,EAAAK,cAGAL,EAAAM,aAAAF,GAAA,+BAAA1K,EAAA4K,aACAjJ,GAAA2I,IAAA,+BAIAA,EAAAO,iBAAAH,GAAA,eAAA1K,EAAA6K,iBACAlJ,GAAA2I,IAAA,kCAIAA,EAAAQ,iBACAR,EAAAS,WAAAT,EAAAQ,gBAGA,IAAAE,EAAAV,EAAAE,SAEAQ,GAAAT,IAAAS,GACAP,GAAAO,IApJA5kB,EAAA6kB,KAAA,CASAC,SAAA,SAAA7kB,EAAA8kB,GACA,IACAxB,EACAyB,EAFAC,EAAAF,IAAArlB,EAAAqlB,EAAA,IAGA,kBACA,IAAA5Z,EAAAtI,KACAqiB,GAAA,IAAAC,KACAC,EAAAC,UAEA9B,GAAA2B,EAAA3B,EAAA0B,GACAK,aAAAN,GACAA,EAAAnjB,WAAA,WACA0hB,EAAA7jB,EACAO,EAAAuT,MAAArI,EAAAia,IACWH,KAEX1B,EAAA2B,EACAjlB,EAAAuT,MAAArI,EAAAia,MAWAG,YAAA,SAAAnZ,GACA,OAAAA,EAAA5H,QAAAkd,EAAA,UA0HA,IAAA8D,EAAA,SAAA5B,EAAA6B,EAAAC,GACA9B,EAAA6B,KAAA/lB,IACAkkB,EAAA8B,GAAA9B,EAAA6B,KAWA,SAAA3L,EAAA6L,GACAH,EAAAG,EAAA,oBAEAH,EAAAG,EAAA,2BAEAH,EAAAG,EAAA,+BAEAH,EAAAG,EAAA,iCAEAH,EAAAG,EAAA,qBAEAH,EAAAG,EAAA,+BAEAH,EAAAG,EAAA,sBAEAH,EAAAG,EAAA,gCAEAH,EAAAG,EAAA,+BAEAH,EAAAG,EAAA,uBAGA,mBAAAA,EAAAC,WACAD,EAAAC,SAAAD,EAAAC,SAAA,WAGA,mBAAAD,EAAAE,UACAF,EAAAE,QAAAF,EAAAE,QAAA,WAKA,IAAAC,EAAAH,EAAAI,aAEA,GAAAD,EACA,QAAA5iB,EAAA,EAAAmE,EAAAye,EAAA1iB,OAA8CF,EAAAmE,EAASnE,IACvD4iB,EAAA5iB,IACA8W,EAAAha,EAAAgb,OAAAgL,QAAAF,EAAA5iB,IAaA,SAAA6W,EAAA4L,GACAH,EAAAG,EAAA,yBAEAH,EAAAG,EAAA,yBAEAH,EAAAG,EAAA,6BAEAH,EAAAG,EAAA,gCAGA,IAAAM,EAAAN,EAAAO,UAEA,kBAAAD,GAAAtmB,EAAA6U,QAAAyR,KACAN,EAAAO,UAAA,CAAAD,IAUA,SAAAzJ,EAAAvH,GAIA,IAAAjV,EAAAmmB,UAAA,CACA,IAAAC,EAAA,GACApmB,EAAAmmB,UAAAC,EAEA,IAAApe,EAAArI,EAAA,UAAA6L,IAAA,CACAI,SAAA,QACAC,IAAA,EACAC,MAAA,EAAAnM,EAAAC,GAAAymB,aAEA5a,OAAA,EACAC,MAAA,EACAC,SAAA,WACOoB,OAAApN,EAAA,UAAA6L,IAAA,CACPI,SAAA,WACAC,IAAA,EACAC,KAAA,EACAJ,MAAA,IACAC,SAAA,WACOoB,OAAApN,EAAA,UAAA6L,IAAA,CACPE,MAAA,OACAD,OAAA,OACOY,SAAA,QACPia,EAAAte,EAAAiB,WACAsd,EAAAD,EAAArd,WAWAmd,EAAAI,SAAAF,EAAA,GAAAG,YAAAH,EAAA,GAAAI,YAIAN,EAAAO,gBAAA,MAAAJ,EAAA,GAAAE,aAAA,MAAAH,EAAA,GAAAI,YAGAN,EAAAQ,eAAA,IAAAve,KAAAwe,MAAAN,EAAAO,SAAAhb,MAEAsa,EAAAW,YAAA/e,EAAA,GAAAgf,wBAAAtb,MACA1D,EAAA/F,SAGAtC,EAAAsa,OAAAhF,EAAAgS,SAAAjnB,EAAAmmB,WACAlR,EAAAE,QAAA+R,UAAAlnB,EAAAmmB,UAAAK,SAUA,SAAAW,EAAAhc,EAAAlL,EAAA0lB,EAAAxC,EAAAC,EAAAgE,GACA,IACAhe,EADAlG,EAAAigB,EAEAkE,GAAA,EAOA,IALA1B,IAAAjmB,IACA0J,EAAAuc,EACA0B,GAAA,GAGAnkB,IAAAkgB,GACAjY,EAAAmc,eAAApkB,KAIAkG,EAAAie,EAAApnB,EAAAmJ,EAAA+B,EAAAjI,KAAAiI,KAAAjI,GACAmkB,GAAA,EACAnkB,GAAAkkB,GAGA,OAAAhe,EAUA,SAAA2V,EAAAhE,EAAAwM,GAEA,IAAAC,EAAAxnB,EAAA4Z,SAAA/C,OACAqB,EAAA6C,EAAA+D,UAAA1b,OACAqkB,EAAA9nB,EAAAsa,OAAA,GAA0Bja,EAAAgb,OAAA0M,QAAAF,EAAA,CAC1BD,OAAA1nB,EAAAkJ,cAAA,MACA4e,OAAAH,EAAAG,OAAAH,EAAAG,OAAAJ,IAAAK,UAAA,GACA1B,UAAAsB,EAAAtB,UAAAsB,EAAAtB,UAAA,CAAAhO,GACAW,MAAA2O,EAAA3O,MAAA2O,EAAA3O,MAAAX,EACA2P,IAAA3P,IAEA6C,EAAA+D,UAAArX,KAAAggB,GAIA,IAAA3B,EAAA/K,EAAA+M,gBACAhC,EAAA5N,GAAAvY,EAAAsa,OAAA,GAAkCja,EAAAgb,OAAAgL,QAAAF,EAAA5N,IAElCiH,EAAApE,EAAA7C,EAAAvY,EAAA4nB,GAAAhhB,QAWA,SAAA4Y,EAAApE,EAAA7C,EAAA6P,GACA,IAAAN,EAAA1M,EAAA+D,UAAA5G,GACAuE,EAAA1B,EAAA0B,SACAuL,EAAAroB,EAAA8nB,EAAAF,KAGA,IAAAE,EAAAQ,WAAA,CAEAR,EAAAQ,WAAAD,EAAAhf,KAAA,eAEA,IAAAN,GAAAsf,EAAAhf,KAAA,cAAA7C,MAAA,0BAEAuC,IACA+e,EAAAQ,WAAAvf,EAAA,IAMAqf,IAAAroB,GAAA,OAAAqoB,IAEAhO,EAAAgO,GAGA/N,EAAAha,EAAA4Z,SAAA/C,OAAAkR,GAIAA,EAAAG,YAAAxoB,GAAAqoB,EAAAlP,QACAkP,EAAAlP,MAAAkP,EAAAG,WAGAH,EAAAI,QACAV,EAAAW,aAAAL,EAAAI,OAKAJ,EAAAld,YAAAkd,EAAAnQ,SACAmQ,EAAAnQ,OAAAmQ,EAAAld,WAGAkd,EAAAnQ,QACAoQ,EAAArL,SAAAoL,EAAAnQ,QAGAjY,EAAAsa,OAAAwN,EAAAM,GAEAxM,GAAAkM,EAAAM,EAAA,uBAMAA,EAAAM,YAAA3oB,IACA+nB,EAAAvB,UAAA,CAAA6B,EAAAM,YAGA9M,GAAAkM,EAAAM,EAAA,cAKA,IAAAO,EAAAb,EAAA5O,MAEAA,EAAAyD,EAAAgM,GAEAC,EAAAd,EAAAc,QAAAjM,EAAAmL,EAAAc,SAAA,KAEAC,EAAA,SAAAzR,GACA,wBAAAA,IAAA,IAAAA,EAAAlP,QAAA,MAGA4f,EAAAgB,UAAA9oB,EAAAsR,cAAAqX,KAAAE,EAAAF,EAAAxe,OAAA0e,EAAAF,EAAAlmB,OAAAomB,EAAAF,EAAAlJ,SACAqI,EAAAiB,QAAA,KAEAjB,EAAA3Q,UAAA,SAAA6R,EAAAvmB,EAAAwmB,GACA,IAAAC,EAAAhQ,EAAA8P,EAAAvmB,EAAA1C,EAAAkpB,GACA,OAAAL,GAAAnmB,EAAAmmB,EAAAM,EAAAzmB,EAAAumB,EAAAC,GAAAC,GAGApB,EAAAqB,UAAA,SAAAH,EAAAvc,EAAAwc,GACA,OAAAG,EAAAT,EAAAS,CAAAJ,EAAAvc,EAAAwc,IAKA,kBAAAN,IACAvN,EAAAiO,gBAAA,GAKAjO,EAAAS,UAAAmE,QACA8H,EAAAwB,WAAA,EACAjB,EAAArL,SAAAF,EAAAyM,gBAKA,IAAAC,GAAA,IAAAxpB,EAAAue,QAAA,MAAAuJ,EAAAhI,WACA2J,GAAA,IAAAzpB,EAAAue,QAAA,OAAAuJ,EAAAhI,WAEAgI,EAAAwB,YAAAE,GAAAC,GAGKD,IAAAC,GACL3B,EAAA4B,cAAA5M,EAAA6M,aACA7B,EAAA8B,iBAAA9M,EAAA+M,qBACKL,GAAAC,GACL3B,EAAA4B,cAAA5M,EAAAgN,cACAhC,EAAA8B,iBAAA9M,EAAAiN,sBAEAjC,EAAA4B,cAAA5M,EAAAkN,UACAlC,EAAA8B,iBAAA9M,EAAAmN,WAVAnC,EAAA4B,cAAA5M,EAAAyM,cACAzB,EAAA8B,iBAAA,IAoBA,SAAAM,EAAA5U,GAEA,QAAAA,EAAAuG,UAAAsO,WAAA,CACA,IAAA/U,EAAAE,EAAA6J,UAEAiL,GAAA9U,GAEA,QAAA/R,EAAA,EAAAoW,EAAAvE,EAAA3R,OAA4CF,EAAAoW,EAAUpW,IACtD6R,EAAA7R,GAAAqkB,IAAA/c,MAAAkB,MAAAqJ,EAAA7R,GAAA8mB,OAIA,IAAA9U,EAAAD,EAAAE,QAEA,KAAAD,EAAAG,IAAA,KAAAH,EAAAE,IACAE,GAAAL,GAGAgL,GAAAhL,EAAA,sBAAAA,IAYA,SAAAgV,EAAAlP,EAAAmP,GACA,IAAAC,EAAAC,EAAArP,EAAA,YAEA,wBAAAoP,EAAAD,GAAAC,EAAAD,GAAA,KAYA,SAAAG,EAAAtP,EAAAmP,GACA,IAAAC,EAAAC,EAAArP,EAAA,YAEAuP,EAAA3qB,EAAAue,QAAAgM,EAAAC,GACA,WAAAG,IAAA,KAUA,SAAAC,EAAAxP,GACA,IAAAyP,EAAA,EAOA,OALA7qB,EAAAuJ,KAAA6R,EAAA+D,UAAA,SAAA5b,EAAAuG,GACAA,EAAAghB,UAAA,SAAA9qB,EAAA8J,EAAA8d,KAAA/b,IAAA,YACAgf,MAGAA,EAYA,SAAAJ,EAAArP,EAAA2P,GACA,IAAAvjB,EAAA,GAMA,OALAxH,EAAAuS,IAAA6I,EAAA+D,UAAA,SAAA1S,EAAAlJ,GACAkJ,EAAAse,IACAvjB,EAAAM,KAAAvE,KAGAiE,EASA,SAAAwjB,EAAA1V,GACA,IAGA/R,EAAAmE,EAAAmI,EAAAC,EAAAgU,EAAAmH,EACAnhB,EAAAohB,EAAAC,EAJA/V,EAAAE,EAAA6J,UACAvY,EAAA0O,EAAAe,OACA+U,EAAA/qB,EAAA2K,IAAAvI,KAAA4oB,OAIA,IAAA9nB,EAAA,EAAAmE,EAAA0N,EAAA3R,OAAqCF,EAAAmE,EAASnE,IAI9C,GAHAuG,EAAAsL,EAAA7R,GACA4nB,EAAA,IAEArhB,EAAA0e,OAAA1e,EAAA2e,aACA3e,EAAA0e,MAAA1e,EAAA2e,kBACO,IAAA3e,EAAA0e,MAAA,CACP,IAAA3Y,EAAA,EAAAC,EAAAsb,EAAA3nB,OAAuCoM,EAAAC,EAASD,IAAA,CAChD,IAAAiU,EAAA,EAAAmH,EAAArkB,EAAAnD,OAAwCqgB,EAAAmH,IAGxCE,EAAArH,KAAA/jB,IACAorB,EAAArH,GAAAwH,EAAAhW,EAAAwO,EAAAvgB,EAAA,UAGA2nB,EAAAE,EAAAvb,GAAAsb,EAAArH,GAAAxO,KAMAzF,IAAAub,EAAA3nB,OAAA,IAMA,SAAAynB,EAnBiDpH,KA0BjD,GAAAoH,EAAA,CACAphB,EAAA0e,MAAA0C,EACA,OAKAphB,EAAA0e,QACA1e,EAAA0e,MAAA,WAkBA,SAAAnJ,EAAAjE,EAAAmQ,EAAAC,EAAAlrB,GACA,IAAAiD,EAAAoW,EAAA9J,EAAA4b,EAAA3H,EAAA4H,EAAAC,EACAvW,EAAAgG,EAAA+D,UAEA,GAAAoM,EAEA,IAAAhoB,EAAAgoB,EAAA9nB,OAAA,EAAoCF,GAAA,EAAQA,IAAA,CAI5C,IAAAqoB,GAHAD,EAAAJ,EAAAhoB,IAGAsoB,UAAA9rB,EAAA4rB,EAAAE,QAAAF,EAAAC,SAMA,IAJA5rB,EAAA6U,QAAA+W,KACAA,EAAA,CAAAA,IAGA/b,EAAA,EAAA4b,EAAAG,EAAAnoB,OAA2CoM,EAAA4b,EAAU5b,IACrD,qBAAA+b,EAAA/b,IAAA+b,EAAA/b,IAAA,GAEA,KAAAuF,EAAA3R,QAAAmoB,EAAA/b,IACAuP,EAAAhE,GAKA9a,EAAAsrB,EAAA/b,GAAA8b,QACW,qBAAAC,EAAA/b,IAAA+b,EAAA/b,GAAA,EAEXvP,EAAA8U,EAAA3R,OAAAmoB,EAAA/b,GAAA8b,QACW,qBAAAC,EAAA/b,GAEX,IAAAiU,EAAA,EAAA4H,EAAAtW,EAAA3R,OAA8CqgB,EAAA4H,EAAU5H,KACxD,QAAA8H,EAAA/b,IAAA7P,EAAAoV,EAAA0O,GAAA8D,KAAAnJ,SAAAmN,EAAA/b,MACAvP,EAAAwjB,EAAA6H,GASA,GAAAH,EACA,IAAAjoB,EAAA,EAAAoW,EAAA6R,EAAA/nB,OAAuCF,EAAAoW,EAAUpW,IACjDjD,EAAAiD,EAAAioB,EAAAjoB,IAmBA,SAAA4d,EAAA/F,EAAA0Q,EAAA/V,EAAAgW,GAEA,IAAAxU,EAAA6D,EAAA/E,OAAA5S,OACAuoB,EAAAhsB,EAAAsa,QAAA,KAAiCja,EAAAgb,OAAA4Q,KAAA,CACjC7U,IAAArB,EAAA,aACAmS,IAAA3Q,IAEAyU,EAAAE,OAAAJ,EACA1Q,EAAA/E,OAAAvO,KAAAkkB,GAMA,IAFA,IAAA5W,EAAAgG,EAAA+D,UAEA5b,EAAA,EAAAoW,EAAAvE,EAAA3R,OAA0CF,EAAAoW,EAAUpW,IACpD6R,EAAA7R,GAAAilB,MAAA,KAKApN,EAAAkG,gBAAAxZ,KAAAyP,GACA,IAAA0D,EAAAG,EAAAsB,QAAAoP,GAYA,OAVA7Q,IAAAlb,IACAqb,EAAA+Q,KAAAlR,GAAA+Q,IAKAjW,GAAAqF,EAAAS,UAAA4E,cACA2L,GAAAhR,EAAA7D,EAAAxB,EAAAgW,GAGAxU,EAcA,SAAA6J,EAAA9L,EAAA+W,GACA,IAAA/c,EAMA,OAJA+c,aAAArsB,IACAqsB,EAAArsB,EAAAqsB,IAGAA,EAAA9Z,IAAA,SAAAhP,EAAAib,GAEA,OADAlP,EAAAgd,GAAAhX,EAAAkJ,GACA2C,EAAA7L,EAAAhG,EAAA1I,KAAA4X,EAAAlP,EAAAid,SAuCA,SAAAjB,EAAAhW,EAAAkX,EAAAC,EAAAhqB,GACA,IAAAsS,EAAAO,EAAAoX,MACA5iB,EAAAwL,EAAA6J,UAAAsN,GACAzD,EAAA1T,EAAAe,OAAAmW,GAAAN,OACAS,EAAA7iB,EAAA8iB,gBACAC,EAAA/iB,EAAAqN,UAAA6R,EAAAvmB,EAAA,CACA6S,WACAhG,IAAAkd,EACA1iB,IAAA2iB,IAGA,GAAAI,IAAA9sB,EAOA,OANAuV,EAAAwX,YAAA/X,GAAA,OAAA4X,IACA5R,GAAAzF,EAAA,qDAAAxL,EAAAoP,MAAA,aAA0G,IAAApP,EAAAoP,MAAA,iBAAAsT,EAAA,YAAAC,EAAA,GAE1GnX,EAAAwX,WAAA/X,GAGA4X,EAKA,GAAAE,IAAA7D,GAAA,OAAA6D,GAAA,OAAAF,GAAAlqB,IAAA1C,GAEK,uBAAA8sB,EAGL,OAAAA,EAAAlpB,KAAAqlB,QAJA6D,EAAAF,EAOA,cAAAE,GAAA,WAAApqB,EACA,GAGAoqB,EAYA,SAAAE,EAAAzX,EAAAkX,EAAAC,EAAAhgB,GACA,IAAA3C,EAAAwL,EAAA6J,UAAAsN,GACAzD,EAAA1T,EAAAe,OAAAmW,GAAAN,OACApiB,EAAAqf,UAAAH,EAAAvc,EAAA,CACA6I,WACAhG,IAAAkd,EACA1iB,IAAA2iB,IAKA,IAAAO,EAAA,WACAC,EAAA,QAOA,SAAAC,EAAAnlB,GACA,OAAA/H,EAAAuS,IAAAxK,EAAAvB,MAAA,gCAAAiB,GACA,OAAAA,EAAA5C,QAAA,eAYA,SAAA8X,EAAAwQ,GACA,GAAAntB,EAAAsR,cAAA6b,GAAA,CAEA,IAAAlJ,EAAA,GAMA,OALAjkB,EAAAuJ,KAAA4jB,EAAA,SAAA3jB,EAAAiD,GACAA,IACAwX,EAAAza,GAAAmT,EAAAlQ,MAGA,SAAA7F,EAAAnE,EAAA6M,EAAA2Z,GACA,IAAAlgB,EAAAkb,EAAAxhB,IAAAwhB,EAAApjB,EACA,OAAAkI,IAAAhJ,EAAAgJ,EAAAnC,EAAAnE,EAAA6M,EAAA2Z,GAAAriB,GAEK,UAAAumB,EAEL,gBAAAvmB,GAEA,OAAAA,GAEK,uBAAAumB,EACL,gBAAAvmB,EAAAnE,EAAA6M,EAAA2Z,GACA,OAAAkE,EAAAvmB,EAAAnE,EAAA6M,EAAA2Z,IAEK,qBAAAkE,IAAA,IAAAA,EAAAjlB,QAAA,WAAAilB,EAAAjlB,QAAA,WAAAilB,EAAAjlB,QAAA,KAoEL,gBAAAtB,EAAAnE,GAEA,OAAAmE,EAAAumB,IARA,gBAAAvmB,EAAAnE,GAEA,OAzDA,SAAA2qB,EAAAxmB,EAAAnE,EAAA2U,GACA,IAAAiW,EAAAC,EAAAjK,EAAAkK,EAEA,QAAAnW,EAGA,IAFA,IAAA5P,EAAA0lB,EAAA9V,GAEA7T,EAAA,EAAAoW,EAAAnS,EAAA/D,OAA0CF,EAAAoW,EAAUpW,IAAA,CAKpD,GAHA8pB,EAAA7lB,EAAAjE,GAAAiD,MAAAwmB,GACAM,EAAA9lB,EAAAjE,GAAAiD,MAAAymB,GAEAI,EAAA,CAaA,GAXA7lB,EAAAjE,GAAAiE,EAAAjE,GAAAsB,QAAAmoB,EAAA,IAEA,KAAAxlB,EAAAjE,KACAqD,IAAAY,EAAAjE,KAGA8f,EAAA,GAEA7b,EAAA0T,OAAA,EAAA3X,EAAA,GACAgqB,EAAA/lB,EAAAD,KAAA,KAEAvH,EAAA6U,QAAAjO,GACA,QAAAiJ,EAAA,EAAA4b,EAAA7kB,EAAAnD,OAAmDoM,EAAA4b,EAAU5b,IAC7DwT,EAAAvb,KAAAslB,EAAAxmB,EAAAiJ,GAAApN,EAAA8qB,IAMA,IAAAhmB,EAAA8lB,EAAA,GAAAG,UAAA,EAAAH,EAAA,GAAA5pB,OAAA,GACAmD,EAAA,KAAAW,EAAA8b,IAAA9b,QAGA,MACa,GAAA+lB,EAEb9lB,EAAAjE,GAAAiE,EAAAjE,GAAAsB,QAAAooB,EAAA,IACArmB,IAAAY,EAAAjE,UAHa,CAOb,UAAAqD,KAAAY,EAAAjE,MAAAxD,EACA,OAAAA,EAGA6G,IAAAY,EAAAjE,KAIA,OAAAqD,EAKAwmB,CAAAxmB,EAAAnE,EAAA0qB,IAmBA,SAAA/D,EAAA+D,GACA,GAAAntB,EAAAsR,cAAA6b,GAMA,OAAA/D,EAAA+D,EAAAtsB,GACK,UAAAssB,EAEL,oBACK,uBAAAA,EACL,gBAAAvmB,EAAA6F,EAAAwc,GACAkE,EAAAvmB,EAAA,MAAA6F,EAAAwc,IAEK,qBAAAkE,IAAA,IAAAA,EAAAjlB,QAAA,WAAAilB,EAAAjlB,QAAA,WAAAilB,EAAAjlB,QAAA,KAsEL,gBAAAtB,EAAA6F,GAEA7F,EAAAumB,GAAA1gB,GARA,gBAAA7F,EAAA6F,GAEA,OAhEA,SAAAghB,EAAA7mB,EAAA6F,EAAA2K,GAOA,IANA,IACAhN,EAGAijB,EAAAC,EAAArJ,EAAAsJ,EAJA/lB,EAAA0lB,EAAA9V,GAGAsW,EAAAlmB,IAAA/D,OAAA,GAGAF,EAAA,EAAAoW,EAAAnS,EAAA/D,OAAA,EAA4CF,EAAAoW,EAAUpW,IAAA,CAKtD,GAHA8pB,EAAA7lB,EAAAjE,GAAAiD,MAAAwmB,GACAM,EAAA9lB,EAAAjE,GAAAiD,MAAAymB,GAEAI,EAAA,CAQA,GAPA7lB,EAAAjE,GAAAiE,EAAAjE,GAAAsB,QAAAmoB,EAAA,IACApmB,EAAAY,EAAAjE,IAAA,IAEA6G,EAAA5C,EAAAoX,SACA1D,OAAA,EAAA3X,EAAA,GACAgqB,EAAAnjB,EAAA7C,KAAA,KAEAvH,EAAA6U,QAAApI,GACA,QAAAoD,EAAA,EAAA4b,EAAAhf,EAAAhJ,OAAgDoM,EAAA4b,EAAU5b,IAE1D4d,EADAxJ,EAAA,GACAxX,EAAAoD,GAAA0d,GACA3mB,EAAAY,EAAAjE,IAAAuE,KAAAmc,QAMArd,EAAAY,EAAAjE,IAAAkJ,EAKA,OACW6gB,IAEX9lB,EAAAjE,GAAAiE,EAAAjE,GAAAsB,QAAAooB,EAAA,IACArmB,IAAAY,EAAAjE,IAAAkJ,IAKA,OAAA7F,EAAAY,EAAAjE,KAAAqD,EAAAY,EAAAjE,MAAAxD,IACA6G,EAAAY,EAAAjE,IAAA,IAGAqD,IAAAY,EAAAjE,IAIAmqB,EAAAlnB,MAAAymB,GAEArmB,IAAA8mB,EAAA7oB,QAAAooB,EAAA,KAAAxgB,GAIA7F,EAAA8mB,EAAA7oB,QAAAmoB,EAAA,KAAAvgB,EAMAghB,CAAA7mB,EAAA6F,EAAA0gB,IAkBA,SAAAQ,EAAArY,GACA,OAAA4N,EAAA5N,EAAAe,OAAA,UASA,SAAAuX,EAAAtY,GACAA,EAAAe,OAAA5S,OAAA,EACA6R,EAAAgM,gBAAA7d,OAAA,EACA6R,EAAA+L,UAAA5d,OAAA,EACA6R,EAAA6W,KAAA,GAWA,SAAA0B,GAAArmB,EAAAsmB,EAAA5S,GAGA,IAFA,IAAA6S,GAAA,EAEAxqB,EAAA,EAAAoW,EAAAnS,EAAA/D,OAAoCF,EAAAoW,EAAUpW,IAC9CiE,EAAAjE,IAAAuqB,EACAC,EAAAxqB,EACOiE,EAAAjE,GAAAuqB,GACPtmB,EAAAjE,MAIA,GAAAwqB,GAAA7S,IAAAnb,GACAyH,EAAA0T,OAAA6S,EAAA,GAqBA,SAAAC,GAAA1Y,EAAAkX,EAAApV,EAAAqV,GACA,IACAlpB,EAAAmE,EADA4H,EAAAgG,EAAAe,OAAAmW,GAGAyB,EAAA,SAAAxe,EAAA3F,GAIA,KAAA2F,EAAAiC,WAAAjO,QACAgM,EAAAye,YAAAze,EAAA0e,YAGA1e,EAAAwY,UAAAqD,EAAAhW,EAAAkX,EAAA1iB,EAAA,YAIA,WAAAsN,OAAA,SAAAA,GAAA,QAAA9H,EAAA8H,KAGK,CAEL,IAAAmV,EAAAjd,EAAA8e,QAEA,GAAA7B,EACA,GAAAE,IAAA1sB,EACAkuB,EAAA1B,EAAAE,WAEA,IAAAlpB,EAAA,EAAAmE,EAAA6kB,EAAA9oB,OAAyCF,EAAAmE,EAASnE,IAClD0qB,EAAA1B,EAAAhpB,WAVA+L,EAAA4c,OAAAI,GAAAhX,EAAAhG,EAAAmd,MAAA1sB,IAAAuP,EAAA4c,QAAAtlB,KAkBA0I,EAAA+e,WAAA,KACA/e,EAAAgf,aAAA,KAGA,IAAA/d,EAAA+E,EAAA6J,UAEA,GAAAsN,IAAA1sB,EACAwQ,EAAAkc,GAAAjE,MAAA,SACK,CACL,IAAAjlB,EAAA,EAAAmE,EAAA6I,EAAA9M,OAAoCF,EAAAmE,EAASnE,IAC7CgN,EAAAhN,GAAAilB,MAAA,KAIA+F,GAAAjZ,EAAAhG,IAsBA,SAAAgd,GAAAhX,EAAAhG,EAAAmd,EAAA1hB,GACA,IAEAjI,EACAgH,EAGA0kB,EANAC,EAAA,GACAC,EAAApf,EAAA6e,WAIA5qB,EAAA,EAEA6R,EAAAE,EAAA6J,UACAwP,EAAArZ,EAAA+T,eAEAte,MAAAhL,EAAAgL,EAAA4jB,EAAA,GAA6C,GAE7C,IAAAtlB,EAAA,SAAAtB,EAAA2mB,GACA,qBAAA3mB,EAAA,CACA,IAAAmgB,EAAAngB,EAAAG,QAAA,KAEA,QAAAggB,EAAA,CACA,IAAA7e,EAAAtB,EAAAylB,UAAAtF,EAAA,GAEA0G,EAAAxF,EAAArhB,GAEA6mB,EAAA7jB,EAAA2jB,EAAA3U,aAAA1Q,OAMAwlB,EAAA,SAAApf,GACA,GAAAgd,IAAA1sB,GAAA0sB,IAAAlpB,EAIA,GAHAuG,EAAAsL,EAAA7R,GACAirB,EAAAxuB,EAAA4P,KAAAH,EAAAwY,WAEAne,KAAAgf,UAAA,CACA,IAAA8F,EAAAxF,EAAAtf,EAAAoP,MAAArY,GAEA+tB,EAAA7jB,EAAAyjB,GACAnlB,EAAAS,EAAAoP,MAAA/O,KAAAsF,GACApG,EAAAS,EAAAoP,MAAAzW,KAAAgN,GACApG,EAAAS,EAAAoP,MAAAuG,OAAAhQ,QAIAkf,GACA7kB,EAAAif,UAEAjf,EAAAif,QAAAK,EAAAtf,EAAAoP,QAGApP,EAAAif,QAAAhe,EAAAyjB,IAEAzjB,EAAAxH,GAAAirB,EAKAjrB,KAGA,GAAAmrB,EAEA,KAAAA,GAGA,OAFA5rB,EAAA4rB,EAAAzlB,SAAAyO,gBAEA,MAAA5U,IACA+rB,EAAAH,GACAD,EAAA3mB,KAAA4mB,IAGAA,IAAAI,gBAEK,CAELL,EAAAnf,EAAA8e,QAEA,QAAAve,EAAA,EAAAC,EAAA2e,EAAAhrB,OAAuCoM,EAAAC,EAASD,IAChDgf,EAAAJ,EAAA5e,IAKA,IAAAxB,EAAAiB,EAAA6e,WAAA7e,IAAAyG,IAEA,GAAA1H,EAAA,CACA,IAAA4M,EAAA5M,EAAA0L,aAAA,MAEAkB,GACAmO,EAAA9T,EAAAsH,MAAAwM,CAAAre,EAAAkQ,GAIA,OACArU,KAAAmE,EACAwhB,MAAAkC,GAeA,SAAArC,GAAAhR,EAAA7D,EAAAwX,EAAAhD,GACA,IAGAhW,EACAiZ,EACAlH,EACAvkB,EACAoW,EAPArK,EAAA8L,EAAA/E,OAAAkB,GACAyR,EAAA1Z,EAAA4c,OACAK,EAAA,GAOA,UAAAjd,EAAAyG,IAAA,CAeA,IAdAA,EAAAgZ,GAAA7uB,EAAAkJ,cAAA,MACAkG,EAAAyG,MACAzG,EAAA8e,QAAA7B,EAKAxW,EAAAkZ,aAAA1X,EAGAgX,GAAAnT,EAAA9L,GAIA/L,EAAA,EAAAoW,EAAAyB,EAAA+D,UAAA1b,OAAoDF,EAAAoW,EAAUpW,IAC9DukB,EAAA1M,EAAA+D,UAAA5b,IACAyrB,EAAAD,EAAAhD,EAAAxoB,GAAArD,EAAAkJ,cAAA0e,EAAAoH,YACAC,cAAA,CACA7f,IAAAiI,EACAL,OAAA3T,GAEAgpB,EAAAzkB,KAAAknB,GAEAD,IAAAjH,EAAAc,SAAAd,EAAA5O,QAAA3V,GAAAvD,EAAAsR,cAAAwW,EAAA5O,QAAA4O,EAAA5O,MAAArY,IAAA0C,EAAA,aACAyrB,EAAA/G,UAAAqD,EAAAlQ,EAAA7D,EAAAhU,EAAA,YAKAukB,EAAA7P,SACA+W,EAAA9jB,WAAA,IAAA4c,EAAA7P,QAIA6P,EAAAgD,WAAAiE,EACAhZ,EAAArM,YAAAslB,IACSlH,EAAAgD,UAAAiE,GACTC,EAAAtU,WAAAwT,YAAAc,GAGAlH,EAAAsH,eACAtH,EAAAsH,cAAAzrB,KAAAyX,EAAAN,UAAAkU,EAAA1D,EAAAlQ,EAAA7D,EAAAhU,GAAAylB,EAAAzR,EAAAhU,GAIA+c,GAAAlF,EAAA,6BAAArF,EAAAiT,EAAAzR,EAAAgV,IAKAjd,EAAAyG,IAAAsZ,aAAA,cAWA,SAAAd,GAAAjZ,EAAAhG,GACA,IAAAggB,EAAAhgB,EAAAyG,IACAnP,EAAA0I,EAAA4c,OAEA,GAAAoD,EAAA,CACA,IAAArU,EAAA3F,EAAAoH,QAAA9V,GAMA,GAJAqU,IACAqU,EAAArU,MAGArU,EAAA2oB,YAAA,CAEA,IAAA/nB,EAAAZ,EAAA2oB,YAAA1rB,MAAA,KACAyL,EAAAkgB,OAAAlgB,EAAAkgB,OAAArU,EAAA7L,EAAAkgB,OAAAhsB,OAAAgE,MACAxH,EAAAsvB,GAAA5Q,YAAApP,EAAAkgB,OAAAjoB,KAAA,MAAAyV,SAAApW,EAAA2oB,aAGA3oB,EAAA6oB,YACAzvB,EAAAsvB,GAAAjmB,KAAAzC,EAAA6oB,YAGA7oB,EAAA8oB,YACA1vB,EAAAsvB,GAAA1oB,OAAA8oB,aAWA,SAAAC,GAAAvU,GACA,IAAA7X,EAAAmE,EAAA+H,EAAAH,EAAA4H,EACA0J,EAAAxF,EAAAX,OACAsG,EAAA3F,EAAAT,OACAiV,EAAA,IAAA5vB,EAAA,SAAA4gB,GAAAnd,OACAsZ,EAAA3B,EAAA0B,SACA1H,EAAAgG,EAAA+D,UAMA,IAJAyQ,IACAtgB,EAAAtP,EAAA,SAAA0M,SAAAkU,IAGArd,EAAA,EAAAmE,EAAA0N,EAAA3R,OAAqCF,EAAAmE,EAASnE,IAC9C2T,EAAA9B,EAAA7R,GACAkM,EAAAzP,EAAAkX,EAAA0Q,KAAA5K,SAAA9F,EAAAe,QAEA2X,GACAngB,EAAA/C,SAAA4C,GAIA8L,EAAAS,UAAAmE,QACAvQ,EAAAuN,SAAA9F,EAAAwS,gBAEA,IAAAxS,EAAAoS,YACA7Z,EAAApG,KAAA,WAAA+R,EAAAyU,WAAAxmB,KAAA,gBAAA+R,EAAAJ,UAEA8U,GAAA1U,EAAAlE,EAAA0Q,IAAArkB,KAIA2T,EAAA8Q,QAAAvY,EAAA,GAAAwY,WACAxY,EAAAsT,KAAA7L,EAAA8Q,QAGA+H,GAAA3U,EAAA,SAAA2U,CAAA3U,EAAA3L,EAAAyH,EAAA6F,GAkBA,GAfA6S,GACA5Q,GAAA5D,EAAA6D,SAAA2B,GAKA5gB,EAAA4gB,GAAAvC,KAAA,OAAAhV,KAAA,cAGArJ,EAAA4gB,GAAAvC,KAAA,kBAAArB,SAAAD,EAAAiT,WACAhwB,EAAA+gB,GAAA1C,KAAA,kBAAArB,SAAAD,EAAAkT,WAKA,OAAAlP,EAAA,CACA,IAAAwL,EAAAnR,EAAA6F,SAAA,GAEA,IAAA1d,EAAA,EAAAmE,EAAA6kB,EAAA9oB,OAAqCF,EAAAmE,EAASnE,KAC9C2T,EAAA9B,EAAA7R,IACA2sB,IAAA3D,EAAAhpB,GAAAkM,KAEAyH,EAAAe,QACAjY,EAAAkX,EAAAgZ,KAAAlT,SAAA9F,EAAAe,SAoBA,SAAAkY,GAAA/U,EAAAgV,EAAAC,GACA,IAAA9sB,EAAAoW,EAAA9J,EAAA4b,EAAA3H,EAAAzb,EAAAioB,EAIAC,EAAAC,EAHAC,EAAA,GACAC,EAAA,GACAC,EAAAvV,EAAA+D,UAAA1b,OAGA,GAAA2sB,EAAA,CAUA,IANAC,IAAAtwB,IACAswB,GAAA,GAKA9sB,EAAA,EAAAoW,EAAAyW,EAAA3sB,OAAuCF,EAAAoW,EAAUpW,IAAA,CAKjD,IAJAktB,EAAAltB,GAAA6sB,EAAA7sB,GAAAqb,QACA6R,EAAAltB,GAAAwS,IAAAqa,EAAA7sB,GAAAwS,IAGAlG,EAAA8gB,EAAA,EAA4B9gB,GAAA,EAAQA,IACpCuL,EAAA+D,UAAAtP,GAAAib,UAAAuF,GACAI,EAAAltB,GAAA2X,OAAArL,EAAA,GAMA6gB,EAAA5oB,KAAA,IAGA,IAAAvE,EAAA,EAAAoW,EAAA8W,EAAAhtB,OAAsCF,EAAAoW,EAAUpW,IAAA,CAIhD,GAHA+sB,EAAAG,EAAAltB,GAAAwS,IAIA,KAAA1N,EAAAioB,EAAAnC,YACAmC,EAAApC,YAAA7lB,GAIA,IAAAwH,EAAA,EAAA4b,EAAAgF,EAAAltB,GAAAE,OAA2CoM,EAAA4b,EAAU5b,IAOrD,GANA0gB,EAAA,EACAC,EAAA,EAKAE,EAAAntB,GAAAsM,KAAA9P,EAAA,CAKA,IAJAuwB,EAAA5mB,YAAA+mB,EAAAltB,GAAAsM,GAAAJ,MACAihB,EAAAntB,GAAAsM,GAAA,EAGA4gB,EAAAltB,EAAAgtB,KAAAxwB,GAAA0wB,EAAAltB,GAAAsM,GAAAJ,MAAAghB,EAAAltB,EAAAgtB,GAAA1gB,GAAAJ,MACAihB,EAAAntB,EAAAgtB,GAAA1gB,GAAA,EACA0gB,IAKA,KAAAE,EAAAltB,GAAAsM,EAAA2gB,KAAAzwB,GAAA0wB,EAAAltB,GAAAsM,GAAAJ,MAAAghB,EAAAltB,GAAAsM,EAAA2gB,GAAA/gB,MAAA,CAEA,IAAAqU,EAAA,EAAuBA,EAAAyM,EAAczM,IACrC4M,EAAAntB,EAAAugB,GAAAjU,EAAA2gB,GAAA,EAGAA,IAKAxwB,EAAAywB,EAAAltB,GAAAsM,GAAAJ,MAAApG,KAAA,UAAAknB,GAAAlnB,KAAA,UAAAmnB,MAYA,SAAAI,GAAAxV,GAEA,IAAAyV,EAAAvQ,GAAAlF,EAAA,+BAAAA,IAEA,QAAApb,EAAAue,SAAA,EAAAsS,GAAA,CAMA,IACAC,EAAA,GACAC,EAAA,EACA/S,EAAA5C,EAAA4C,gBACAgT,EAAAhT,EAAAva,OAEAwtB,GADA7V,EAAA8V,WAAAztB,OACA2X,EAAAK,WACAyB,EAAA9B,EAAA8B,kBACAiU,EAAA,OAAA3Q,GAAApF,GACAiG,EAAAjG,EAAAiG,UACAjG,EAAAgW,UAAA,EAGAlU,IAAAnd,IAAA,IAAAmd,IACA9B,EAAAgC,eAAA+T,EAAAjU,KAAA9B,EAAAiW,mBAAA,EAAAnU,EACA9B,EAAA8B,mBAAA,GAGA,IAAAC,EAAA/B,EAAAgC,eACAkU,EAAAlW,EAAAmW,eAGA,GAAAnW,EAAAkC,cACAlC,EAAAkC,eAAA,EACAlC,EAAAsR,QAEA8E,GAAApW,GAAA,QACK,GAAA+V,GAEA,IAAA/V,EAAAqW,cAAAC,GAAAtW,GACL,YAFAA,EAAAsR,QAKA,OAAArL,EAAA5d,OAIA,IAHA,IAAAkuB,EAAAR,EAAA,EAAAhU,EACAyU,EAAAT,EAAA/V,EAAA/E,OAAA5S,OAAA6tB,EAEAzhB,EAAA8hB,EAA0B9hB,EAAA+hB,EAAU/hB,IAAA,CACpC,IAAAgiB,EAAAxQ,EAAAxR,GACAwG,EAAA+E,EAAA/E,OAAAwb,GAEA,OAAAxb,EAAAN,KACAqW,GAAAhR,EAAAyW,GAGA,IAAAC,EAAAzb,EAAAN,IAGA,OAAAib,EAAA,CACA,IAAAe,EAAA/T,EAAA+S,EAAAC,GAEA3a,EAAA2b,aAAAD,IACA/xB,EAAA8xB,GAAApT,YAAArI,EAAA2b,aAAAhV,SAAA+U,GACA1b,EAAA2b,YAAAD,GAOAzR,GAAAlF,EAAA,sBAAA0W,EAAAzb,EAAA6V,OAAA6E,EAAAlhB,EAAAgiB,IAEAf,EAAAhpB,KAAAgqB,GACAf,QAEK,CAEL,IAAAkB,EAAAhB,EAAArM,aAEA,GAAAxJ,EAAAsR,OAAA,QAAAlM,GAAApF,GACA6W,EAAAhB,EAAAnM,gBACOmM,EAAApM,aAAA,IAAAzJ,EAAA8W,mBACPD,EAAAhB,EAAApM,aAGAiM,EAAA,GAAA9wB,EAAA,SACAmyB,MAAAnB,EAAAhT,EAAA,QACO5Q,OAAApN,EAAA,UACPoyB,OAAA,MACAC,QAAAzH,EAAAxP,GACA+W,MAAA/W,EAAA0B,SAAAwV,YACOvP,KAAAkP,IAAA,GAKP3R,GAAAlF,EAAA,6BAAApb,EAAAob,EAAAX,QAAAnR,SAAA,SAAAqkB,EAAAvS,GAAA+B,EAAAmU,EAAAjQ,IAEAf,GAAAlF,EAAA,6BAAApb,EAAAob,EAAAT,QAAArR,SAAA,SAAAqkB,EAAAvS,GAAA+B,EAAAmU,EAAAjQ,IAEA,IAAAxZ,EAAA7H,EAAAob,EAAA0F,QACAjZ,EAAAyB,WAAAipB,SACA1qB,EAAAuF,OAAApN,EAAA8wB,IAGAxQ,GAAAlF,EAAA,yBAAAA,IAIAA,EAAA6E,SAAA,EACA7E,EAAAoX,WAAA,EACApX,EAAAgW,UAAA,OA1GAI,GAAApW,GAAA,GAqHA,SAAAqX,GAAAnd,EAAAod,GACA,IAAAhT,EAAApK,EAAAuG,UACA1R,EAAAuV,EAAAM,MACAP,EAAAC,EAAAiT,QAEAxoB,GACAyoB,GAAAtd,GAGAmK,EACAoT,GAAAvd,IAAAwd,iBAGAxd,EAAA+L,UAAA/L,EAAAgM,gBAAA1C,SAGA,IAAA8T,IACApd,EAAA8H,eAAA,GAKA9H,EAAAyd,UAAAL,EAEA9B,GAAAtb,GAEAA,EAAAyd,WAAA,EASA,SAAAC,GAAA5X,GACA,IAAA2B,EAAA3B,EAAA0B,SACAlQ,EAAA5M,EAAAob,EAAAZ,QACAyY,EAAAjzB,EAAA,UAAAkzB,aAAAtmB,GAEA8S,EAAAtE,EAAAS,UAEAsX,EAAAnzB,EAAA,UACAib,GAAAG,EAAAJ,SAAA,WACAmX,MAAApV,EAAAqW,UAAAhY,EAAAT,OAAA,OAAAoC,EAAAiE,aAEA5F,EAAAiY,SAAAJ,EAAA,GACA7X,EAAAkY,cAAAH,EAAA,GACA/X,EAAAmY,qBAAAnY,EAAAZ,OAAAsU,YAMA,IAHA,IACA0E,EAAAC,EAAAC,EAAAC,EAAAC,EAAA/jB,EADAgkB,EAAAzY,EAAA0Y,KAAAjwB,MAAA,IAGAN,EAAA,EAAmBA,EAAAswB,EAAApwB,OAAiBF,IAAA,CAIpC,GAHAiwB,EAAA,KAGA,MAFAC,EAAAI,EAAAtwB,IAEA,CAOA,GALAmwB,EAAA1zB,EAAA,aAKA,MAFA2zB,EAAAE,EAAAtwB,EAAA,KAEA,KAAAowB,EAAA,CAIA,IAHAC,EAAA,GACA/jB,EAAA,EAEAgkB,EAAAtwB,EAAAsM,IAAA8jB,GACAC,GAAAC,EAAAtwB,EAAAsM,GACAA,IAeA,GAVA,KAAA+jB,EACAA,EAAA7W,EAAAgX,WACW,KAAAH,IACXA,EAAA7W,EAAAiX,aAOA,GAAAJ,EAAA1rB,QAAA,MACA,IAAA+rB,EAAAL,EAAA/vB,MAAA,KACA6vB,EAAAzY,GAAAgZ,EAAA,GAAAC,OAAA,EAAAD,EAAA,GAAAxwB,OAAA,GACAiwB,EAAAxoB,UAAA+oB,EAAA,OACW,KAAAL,EAAAtP,OAAA,GACXoP,EAAAzY,GAAA2Y,EAAAM,OAAA,EAAAN,EAAAnwB,OAAA,GAEAiwB,EAAAxoB,UAAA0oB,EAGArwB,GAAAsM,EAIAsjB,EAAA/lB,OAAAsmB,GACAP,EAAAnzB,EAAA0zB,QACO,QAAAD,EAEPN,IAAAgB,cAEA,QAAAV,GAAA/T,EAAA0U,WAAA1U,EAAA2U,cAEAb,EAAAc,GAAAlZ,QACS,QAAAqY,GAAA/T,EAAAiT,QAETa,EAAAe,GAAAnZ,QACS,QAAAqY,GAAA/T,EAAA8U,YAEThB,EAAAiB,GAAArZ,QACS,QAAAqY,EAETD,EAAAkB,GAAAtZ,QACS,QAAAqY,GAAA/T,EAAAiV,MAETnB,EAAAoB,GAAAxZ,QACS,QAAAqY,GAAA/T,EAAA0U,UAETZ,EAAAqB,GAAAzZ,QACS,OAAA/a,EAAA2K,IAAA8pB,QAAArxB,OAIT,IAFA,IAAAsxB,EAAA10B,EAAA2K,IAAA8pB,QAEAhR,EAAA,EAAA4H,EAAAqJ,EAAAtxB,OAAmDqgB,EAAA4H,EAAU5H,IAC7D,GAAA2P,GAAAsB,EAAAjR,GAAAkR,SAAA,CACAxB,EAAAuB,EAAAjR,GAAAmR,OAAA7Z,GACA,MAOA,GAAAoY,EAAA,CACA,IAAA0B,EAAA9Z,EAAA8Z,YAEAA,EAAAzB,KACAyB,EAAAzB,GAAA,IAGAyB,EAAAzB,GAAA3rB,KAAA0rB,GACAL,EAAA/lB,OAAAomB,IAMAP,EAAAkC,YAAAhC,GACA/X,EAAAiY,SAAA,KAaA,SAAArU,GAAAoW,EAAArW,GACA,IACAhJ,EAAAsf,EACA9xB,EAAAugB,EAAAwR,EAAA3b,EAAA4b,EAAA/E,EAAAD,EACAiF,EAHAC,EAAAz1B,EAAA+e,GAAAzV,SAAA,MAKAosB,EAAA,SAAAluB,EAAAjE,EAAAsM,GAGA,IAFA,IAAAiU,EAAAtc,EAAAjE,GAEAugB,EAAAjU,IACAA,IAGA,OAAAA,GAMA,IAHAulB,EAAAla,OAAA,EAAAka,EAAA3xB,QAGAF,EAAA,EAAAoW,EAAA8b,EAAAhyB,OAAmCF,EAAAoW,EAAUpW,IAC7C6xB,EAAAttB,KAAA,IAKA,IAAAvE,EAAA,EAAAoW,EAAA8b,EAAAhyB,OAAmCF,EAAAoW,EAAUpW,IAO7C,IANAwS,EAAA0f,EAAAlyB,GACA,EAGA8xB,EAAAtf,EAAAoY,WAEAkH,GAAA,CACA,SAAAA,EAAApsB,SAAAyO,eAAA,MAAA2d,EAAApsB,SAAAyO,cAgBA,IAdA8Y,EAAA,EAAA6E,EAAAtb,aAAA,WACAwW,EAAA,EAAA8E,EAAAtb,aAAA,WACAyW,KAAA,IAAAA,GAAA,IAAAA,IAAA,EACAD,KAAA,IAAAA,GAAA,IAAAA,IAAA,EAKAgF,EAAAG,EAAAN,EAAA7xB,EAhBA,GAmBAiyB,EAAA,IAAAhF,EAGA8E,EAAA,EAAqBA,EAAA9E,EAAc8E,IACnC,IAAAxR,EAAA,EAAuBA,EAAAyM,EAAczM,IACrCsR,EAAA7xB,EAAAugB,GAAAyR,EAAAD,GAAA,CACA7lB,KAAA4lB,EACAM,OAAAH,GAEAJ,EAAA7xB,EAAAugB,GAAA/N,MAKAsf,IAAAvG,aAcA,SAAA5P,GAAA9D,EAAAwa,EAAAR,GACA,IAAAS,EAAA,GAEAT,IACAA,EAAAha,EAAA6D,SAEA2W,GAGA5W,GAFAoW,EAAA,GAEAQ,IAIA,QAAAryB,EAAA,EAAAoW,EAAAyb,EAAA3xB,OAA0CF,EAAAoW,EAAUpW,IACpD,QAAAsM,EAAA,EAAA4b,EAAA2J,EAAA7xB,GAAAE,OAA+CoM,EAAA4b,EAAU5b,KACzDulB,EAAA7xB,GAAAsM,GAAA8lB,QAAAE,EAAAhmB,IAAAuL,EAAA0a,gBACAD,EAAAhmB,GAAAulB,EAAA7xB,GAAAsM,GAAAJ,MAKA,OAAAomB,EAaA,SAAAE,GAAA3a,EAAAxU,EAAAtG,GAMA,GAJAggB,GAAAlF,EAAA,iCAAAxU,IAIAA,GAAA5G,EAAA6U,QAAAjO,GAAA,CACA,IAAA2W,EAAA,GACAyY,EAAA,aACAh2B,EAAAuJ,KAAA3C,EAAA,SAAA4C,EAAAiD,GACA,IAAAjG,EAAAiG,EAAA3J,KAAA0D,MAAAwvB,GAEA,GAAAxvB,EAAA,CAEA,IAAA1D,EAAA0D,EAAA,GAEA+W,EAAAza,KACAya,EAAAza,GAAA,IAGAya,EAAAza,GAAAgF,KAAA2E,EAAAhD,YAEA8T,EAAA9Q,EAAA3J,MAAA2J,EAAAhD,QAGA7C,EAAA2W,EAGA,IAAA0Y,EACAtY,EAAAvC,EAAAuC,KACAuY,EAAA9a,EAAAN,UAEA1E,EAAA,SAAA0H,GACAwC,GAAAlF,EAAA,YAAAA,EAAA0C,EAAA1C,EAAA+a,QAEA71B,EAAAwd,IAGA,GAAA9d,EAAAsR,cAAAqM,MAAA/W,KAAA,CAEA,IAAAwvB,EAAA,oBADAH,EAAAtY,EAAA/W,MACAqvB,EAAArvB,EAAAwU,GACA6a,EAGArvB,EAAA,oBAAAqvB,GAAAG,IAAAp2B,EAAAsa,QAAA,EAAA1T,EAAAwvB,UAGAzY,EAAA/W,KAGA,IAAAyvB,EAAA,CACAzvB,OACAiX,QAAA,SAAAC,GACA,IAAArY,EAAAqY,EAAArY,OAAAqY,EAAAwY,OAEA7wB,GACAsV,GAAAK,EAAA,EAAA3V,GAGA2V,EAAA0C,OACA1H,EAAA0H,IAEAF,SAAA,OACAuN,OAAA,EACA1oB,KAAA2Y,EAAAmb,cACA9wB,MAAA,SAAA+wB,EAAAC,EAAAC,GACA,IAAAC,EAAArW,GAAAlF,EAAA,YAAAA,EAAA,KAAAA,EAAA+a,SAEA,IAAAn2B,EAAAue,SAAA,EAAAoY,KACA,eAAAF,EACA1b,GAAAK,EAAA,6BACW,IAAAob,EAAA1yB,YACXiX,GAAAK,EAAA,mBAIAoW,GAAApW,GAAA,KAIAA,EAAAwb,UAAAhwB,EAEA0Z,GAAAlF,EAAA,eAAAA,EAAAxU,IAEAwU,EAAAyb,aAEAzb,EAAAyb,aAAAlzB,KAAAuyB,EAAA9a,EAAA0b,YAAA92B,EAAAuS,IAAA3L,EAAA,SAAA6F,EAAAjD,GAEA,OACA1G,KAAA0G,EACAC,MAAAgD,KAEO2J,EAAAgF,GACFA,EAAA0b,aAAA,kBAAAnZ,EAELvC,EAAA+a,MAAAn2B,EAAA2d,KAAA3d,EAAAsa,OAAA+b,EAAA,CACA1xB,IAAAgZ,GAAAvC,EAAA0b,eAEK,oBAAAnZ,EAELvC,EAAA+a,MAAAxY,EAAAha,KAAAuyB,EAAAtvB,EAAAwP,EAAAgF,IAGAA,EAAA+a,MAAAn2B,EAAA2d,KAAA3d,EAAAsa,OAAA+b,EAAA1Y,IAEAA,EAAA/W,KAAAqvB,GAWA,SAAAvE,GAAApc,GACA,OAAAA,EAAAyhB,eACAzhB,EAAAoX,QAEA8E,GAAAlc,GAAA,GAEAygB,GAAAzgB,EAAA0hB,GAAA1hB,GAAA,SAAAwI,GACAmZ,GAAA3hB,EAAAwI,MAGA,GAkBA,SAAAkZ,GAAA1hB,GACA,IAKA/R,EAEA2zB,EACAhgB,EACAigB,EATA/hB,EAAAE,EAAA6J,UACAiY,EAAAhiB,EAAA3R,OACAic,EAAApK,EAAAuG,UACAwb,EAAA/hB,EAAAwd,gBACAwE,EAAAhiB,EAAA6S,gBAEAvhB,EAAA,GAIAuD,EAAAgW,GAAA7K,GACAiiB,EAAAjiB,EAAA8H,eACAoa,GAAA,IAAA9X,EAAA0U,UAAA9e,EAAAmiB,iBAAA,EAEAC,EAAA,SAAA50B,EAAA2G,GACA7C,EAAAkB,KAAA,CACAhF,OACA2G,WAKAiuB,EAAA,QAAApiB,EAAAoX,OACAgL,EAAA,WAAAN,GACAM,EAAA,WAAAxU,EAAA9N,EAAA,SAAA7N,KAAA,MACAmwB,EAAA,gBAAAH,GACAG,EAAA,iBAAAF,GAEA,IAAAzsB,EAAA,CACAgK,KAAAO,EAAAoX,MACAtX,QAAA,GACAyD,MAAA,GACA2K,MAAA+T,EACA9zB,OAAA+zB,EACAvgB,OAAA,CACAxN,MAAA4tB,EAAAM,QACAC,MAAAP,EAAAxgB,SAIA,IAAAtT,EAAA,EAAeA,EAAA6zB,EAAiB7zB,IAChC2T,EAAA9B,EAAA7R,GACA4zB,EAAAG,EAAA/zB,GACA2zB,EAAA,mBAAAhgB,EAAAgC,MAAA,WAAAhC,EAAAgC,MACAnO,EAAAqK,QAAAtN,KAAA,CACAlB,KAAAswB,EACAp0B,KAAAoU,EAAA2gB,MACAC,WAAA5gB,EAAA6gB,YACAC,UAAA9gB,EAAAoS,UACArS,OAAA,CACAxN,MAAA0tB,EAAAQ,QACAC,MAAAT,EAAAtgB,UAGA6gB,EAAA,aAAAn0B,EAAA2zB,GAEAxX,EAAAiT,UACA+E,EAAA,WAAAn0B,EAAA4zB,EAAAQ,SACAD,EAAA,UAAAn0B,EAAA4zB,EAAAtgB,QACA6gB,EAAA,eAAAn0B,EAAA2T,EAAA6gB,cAGArY,EAAAM,OACA0X,EAAA,aAAAn0B,EAAA2T,EAAAoS,WAIA5J,EAAAiT,UACA+E,EAAA,UAAAL,EAAAM,SACAD,EAAA,SAAAL,EAAAxgB,SAGA6I,EAAAM,QACAhgB,EAAAuJ,KAAAY,EAAA,SAAA5G,EAAAkJ,GACA1B,EAAA8N,MAAA/Q,KAAA,CACAoP,OAAAzK,EAAA3C,IACAuW,IAAA5T,EAAA4T,MAEAqX,EAAA,YAAAn0B,EAAAkJ,EAAA3C,KACA4tB,EAAA,YAAAn0B,EAAAkJ,EAAA4T,OAEAqX,EAAA,eAAAvtB,EAAA1G,SAKA,IAAAw0B,EAAA53B,EAAA2K,IAAAitB,OAAAta,KAEA,cAAAsa,EACA3iB,EAAAwhB,YAAAlwB,EAAAmE,EAKAktB,EAAArxB,EAAAmE,EAeA,SAAAksB,GAAA3hB,EAAAwI,GAGA,IAAAoa,EAAA,SAAAnS,EAAAoS,GACA,OAAAra,EAAAiI,KAAAhmB,EAAA+d,EAAAiI,GAAAjI,EAAAqa,IAGAvxB,EAAAwxB,GAAA9iB,EAAAwI,GAEA/I,EAAAmjB,EAAA,gBACAG,EAAAH,EAAA,gCACAI,EAAAJ,EAAA,0CAEA,GAAAnjB,EAAA,CAEA,KAAAA,EAAAO,EAAAoX,MACA,OAGApX,EAAAoX,MAAA,EAAA3X,EAGA6Y,EAAAtY,GAEAA,EAAAmI,eAAA2E,SAAAiW,EAAA,IACA/iB,EAAAkI,iBAAA4E,SAAAkW,EAAA,IAEA,QAAA/0B,EAAA,EAAAmE,EAAAd,EAAAnD,OAAsCF,EAAAmE,EAASnE,IAC/C4d,EAAA7L,EAAA1O,EAAArD,IAGA+R,EAAA+L,UAAA/L,EAAAgM,gBAAA1C,QACAtJ,EAAAyhB,cAAA,EAEAnG,GAAAtb,GAEAA,EAAAijB,gBACAC,GAAAljB,EAAAwI,GAGAxI,EAAAyhB,cAAA,EAEAvF,GAAAlc,GAAA,GAYA,SAAA8iB,GAAAhd,EAAA0C,GACA,IAAA2a,EAAAz4B,EAAAsR,cAAA8J,EAAAuC,OAAAvC,EAAAuC,KAAA8a,UAAA14B,EAAAqb,EAAAuC,KAAA8a,QAAArd,EAAAsd,cAIA,eAAAD,EACA3a,EAAAoD,QAAApD,EAAA2a,GAGA,KAAAA,EAAA9b,EAAA8b,EAAA9b,CAAAmB,KAUA,SAAAyW,GAAAjf,GACA,IAAAyH,EAAAzH,EAAAwH,SACA6b,EAAArjB,EAAA0F,SACA4d,EAAAtjB,EAAAmG,UACAod,EAAAvjB,EAAAwd,gBACApT,EAAApK,EAAA4f,YACA4D,EAAA,+BAAA/b,EAAAgc,aAAA,MACAhxB,EAAA6wB,EAAAjB,QACA5vB,IAAAvB,MAAA,WAAAuB,EAAAlD,QAAA,UAAAi0B,GAAA/wB,EAAA+wB,EACA,IAAArZ,EAAAzf,EAAA,UACAib,GAAAyE,EAAAsZ,EAAA,KAAAL,EAAA,UACAxG,MAAApV,EAAAkc,UACK7rB,OAAApN,EAAA,YAAAoN,OAAArF,IAELmxB,EAAA,WAEAxZ,EAAAsZ,EAAA,IACAvsB,EAAAvJ,KAAAuG,MAAAvG,KAAAuG,MAAA,GAIAgD,GAAAosB,EAAAlB,UACA9E,GAAAvd,EAAA,CACAqiB,QAAAlrB,EACAoK,OAAAgiB,EAAAhiB,OACAC,OAAA+hB,EAAA/hB,OACAE,iBAAA6hB,EAAA7hB,mBAIA1B,EAAA8H,eAAA,EAEAwT,GAAAtb,KAIA6jB,EAAA,OAAA7jB,EAAA6jB,YAAA7jB,EAAA6jB,YAAA,QAAA3Y,GAAAlL,GAAA,MACA8jB,EAAAp5B,EAAA,QAAAyf,GAAAhT,IAAAosB,EAAAlB,SAAAtuB,KAAA,cAAAuvB,EAAAS,oBAAA7rB,GAAA,8CAAA2rB,EAAAG,GAAAJ,EAAAC,GAAAD,GAAA1rB,GAAA,uBAAAnC,GAEA,OAAAA,EAAAoC,QACA,WAEKpE,KAAA,gBAAAsvB,GAaL,OAXA34B,EAAAsV,EAAAkF,QAAAhN,GAAA,wBAAA+rB,EAAA9xB,GACA,GAAA6N,IAAA7N,EAGA,IACA2xB,EAAA,KAAAl5B,EAAAs5B,eACAJ,EAAA3sB,IAAAosB,EAAAlB,SAES,MAAAtsB,OAGToU,EAAA,GAWA,SAAAoT,GAAAzX,EAAAqe,EAAAC,GACA,IAAAC,EAAAve,EAAA0X,gBACA8G,EAAAxe,EAAA+M,gBAEA0R,EAAA,SAAAC,GAEAH,EAAAhC,QAAAmC,EAAAnC,QACAgC,EAAA9iB,OAAAijB,EAAAjjB,OACA8iB,EAAA7iB,OAAAgjB,EAAAhjB,OACA6iB,EAAA3iB,iBAAA8iB,EAAA9iB,kBAGA+iB,EAAA,SAAA9V,GAEA,OAAAA,EAAA+V,eAAAj6B,GAAAkkB,EAAA+V,aAAA/V,EAAApN,QASA,GAJAmU,EAAA5P,GAIA,OAAAoF,GAAApF,GAAA,CAEA6e,GAAA7e,EAAAqe,EAAA9B,QAAA+B,EAAAK,EAAAN,KAAA3iB,OAAA2iB,EAAAziB,kBAEA6iB,EAAAJ,GAGA,QAAAl2B,EAAA,EAAqBA,EAAAq2B,EAAAn2B,OAAyBF,IAC9C22B,GAAA9e,EAAAwe,EAAAr2B,GAAAo0B,QAAAp0B,EAAAw2B,EAAAH,EAAAr2B,IAAAq2B,EAAAr2B,GAAAuT,OAAA8iB,EAAAr2B,GAAAyT,kBAKAmjB,GAAA/e,QAEAye,EAAAJ,GAKAre,EAAAoX,WAAA,EAEAlS,GAAAlF,EAAA,eAAAA,IASA,SAAA+e,GAAA7kB,GAKA,IAJA,IAEAhG,EAAAkd,EAFA4N,EAAA/5B,EAAA2K,IAAAiM,OACAojB,EAAA/kB,EAAA+L,UAGA9d,EAAA,EAAAmE,EAAA0yB,EAAA32B,OAAyCF,EAAAmE,EAASnE,IAAA,CAGlD,IAFA,IAAAyE,EAAA,GAEA6H,EAAA,EAAAC,EAAAuqB,EAAA52B,OAA+CoM,EAAAC,EAASD,IACxD2c,EAAA6N,EAAAxqB,GACAP,EAAAgG,EAAAe,OAAAmW,GAEA4N,EAAA72B,GAAA+R,EAAAhG,EAAAgf,aAAA9B,EAAAld,EAAA4c,OAAArc,IACA7H,EAAAF,KAAA0kB,GAMA6N,EAAA52B,OAAA,EACAzD,EAAAs6B,MAAAD,EAAAryB,IAeA,SAAAkyB,GAAA5kB,EAAAilB,EAAA9N,EAAAmL,EAAA4C,EAAAC,GACA,QAAAF,EAAA,CAUA,IANA,IAAA3zB,EACAyc,EAAA,GACAqX,EAAAplB,EAAA+L,UAEAsZ,EAAAC,GAAAL,EAAA3C,EAAA4C,EAAAC,GAEAl3B,EAAA,EAAmBA,EAAAm3B,EAAAj3B,OAAoBF,IACvCqD,EAAA0O,EAAAe,OAAAqkB,EAAAn3B,IAAA+qB,aAAA7B,GAEAkO,EAAAz5B,KAAA0F,IACAyc,EAAAvb,KAAA4yB,EAAAn3B,IAIA+R,EAAA+L,UAAAgC,GAcA,SAAA4W,GAAA3kB,EAAAwjB,EAAA31B,EAAAy0B,EAAA4C,EAAAC,GACA,IAIAC,EAAAG,EAAAt3B,EAJAo3B,EAAAC,GAAA9B,EAAAlB,EAAA4C,EAAAC,GAEAK,EAAAxlB,EAAAwd,gBAAA6E,QACAoD,EAAAzlB,EAAAgM,gBAEA0Z,EAAA,GASA,GAPA,IAAA36B,EAAA2K,IAAAiM,OAAAxT,SACAN,GAAA,GAIA03B,EAAAI,GAAA3lB,GAEAwjB,EAAAr1B,QAAA,EACA6R,EAAA+L,UAAA0Z,EAAAnc,YACK,CAWL,KATAic,GAAA13B,GAAA23B,EAAAr3B,OAAAq1B,EAAAr1B,QAAA,IAAAq1B,EAAA5wB,QAAA4yB,IAAAxlB,EAAA2K,WAGA3K,EAAA+L,UAAA0Z,EAAAnc,SAIA8b,EAAAplB,EAAA+L,UAEA9d,EAAA,EAAiBA,EAAAm3B,EAAAj3B,OAAoBF,IACrCo3B,EAAAz5B,KAAAoU,EAAAe,OAAAqkB,EAAAn3B,IAAA23B,cACAF,EAAAlzB,KAAA4yB,EAAAn3B,IAIA+R,EAAA+L,UAAA2Z,GAcA,SAAAJ,GAAA3jB,EAAA2gB,EAAA4C,EAAAC,GAGA,GAFAxjB,EAAA2gB,EAAA3gB,EAAAyL,GAAAzL,GAEAujB,EAAA,CAQA,IAAAhzB,EAAAxH,EAAAuS,IAAA0E,EAAAzQ,MAAA,iCAAA20B,GACA,SAAAA,EAAA7W,OAAA,IACA,IAAA8W,EAAAD,EAAA30B,MAAA,YACA20B,EAAAC,IAAA,GAAAD,EAGA,OAAAA,EAAAt2B,QAAA,UAEAoS,EAAA,UAAAzP,EAAAD,KAAA,kBAGA,WAAAF,OAAA4P,EAAAwjB,EAAA,QAUA,IAAA/X,GAAAriB,EAAA6kB,KAAAU,YACAyV,GAAAr7B,EAAA,YAEAs7B,GAAAD,GAAAE,cAAAx7B,EAGA,SAAAk7B,GAAA3lB,GACA,IACA4B,EACA3T,EAAAsM,EAAAnI,EAAAoI,EAAA0rB,EAAA3O,EAAAvd,EAFA8F,EAAAE,EAAA6J,UAGAsc,EAAAp7B,EAAA2K,IAAAvI,KAAAwU,OACAykB,GAAA,EAEA,IAAAn4B,EAAA,EAAAmE,EAAA4N,EAAAe,OAAA5S,OAA6CF,EAAAmE,EAASnE,IAGtD,KAFA+L,EAAAgG,EAAAe,OAAA9S,IAEA+qB,aAAA,CAGA,IAFAkN,EAAA,GAEA3rB,EAAA,EAAAC,EAAAsF,EAAA3R,OAAyCoM,EAAAC,EAASD,KAClDqH,EAAA9B,EAAAvF,IAEAkoB,aACAlL,EAAAvB,EAAAhW,EAAA/R,EAAAsM,EAAA,UAEA4rB,EAAAvkB,EAAAsR,SACAqE,EAAA4O,EAAAvkB,EAAAsR,OAAAqE,IAKA,OAAAA,IACAA,EAAA,IAGA,kBAAAA,KAAA3iB,WACA2iB,IAAA3iB,aAGA2iB,EAAA,GAOAA,EAAA3kB,UAAA,IAAA2kB,EAAA3kB,QAAA,OACAmzB,GAAApT,UAAA4E,EACAA,EAAAyO,GAAAD,GAAAE,YAAAF,GAAAM,WAGA9O,EAAAhoB,UACAgoB,IAAAhoB,QAAA,eAGA22B,EAAA1zB,KAAA+kB,GAGAvd,EAAAgf,aAAAkN,EACAlsB,EAAA4rB,YAAAM,EAAAj0B,KAAA,MACAm0B,GAAA,EAIA,OAAAA,EAWA,SAAAE,GAAAxqB,GACA,OACA6F,OAAA7F,EAAAumB,QACA6C,MAAAppB,EAAA0F,OACA8gB,MAAAxmB,EAAAyF,OACA4jB,gBAAArpB,EAAA4F,kBAYA,SAAA6kB,GAAAzqB,GACA,OACAumB,QAAAvmB,EAAA6F,OACAH,OAAA1F,EAAAopB,MACA3jB,OAAAzF,EAAAwmB,MACA5gB,iBAAA5F,EAAAqpB,iBAWA,SAAA7F,GAAAtf,GACA,IAAAwmB,EAAAxmB,EAAA0F,SACAxD,EAAAlC,EAAA4f,YAAA3xB,EACA8E,EAAArI,EAAA,UACAmyB,MAAA7c,EAAAwH,SAAAif,MACA9gB,GAAAzD,EAAA,KAAAskB,EAAA,UAcA,OAXAtkB,IAEAlC,EAAA0mB,eAAAl0B,KAAA,CACAxH,GAAA27B,GACApE,MAAA,gBAEAxvB,EAAAgB,KAAA,iBAAAA,KAAA,sBAEArJ,EAAAsV,EAAAkF,QAAAnR,KAAA,mBAAAyyB,EAAA,UAGAzzB,EAAA,GASA,SAAA4zB,GAAA3mB,GAEA,IAAAkC,EAAAlC,EAAA4f,YAAA3xB,EAEA,OAAAiU,EAAA/T,OAAA,CAIA,IAAA8gB,EAAAjP,EAAAmG,UACA+H,EAAAlO,EAAA8H,eAAA,EACAqG,EAAAnO,EAAAic,eACAvnB,EAAAsL,EAAA4c,iBACAgK,EAAA5mB,EAAA+b,mBACAhO,EAAA6Y,EAAA3X,EAAAwX,MAAAxX,EAAA4X,WAEAD,IAAAlyB,IAEAqZ,GAAA,IAAAkB,EAAA6X,eAIA/Y,GAAAkB,EAAA8X,aACAhZ,EAAAiZ,GAAAhnB,EAAA+N,GACA,IAAAjN,EAAAmO,EAAAgY,eAEA,OAAAnmB,IACAiN,EAAAjN,EAAAzS,KAAA2R,EAAAwF,UAAAxF,EAAAkO,EAAAC,EAAAzZ,EAAAkyB,EAAA7Y,IAGArjB,EAAAwX,GAAAuL,KAAAM,IAGA,SAAAiZ,GAAAhnB,EAAAvN,GAGA,IAAAy0B,EAAAlnB,EAAAmnB,eACAjZ,EAAAlO,EAAA8H,eAAA,EACA3U,EAAA6M,EAAAmiB,gBACA5M,EAAAvV,EAAA+b,mBACAqL,GAAA,IAAAj0B,EACA,OAAAV,EAAAlD,QAAA,WAAA23B,EAAA74B,KAAA2R,EAAAkO,IAAA3e,QAAA,SAAA23B,EAAA74B,KAAA2R,IAAAic,iBAAA1sB,QAAA,SAAA23B,EAAA74B,KAAA2R,IAAA4c,mBAAArtB,QAAA,WAAA23B,EAAA74B,KAAA2R,EAAAuV,IAAAhmB,QAAA,UAAA23B,EAAA74B,KAAA2R,EAAAonB,EAAA,EAAAh0B,KAAAi0B,KAAAnZ,EAAA/a,KAAA5D,QAAA,WAAA23B,EAAA74B,KAAA2R,EAAAonB,EAAA,EAAAh0B,KAAAi0B,KAAA9R,EAAApiB,KASA,SAAAsV,GAAAzI,GACA,IAAA/R,EACAoW,EAGAzC,EAFA0lB,EAAAtnB,EAAA4H,kBACA9H,EAAAE,EAAA6J,UAEAO,EAAApK,EAAAuG,UACAghB,EAAAvnB,EAAAgI,cAIA,GAAAhI,EAAAiM,aAAA,CA6BA,IApBAyR,GAAA1d,GAIAqa,GAAAra,GAEA6a,GAAA7a,IAAA2J,UAEAkR,GAAA7a,IAAA2L,UAIAuQ,GAAAlc,GAAA,GAIAoK,EAAAyK,YACAC,GAAA9U,GAGA/R,EAAA,EAAAoW,EAAAvE,EAAA3R,OAAsCF,EAAAoW,EAAUpW,KAChD2T,EAAA9B,EAAA7R,IAEA8mB,SACAnT,EAAA0Q,IAAA/c,MAAAkB,MAAA+wB,GAAA5lB,EAAAmT,SAIA/J,GAAAhL,EAAA,gBAAAA,IAMAmd,GAAAnd,GAGA,IAAAmjB,EAAAjY,GAAAlL,IAEA,OAAAmjB,GAAAoE,KAEA,QAAApE,EACA1C,GAAAzgB,EAAA,YAAAwI,GACA,IAAAif,EAAA3E,GAAA9iB,EAAAwI,GAGA,IAAAva,EAAA,EAAqBA,EAAAw5B,EAAAt5B,OAAkBF,IACvC4d,EAAA7L,EAAAynB,EAAAx5B,IAMA+R,EAAA4H,kBAAA0f,EAEAnK,GAAAnd,GAEAkc,GAAAlc,GAAA,GAEAkjB,GAAAljB,EAAAwI,MAGA0T,GAAAlc,GAAA,GAEAkjB,GAAAljB,UAxEApT,WAAA,WACA6b,GAAAzI,IACO,KAmFP,SAAAkjB,GAAAljB,EAAAwI,GACAxI,EAAAijB,gBAAA,GAGAza,GAAAxI,EAAAsE,MAAAsH,SACAgJ,EAAA5U,GAGAgL,GAAAhL,EAAA,oBAAAA,EAAAwI,IAEAwC,GAAAhL,EAAA,yBAAAA,EAAAwI,IAGA,SAAAkf,GAAA1nB,EAAA7I,GACA,IAAAhE,EAAA2Z,SAAA3V,EAAA,IACA6I,EAAAmiB,gBAAAhvB,EAEAw0B,GAAA3nB,GAGAgL,GAAAhL,EAAA,eAAAA,EAAA7M,IAUA,SAAA6rB,GAAAhf,GAaA,IAZA,IAAAyH,EAAAzH,EAAAwH,SACA6b,EAAArjB,EAAA0F,SACAkiB,EAAA5nB,EAAAoG,YACAyhB,EAAAn9B,EAAA6U,QAAAqoB,EAAA,IACAE,EAAAD,EAAAD,EAAA,GAAAA,EACAtE,EAAAuE,EAAAD,EAAA,GAAAA,EACAnwB,EAAA/M,EAAA,aACA8C,KAAA61B,EAAA,UACA0E,gBAAA1E,EACAxG,MAAApV,EAAAugB,gBAGA/5B,EAAA,EAAAmE,EAAA01B,EAAA35B,OAAyCF,EAAAmE,EAASnE,IAClDwJ,EAAA,GAAAxJ,GAAA,IAAAg6B,OAAA,kBAAA3E,EAAAr1B,GAAA+R,EAAAmnB,eAAA7D,EAAAr1B,IAAAq1B,EAAAr1B,GAAA65B,EAAA75B,IAGA,IAAAi6B,EAAAx9B,EAAA,uBAAAgd,SAAAD,EAAA0gB,SAoBA,OAlBAnoB,EAAA4f,YAAAI,IACAkI,EAAA,GAAAviB,GAAA0d,EAAA,WAGA6E,EAAAl0B,WAAA8D,OAAAkI,EAAAmG,UAAAiiB,YAAA74B,QAAA,SAAAkI,EAAA,GAAA4wB,YAGA39B,EAAA,SAAAw9B,GAAA/wB,IAAA6I,EAAAmiB,iBAAAjqB,GAAA,qBAAAnC,GACA2xB,GAAA1nB,EAAAtV,EAAAkD,MAAAuJ,OAEAmkB,GAAAtb,KAGAtV,EAAAsV,EAAAkF,QAAAhN,GAAA,wBAAAnC,EAAA5D,EAAAgB,GACA6M,IAAA7N,GACAzH,EAAA,SAAAw9B,GAAA/wB,IAAAhE,KAGA+0B,EAAA,GAeA,SAAA3I,GAAAvf,GACA,IAAA7S,EAAA6S,EAAAsoB,gBACAC,EAAAx9B,EAAA2K,IAAA8yB,MAAAr7B,GACA01B,EAAA,oBAAA0F,EACAjpB,EAAA,SAAAU,GACAsb,GAAAtb,IAEAnR,EAAAnE,EAAA,UAAAgd,SAAA1H,EAAAwH,SAAAihB,QAAAt7B,GAAA,GACAid,EAAApK,EAAA4f,YAkCA,OAhCAiD,GACA0F,EAAA5I,OAAA3f,EAAAnR,EAAAyQ,GAKA8K,EAAAse,IACA75B,EAAA8W,GAAA3F,EAAA0F,SAAA,YACA1F,EAAA0mB,eAAAl0B,KAAA,CACAxH,GAAA,SAAAgV,GACA,GAAA6iB,EAAA,CACA,IAOA50B,EACAmE,EARA8b,EAAAlO,EAAA8H,eACA3U,EAAA6M,EAAAmiB,gBACAwG,EAAA3oB,EAAA+b,mBACAqL,GAAA,IAAAj0B,EACA4P,EAAAqkB,EAAA,EAAAh0B,KAAAi0B,KAAAnZ,EAAA/a,GACAy1B,EAAAxB,EAAA,EAAAh0B,KAAAi0B,KAAAsB,EAAAx1B,GACA5B,EAAAg3B,EAAAxlB,EAAA6lB,GAIA,IAAA36B,EAAA,EAAAmE,EAAAgY,EAAAse,EAAAv6B,OAAgDF,EAAAmE,EAASnE,IACzDwsB,GAAAza,EAAA,aAAAya,CAAAza,EAAAoK,EAAAse,EAAAz6B,KAAAsD,EAAAwR,EAAA6lB,QAGAL,EAAA5kB,SAAA3D,EAAAV,IAGAijB,MAAA,gBAIA1zB,EAaA,SAAAg6B,GAAA7oB,EAAAlK,EAAAwJ,GACA,IAAA4O,EAAAlO,EAAA8H,eACA3U,EAAA6M,EAAAmiB,gBACA2G,EAAA9oB,EAAA+b,mBAEA,IAAA+M,IAAA,IAAA31B,EACA+a,EAAA,EACK,kBAAApY,GACLoY,EAAApY,EAAA3C,GAEA21B,IACA5a,EAAA,GAEK,SAAApY,EACLoY,EAAA,EACK,YAAApY,GACLoY,EAAA/a,GAAA,EAAA+a,EAAA/a,EAAA,GAEA,IACA+a,EAAA,GAEK,QAAApY,EACLoY,EAAA/a,EAAA21B,IACA5a,GAAA/a,GAEK,QAAA2C,EACLoY,EAAA9a,KAAAC,OAAAy1B,EAAA,GAAA31B,KAEAsS,GAAAzF,EAAA,4BAAAlK,EAAA,GAGA,IAAAizB,EAAA/oB,EAAA8H,iBAAAoG,EAWA,OAVAlO,EAAA8H,eAAAoG,EAEA6a,IACA/d,GAAAhL,EAAA,aAAAA,IAEAV,GACAgc,GAAAtb,IAIA+oB,EAUA,SAAA5J,GAAAnf,GACA,OAAAtV,EAAA,UACAib,GAAA3F,EAAA4f,YAAA3lB,EAAA,KAAA+F,EAAA0F,SAAA,cACAmX,MAAA7c,EAAAwH,SAAAwhB,cACKvb,KAAAzN,EAAAmG,UAAA6iB,aAAApL,aAAA5d,EAAAkF,QAAA,GAUL,SAAAgX,GAAAlc,EAAA4C,GACA5C,EAAAuG,UAAA2Y,aACAx0B,EAAAsV,EAAA4f,YAAA3lB,GAAA1D,IAAA,UAAAqM,EAAA,gBAGAoI,GAAAhL,EAAA,mBAAAA,EAAA4C,IAUA,SAAAwc,GAAApf,GACA,IAAA1I,EAAA5M,EAAAsV,EAAAkF,QAEA5N,EAAAvD,KAAA,eAEA,IAAAkM,EAAAD,EAAAE,QAEA,QAAAD,EAAAE,IAAA,KAAAF,EAAAG,GACA,OAAAJ,EAAAkF,OAGA,IAAA0L,EAAA3Q,EAAAE,GACA8oB,EAAAhpB,EAAAG,GACAqH,EAAAzH,EAAAwH,SACA0hB,EAAA5xB,EAAAtD,SAAA,WACAm1B,EAAAD,EAAA/6B,OAAA+6B,EAAA,GAAA7d,aAAA,KACA+d,EAAA1+B,EAAA4M,EAAA,GAAA+xB,WAAA,IACAC,EAAA5+B,EAAA4M,EAAA,GAAA+xB,WAAA,IACA/2B,EAAAgF,EAAAtD,SAAA,SACAu1B,EAAA,SAEAC,EAAA,SAAAr3B,GACA,OAAAA,EAAAq1B,GAAAr1B,GAAA,MAGAG,EAAAnE,SACAmE,EAAA,MAoBA,IAAAm3B,EAAA/+B,EAAA6+B,EAAA,CACA1M,MAAApV,EAAAiiB,iBACK5xB,OAAApN,EAAA6+B,EAAA,CACL1M,MAAApV,EAAAkiB,cACKpzB,IAAA,CACLG,SAAA,SACAC,SAAA,WACAizB,OAAA,EACAnzB,MAAAma,EAAA4Y,EAAA5Y,GAAA,SACK9Y,OAAApN,EAAA6+B,EAAA,CACL1M,MAAApV,EAAAoiB,mBACKtzB,IAAA,CACLuzB,aAAA,cACArzB,MAAAwJ,EAAA8pB,SAAA,SACKjyB,OAAAsxB,EAAAY,WAAA,MAAAzzB,IAAA,iBAAAuB,OAAA,QAAAqxB,EAAAD,EAAA,MAAApxB,OAAAR,EAAAtD,SAAA,aAAA8D,OAAApN,EAAA6+B,EAAA,CACL1M,MAAApV,EAAAwiB,cACK1zB,IAAA,CACLI,SAAA,WACAD,SAAA,OACAD,MAAA+yB,EAAA5Y,KACK9Y,OAAAR,IAELhF,GACAm3B,EAAA3xB,OAAApN,EAAA6+B,EAAA,CACA1M,MAAApV,EAAAyiB,cACO3zB,IAAA,CACPG,SAAA,SACAkzB,OAAA,EACAnzB,MAAAma,EAAA4Y,EAAA5Y,GAAA,SACO9Y,OAAApN,EAAA6+B,EAAA,CACP1M,MAAApV,EAAA0iB,mBACOryB,OAAAwxB,EAAAU,WAAA,MAAAzzB,IAAA,iBAAAuB,OAAA,WAAAqxB,EAAAD,EAAA,MAAApxB,OAAAR,EAAAtD,SAAA,aAGP,IAAAA,EAAAy1B,EAAAz1B,WACAo2B,EAAAp2B,EAAA,GACAq2B,EAAAr2B,EAAA,GACAs2B,EAAAh4B,EAAA0B,EAAA,QAsBA,OApBA4c,GACAlmB,EAAA2/B,GAAAnyB,GAAA,qBAAAnC,GACA,IAAAqb,EAAAxjB,KAAAwjB,WACAgZ,EAAAhZ,aAEA9e,IACAg4B,EAAAlZ,gBAKA1mB,EAAA2/B,GAAA9zB,IAAA0yB,GAAAhpB,EAAAsqB,UAAA,sBAAAtB,GACAjpB,EAAAwqB,YAAAJ,EACApqB,EAAAyqB,YAAAJ,EACArqB,EAAA0qB,YAAAJ,EAEAtqB,EAAA0mB,eAAAl0B,KAAA,CACAxH,GAAAqV,GACAkiB,MAAA,cAEAkH,EAAA,GAkBA,SAAAppB,GAAAL,GAGA,IAwBA2qB,EACAC,EACAC,EACAC,EACAC,EACAC,EAKApY,EACAqY,EACAC,EApCAjrB,EAAAD,EAAAE,QACA0Q,EAAA3Q,EAAAE,GACAgrB,EAAAlrB,EAAA8pB,QACAd,EAAAhpB,EAAAG,GACAmR,EAAAtR,EAAAgS,UACAmZ,EAAA1gC,EAAAsV,EAAAwqB,aACAa,EAAAD,EAAA,GAAA71B,MACA+1B,EAAAF,EAAAp3B,SAAA,OACAu3B,EAAAD,EAAA,GAAA/1B,MACAi2B,EAAAF,EAAAt3B,SAAA,SACAy3B,EAAAzrB,EAAAyqB,YACAiB,EAAAhhC,EAAA+gC,GACAE,EAAAF,EAAAl2B,MACAq2B,EAAAlhC,EAAAsV,EAAA0qB,aACAmB,EAAAD,EAAA53B,SAAA,OACA83B,EAAAD,EAAA73B,SAAA,SACA3B,EAAA3H,EAAAsV,EAAAmF,QACA7N,EAAA5M,EAAAsV,EAAAkF,QACA6mB,EAAAz0B,EAAA,GACA00B,EAAAD,EAAAx2B,MACAjD,EAAA0N,EAAAqF,OAAA3a,EAAAsV,EAAAqF,QAAA,KACA8L,EAAAnR,EAAAgS,SACAia,EAAA9a,EAAAO,gBACAwa,EAAAte,EAAA5N,EAAA6J,UAAA,OAOAsiB,EAAA,GACAC,EAAA,GACAC,EAAA,GACAC,EAAA,GAIAC,EAAA,SAAAC,GACA,IAAAj3B,EAAAi3B,EAAAj3B,MACAA,EAAAk3B,WAAA,IACAl3B,EAAAm3B,cAAA,IACAn3B,EAAAo3B,eAAA,IACAp3B,EAAAq3B,kBAAA,IACAr3B,EAAAiB,OAAA,GAMAq2B,EAAApB,EAAAqB,aAAArB,EAAAsB,aAEA,GAAA/sB,EAAA6sB,kBAAA7sB,EAAA6sB,eAAApiC,EAKA,OAJAuV,EAAA6sB,oBAEAjY,EAAA5U,GAIAA,EAAA6sB,eAQAv1B,EAAAtD,SAAA,gBAAAhH,SAEAsF,IACA04B,EAAA14B,EAAA06B,QAAAC,UAAA31B,GACAszB,EAAAt4B,EAAAyW,KAAA,MAEA+hB,EAAAE,EAAAjiB,KAAA,OAIAgiB,EAAA14B,EAAA26B,QAAAC,UAAA31B,GACAqzB,EAAAt4B,EAAA0W,KAAA,MAEA8hB,EAAAE,EAAAhiB,KAAA,MACAgiB,EAAAhiB,KAAA,UAAAihB,WAAA,YAQApZ,IACA+a,EAAAl1B,MAAA,OACA20B,EAAA,GAAA71B,MAAAkB,MAAA,QAGA/L,EAAAuJ,KAAA2V,GAAA5J,EAAA+qB,GAAA,SAAA98B,EAAAib,GACA0J,EAAAoC,EAAAhV,EAAA/R,GACAib,EAAA3T,MAAAkB,MAAAuJ,EAAA6J,UAAA+I,GAAAmC,SAGAziB,GACA46B,GAAA,SAAAn6B,GACAA,EAAAwC,MAAAkB,MAAA,IACOq0B,GAIPI,EAAA5zB,EAAA61B,aAEA,KAAAvc,GAEAob,EAAAv1B,MAAA,OAIAw1B,IAAA30B,EAAAyR,KAAA,SAAAvS,SAAAi1B,EAAA2B,cAAA,UAAA1B,EAAAn1B,IAAA,iBACAy1B,EAAAv1B,MAAA+wB,GAAAlwB,EAAA61B,aAAA5b,IAIA2Z,EAAA5zB,EAAA61B,cACK,KAAAhC,IAELa,EAAAv1B,MAAA+wB,GAAA2D,GAEAD,EAAA5zB,EAAA61B,cAMAD,GAAAX,EAAA1B,GAGAqC,GAAA,SAAAV,GACAH,EAAA75B,KAAAg6B,EAAA7Z,WACAwZ,EAAA35B,KAAAg1B,GAAA98B,EAAA8hC,GAAAj2B,IAAA,YACKs0B,GAGLqC,GAAA,SAAAG,EAAAp/B,IAGA,IAAAvD,EAAAue,QAAAokB,EAAAnB,KACAmB,EAAA93B,MAAAkB,MAAA01B,EAAAl+B,KAEK08B,GAELjgC,EAAAmgC,GAAAr0B,OAAA,GAGAlE,IACA46B,GAAAX,EAAAzB,GAEAoC,GAAA,SAAAV,GACAF,EAAA95B,KAAAg6B,EAAA7Z,WACAyZ,EAAA55B,KAAAg1B,GAAA98B,EAAA8hC,GAAAj2B,IAAA,YACOu0B,GAEPoC,GAAA,SAAAG,EAAAp/B,GACAo/B,EAAA93B,MAAAkB,MAAA21B,EAAAn+B,IACO28B,GAEPlgC,EAAAogC,GAAAt0B,OAAA,IAWA02B,GAAA,SAAAV,EAAAv+B,GACAu+B,EAAA7Z,UAAA,kCAAA0Z,EAAAp+B,GAAA,SACAu+B,EAAApwB,WAAA,GAAA7G,MAAAiB,OAAA,IACAg2B,EAAApwB,WAAA,GAAA7G,MAAAmB,SAAA,SACA81B,EAAAj3B,MAAAkB,MAAA01B,EAAAl+B,IACK48B,GAELv4B,GACA46B,GAAA,SAAAV,EAAAv+B,GACAu+B,EAAA7Z,UAAA,kCAAA2Z,EAAAr+B,GAAA,SACAu+B,EAAApwB,WAAA,GAAA7G,MAAAiB,OAAA,IACAg2B,EAAApwB,WAAA,GAAA7G,MAAAmB,SAAA,SACA81B,EAAAj3B,MAAAkB,MAAA21B,EAAAn+B,IACO68B,GAKPxzB,EAAA61B,aAAAjC,GAEAD,EAAAQ,EAAAqB,aAAArB,EAAA2B,cAAA,UAAA1B,EAAAn1B,IAAA,cAAA20B,EAAA3Z,EAAA2Z,EAEAe,IAAAR,EAAAqB,aAAArB,EAAA2B,cAAA,UAAA1B,EAAAn1B,IAAA,iBACAy1B,EAAAv1B,MAAA+wB,GAAAyD,EAAA1Z,IAIA,KAAAX,GAAA,KAAAua,GACA1lB,GAAAzF,EAAA,qCAGAirB,EAAA,OAIAU,EAAAl1B,MAAA+wB,GAAAyD,GACAI,EAAA50B,MAAA+wB,GAAAyD,GAEA34B,IACA0N,EAAA0qB,YAAAn1B,MAAAkB,MAAA+wB,GAAAyD,IAOAhC,GAKAgD,IACAN,EAAAn1B,OAAAgxB,GAAAuE,EAAAqB,aAAA7b,IAMA,IAAA+b,EAAAh2B,EAAA61B,aACA3B,EAAA,GAAAj2B,MAAAkB,MAAA+wB,GAAA8F,GACA/B,EAAA90B,MAAA+wB,GAAA8F,GAGA,IAAAC,EAAAj2B,EAAAd,SAAAi1B,EAAAsB,cAAA,UAAArB,EAAAn1B,IAAA,cACAi3B,EAAA,WAAArc,EAAAQ,eAAA,gBACA4Z,EAAAiC,GAAAD,EAAAhc,EAAA,WAEAjf,IACAw5B,EAAA,GAAAv2B,MAAAkB,MAAA+wB,GAAA8F,GACAzB,EAAA,GAAAt2B,MAAAkB,MAAA+wB,GAAA8F,GACAzB,EAAA,GAAAt2B,MAAAi4B,GAAAD,EAAAhc,EAAA,YAIAja,EAAAtD,SAAA,YAAA4pB,aAAAtmB,EAAAtD,SAAA,UAGA03B,EAAAzrB,UAGAD,EAAA2K,UAAA3K,EAAAkd,WAAAld,EAAAyd,YACAgO,EAAAgC,UAAA,GAaA,SAAAP,GAAAliC,EAAA0iC,EAAAC,GAMA,IALA,IAGAC,EAAAC,EAHAxrB,EAAA,EACApU,EAAA,EACAoW,EAAAqpB,EAAAv/B,OAGAF,EAAAoW,GAAA,CAIA,IAHAupB,EAAAF,EAAAz/B,GAAA4qB,WACAgV,EAAAF,IAAA1/B,GAAA4qB,WAAA,KAEA+U,GACA,IAAAA,EAAAE,WACAH,EACA3iC,EAAA4iC,EAAAC,EAAAxrB,GAEArX,EAAA4iC,EAAAvrB,GAGAA,KAGAurB,IAAApU,YACAqU,EAAAF,EAAAE,EAAArU,YAAA,KAGAvrB,KAIA,IAAA8/B,GAAA,SAOA,SAAAjZ,GAAAhP,GACA,IAaA7X,EACA2T,EACAosB,EAfA12B,EAAAwO,EAAAZ,OACApF,EAAAgG,EAAA+D,UACA5J,EAAA6F,EAAA5F,QACA+oB,EAAAhpB,EAAAG,GACAwQ,EAAA3Q,EAAAE,GACAgrB,EAAAlrB,EAAA8pB,QACAjI,EAAAhiB,EAAA3R,OACA8/B,EAAA9Y,EAAArP,EAAA,YACAooB,EAAAxjC,EAAA,KAAAob,EAAAX,QACAgpB,EAAA72B,EAAAmN,aAAA,SAEA2pB,EAAA92B,EAAA8N,WACAipB,GAAA,EAMAld,EAAArL,EAAAkM,SACAia,EAAA9a,EAAAO,gBAEA4c,EAAAh3B,EAAA/B,MAAAkB,MAQA,IANA63B,IAAA,IAAAA,EAAA17B,QAAA,OACAu7B,EAAAG,GAKArgC,EAAA,EAAeA,EAAAggC,EAAA9/B,OAA2BF,IAG1C,QAFA2T,EAAA9B,EAAAmuB,EAAAhgC,KAEA8mB,SACAnT,EAAAmT,OAAAwZ,GAAA3sB,EAAAoR,WAAAob,GACAC,GAAA,GAUA,GAAApC,IAAAoC,IAAAzd,IAAAqY,GAAAnH,GAAAxM,EAAAxP,IAAAgc,GAAAoM,EAAA//B,OACA,IAAAF,EAAA,EAAiBA,EAAA6zB,EAAiB7zB,IAAA,CAClC,IAAAkpB,EAAAnC,EAAAlP,EAAA7X,GAEA,OAAAkpB,IACArX,EAAAqX,GAAApC,OAAAyS,GAAA0G,EAAAllB,GAAA/a,GAAAwI,cAGK,CAKL,IAAA+3B,EAAA9jC,EAAA4M,GAAA01B,QACAz2B,IAAA,uBAAAyzB,WAAA,MAEAwE,EAAAzlB,KAAA,YAAA/b,SACA,IAAAgtB,EAAAtvB,EAAA,SAAA0M,SAAAo3B,EAAAzlB,KAAA,UAWA,IAPAylB,EAAAzlB,KAAA,gBAAA/b,SACAwhC,EAAA12B,OAAApN,EAAAob,EAAAX,QAAA6nB,SAAAl1B,OAAApN,EAAAob,EAAAT,QAAA2nB,SAEAwB,EAAAzlB,KAAA,sBAAAxS,IAAA,YAEA23B,EAAAtkB,GAAA9D,EAAA0oB,EAAAzlB,KAAA,aAEA9a,EAAA,EAAiBA,EAAAggC,EAAA9/B,OAA2BF,IAC5C2T,EAAA9B,EAAAmuB,EAAAhgC,IACAigC,EAAAjgC,GAAAsH,MAAAkB,MAAA,OAAAmL,EAAAoR,YAAA,KAAApR,EAAAoR,WAAAwU,GAAA5lB,EAAAoR,YAAA,GAIApR,EAAAoR,YAAApC,GACAlmB,EAAAwjC,EAAAjgC,IAAA6J,OAAApN,EAAA,UAAA6L,IAAA,CACAE,MAAAmL,EAAAoR,WACA7U,OAAA,EACAqvB,QAAA,EACA5D,OAAA,EACApzB,OAAA,KAMA,GAAAsP,EAAA/E,OAAA5S,OACA,IAAAF,EAAA,EAAmBA,EAAAggC,EAAA9/B,OAA2BF,IAC9C+/B,EAAAC,EAAAhgC,GACA2T,EAAA9B,EAAAkuB,GACAtjC,EAAA+jC,GAAA3oB,EAAAkoB,IAAAhB,OAAA,GAAAl1B,OAAA8J,EAAA8sB,iBAAAt3B,SAAA4iB,GAMAtvB,EAAA,SAAA8jC,GAAAxE,WAAA,QAMA,IAAA2E,EAAAjkC,EAAA,UAAA6L,IAAAqa,GAAAqY,EAAA,CACAtyB,SAAA,WACAC,IAAA,EACAC,KAAA,EACAL,OAAA,EACAo4B,MAAA,EACAl4B,SAAA,UACO,IAAKoB,OAAA02B,GAAAp3B,SAAAg3B,GAIZxd,GAAAua,EACAqD,EAAA/3B,MAAA00B,GACOva,GACP4d,EAAAj4B,IAAA,gBACAi4B,EAAAxE,WAAA,SAGAwE,EAAA/3B,QAAA23B,EAAA3c,aAAA0c,GACAK,EAAA/3B,MAAA23B,EAAA3c,cAEOwX,EACPuF,EAAA/3B,MAAA23B,EAAA3c,aACO0c,GACPK,EAAA/3B,MAAA03B,GASA,IAAAvH,EAAA,EAEA,IAAA34B,EAAA,EAAiBA,EAAAggC,EAAA9/B,OAA2BF,IAAA,CAC5C,IAAAkM,EAAAzP,EAAAwjC,EAAAjgC,IACA27B,EAAAzvB,EAAAgzB,aAAAhzB,EAAA1D,QAGAo4B,EAAA1d,EAAAW,UAAA1e,KAAAi0B,KAAA6G,EAAAjgC,GAAA8jB,wBAAAtb,OAAA0D,EAAAgzB,aAGAvG,GAAAiI,EAEA/uB,EAAAmuB,EAAAhgC,IAAA8mB,OAAAyS,GAAAqH,EAAAjF,GAGAtyB,EAAA/B,MAAAkB,MAAA+wB,GAAAZ,GAEA+H,EAAA3hC,SAWA,GAJAmhC,IACA72B,EAAA/B,MAAAkB,MAAA+wB,GAAA2G,KAGAA,GAAAvd,KAAA9K,EAAAgpB,SAAA,CACA,IAAAC,EAAA,WACArkC,EAAAC,GAAAuN,GAAA,aAAA4N,EAAAG,UAAA+d,GAAA,WACApP,EAAA9O,OAMAmmB,EACAr/B,WAAAmiC,EAAA,KAEAA,IAGAjpB,EAAAgpB,UAAA,GAaA,IAAA9K,GAAAj5B,EAAA6kB,KAAAC,SASA,SAAA0e,GAAA93B,EAAAooB,GACA,IAAApoB,EACA,SAGA,IAAA1D,EAAArI,EAAA,UAAA6L,IAAA,QAAAixB,GAAA/wB,IAAAW,SAAAynB,GAAAj0B,EAAA2H,MACA4E,EAAApE,EAAA,GAAAye,YAEA,OADAze,EAAA/F,SACAmK,EAWA,SAAAs3B,GAAAzuB,EAAAmX,GACA,IAAAvE,EAAAoc,GAAAhvB,EAAAmX,GAEA,GAAAvE,EAAA,EACA,YAGA,IAAAthB,EAAA0O,EAAAe,OAAA6R,GACA,OAAAthB,EAAAmP,IACAnP,EAAAwnB,QAAA3B,GAAAzsB,EAAA,SAAA+iB,KAAAuI,EAAAhW,EAAA4S,EAAAuE,EAAA,eAWA,SAAA6X,GAAAhvB,EAAAmX,GAKA,IAJA,IAAAhlB,EACAuC,GAAA,EACAu6B,GAAA,EAEAhhC,EAAA,EAAAmE,EAAA4N,EAAAe,OAAA5S,OAAiDF,EAAAmE,EAASnE,KAG1DkE,GADAA,GADAA,EAAA6jB,EAAAhW,EAAA/R,EAAAkpB,EAAA,eACA5nB,QAAAw+B,GAAA,KACAx+B,QAAA,UAA2B,MAE3BpB,OAAAuG,IACAA,EAAAvC,EAAAhE,OACA8gC,EAAAhhC,GAIA,OAAAghC,EAUA,SAAAzH,GAAAr1B,GACA,cAAAA,EACA,MAGA,iBAAAA,EACAA,EAAA,QAAAA,EAAA,KAIAA,EAAAjB,MAAA,OAAAiB,EAAA,KAAAA,EAGA,SAAA0Y,GAAA7K,GACA,IAAA/R,EAEAugB,EACA4H,EAIAnF,EACAhO,EACAiQ,EACAgc,EANAtkB,EAAA,GAEAf,EAAA7J,EAAA6J,UAKAslB,EAAAnvB,EAAAovB,eACAC,EAAA3kC,EAAAsR,cAAAmzB,GACAG,EAAA,GACA9vB,EAAA,SAAAtN,GACAA,EAAA/D,SAAAzD,EAAA6U,QAAArN,EAAA,IAEAo9B,EAAA98B,KAAAN,GAGAxH,EAAAs6B,MAAAsK,EAAAp9B,IAoBA,IAdAxH,EAAA6U,QAAA4vB,IACA3vB,EAAA2vB,GAGAE,GAAAF,EAAAI,KACA/vB,EAAA2vB,EAAAI,KAGA/vB,EAAAQ,EAAAsK,WAEA+kB,GAAAF,EAAAK,MACAhwB,EAAA2vB,EAAAK,MAGAvhC,EAAA,EAAeA,EAAAqhC,EAAAnhC,OAAuBF,IAItC,IAHAihC,EAAAI,EAAArhC,GAAA,GACAgjB,EAAApH,EAAAqlB,GAAAje,UAEAzC,EAAA,EAAA4H,EAAAnF,EAAA9iB,OAA0CqgB,EAAA4H,EAAU5H,IACpDvL,EAAAgO,EAAAzC,GACA0E,EAAArJ,EAAA5G,GAAAiQ,OAAA,SAEAoc,EAAArhC,GAAAwhC,OAAAhlC,IACA6kC,EAAArhC,GAAAwhC,KAAA/kC,EAAAue,QAAAqmB,EAAArhC,GAAA,GAAA4b,EAAA5G,GAAAuH,YAGAI,EAAApY,KAAA,CACAsP,IAAAotB,EACA16B,IAAAyO,EACA8H,IAAAukB,EAAArhC,GAAA,GACAoU,MAAAitB,EAAArhC,GAAAwhC,KACAtiC,KAAA+lB,EACAgU,UAAAn8B,EAAA2K,IAAAvI,KAAAoW,MAAA2P,EAAA,UAKA,OAAAtI,EAUA,SAAA0S,GAAAxX,GACA,IAAA7X,EACAmE,EACAiS,EAiBAqrB,EAEA9kB,EAZA+kB,EAAA,GACAC,EAAA7kC,EAAA2K,IAAAvI,KAAAoW,MACAxC,EAAA+E,EAAA/E,OAOA8uB,GANA/pB,EAAA+D,UAMA,GAEA4b,EAAA3f,EAAAkG,gBASA,IAJA0J,EAAA5P,GAEA8E,EAAAC,GAAA/E,GAEA7X,EAAA,EAAAmE,EAAAwY,EAAAzc,OAAmCF,EAAAmE,EAASnE,KAC5CyhC,EAAA9kB,EAAA3c,IAEAi5B,WACA2I,IAIAC,GAAAhqB,EAAA4pB,EAAAl7B,KAKA,UAAA0W,GAAApF,IAAA,IAAA8E,EAAAzc,OAAA,CAGA,IAAAF,EAAA,EAAAoW,EAAAohB,EAAAt3B,OAA8CF,EAAAoW,EAAUpW,IACxD0hC,EAAAlK,EAAAx3B,MAyBA4hC,IAAAjlB,EAAAzc,OAEAs3B,EAAA5wB,KAAA,SAAA3C,EAAA4C,GACA,IAAAi7B,EACAC,EACAxhB,EACA5iB,EACAiJ,EACA1B,EAAAyX,EAAAzc,OACA8hC,EAAAlvB,EAAA7O,GAAA6mB,WACAmX,EAAAnvB,EAAAjM,GAAAikB,WAEA,IAAAvK,EAAA,EAAqBA,EAAArb,EAASqb,IAM9B,GALA3Z,EAAA+V,EAAA4D,GACAuhB,EAAAE,EAAAp7B,EAAAL,KACAw7B,EAAAE,EAAAr7B,EAAAL,KAGA,KAFA5I,EAAAmkC,EAAAC,GAAA,EAAAD,EAAAC,EAAA,KAGA,cAAAn7B,EAAAkW,IAAAnf,KAMA,OAFAmkC,EAAAJ,EAAAz9B,GACA89B,EAAAL,EAAA76B,GACAi7B,EAAAC,GAAA,EAAAD,EAAAC,EAAA,MAMAvK,EAAA5wB,KAAA,SAAA3C,EAAA4C,GACA,IAAAi7B,EACAC,EACAxhB,EAEA5iB,EACAiJ,EACA7J,EACAmI,EAAAyX,EAAAzc,OACA8hC,EAAAlvB,EAAA7O,GAAA6mB,WACAmX,EAAAnvB,EAAAjM,GAAAikB,WAEA,IAAAvK,EAAA,EAAqBA,EAAArb,EAASqb,IAO9B,GANA3Z,EAAA+V,EAAA4D,GACAuhB,EAAAE,EAAAp7B,EAAAL,KACAw7B,EAAAE,EAAAr7B,EAAAL,KACAxJ,EAAA4kC,EAAA/6B,EAAA1H,KAAA,IAAA0H,EAAAkW,MAAA6kB,EAAA,UAAA/6B,EAAAkW,KAGA,KAFAnf,EAAAZ,EAAA+kC,EAAAC,IAGA,OAAApkC,EAMA,OAFAmkC,EAAAJ,EAAAz9B,GACA89B,EAAAL,EAAA76B,GACAi7B,EAAAC,GAAA,EAAAD,EAAAC,EAAA,MAOAlqB,EAAA6E,SAAA,EAGA,SAAAM,GAAAjL,GAUA,IATA,IAAAmwB,EACAC,EACAtwB,EAAAE,EAAA6J,UAEAe,EAAAC,GAAA7K,GAEAqwB,EAAArwB,EAAAmG,UAAAkqB,MAGApiC,EAAA,EAAAoW,EAAAvE,EAAA3R,OAA0CF,EAAAoW,EAAUpW,IAAA,CACpD,IAAAuG,EAAAsL,EAAA7R,GACAuc,EAAAhW,EAAAgW,UACAkI,EAAAle,EAAAke,OAAAnjB,QAAA,aACAwjB,EAAAve,EAAA8d,IAGAS,EAAArW,gBAAA,aAGAlI,EAAAwf,WACApJ,EAAAzc,OAAA,GAAAyc,EAAA,GAAApW,KAAAvG,GACA8kB,EAAAgH,aAAA,mBAAAnP,EAAA,GAAAG,IAAA,0BACAqlB,EAAA5lB,EAAAI,EAAA,GAAAvI,MAAA,IAAAmI,EAAA,IAEA4lB,EAAA5lB,EAAA,GAGA2lB,EAAAzd,GAAA,QAAA0d,EAAAC,EAAAC,eAAAD,EAAAE,kBAEAJ,EAAAzd,EAGAK,EAAAgH,aAAA,aAAAoW,IAeA,SAAAK,GAAAxwB,EAAAmX,EAAArf,EAAAgJ,GACA,IAGA2vB,EAHAj8B,EAAAwL,EAAA6J,UAAAsN,GACA5M,EAAAvK,EAAAsK,UACAE,EAAAhW,EAAAgW,UAGAkmB,EAAA,SAAAx+B,EAAAwE,GACA,IAAAkc,EAAA1gB,EAAAu9B,KAMA,OAJA7c,IAAAnoB,IACAmoB,EAAAloB,EAAAue,QAAA/W,EAAA,GAAAsY,IAGAoI,EAAA,EAAApI,EAAArc,OAAAykB,EAAA,EAAAlc,EAAA,QASA,GALA,kBAAA6T,EAAA,KACAA,EAAAvK,EAAAsK,UAAA,CAAAC,IAIAzS,GAAAkI,EAAAuG,UAAAoqB,WAAA,CAEA,IAAAC,EAAAlmC,EAAAue,QAAAkO,EAAAvJ,EAAArD,EAAA,OAEA,IAAAqmB,GAIA,QAFAH,EAAAC,EAAAnmB,EAAAqmB,IAAA,KAEA,IAAArmB,EAAApc,SACAsiC,EAAA,GAGA,OAAAA,EACAlmB,EAAA3E,OAAAgrB,EAAA,IAEArmB,EAAAqmB,GAAA,GAAApmB,EAAAimB,GACAlmB,EAAAqmB,GAAAnB,KAAAgB,KAIAlmB,EAAA/X,KAAA,CAAA2kB,EAAA3M,EAAA,OACAD,IAAApc,OAAA,GAAAshC,KAAA,QAEKllB,EAAApc,QAAAoc,EAAA,OAAA4M,GAELsZ,EAAAC,EAAAnmB,EAAA,IACAA,EAAApc,OAAA,EACAoc,EAAA,MAAAC,EAAAimB,GACAlmB,EAAA,GAAAklB,KAAAgB,IAGAlmB,EAAApc,OAAA,EACAoc,EAAA/X,KAAA,CAAA2kB,EAAA3M,EAAA,KACAD,EAAA,GAAAklB,KAAA,GAIAtS,GAAAnd,GAGA,mBAAAc,GACAA,EAAAd,GAaA,SAAAwa,GAAAxa,EAAA6wB,EAAA1Z,EAAArW,GACA,IAAAtM,EAAAwL,EAAA6J,UAAAsN,GAEA2Z,GAAAD,EAAA,GAA8B,SAAA96B,IAE9B,IAAAvB,EAAAwf,YAMAhU,EAAAuG,UAAA2Y,aACAhD,GAAAlc,GAAA,GAEApT,WAAA,WACA4jC,GAAAxwB,EAAAmX,EAAAphB,EAAAg7B,SAAAjwB,GAIA,QAAAoK,GAAAlL,IACAkc,GAAAlc,GAAA,IAES,IAETwwB,GAAAxwB,EAAAmX,EAAAphB,EAAAg7B,SAAAjwB,MAYA,SAAA2J,GAAAzK,GACA,IAMA/R,EAAAmE,EAAA+kB,EANA6Z,EAAAhxB,EAAAixB,UACAC,EAAAlxB,EAAAwH,SAAA2pB,YAEAt8B,EAAAgW,GAAA7K,GAEAoK,EAAApK,EAAAuG,UAGA,GAAA6D,EAAAM,OAAAN,EAAAgnB,aAAA,CAEA,IAAAnjC,EAAA,EAAAmE,EAAA4+B,EAAA7iC,OAAuCF,EAAAmE,EAASnE,IAChDkpB,EAAA6Z,EAAA/iC,GAAA6T,IAEApX,EAAAkjB,EAAA5N,EAAAe,OAAA,UAAAoW,IAAA/N,YAAA8nB,GAAAjjC,EAAA,EAAAA,EAAA,MAIA,IAAAA,EAAA,EAAAmE,EAAAyC,EAAA1G,OAAoCF,EAAAmE,EAASnE,IAC7CkpB,EAAAtiB,EAAA5G,GAAA6T,IACApX,EAAAkjB,EAAA5N,EAAAe,OAAA,UAAAoW,IAAAzP,SAAAwpB,GAAAjjC,EAAA,EAAAA,EAAA,MAIA+R,EAAAixB,UAAAp8B,EAKA,SAAAi7B,GAAA9vB,EAAA4S,GAEA,IAEAye,EAOAr3B,EAAAud,EATA3V,EAAA5B,EAAA6J,UAAA+I,GACA0e,EAAAvmC,EAAA2K,IAAA6N,MAAA3B,EAAA2vB,eAGAD,IACAD,EAAAC,EAAAjjC,KAAA2R,EAAAwF,UAAAxF,EAAA4S,EAAAwC,EAAApV,EAAA4S,KAOA,IAFA,IAAAsU,EAAAn8B,EAAA2K,IAAAvI,KAAAoW,MAAA3B,EAAAsR,MAAA,QAEAjlB,EAAA,EAAAmE,EAAA4N,EAAAe,OAAA5S,OAAiDF,EAAAmE,EAASnE,KAC1D+L,EAAAgG,EAAAe,OAAA9S,IAEA8qB,aACA/e,EAAA+e,WAAA,IAGA/e,EAAA+e,WAAAnG,KAAA0e,IACA/Z,EAAA+Z,EAAAD,EAAApjC,GACA+nB,EAAAhW,EAAA/R,EAAA2kB,EAAA,QACA5Y,EAAA+e,WAAAnG,GAAAsU,IAAA3P,MAWA,SAAApL,GAAAnM,GACA,GAAAA,EAAAuG,UAAA2F,aAAAlM,EAAAmc,YAAA,CAMA,IAAAqV,EAAA,CACAC,MAAA,IAAAvhB,KACAhC,MAAAlO,EAAA8H,eACA3Z,OAAA6R,EAAAmiB,gBACA5e,MAAA7Y,EAAAsa,QAAA,KAAAhF,EAAAsK,WACA3I,OAAA2kB,GAAAtmB,EAAAwd,iBACA1d,QAAApV,EAAAuS,IAAA+C,EAAA6J,UAAA,SAAArV,EAAAvG,GACA,OACAkV,QAAA3O,EAAAghB,SACA7T,OAAA2kB,GAAAtmB,EAAA6S,gBAAA5kB,QAKA+c,GAAAhL,EAAA,uCAAAA,EAAAwxB,IAEAxxB,EAAA0xB,YAAAF,EACAxxB,EAAA2xB,oBAAAtjC,KAAA2R,EAAAwF,UAAAxF,EAAAwxB,IAWA,SAAAplB,GAAApM,EAAAsE,EAAAxD,GACA,IAAA7S,EAAAmE,EACA0N,EAAAE,EAAA6J,UAEA+nB,EAAA,SAAAz/B,GACA,GAAAA,KAAAs/B,KAAA,CAOA,IAAAI,EAAA7mB,GAAAhL,EAAA,uCAAAA,EAAA7N,IAEA,QAAAzH,EAAAue,SAAA,EAAA4oB,GAAA,CAMA,IAAAC,EAAA9xB,EAAA+xB,eAEA,GAAAD,EAAA,GAAA3/B,EAAAs/B,MAAA,IAAAvhB,KAAA,IAAA4hB,EACAhxB,SAKA,GAAA3O,EAAA2N,WAAA3R,SAAAgE,EAAA2N,QAAA3R,OACA2S,QADA,CAiCA,GA3BAd,EAAAgyB,aAAAtnC,EAAAsa,QAAA,KAA+C7S,GAG/CA,EAAA+b,QAAAzjB,IACAuV,EAAA8H,eAAA3V,EAAA+b,MACAlO,EAAA4H,kBAAAzV,EAAA+b,OAGA/b,EAAAhE,SAAA1D,IACAuV,EAAAmiB,gBAAAhwB,EAAAhE,QAIAgE,EAAAoR,QAAA9Y,IACAuV,EAAAsK,UAAA,GACA5f,EAAAuJ,KAAA9B,EAAAoR,MAAA,SAAAtV,EAAAuG,GACAwL,EAAAsK,UAAA9X,KAAAgC,EAAA,IAAAsL,EAAA3R,OAAA,GAAAqG,EAAA,IAAAA,MAKArC,EAAAwP,SAAAlX,GACAC,EAAAsa,OAAAhF,EAAAwd,gBAAA+I,GAAAp0B,EAAAwP,SAKAxP,EAAA2N,QACA,IAAA7R,EAAA,EAAAmE,EAAAD,EAAA2N,QAAA3R,OAA2CF,EAAAmE,EAASnE,IAAA,CACpD,IAAAuG,EAAArC,EAAA2N,QAAA7R,GAEAuG,EAAA2O,UAAA1Y,IACAqV,EAAA7R,GAAAunB,SAAAhhB,EAAA2O,SAIA3O,EAAAmN,SAAAlX,GACAC,EAAAsa,OAAAhF,EAAA6S,gBAAA5kB,GAAAs4B,GAAA/xB,EAAAmN,SAKAqJ,GAAAhL,EAAA,+BAAAA,EAAA7N,IAEA2O,UA/DAA,SATAA,KA2EA,GAAAd,EAAAuG,UAAA2F,WAAA,CAKA,IAAAslB,EAAAxxB,EAAAiyB,oBAAA5jC,KAAA2R,EAAAwF,UAAAxF,EAAA4xB,GAEAJ,IAAA/mC,GACAmnC,EAAAJ,QAPA1wB,IAmBA,SAAA3B,GAAA7H,GACA,IAAA0I,EAAAjV,EAAAiV,SACA4S,EAAAloB,EAAAue,QAAA3R,EAAAsW,EAAA5N,EAAA,WACA,WAAA4S,EAAA5S,EAAA4S,GAAA,KAYA,SAAAnN,GAAAzF,EAAAkyB,EAAAC,EAAAC,GAOA,GANAD,EAAA,wBAAAnyB,EAAA,YAAAA,EAAA0F,SAAA,UAAAysB,EAEAC,IACAD,GAAA,gFAAAC,GAGAF,EAgBKvnC,EAAA0nC,iBAAAC,KACLD,QAAAC,IAAAH,OAjBA,CAEA,IAAAz8B,EAAA3K,EAAA2K,IACAvI,EAAAuI,EAAA68B,UAAA78B,EAAA88B,QAMA,GAJAxyB,GACAgL,GAAAhL,EAAA,cAAAA,EAAAoyB,EAAAD,IAGA,SAAAhlC,EACAslC,MAAAN,OACO,aAAAhlC,EACP,UAAAulC,MAAAP,GACO,mBAAAhlC,GACPA,EAAA6S,EAAAoyB,EAAAD,KAgBA,SAAA7rB,GAAA+a,EAAAvf,EAAAtU,EAAAmlC,GACAjoC,EAAA6U,QAAA/R,GACA9C,EAAAuJ,KAAAzG,EAAA,SAAAS,EAAAkJ,GACAzM,EAAA6U,QAAApI,GACAmP,GAAA+a,EAAAvf,EAAA3K,EAAA,GAAAA,EAAA,IAEAmP,GAAA+a,EAAAvf,EAAA3K,MAMAw7B,IAAAloC,IACAkoC,EAAAnlC,GAGAsU,EAAAtU,KAAA/C,IACA42B,EAAAsR,GAAA7wB,EAAAtU,KAsBA,SAAA+W,GAAAwJ,EAAA6kB,EAAAC,GACA,IAAA17B,EAEA,QAAA0W,KAAA+kB,EACAA,EAAAvgB,eAAAxE,KACA1W,EAAAy7B,EAAA/kB,GAEAnjB,EAAAsR,cAAA7E,IACAzM,EAAAsR,cAAA+R,EAAAF,MACAE,EAAAF,GAAA,IAGAnjB,EAAAsa,QAAA,EAAA+I,EAAAF,GAAA1W,IACS07B,GAAA,SAAAhlB,GAAA,WAAAA,GAAAnjB,EAAA6U,QAAApI,GACT4W,EAAAF,GAAA1W,EAAAmS,QAEAyE,EAAAF,GAAA1W,GAKA,OAAA4W,EAaA,SAAA+iB,GAAA/9B,EAAA2jB,EAAA1rB,GACAN,EAAAqI,GAAAmF,GAAA,WAAAwe,EAAA,SAAA3gB,GACArL,EAAAqI,GAAA+/B,OAEA9nC,EAAA+K,KACKmC,GAAA,cAAAwe,EAAA,SAAA3gB,GACL,KAAAA,EAAAg9B,QACAh9B,EAAAi9B,iBACAhoC,EAAA+K,MAEKmC,GAAA,4BAEL,WAcA,SAAAsO,GAAAV,EAAAmtB,EAAAjoC,EAAAu3B,GACAv3B,GACA8a,EAAAmtB,GAAAzgC,KAAA,CACAxH,KACAu3B,UAoBA,SAAAvX,GAAAhL,EAAAkzB,EAAAC,EAAAhjB,GACA,IAAAkR,EAAA,GAQA,GANA6R,IACA7R,EAAA32B,EAAAuS,IAAA+C,EAAAkzB,GAAA5pB,QAAA8pB,UAAA,SAAAj8B,EAAAlJ,GACA,OAAAkJ,EAAAnM,GAAAuT,MAAAyB,EAAAwF,UAAA2K,MAIA,OAAAgjB,EAAA,CACA,IAAAp9B,EAAArL,EAAA2oC,MAAAF,EAAA,OACAzoC,EAAAsV,EAAAkF,QAAAouB,QAAAv9B,EAAAoa,GACAkR,EAAA7uB,KAAAuD,EAAAzG,QAGA,OAAA+xB,EAGA,SAAAsG,GAAA3nB,GACA,IAAAkO,EAAAlO,EAAA8H,eACAqG,EAAAnO,EAAAic,eACA9oB,EAAA6M,EAAAmiB,gBAGAjU,GAAAC,IACAD,EAAAC,EAAAhb,GAIA+a,KAAA/a,IAEA,IAAAA,GAAA+a,EAAA,KACAA,EAAA,GAGAlO,EAAA8H,eAAAoG,EAGA,SAAAuM,GAAAza,EAAA7S,GACA,IAAAomC,EAAAvzB,EAAAuzB,SACAC,EAAAzoC,EAAA2K,IAAA69B,SAAApmC,GAEA,OAAAzC,EAAAsR,cAAAu3B,MAAApmC,GAGAqmC,EAAAD,EAAApmC,KAAAqmC,EAAAjoC,EACK,kBAAAgoC,GAGLC,EAAAD,IAIAC,EAAAjoC,EAYA,SAAA2f,GAAAlL,GACA,OAAAA,EAAAuG,UAAAsV,YACA,MACK7b,EAAAqI,MAAArI,EAAAwhB,YACL,OAGA,MAwCA,IAAAiS,GAAA,GAQAC,GAAAC,MAAA5jC,UA+GA4O,EAAA,SAAAi1B,EAAAtiC,GACA,KAAA1D,gBAAA+Q,GACA,WAAAA,EAAAi1B,EAAAtiC,GAGA,IAAA0O,EAAA,GAEA6zB,EAAA,SAAAllB,GACA,IAAAzc,EAjGA,SAAA4hC,GACA,IAAAlhB,EAAAmhB,EACA/zB,EAAAjV,EAAAiV,SACAg0B,EAAAtpC,EAAAuS,IAAA+C,EAAA,SAAAkJ,EAAAjb,GACA,OAAAib,EAAAhE,SAGA,IAAA4uB,EACA,SACK,GAAAA,EAAA5uB,QAAA4uB,EAAA5vB,KAEL,OAAA4vB,GACK,GAAAA,EAAAngC,UAAA,UAAAmgC,EAAAngC,SAAAoO,cAGL,YADA6Q,EAAAloB,EAAAue,QAAA6qB,EAAAE,IACA,CAAAh0B,EAAA4S,IAAA,KACK,GAAAkhB,GAAA,oBAAAA,EAAA9zB,SACL,OAAA8zB,EAAA9zB,WAAAL,UACK,kBAAAm0B,EAELC,EAAArpC,EAAAopC,GACKA,aAAAppC,IAELqpC,EAAAD,GAGA,GAAAC,EACA,OAAAA,EAAA92B,IAAA,SAAAhP,GAEA,YADA2kB,EAAAloB,EAAAue,QAAArb,KAAAomC,IACAh0B,EAAA4S,GAAA,OACOjT,UAmEPs0B,CAAAtlB,GAEAzc,IACA8N,IAAA9R,OAAAgE,KAIA,GAAAxH,EAAA6U,QAAAq0B,GACA,QAAA3lC,EAAA,EAAAmE,EAAAwhC,EAAAzlC,OAA2CF,EAAAmE,EAASnE,IACpD4lC,EAAAD,EAAA3lC,SAGA4lC,EAAAD,GAIAhmC,KAAAgmC,QAAA/tB,EAAA7F,GAEA1O,GACA5G,EAAAs6B,MAAAp3B,KAAA0D,GAIA1D,KAAAsmC,SAAA,CACAxhC,KAAA,KACAuI,KAAA,KACArH,KAAA,MAGA+K,EAAAqG,OAAApX,UAAA6lC,KAGA1oC,EAAAopC,IAAAx1B,EAGAjU,EAAAsa,OAAArG,EAAA5O,UAAA,CACAqkC,IAAA,WACA,WAAAxmC,KAAAymC,SAEAnmC,OAAAwlC,GAAAxlC,OACA0lC,QAAA,GAEAS,MAAA,WACA,OAAAzmC,KAAA8R,UAAAvR,QAEA8F,KAAA,SAAAjJ,GACA,QAAAiD,EAAA,EAAAmE,EAAAxE,KAAAO,OAAwCF,EAAAmE,EAASnE,IACjDjD,EAAAqD,KAAAT,UAAAK,KAAAL,MAGA,OAAAA,MAEAob,GAAA,SAAA4J,GACA,IAAA0hB,EAAA1mC,KAAAgmC,QACA,OAAAU,EAAAnmC,OAAAykB,EAAA,IAAAjU,EAAA21B,EAAA1hB,GAAAhlB,KAAAglB,IAAA,MAEAzI,OAAA,SAAAnf,GACA,IAAAkH,EAAA,GAEA,GAAAwhC,GAAAvpB,OACAjY,EAAAwhC,GAAAvpB,OAAA9b,KAAAT,KAAA5C,EAAA4C,WAGA,QAAAK,EAAA,EAAAmE,EAAAxE,KAAAO,OAA0CF,EAAAmE,EAASnE,IACnDjD,EAAAqD,KAAAT,UAAAK,KAAAL,OACAsE,EAAAM,KAAA5E,KAAAK,IAKA,WAAA0Q,EAAA/Q,KAAAgmC,QAAA1hC,IAEAwN,QAAA,WACA,IAAAxN,EAAA,GACA,WAAAyM,EAAA/Q,KAAAgmC,QAAA1hC,EAAAhE,OAAAqQ,MAAArM,EAAAtE,KAAA+R,aAEA1N,KAAAyhC,GAAAzhC,KACAW,QAAA8gC,GAAA9gC,SAAA,SAAAkJ,EAAAoS,GACA,QAAAjgB,EAAAigB,GAAA,EAAA9b,EAAAxE,KAAAO,OAAiDF,EAAAmE,EAASnE,IAC1D,GAAAL,KAAAK,KAAA6N,EACA,OAAA7N,EAIA,UAEAsmC,SAAA,SAAA70B,EAAAvS,EAAAnC,EAAAwpC,GACA,IACAnT,EACApzB,EACAmE,EACAmI,EACAC,EAEA9H,EACA+hC,EACAC,EATAxiC,EAAA,GAMA0hC,EAAAhmC,KAAAgmC,QAIAM,EAAAtmC,KAAAsmC,SASA,IAPA,kBAAAx0B,IACA80B,EAAAxpC,EACAA,EAAAmC,EACAA,EAAAuS,EACAA,GAAA,GAGAzR,EAAA,EAAAmE,EAAAwhC,EAAAzlC,OAAuCF,EAAAmE,EAASnE,IAAA,CAChD,IAAA0mC,EAAA,IAAAh2B,EAAAi1B,EAAA3lC,IAEA,aAAAd,GACAk0B,EAAAr2B,EAAAqD,KAAAsmC,EAAAf,EAAA3lC,SAEAxD,GACAyH,EAAAM,KAAA6uB,QAES,eAAAl0B,GAAA,SAAAA,GAETk0B,EAAAr2B,EAAAqD,KAAAsmC,EAAAf,EAAA3lC,GAAAL,KAAAK,SAEAxD,GACAyH,EAAAM,KAAA6uB,QAES,cAAAl0B,GAAA,gBAAAA,GAAA,QAAAA,GAAA,SAAAA,EAST,IANAsnC,EAAA7mC,KAAAK,GAEA,gBAAAd,IACAuF,EAAAkiC,GAAAhB,EAAA3lC,GAAAimC,EAAAtgC,OAGA2G,EAAA,EAAAC,EAAAi6B,EAAAtmC,OAAyCoM,EAAAC,EAASD,IAClDm6B,EAAAD,EAAAl6B,IAGA8mB,EADA,SAAAl0B,EACAnC,EAAAqD,KAAAsmC,EAAAf,EAAA3lC,GAAAymC,EAAA16B,IAAA06B,EAAA9yB,OAAA3T,EAAAsM,GAEAvP,EAAAqD,KAAAsmC,EAAAf,EAAA3lC,GAAAymC,EAAAzmC,EAAAsM,EAAA7H,MAGAjI,GACAyH,EAAAM,KAAA6uB,GAMA,GAAAnvB,EAAA/D,QAAAqmC,EAAA,CACA,IAAAv1B,EAAA,IAAAN,EAAAi1B,EAAAl0B,EAAAxN,EAAAhE,OAAAqQ,MAAA,GAAArM,MACA2iC,EAAA51B,EAAAi1B,SAIA,OAHAW,EAAAniC,KAAAwhC,EAAAxhC,KACAmiC,EAAA55B,KAAAi5B,EAAAj5B,KACA45B,EAAAjhC,KAAAsgC,EAAAtgC,KACAqL,EAGA,OAAArR,MAEAknC,YAAApB,GAAAoB,aAAA,SAAAh5B,EAAAoS,GAEA,OAAAtgB,KAAAgF,QAAA2L,MAAA3Q,KAAA+R,QAAAyzB,UAAAhjB,YAEAjiB,OAAA,EACA8O,IAAA,SAAAjS,GACA,IAAAkH,EAAA,GAEA,GAAAwhC,GAAAz2B,IACA/K,EAAAwhC,GAAAz2B,IAAA5O,KAAAT,KAAA5C,EAAA4C,WAGA,QAAAK,EAAA,EAAAmE,EAAAxE,KAAAO,OAA0CF,EAAAmE,EAASnE,IACnDiE,EAAAM,KAAAxH,EAAAqD,KAAAT,UAAAK,OAIA,WAAA0Q,EAAA/Q,KAAAgmC,QAAA1hC,IAEA6iC,MAAA,SAAAlnB,GACA,OAAAjgB,KAAAqP,IAAA,SAAAiM,GACA,OAAAA,EAAA2E,MAGAmnB,IAAAtB,GAAAsB,IACAxiC,KAAAkhC,GAAAlhC,KAEAyiC,OAAAvB,GAAAuB,QAAA,SAAAjqC,EAAA0lB,GACA,OAAAwB,EAAAtkB,KAAA5C,EAAA0lB,EAAA,EAAA9iB,KAAAO,OAAA,IAEA+mC,YAAAxB,GAAAwB,aAAA,SAAAlqC,EAAA0lB,GACA,OAAAwB,EAAAtkB,KAAA5C,EAAA0lB,EAAA9iB,KAAAO,OAAA,UAEAilC,QAAAM,GAAAN,QAEAc,SAAA,KACAiB,MAAAzB,GAAAyB,MACA7rB,MAAA,WACA,WAAA3K,EAAA/Q,KAAAgmC,QAAAhmC,OAEAiH,KAAA6+B,GAAA7+B,KAEA+Q,OAAA8tB,GAAA9tB,OACAjG,QAAA,WACA,OAAA+zB,GAAApqB,MAAAjb,KAAAT,OAEAwnC,IAAA,WACA,OAAA1qC,EAAAkD,OAEAynC,SAAA,WACA,OAAA3qC,EAAAkD,OAEAyyB,OAAA,WACA,WAAA1hB,EAAA/Q,KAAAgmC,QAAA/tB,EAAAjY,QAEAsQ,QAAAw1B,GAAAx1B,UAGAS,EAAAqG,OAAA,SAAAswB,EAAAx5B,EAAApG,GAEA,GAAAA,EAAAvH,QAAA2N,iBAAA6C,GAAA7C,EAAAy5B,cAAA,CAIA,IAAAtnC,EACAmE,EAGAojC,EAEAC,EAAA,SAAAH,EAAAtqC,EAAA0qC,GACA,kBACA,IAAArU,EAAAr2B,EAAAuT,MAAA+2B,EAAAllB,WAIA,OAFAzR,EAAAqG,OAAAqc,IAAAqU,EAAAC,WAEAtU,IAIA,IAAApzB,EAAA,EAAAmE,EAAAsD,EAAAvH,OAAiCF,EAAAmE,EAASnE,IAC1CunC,EAAA9/B,EAAAzH,GAEA6N,EAAA05B,EAAAhoC,MAAA,oBAAAgoC,EAAAr+B,IAAAs+B,EAAAH,EAAAE,EAAAr+B,IAAAq+B,GAAA9qC,EAAAsR,cAAAw5B,EAAAr+B,KAAA,GAAuIq+B,EAAAr+B,IACvI2E,EAAA05B,EAAAhoC,MAAA+nC,cAAA,EAEA52B,EAAAqG,OAAAswB,EAAAx5B,EAAA05B,EAAAhoC,MAAAgoC,EAAAI,WAiCAj3B,EAAAk3B,SAAAj3B,EAAA,SAAApR,EAAA2J,GACA,GAAAzM,EAAA6U,QAAA/R,GACA,QAAA+M,EAAA,EAAAC,EAAAhN,EAAAW,OAAwCoM,EAAAC,EAASD,IACjDoE,EAAAk3B,SAAAroC,EAAA+M,GAAApD,OAFA,CAQA,IAAAlJ,EACAmE,EAGA8B,EACA4hC,EAHAC,EAAAvoC,EAAAe,MAAA,KACAinC,EAAA/B,GAIA1qB,EAAA,SAAAjH,EAAAtU,GACA,QAAAS,EAAA,EAAAmE,EAAA0P,EAAA3T,OAAuCF,EAAAmE,EAASnE,IAChD,GAAA6T,EAAA7T,GAAAT,SACA,OAAAsU,EAAA7T,GAIA,aAGA,IAAAA,EAAA,EAAAmE,EAAA2jC,EAAA5nC,OAAkCF,EAAAmE,EAASnE,IAAA,CAC3C6nC,GAAA,IAAAC,EAAA9nC,GAAA2E,QAAA,MACAsB,EAAA4hC,EAAAC,EAAA9nC,GAAAsB,QAAA,SAAAwmC,EAAA9nC,GACA,IAAA6T,EAAAiH,EAAAysB,EAAAthC,GAEA4N,IACAA,EAAA,CACAtU,KAAA0G,EACAiD,IAAA,GACAw+B,UAAA,GACAC,QAAA,IAEAJ,EAAAhjC,KAAAsP,IAGA7T,IAAAmE,EAAA,EACA0P,EAAA3K,MAEAq+B,EAAAM,EAAAh0B,EAAA6zB,UAAA7zB,EAAA8zB,WAKAj3B,EAAAq3B,eAAAn3B,EAAA,SAAAo3B,EAAAC,EAAA/+B,GACAwH,EAAAk3B,SAAAI,EAAA9+B,GAEAwH,EAAAk3B,SAAAK,EAAA,WACA,IAAA7U,EAAAlqB,EAAAoH,MAAA3Q,KAAAwiB,WAEA,OAAAiR,IAAAzzB,KAEAA,KACOyzB,aAAA1iB,EAGP0iB,EAAAlzB,OAAAzD,EAAA6U,QAAA8hB,EAAA,QAAA1iB,EAAA0iB,EAAAuS,QAAAvS,EAAA,IACAA,EAAA,GAAA52B,EAIA42B,KA2CAziB,EAAA,oBAAAs1B,GAEA,OAAAA,EAAA,IAAAv1B,EA/BA,SAAAu1B,EAAAhiC,GAEA,qBAAAgiC,EACA,OAAAhiC,EAAAgiC,IAIA,IAAAhyB,EAAAxX,EAAAuS,IAAA/K,EAAA,SAAAgX,EAAAjb,GACA,OAAAib,EAAAhE,SAEA,OAAAxa,EAAAwX,GAAAiI,OAAA+pB,GAAAj3B,IAAA,SAAAhP,GAEA,IAAA2kB,EAAAloB,EAAAue,QAAArb,KAAAsU,GACA,OAAAhQ,EAAA0gB,KACKjT,UAiBLw2B,CAAAjC,EAAAtmC,KAAAgmC,UAAAhmC,OAGAgR,EAAA,mBAAAs1B,GACA,IAAAF,EAAApmC,KAAAomC,OAAAE,GACAI,EAAAN,EAAAJ,QAEA,OAAAU,EAAAnmC,OAAA,IAAAwQ,EAAA21B,EAAA,IAAAN,IAGAn1B,EAAA,+CACA,OAAAjR,KAAA2mC,SAAA,iBAAAD,GACA,OAAAA,EAAApvB,QACK,KAGLrG,EAAA,8CACA,OAAAjR,KAAA2mC,SAAA,iBAAAD,GACA,OAAAA,EAAA9oB,QACK,KAGL3M,EAAA,kDACA,OAAAjR,KAAA2mC,SAAA,iBAAAD,GACA,OAAAA,EAAAnvB,QACK,KAGLtG,EAAA,kDACA,OAAAjR,KAAA2mC,SAAA,iBAAAD,GACA,OAAAA,EAAAjvB,QACK,KAGLxG,EAAA,yDACA,OAAAjR,KAAA2mC,SAAA,iBAAAD,GACA,OAAAA,EAAAtW,eACK,KAOLpf,EAAA,kBAAAw3B,GACA,OAAAxoC,KAAA2mC,SAAA,iBAAAv0B,GACA,SAAAo2B,EACA9a,GAAAtb,IAEA,kBAAAo2B,IACAA,EAAA,cAAAA,GAGAjZ,GAAAnd,GAAA,IAAAo2B,QA2BAx3B,EAAA,kBAAA9I,GACA,OAAAA,IAAArL,EACAmD,KAAAmV,KAAA5M,OAAA4M,KAIAnV,KAAA2mC,SAAA,iBAAAv0B,GACA6oB,GAAA7oB,EAAAlK,OAuBA8I,EAAA,uBAAA9I,GACA,OAAAlI,KAAAgmC,QAAAzlC,OACA,OAAA1D,EAGA,IAAAuV,EAAApS,KAAAgmC,QAAA,GACA1lB,EAAAlO,EAAA8H,eACA3U,EAAA6M,EAAAuG,UAAAuY,UAAA9e,EAAAmiB,iBAAA,EACAwG,EAAA3oB,EAAA+b,mBACAqL,GAAA,IAAAj0B,EACA,OACA4P,KAAAqkB,EAAA,EAAAh0B,KAAAC,MAAA6a,EAAA/a,GACAy1B,MAAAxB,EAAA,EAAAh0B,KAAAi0B,KAAAsB,EAAAx1B,GACA+a,QACAC,IAAAnO,EAAAic,eACA9tB,OAAAgF,EACA4vB,aAAA/iB,EAAA4c,iBACAyZ,eAAA1N,EACA2N,WAAA,QAAAprB,GAAAlL,MAkBApB,EAAA,sBAAAzL,GAIA,OAAAA,IAAA1I,EACA,IAAAmD,KAAAgmC,QAAAzlC,OAAAP,KAAAgmC,QAAA,GAAAzR,gBAAA13B,EAIAmD,KAAA2mC,SAAA,iBAAAv0B,GACA0nB,GAAA1nB,EAAA7M,OAIA,IAAAojC,GAAA,SAAAv2B,EAAAod,EAAAtc,GAEA,GAAAA,EAAA,CACA,IAAA7B,EAAA,IAAAN,EAAAqB,GACAf,EAAAu3B,IAAA,kBACA11B,EAAA7B,EAAAoJ,KAAAG,UAIA,UAAA0C,GAAAlL,GACAmd,GAAAnd,EAAAod,OACK,CACLlB,GAAAlc,GAAA,GAGA,IAAAkhB,EAAAlhB,EAAA6gB,MAEAK,GAAA,IAAAA,EAAA1yB,YACA0yB,EAAAjxB,QAIAwwB,GAAAzgB,EAAA,YAAAwI,GACA8P,EAAAtY,GAIA,IAFA,IAAA1O,EAAAwxB,GAAA9iB,EAAAwI,GAEAva,EAAA,EAAAmE,EAAAd,EAAAnD,OAA0CF,EAAAmE,EAASnE,IACnD4d,EAAA7L,EAAA1O,EAAArD,IAGAkvB,GAAAnd,EAAAod,GAEAlB,GAAAlc,GAAA,OAaApB,EAAA,yBACA,IAAA01B,EAAA1mC,KAAAgmC,QAEA,GAAAU,EAAAnmC,OAAA,EACA,OAAAmmC,EAAA,GAAA9rB,OASA5J,EAAA,2BACA,IAAA01B,EAAA1mC,KAAAgmC,QAEA,GAAAU,EAAAnmC,OAAA,EACA,OAAAmmC,EAAA,GAAAhT,YAeA1iB,EAAA,yBAAAkC,EAAA21B,GACA,OAAA7oC,KAAA2mC,SAAA,iBAAAv0B,GACAu2B,GAAAv2B,GAAA,IAAAy2B,EAAA31B,OAmBAlC,EAAA,sBAAAvP,GACA,IAAAilC,EAAA1mC,KAAAgmC,QAEA,OAAAvkC,IAAA5E,EAEA,IAAA6pC,EAAAnmC,OACA1D,GAGA6pC,IAAA,IACAjsB,KAAA3d,EAAAsR,cAAAs4B,EAAAjsB,MAAAisB,EAAAjsB,KAAAhZ,IAAAilC,EAAAjsB,KAAAisB,EAAA9S,YAIA5zB,KAAA2mC,SAAA,iBAAAv0B,GACAtV,EAAAsR,cAAAgE,EAAAqI,MACArI,EAAAqI,KAAAhZ,MAEA2Q,EAAAqI,KAAAhZ,MAkBAuP,EAAA,6BAAAkC,EAAA21B,GAGA,OAAA7oC,KAAA2mC,SAAA,iBAAAD,GACAiC,GAAAjC,GAAA,IAAAmC,EAAA31B,OAIA,IAAA41B,GAAA,SAAAvpC,EAAA+mC,EAAAyC,EAAA32B,EAAApM,GACA,IACAgjC,EACA1kC,EACAjE,EACAmE,EACAmI,EACAC,EANAuT,EAAA,GAOA8oB,SAAA3C,EAOA,IAJAA,GAAA,WAAA2C,GAAA,aAAAA,GAAA3C,EAAA/lC,SAAA1D,IACAypC,EAAA,CAAAA,IAGAjmC,EAAA,EAAAmE,EAAA8hC,EAAA/lC,OAAsCF,EAAAmE,EAASnE,IAI/C,IAFAiE,EAAAgiC,EAAAjmC,IAAAimC,EAAAjmC,GAAAM,QAAA2lC,EAAAjmC,GAAAiD,MAAA,WAAAgjC,EAAAjmC,GAAAM,MAAA,MAAA2lC,EAAAjmC,IAEAsM,EAAA,EAAAC,EAAAtI,EAAA/D,OAAiCoM,EAAAC,EAASD,KAC1Cq8B,EAAAD,EAAA,kBAAAzkC,EAAAqI,GAAA7P,EAAA4P,KAAApI,EAAAqI,IAAArI,EAAAqI,MAEAq8B,EAAAzoC,SACA4f,IAAA7f,OAAA0oC,IAMA,IAAAlhC,EAAAgJ,EAAAw1B,SAAA/mC,GAEA,GAAAuI,EAAAvH,OACA,IAAAF,EAAA,EAAAmE,EAAAsD,EAAAvH,OAAmCF,EAAAmE,EAASnE,IAC5C8f,EAAArY,EAAAzH,GAAA+R,EAAApM,EAAAma,GAIA,OAAAlI,EAAAkI,IAGA+oB,GAAA,SAAAljC,GAWA,OAVAA,IACAA,EAAA,IAKAA,EAAAuW,QAAAvW,EAAA+N,SAAAlX,IACAmJ,EAAA+N,OAAA/N,EAAAuW,QAGAzf,EAAAsa,OAAA,CACArD,OAAA,OACA4B,MAAA,UACAR,KAAA,OACKnP,IAGLmjC,GAAA,SAAAC,GAEA,QAAA/oC,EAAA,EAAAmE,EAAA4kC,EAAA7oC,OAAsCF,EAAAmE,EAASnE,IAC/C,GAAA+oC,EAAA/oC,GAAAE,OAAA,EAOA,OAJA6oC,EAAA,GAAAA,EAAA/oC,GACA+oC,EAAA,GAAA7oC,OAAA,EACA6oC,EAAA7oC,OAAA,EACA6oC,EAAApD,QAAA,CAAAoD,EAAApD,QAAA3lC,IACA+oC,EAMA,OADAA,EAAA7oC,OAAA,EACA6oC,GAGApC,GAAA,SAAA50B,EAAApM,GACA,IAEAqU,EACA/V,EAAA,GACA+kC,EAAAj3B,EAAA+L,UACA0Z,EAAAzlB,EAAAgM,gBACArK,EAAA/N,EAAA+N,OAEA4B,EAAA3P,EAAA2P,MAEAR,EAAAnP,EAAAmP,KAEA,UAAAmI,GAAAlL,GAKA,kBAAA2B,EAAA,GAAAsM,EAAA,EAAAwX,EAAAt3B,QACK,cAAA4U,EAIL,IAAA9U,EAAA+R,EAAA8H,eAAA1V,EAAA4N,EAAAic,eAAsEhuB,EAAAmE,EAASnE,IAC/EiE,EAAAM,KAAAykC,EAAAhpC,SAEK,cAAAsV,GAAA,WAAAA,GACL,WAAA5B,EACAzP,EAAAuzB,EAAAnc,aACO,cAAA3H,EACPzP,EAAA+kC,EAAA3tB,aACO,cAAA3H,EAAA,CAIP,IAFA,IAAAu1B,EAAA,GAEAjpC,EAAA,EAAAmE,EAAA6kC,EAAA9oC,OAAqDF,EAAAmE,EAASnE,IAC9DipC,EAAAD,EAAAhpC,IAAA,KAGAiE,EAAAxH,EAAAuS,IAAAwoB,EAAA,SAAAvc,GACA,OAAAguB,EAAA7kB,eAAAnJ,GAAA,KAAAA,UAGK,YAAA3F,GAAA,YAAAA,EACL,IAAAtV,EAAA,EAAAmE,EAAA4N,EAAAe,OAAA5S,OAA+CF,EAAAmE,EAASnE,IACxD,QAAA0T,EACAzP,EAAAM,KAAAvE,KAKA,KAFAga,EAAAvd,EAAAue,QAAAhb,EAAAgpC,KAEA,WAAAt1B,GAAAsG,GAAA,cAAAtG,IACAzP,EAAAM,KAAAvE,GAMA,OAAAiE,GAoGA0M,EAAA,kBAAAs1B,EAAAtgC,GAEAsgC,IAAAzpC,EACAypC,EAAA,GACKxpC,EAAAsR,cAAAk4B,KACLtgC,EAAAsgC,EACAA,EAAA,IAGAtgC,EAAAkjC,GAAAljC,GACA,IAAAojC,EAAAppC,KAAA2mC,SAAA,iBAAAv0B,GACA,OAjGA,SAAAA,EAAAk0B,EAAAtgC,GACA,IAAAlB,EAkFA,OAAAgkC,GAAA,MAAAxC,EAhFA,SAAAiD,GACA,IAAAC,EAAAxqB,EAAAuqB,GAGAp2B,EAAAf,EAAAe,OAIA,UAAAq2B,IAAAxjC,EACA,OAAAwjC,GAOA,GAJA1kC,IACAA,EAAAkiC,GAAA50B,EAAApM,IAGA,OAAAwjC,IAAA,IAAA1sC,EAAAue,QAAAmuB,EAAA1kC,GAEA,OAAA0kC,GACO,UAAAD,OAAA1sC,GAAA,KAAA0sC,EAEP,OAAAzkC,EAIA,uBAAAykC,EACA,OAAAzsC,EAAAuS,IAAAvK,EAAA,SAAAkgB,GACA,IAAA5Y,EAAA+G,EAAA6R,GACA,OAAAukB,EAAAvkB,EAAA5Y,EAAA4c,OAAA5c,EAAAyG,KAAAmS,EAAA,OAKA,GAAAukB,EAAAxjC,SAAA,CACA,IAAAujB,EAAAigB,EAAAxd,aAEA0d,EAAAF,EAAAtd,cAEA,GAAA3C,IAAAzsB,EAEA,OAAAsW,EAAAmW,IAAAnW,EAAAmW,GAAAzW,MAAA02B,EAAA,CAAAjgB,GAAA,GACS,GAAAmgB,EACT,OAAAt2B,EAAAs2B,EAAAr9B,MAAA+G,EAAAs2B,EAAAr9B,KAAAyG,MAAA02B,EAAA,CAAAE,EAAAr9B,KAAA,GAEA,IAAAw5B,EAAA9oC,EAAAysC,GAAAp/B,QAAA,kBACA,OAAAy7B,EAAArlC,OAAA,CAAAqlC,EAAAliC,KAAA,cAaA,qBAAA6lC,GAAA,MAAAA,EAAAnoB,OAAA,IAEA,IAAAsoB,EAAAt3B,EAAA6W,KAAAsgB,EAAA5nC,QAAA,UAEA,GAAA+nC,IAAA7sC,EACA,OAAA6sC,EAAA1kB,KAOA,IAAA1Q,EAAAkM,EAAAJ,EAAAhO,EAAAe,OAAArO,EAAA,QAKA,OAAAhI,EAAAwX,GAAAiI,OAAAgtB,GAAAl6B,IAAA,WACA,OAAArP,KAAA+rB,eACOha,WAGPK,EAAApM,GAcA2jC,CAAAv3B,EAAAk0B,EAAAtgC,IACK,GAIL,OAFAojC,EAAA9C,SAAAxhC,KAAAwhC,EACA8C,EAAA9C,SAAAtgC,OACAojC,IAGAp4B,EAAA,4BACA,OAAAhR,KAAA2mC,SAAA,eAAAv0B,EAAAhG,GACA,OAAAgG,EAAAe,OAAA/G,GAAAyG,KAAAhW,GACK,KAGLmU,EAAA,2BACA,OAAAhR,KAAA2mC,UAAA,kBAAAv0B,EAAAtN,GACA,OAAAsb,EAAAhO,EAAAe,OAAArO,EAAA,WACK,KAGLmM,EAAA,0CAAA1R,GACA,OAAAS,KAAA2mC,SAAA,eAAAv0B,EAAAhG,GACA,IAAAC,EAAA+F,EAAAe,OAAA/G,GACA,iBAAA7M,EAAA8M,EAAA+e,aAAA/e,EAAA8e,YACK,KAGLla,EAAA,oDAAAiD,GACA,OAAAlU,KAAA2mC,SAAA,eAAAv0B,EAAAhG,GACA0e,GAAA1Y,EAAAhG,EAAA8H,OAIAjD,EAAA,8CACA,OAAAjR,KAAA2mC,SAAA,eAAAv0B,EAAAhG,GACA,OAAAA,GACK,KAGL6E,EAAA,qCAAA24B,GAIA,IAHA,IAAAtlC,EAAA,GACA0hC,EAAAhmC,KAAAgmC,QAEA3lC,EAAA,EAAAmE,EAAAwhC,EAAAzlC,OAAyCF,EAAAmE,EAASnE,IAClD,QAAAsM,EAAA,EAAAC,EAAA5M,KAAAK,GAAAE,OAA2CoM,EAAAC,EAASD,IAAA,CACpD,IAAAoL,EAAAiuB,EAAA3lC,GAAAmZ,QAAAwsB,EAAA3lC,GAAA8S,OAAAnT,KAAAK,GAAAsM,IAAAqc,QACA1kB,EAAAM,OAAA,IAAAglC,EAAA,QAAA7xB,GAIA,WAAAhH,EAAAi1B,EAAA1hC,KAGA2M,EAAA,8CACA,IAAA3I,EAAAtI,KAoDA,OAnDAA,KAAA2mC,SAAA,eAAAv0B,EAAAhG,EAAAy9B,GACA,IAEAxpC,EAAAmE,EAAAmI,EAAAC,EACAk9B,EAAAC,EAHArmC,EAAA0O,EAAAe,OACA2S,EAAApiB,EAAA0I,GAKA,IAFA1I,EAAAsU,OAAA5L,EAAA,GAEA/L,EAAA,EAAAmE,EAAAd,EAAAnD,OAAoCF,EAAAmE,EAASnE,IAS7C,GARAypC,EAAApmC,EAAArD,GACA0pC,EAAAD,EAAA5e,QAEA,OAAA4e,EAAAj3B,MACAi3B,EAAAj3B,IAAAkZ,aAAA1rB,GAIA,OAAA0pC,EACA,IAAAp9B,EAAA,EAAAC,EAAAm9B,EAAAxpC,OAA6CoM,EAAAC,EAASD,IACtDo9B,EAAAp9B,GAAAsf,cAAA7f,IAAA/L,EAMAsqB,GAAAvY,EAAAgM,gBAAAhS,GAEAue,GAAAvY,EAAA+L,UAAA/R,GAEAue,GAAAriB,EAAAuhC,GAAAz9B,GAAA,GAIAgG,EAAAkI,iBAAA,GACAlI,EAAAkI,mBAIAyf,GAAA3nB,GAGA,IAAA2F,EAAA3F,EAAAoH,QAAAsM,EAAAkD,QAEAjR,IAAAlb,UACAuV,EAAA6W,KAAAlR,KAGA/X,KAAA2mC,SAAA,iBAAAv0B,GACA,QAAA/R,EAAA,EAAAmE,EAAA4N,EAAAe,OAAA5S,OAAmDF,EAAAmE,EAASnE,IAC5D+R,EAAAe,OAAA9S,GAAA2kB,IAAA3kB,IAGAL,OAGAgR,EAAA,sBAAAlM,GACA,IAAAklC,EAAAhqC,KAAA2mC,SAAA,iBAAAv0B,GACA,IAAAhG,EAAA/L,EAAAmE,EACA2b,EAAA,GAEA,IAAA9f,EAAA,EAAAmE,EAAAM,EAAAvE,OAAoCF,EAAAmE,EAASnE,KAC7C+L,EAAAtH,EAAAzE,IAEA0F,UAAA,OAAAqG,EAAArG,SAAAyO,cACA2L,EAAAvb,KAAAsZ,EAAA9L,EAAAhG,GAAA,IAEA+T,EAAAvb,KAAAqZ,EAAA7L,EAAAhG,IAIA,OAAA+T,GACK,GAEL8pB,EAAAjqC,KAAA8E,MAAA,GAGA,OAFAmlC,EAAA7C,MACAtqC,EAAAs6B,MAAA6S,EAAAD,GACAC,IAOAj5B,EAAA,iBAAAs1B,EAAAtgC,GACA,OAAAmjC,GAAAnpC,KAAA8E,KAAAwhC,EAAAtgC,MAGAgL,EAAA,wBAAAtN,GACA,IAAAgjC,EAAA1mC,KAAAgmC,QAEA,GAAAtiC,IAAA7G,EAEA,OAAA6pC,EAAAnmC,QAAAP,KAAAO,OAAAmmC,EAAA,GAAAvzB,OAAAnT,KAAA,IAAAgpB,OAAAnsB,EAIA,IAAAuP,EAAAs6B,EAAA,GAAAvzB,OAAAnT,KAAA,IAUA,OATAoM,EAAA4c,OAAAtlB,EAEA5G,EAAA6U,QAAAjO,IAAA0I,EAAAyG,IAAAkF,IACAmO,EAAAwgB,EAAA,GAAAhtB,MAAAwM,CAAAxiB,EAAA0I,EAAAyG,IAAAkF,IAIA+S,GAAA4b,EAAA,GAAA1mC,KAAA,WAEAA,OAGAgR,EAAA,0BACA,IAAA01B,EAAA1mC,KAAAgmC,QACA,OAAAU,EAAAnmC,QAAAP,KAAAO,QAAAmmC,EAAA,GAAAvzB,OAAAnT,KAAA,IAAA6S,KAAA,OAGA7B,EAAA,qBAAA5E,GAGAA,aAAAtP,GAAAsP,EAAA7L,SACA6L,IAAA,IAGA,IAAAtH,EAAA9E,KAAA2mC,SAAA,iBAAAv0B,GACA,OAAAhG,EAAArG,UAAA,OAAAqG,EAAArG,SAAAyO,cACA0J,EAAA9L,EAAAhG,GAAA,GAGA6R,EAAA7L,EAAAhG,KAGA,OAAApM,KAAAoM,IAAAtH,EAAA,MAGA,IAuCAolC,GAAA,SAAA74B,EAAA2T,GACA,IAAA0hB,EAAAr1B,EAAA20B,QAEA,GAAAU,EAAAnmC,OAAA,CACA,IAAA6L,EAAAs6B,EAAA,GAAAvzB,OAAA6R,IAAAnoB,EAAAmoB,EAAA3T,EAAA,IAEAjF,KAAA+9B,WACA/9B,EAAA+9B,SAAA/qC,SAEAgN,EAAAg+B,aAAAvtC,EACAuP,EAAA+9B,SAAAttC,KAKAwtC,GAAA,SAAAh5B,EAAA2D,GACA,IAAA0xB,EAAAr1B,EAAA20B,QAEA,GAAAU,EAAAnmC,QAAA8Q,EAAA9Q,OAAA,CACA,IAAA6L,EAAAs6B,EAAA,GAAAvzB,OAAA9B,EAAA,IAEAjF,EAAA+9B,WACA/9B,EAAAg+B,aAAAp1B,EAEAA,EACA5I,EAAA+9B,SAAAG,YAAAl+B,EAAAyG,KAEAzG,EAAA+9B,SAAA9a,SAGAkb,GAAA7D,EAAA,OAKA6D,GAAA,SAAAn4B,GACA,IAAAf,EAAA,IAAAN,EAAAqB,GAKA1O,EAAA0O,EAAAe,OACA9B,EAAAhH,IAAAmgC,4EAEAxqB,EAAAtc,EAAA,YAAAnD,OAAA,IAEA8Q,EAAA/G,GARA,qBAQA,SAAAnC,EAAAu+B,GACAt0B,IAAAs0B,GAIAr1B,EAAAvM,KAAA,CACAqQ,KAAA,YACSiG,GAAA,GAAA/U,KAAA,SAAA2e,GAET,IAAA5Y,EAAA1I,EAAAshB,GAEA5Y,EAAAg+B,cACAh+B,EAAA+9B,SAAAG,YAAAl+B,EAAAyG,SAKAxB,EAAA/G,GAxBA,kCAwBA,SAAAnC,EAAAu+B,EAAA1hB,EAAA2C,GACA,GAAAvV,IAAAs0B,EASA,IAHA,IAAAt6B,EACAmJ,EAAAmS,EAAAgf,GAEArmC,EAAA,EAAAmE,EAAAd,EAAAnD,OAA0CF,EAAAmE,EAASnE,KACnD+L,EAAA1I,EAAArD,IAEA8pC,UACA/9B,EAAA+9B,SAAA/jC,SAAA,eAAAD,KAAA,UAAAoP,KAKAlE,EAAA/G,GA1CA,wBA0CA,SAAAnC,EAAAu+B,GACA,GAAAt0B,IAAAs0B,EAIA,QAAArmC,EAAA,EAAAmE,EAAAd,EAAAnD,OAA0CF,EAAAmE,EAASnE,IACnDqD,EAAArD,GAAA8pC,UACAD,GAAA74B,EAAAhR,OAkBA2Q,EANAy5B,gBAMA,SAAA/mC,EAAAgnC,GACA,IAAAhE,EAAA1mC,KAAAgmC,QAEA,OAAAtiC,IAAA7G,EAEA6pC,EAAAnmC,QAAAP,KAAAO,OAAAmmC,EAAA,GAAAvzB,OAAAnT,KAAA,IAAAmqC,SAAAttC,IACK,IAAA6G,EAEL1D,KAAA8S,MAAAkC,QACK,IAAAtR,EAELwmC,GAAAlqC,MACK0mC,EAAAnmC,QAAAP,KAAAO,QA9JL,SAAAmmC,EAAAt6B,EAAA1I,EAAAgnC,GAEA,IAAA5lC,EAAA,IAEA,SAAAqH,EAAAE,EAAAuU,GAEA,GAAA9jB,EAAA6U,QAAAtF,iBAAAvP,EACA,QAAAuD,EAAA,EAAAmE,EAAA6H,EAAA9L,OAAuCF,EAAAmE,EAASnE,IAChD8L,EAAAE,EAAAhM,GAAAugB,QAQA,GAAAvU,EAAAtG,UAAA,OAAAsG,EAAAtG,SAAAoO,cACArP,EAAAF,KAAAyH,OACO,CAEP,IAAAs+B,EAAA7tC,EAAA,kBAAAgd,SAAA8G,GACA9jB,EAAA,KAAA6tC,GAAA7wB,SAAA8G,GAAAf,KAAAxT,GAAA,GAAA8iB,QAAAzH,EAAAgf,GACA5hC,EAAAF,KAAA+lC,EAAA,MAIAx+B,CAAAzI,EAAAgnC,GAEAt+B,EAAA+9B,UACA/9B,EAAA+9B,SAAA9a,SAGAjjB,EAAA+9B,SAAArtC,EAAAgI,GAEAsH,EAAAg+B,cACAh+B,EAAA+9B,SAAAG,YAAAl+B,EAAAyG,KA6HA+3B,CAAAlE,EAAA,GAAAA,EAAA,GAAAvzB,OAAAnT,KAAA,IAAA0D,EAAAgnC,GAGA1qC,QAGAgR,EAAA,CAAAy5B,qBAAAI,wBACA,SAAA71B,GAIA,OAFAq1B,GAAArqC,MAAA,GAEAA,OAGAgR,EAAA,CAAAy5B,qBAAAI,wBACA,WAIA,OAFAR,GAAArqC,MAAA,GAEAA,OAGAgR,EAAA,CAAAy5B,uBAAAI,0BACA,WAIA,OAFAX,GAAAlqC,MAEAA,OAGAgR,EAAAy5B,wBAAA,WACA,IAAA/D,EAAA1mC,KAAAgmC,QAEA,OAAAU,EAAAnmC,QAAAP,KAAAO,QAEAmmC,EAAA,GAAAvzB,OAAAnT,KAAA,IAAAoqC,eAGA,IAgBA,IAAAU,GAAA,kCAGAC,GAAA,SAAA34B,EAAA4B,EAAAg3B,EAAAC,EAAAnmC,GAGA,IAFA,IAAAR,EAAA,GAEA8H,EAAA,EAAA5H,EAAAM,EAAAvE,OAAwC6L,EAAA5H,EAAW4H,IACnD9H,EAAAM,KAAAwjB,EAAAhW,EAAAtN,EAAAsH,GAAA4H,IAGA,OAAA1P,GA6IA0M,EAAA,qBAAAs1B,EAAAtgC,GAEAsgC,IAAAzpC,EACAypC,EAAA,GACKxpC,EAAAsR,cAAAk4B,KACLtgC,EAAAsgC,EACAA,EAAA,IAGAtgC,EAAAkjC,GAAAljC,GACA,IAAAojC,EAAAppC,KAAA2mC,SAAA,iBAAAv0B,GACA,OArJA,SAAAA,EAAAk0B,EAAAtgC,GACA,IAAAkM,EAAAE,EAAA6J,UACAivB,EAAAlrB,EAAA9N,EAAA,SACAoC,EAAA0L,EAAA9N,EAAA,OA6EA,OAAA42B,GAAA,SAAAxC,EA3EA,SAAA/hC,GACA,IAAAilC,EAAAxqB,EAAAza,GAGA,QAAAA,EACA,OAAA8b,EAAAnO,EAAA3R,QAIA,UAAAipC,EACA,OAAAA,GAAA,EAAAA,EACAt3B,EAAA3R,OAAAipC,GAKA,uBAAAjlC,EAAA,CACA,IAAAO,EAAAkiC,GAAA50B,EAAApM,GAEA,OAAAlJ,EAAAuS,IAAA6C,EAAA,SAAAtL,EAAAoe,GACA,OAAAzgB,EAAAygB,EAAA+lB,GAAA34B,EAAA4S,EAAA,IAAAlgB,GAAAwP,EAAA0Q,MAAA,OAKA,IAAA1hB,EAAA,kBAAAiB,IAAAjB,MAAAwnC,IAAA,GAEA,GAAAxnC,EACA,OAAAA,EAAA,IACA,aACA,cACA,IAAA0hB,EAAA9F,SAAA5b,EAAA,OAEA,GAAA0hB,EAAA,GAEA,IAAAmmB,EAAAruC,EAAAuS,IAAA6C,EAAA,SAAAtL,EAAAvG,GACA,OAAAuG,EAAAghB,SAAAvnB,EAAA,OAEA,OAAA8qC,IAAA5qC,OAAAykB,IAIA,OAAAoC,EAAAhV,EAAA4S,IAEA,WAEA,OAAAloB,EAAAuS,IAAA67B,EAAA,SAAAtrC,EAAAS,GACA,OAAAT,IAAA0D,EAAA,GAAAjD,EAAA,OAGA,QACA,SAKA,GAAAkE,EAAAwB,UAAAxB,EAAA0nB,cACA,OAAA1nB,EAAA0nB,cAAAjY,QAIA,IAAAo3B,EAAAtuC,EAAAwX,GAAAiI,OAAAhY,GAAA8K,IAAA,WACA,OAAAvS,EAAAue,QAAArb,KAAAsU,KACOvC,UAEP,GAAAq5B,EAAA7qC,SAAAgE,EAAAwB,SACA,OAAAqlC,EAKA,IAAAxF,EAAA9oC,EAAAyH,GAAA4F,QAAA,qBACA,OAAAy7B,EAAArlC,OAAA,CAAAqlC,EAAAliC,KAAA,kBAGA0O,EAAApM,GAqEAqlC,CAAAj5B,EAAAk0B,EAAAtgC,IACK,GAIL,OAFAojC,EAAA9C,SAAAj5B,KAAAi5B,EACA8C,EAAA9C,SAAAtgC,OACAojC,IAGAn4B,EAAA,kDAAAq1B,EAAAtgC,GACA,OAAAhG,KAAA2mC,SAAA,kBAAAv0B,EAAA4B,GACA,OAAA5B,EAAA6J,UAAAjI,GAAA0Q,KACK,KAGLzT,EAAA,kDAAAq1B,EAAAtgC,GACA,OAAAhG,KAAA2mC,SAAA,kBAAAv0B,EAAA4B,GACA,OAAA5B,EAAA6J,UAAAjI,GAAAgZ,KACK,KAGL/b,EAAA,gDACA,OAAAjR,KAAA2mC,SAAA,cAAAoE,GAAA,KAGA95B,EAAA,sDACA,OAAAjR,KAAA2mC,SAAA,kBAAAv0B,EAAA4B,GACA,OAAA5B,EAAA6J,UAAAjI,GAAAgC,OACK,KAGL/E,EAAA,gDAAA1R,GACA,OAAAS,KAAA2mC,SAAA,uBAAAv0B,EAAA4B,EAAA3T,EAAAsM,EAAA7H,GACA,OAAAsb,EAAAhO,EAAAe,OAAArO,EAAA,WAAAvF,EAAA,4BAAAyU,IACK,KAGL/C,EAAA,kDACA,OAAAjR,KAAA2mC,SAAA,uBAAAv0B,EAAA4B,EAAA3T,EAAAsM,EAAA7H,GACA,OAAAsb,EAAAhO,EAAAe,OAAArO,EAAA,UAAAkP,IACK,KAGL/C,EAAA,oDAAA0W,EAAA2jB,GACA,IAAA7X,EAAAzzB,KAAA2mC,SAAA,kBAAAv0B,EAAA4B,GACA,GAAA2T,IAAA9qB,EACA,OAAAuV,EAAA6J,UAAAjI,GAAA4T,UA/GA,SAAAxV,EAAA4B,EAAA2T,GACA,IAIA0B,EACAhpB,EACAmE,EACA4nB,EAPA/e,EAAA+E,EAAA6J,UACArV,EAAAyG,EAAA2G,GACAtQ,EAAA0O,EAAAe,OAOA,GAAAwU,IAAA9qB,EACA,OAAA+J,EAAAghB,SAKA,GAAAhhB,EAAAghB,WAAAD,EACA,OAGA,GAAAA,EAAA,CAGA,IAAAqI,EAAAlzB,EAAAue,SAAA,EAAA2E,EAAA3S,EAAA,YAAA2G,EAAA,GAEA,IAAA3T,EAAA,EAAAmE,EAAAd,EAAAnD,OAAoCF,EAAAmE,EAASnE,IAC7C+rB,EAAA1oB,EAAArD,GAAAwS,IACAwW,EAAA3lB,EAAArD,GAAA6qB,QAEAkB,GAEAA,EAAA4D,aAAA3G,EAAArV,GAAAqV,EAAA2G,IAAA,WAKAlzB,EAAAkjB,EAAA5N,EAAAe,OAAA,UAAAa,IAAAqb,SAIAzoB,EAAAghB,SAAAD,EAEAsF,GAAA7a,IAAA2J,UAEAkR,GAAA7a,IAAA2L,UAIA3L,EAAA+L,UAAA5d,QACAzD,EAAAsV,EAAAwL,QAAAzC,KAAA,eAAAhV,KAAA,UAAAuhB,EAAAtV,IAGAmM,GAAAnM,GA+DAm5B,CAAAn5B,EAAA4B,EAAA2T,KAcA,OAXAA,IAAA9qB,IAEAmD,KAAA2mC,SAAA,kBAAAv0B,EAAA4B,GACAoJ,GAAAhL,EAAA,0BAAAA,EAAA4B,EAAA2T,EAAA2jB,OAGAA,IAAAzuC,GAAAyuC,IACAtrC,KAAAkS,QAAAC,UAIAshB,IAGAxiB,EAAA,kDAAA1R,GACA,OAAAS,KAAA2mC,SAAA,kBAAAv0B,EAAA4B,GACA,kBAAAzU,EAAAioB,EAAApV,EAAA4B,MACK,KAGLhD,EAAA,8BACA,OAAAhR,KAAA2mC,SAAA,iBAAAv0B,GACA4U,EAAA5U,IACK,KAGLpB,EAAA,0BAAAzR,EAAAylB,GACA,OAAAhlB,KAAAgmC,QAAAzlC,OAAA,CACA,IAAAmmC,EAAA1mC,KAAAgmC,QAAA,GAEA,mBAAAzmC,GAAA,WAAAA,EACA,OAAA6nB,EAAAsf,EAAA1hB,GACO,gBAAAzlB,GAAA,cAAAA,EACP,OAAAioB,EAAAkf,EAAA1hB,MAKAhU,EAAA,oBAAAs1B,EAAAtgC,GACA,OAAAmjC,GAAAnpC,KAAAkS,QAAAo0B,EAAAtgC,MAgFAgL,EAAA,mBAAAw6B,EAAAC,EAAAzlC,GAqBA,GAnBAlJ,EAAAsR,cAAAo9B,KAEAA,EAAAp/B,MAAAvP,GAEAmJ,EAAAwlC,EACAA,EAAA,OAGAxlC,EAAAylC,EACAA,EAAA,OAIA3uC,EAAAsR,cAAAq9B,KACAzlC,EAAAylC,EACAA,EAAA,MAIA,OAAAA,OAAA5uC,EACA,OAAAmD,KAAA2mC,SAAA,iBAAAv0B,GACA,OApGA,SAAAA,EAAAk0B,EAAAtgC,GACA,IAOAoG,EAEA9H,EAAAjE,EAAAmE,EAAAmI,EAAAoU,EAAA6kB,EATAliC,EAAA0O,EAAAe,OAEArO,EAAAkiC,GAAA50B,EAAApM,GAEAqjB,EAAA7I,EAAAJ,EAAA1c,EAAAoB,EAAA,YAEA4mC,EAAA5uC,EAAA,GAAAwD,OAAAqQ,MAAA,GAAA0Y,IAEAnX,EAAAE,EAAA6J,UAAA1b,OAiEA,OAAAuoC,GAAA,OAAAxC,EA9DA,SAAA/hC,GACA,IAAAonC,EAAA,oBAAApnC,EAEA,UAAAA,OAAA1H,GAAA8uC,EAAA,CAIA,IAFArnC,EAAA,GAEAjE,EAAA,EAAAmE,EAAAM,EAAAvE,OAAsCF,EAAAmE,EAASnE,IAG/C,IAFA+L,EAAAtH,EAAAzE,GAEAsM,EAAA,EAAqBA,EAAAuF,EAAavF,IAClCoU,EAAA,CACA3U,MACA4H,OAAArH,GAGAg/B,GAEA/F,EAAAliC,EAAA0I,GAEA7H,EAAAwc,EAAAqH,EAAAhW,EAAAhG,EAAAO,GAAAi5B,EAAA1a,QAAA0a,EAAA1a,QAAAve,GAAA,OACArI,EAAAM,KAAAmc,IAIAzc,EAAAM,KAAAmc,GAKA,OAAAzc,EAIA,GAAAxH,EAAAsR,cAAA7J,GAEA,OAAAA,EAAAyP,SAAAnX,GAAA0H,EAAA6H,MAAAvP,IAAA,IAAAC,EAAAue,QAAA9W,EAAA6H,IAAAtH,GAAA,CAAAP,GAAA,GAIA,IAAA6mC,EAAAM,EAAAnvB,OAAAhY,GAAA8K,IAAA,SAAAhP,EAAAib,GACA,OAEAlP,IAAAkP,EAAA2Q,cAAA7f,IACA4H,OAAAsH,EAAA2Q,cAAAjY,UAEOjC,UAEP,OAAAq5B,EAAA7qC,SAAAgE,EAAAwB,SACAqlC,GAMAxF,EAAA9oC,EAAAyH,GAAA4F,QAAA,mBACA5J,OAAA,EACA6L,IAAAw5B,EAAAliC,KAAA,UACAsQ,OAAA4xB,EAAAliC,KAAA,eACO,IAGP0O,EAAApM,GA0BA4lC,CAAAx5B,EAAAo5B,EAAAtC,GAAAljC,MAKA,IAEA1B,EAAAjE,EAAAmE,EAAAmI,EAAAC,EAFAsF,EAAAlS,KAAAkS,QAAAu5B,GACA3mC,EAAA9E,KAAA8E,KAAA0mC,GAEAxrC,KAAA2mC,SAAA,iBAAAv0B,EAAA4S,GAGA,IAFA1gB,EAAA,GAEAjE,EAAA,EAAAmE,EAAAM,EAAAkgB,GAAAzkB,OAAyCF,EAAAmE,EAASnE,IAClD,IAAAsM,EAAA,EAAAC,EAAAsF,EAAA8S,GAAAzkB,OAA8CoM,EAAAC,EAASD,IACvDrI,EAAAM,KAAA,CACAwH,IAAAtH,EAAAkgB,GAAA3kB,GACA2T,OAAA9B,EAAA8S,GAAArY,MAIK,GAEL,IAAA0c,EAAArpB,KAAAqpB,MAAA/kB,EAAA0B,GAMA,OALAlJ,EAAAsa,OAAAiS,EAAAid,SAAA,CACAj5B,KAAAo+B,EACA3mC,KAAA0mC,EACAxlC,SAEAqjB,IAGApY,EAAA,6CACA,OAAAjR,KAAA2mC,SAAA,gBAAAv0B,EAAAhG,EAAA4H,GACA,IAAAtQ,EAAA0O,EAAAe,OAAA/G,GACA,OAAA1I,KAAAwnB,QAAAxnB,EAAAwnB,QAAAlX,GAAAnX,GACK,KAGLmU,EAAA,4BACA,OAAAhR,KAAA2mC,SAAA,gBAAAv0B,EAAAhG,EAAA4H,GACA,OAAAoU,EAAAhW,EAAAhG,EAAA4H,IACK,KAGL/C,EAAA,4CAAA1R,GAEA,OADAA,EAAA,WAAAA,EAAA,4BACAS,KAAA2mC,SAAA,gBAAAv0B,EAAAhG,EAAA4H,GACA,OAAA5B,EAAAe,OAAA/G,GAAA7M,GAAAyU,IACK,KAGL/C,EAAA,8CAAA1R,GACA,OAAAS,KAAA2mC,SAAA,gBAAAv0B,EAAAhG,EAAA4H,GACA,OAAAoU,EAAAhW,EAAAhG,EAAA4H,EAAAzU,IACK,KAGL0R,EAAA,gDACA,OAAAjR,KAAA2mC,SAAA,gBAAAv0B,EAAAhG,EAAA4H,GACA,OACA5H,MACA4H,SACAU,cAAA8S,EAAApV,EAAA4B,KAEK,KAGL/C,EAAA,sDAAAiD,GACA,OAAAlU,KAAA2mC,SAAA,gBAAAv0B,EAAAhG,EAAA4H,GACA8W,GAAA1Y,EAAAhG,EAAA8H,EAAAF,OAIAhD,EAAA,kBAAAw6B,EAAAC,EAAAzlC,GACA,OAAAmjC,GAAAnpC,KAAAqpB,MAAAmiB,EAAAC,EAAAzlC,MAGAgL,EAAA,yBAAAtN,GACA,IAAAgjC,EAAA1mC,KAAAgmC,QACAz5B,EAAAvM,KAAA,GAEA,OAAA0D,IAAA7G,EAEA6pC,EAAAnmC,QAAAgM,EAAAhM,OAAA6nB,EAAAse,EAAA,GAAAn6B,EAAA,GAAAH,IAAAG,EAAA,GAAAyH,QAAAnX,GAIAgtB,EAAA6c,EAAA,GAAAn6B,EAAA,GAAAH,IAAAG,EAAA,GAAAyH,OAAAtQ,GAEAonB,GAAA4b,EAAA,GAAAn6B,EAAA,GAAAH,IAAA,OAAAG,EAAA,GAAAyH,QAEAhU,QAsCAgR,EAAA,mBAAA2E,EAAAwH,GACA,IAAAupB,EAAA1mC,KAAAgmC,QAEA,OAAArwB,IAAA9Y,EAEA,IAAA6pC,EAAAnmC,OAAAmmC,EAAA,GAAAhqB,UAAA7f,GAIA,kBAAA8Y,EAEAA,EAAA,EAAAA,EAAAwH,IACKxH,EAAApV,SAAAzD,EAAA6U,QAAAgE,EAAA,MAELA,EAAAowB,MAAA5jC,UAAAuZ,MAAAjb,KAAA+hB,YAIAxiB,KAAA2mC,SAAA,iBAAAv0B,GACAA,EAAAsK,UAAA/G,EAAA+F,aAeA1K,EAAA,4BAAA/P,EAAA+S,EAAAd,GACA,OAAAlT,KAAA2mC,SAAA,iBAAAv0B,GACAwa,GAAAxa,EAAAnR,EAAA+S,EAAAd,OAIAlC,EAAA,yBAAA66B,GACA,IAAAA,EAAA,CACA,IAAAnF,EAAA1mC,KAAAgmC,QACAzE,EAAAmF,EAAAnmC,OAAAmmC,EAAA,GAAAlF,eAAA3kC,EACA,OAAAC,EAAA6U,QAAA4vB,GAAA,CACAI,IAAAJ,GACOA,EAGP,OAAAvhC,KAAA2mC,SAAA,iBAAAv0B,GACAA,EAAAovB,eAAA1kC,EAAAsa,QAAA,KAAiDy0B,OAKjD76B,EAAA,kDAAAmM,GACA,IAAA7U,EAAAtI,KACA,OAAAA,KAAA2mC,SAAA,iBAAAv0B,EAAA/R,GACA,IAAA4G,EAAA,GACAnK,EAAAuJ,KAAAiC,EAAAjI,GAAA,SAAAsM,EAAA/F,GACAK,EAAArC,KAAA,CAAAgC,EAAAuW,MAEA/K,EAAAsK,UAAAzV,MAIA+J,EAAA,oBAAA4kB,EAAAlB,EAAA4C,EAAAwU,GACA,IAAApF,EAAA1mC,KAAAgmC,QAEA,OAAApQ,IAAA/4B,EAEA,IAAA6pC,EAAAnmC,OAAAmmC,EAAA,GAAA9W,gBAAA6E,QAAA53B,EAIAmD,KAAA2mC,SAAA,iBAAAv0B,GACAA,EAAAuG,UAAA8W,SAIAE,GAAAvd,EAAAtV,EAAAsa,OAAA,GAA6ChF,EAAAwd,gBAAA,CAC7C6E,QAAAmB,EAAA,GACAjiB,OAAA,OAAA+gB,KACA9gB,OAAA,OAAA0jB,KACAxjB,iBAAA,OAAAg4B,OACO,OAIP76B,EAAA,kDAAA2kB,EAAAlB,EAAA4C,EAAAwU,GACA,OAAA9rC,KAAA2mC,SAAA,kBAAAv0B,EAAA4B,GACA,IAAAmgB,EAAA/hB,EAAA6S,gBAEA,GAAA2Q,IAAA/4B,EAEA,OAAAs3B,EAAAngB,GAAAygB,QAIAriB,EAAAuG,UAAA8W,UAIA3yB,EAAAsa,OAAA+c,EAAAngB,GAAA,CACAygB,QAAAmB,EAAA,GACAjiB,OAAA,OAAA+gB,KACA9gB,OAAA,OAAA0jB,KACAxjB,iBAAA,OAAAg4B,OAGAnc,GAAAvd,IAAAwd,gBAAA,QAQA5e,EAAA,qBACA,OAAAhR,KAAAgmC,QAAAzlC,OAAAP,KAAAgmC,QAAA,GAAAlC,YAAA,OAGA9yB,EAAA,2BACA,OAAAhR,KAAA2mC,SAAA,iBAAAv0B,GAEAA,EAAA2xB,oBAAAtjC,KAAA2R,EAAAwF,UAAAxF,EAAA,QAIApB,EAAA,4BACA,OAAAhR,KAAAgmC,QAAAzlC,OAAAP,KAAAgmC,QAAA,GAAA5B,aAAA,OAGApzB,EAAA,0BACA,OAAAhR,KAAA2mC,SAAA,iBAAAv0B,GACAmM,GAAAnM,OAoBAjV,EAAA4uC,aAAA5uC,EAAAgZ,eAAA,SAAAlR,GAKA,IAJA,IAEA+mC,EAAAC,EAFAC,EAAA/uC,EAAA8H,QAAAtE,MAAA,KACAwrC,EAAAlnC,EAAAtE,MAAA,KAGAN,EAAA,EAAAoW,EAAA01B,EAAA5rC,OAAwCF,EAAAoW,EAAUpW,IAIlD,GAHA2rC,EAAA9sB,SAAAgtB,EAAA7rC,GAAA,OACA4rC,EAAA/sB,SAAAitB,EAAA9rC,GAAA,OAEA2rC,IAAAC,EAKA,OAAAD,EAAAC,EAGA,UAmBA9uC,EAAAivC,YAAAjvC,EAAAkvC,cAAA,SAAA3iC,GACA,IAAA7D,EAAA/I,EAAA4M,GAAA4iC,IAAA,GACAC,GAAA,EAEA,OAAA7iC,aAAAvM,EAAAopC,MAIAzpC,EAAAuJ,KAAAlJ,EAAAiV,SAAA,SAAA/R,EAAA0gB,GACA,IAAAyrB,EAAAzrB,EAAA6b,YAAA9/B,EAAA,QAAAikB,EAAA6b,aAAA,QACA6P,EAAA1rB,EAAA+b,YAAAhgC,EAAA,QAAAikB,EAAA+b,aAAA,QAEA/b,EAAAzJ,SAAAzR,GAAA2mC,IAAA3mC,GAAA4mC,IAAA5mC,IACA0mC,GAAA,KAGAA,IAoBApvC,EAAAipC,OAAAjpC,EAAAuvC,SAAA,SAAAn3B,GACA,IAAAlE,GAAA,EAEAvU,EAAAsR,cAAAmH,KACAlE,EAAAkE,EAAAlE,IACAkE,aAGA,IAAAjR,EAAAxH,EAAAuS,IAAAlS,EAAAiV,SAAA,SAAA2O,GACA,IAAAxL,MAAAzY,EAAAikB,EAAAzJ,QAAAi1B,GAAA,YACA,OAAAxrB,EAAAzJ,SAGA,OAAAjG,EAAA,IAAAN,EAAAzM,MAiBAnH,EAAAwvC,iBAAAx1B,EAKAnG,EAAA,eAAAs1B,EAAAtgC,GACA,IAAAlB,EAAA9E,KAAA8E,KAAAkB,GAAAsO,QAEAs4B,EAAA9vC,EAAAgI,GACA,OAAAhI,EAAA,GAAAwD,OAAAssC,EAAArwB,OAAA+pB,GAAAv0B,UAAA66B,EAAAzxB,KAAAmrB,GAAAv0B,cAIAjV,EAAAuJ,KAAA,4BAAAhG,EAAAiG,GACA0K,EAAA1K,EAAA,gBAGA,IAAAic,EAAAwjB,MAAA5jC,UAAAuZ,MAAAjb,KAAA+hB,WAEAD,EAAA,GAAAzlB,EAAAuS,IAAAkT,EAAA,GAAA5hB,MAAA,eAAAwH,GACA,OAAAA,EAAA7E,MAAA,UAAA6E,IAAA,QACO9D,KAAA,KACP,IAAA+kC,EAAAtsC,EAAAkD,KAAAomC,SAAA9xB,SAEA,OADA80B,EAAA9iC,GAAAqK,MAAAy4B,EAAA7mB,GACAviB,SAIAgR,EAAA,qBACA,OAAAhR,KAAA2mC,SAAA,iBAAAv0B,GACAsY,EAAAtY,OAIApB,EAAA,wBACA,WAAAD,EAAA/Q,KAAAgmC,QAAAhmC,KAAAgmC,WAGAh1B,EAAA,oBACA,IAAA01B,EAAA1mC,KAAAgmC,QACA,OAAAU,EAAAnmC,OAAAmmC,EAAA,GAAAhwB,MAAA,OAGA1F,EAAA,oBACA,OAAAhR,KAAA2mC,SAAA,iBAAAv0B,GACA,OAAA4N,EAAA5N,EAAAe,OAAA,YACKrB,YAGLd,EAAA,qBAAA5R,GAEA,OADAA,MAAA,EACAY,KAAA2mC,SAAA,iBAAAv0B,GACA,IAYA5N,EAZAqoC,EAAAz6B,EAAAge,cAAA5Y,WACAqC,EAAAzH,EAAAwH,SACAlQ,EAAA0I,EAAAkF,OACAqG,EAAAvL,EAAAwL,OACAF,EAAAtL,EAAAmF,OACAsG,EAAAzL,EAAAqF,OACAq1B,EAAAhwC,EAAA4M,GACAqjC,EAAAjwC,EAAA6gB,GACAqvB,EAAAlwC,EAAAsV,EAAAge,eACAtrB,EAAAhI,EAAAuS,IAAA+C,EAAAe,OAAA,SAAA9G,GACA,OAAAA,EAAAwG,MAKAT,EAAAmc,aAAA,EAEAnR,GAAAhL,EAAA,+BAAAA,IAGAhT,GACA,IAAA2R,EAAAqB,GAAAF,UAAAqD,SAAA,GAMAy3B,EAAA3iC,IAAA,OAAA8Q,KAAA,iBAAA9Q,IAAA,OACAvN,EAAAC,GAAAsN,IAAA,OAAA+H,EAAAiG,WAEA3O,GAAAgU,EAAAlG,aACAs1B,EAAA1mC,SAAA,SAAAipB,SACAyd,EAAA5iC,OAAAwT,IAGAG,GAAAnU,GAAAmU,EAAArG,aACAs1B,EAAA1mC,SAAA,SAAAipB,SACAyd,EAAA5iC,OAAA2T,IAGAzL,EAAAsK,UAAA,GACAtK,EAAAovB,eAAA,GAEA3kB,GAAAzK,GAEAtV,EAAAgI,GAAA0W,YAAApJ,EAAA0I,gBAAAzW,KAAA,MACAvH,EAAA,SAAA4gB,GAAAlC,YAAA3B,EAAAiN,UAAA,IAAAjN,EAAA4M,aAAA,IAAA5M,EAAA+M,cAAA,IAAA/M,EAAAwM,eAEA0mB,EAAA3mC,WAAAipB,SACA0d,EAAA7iC,OAAApF,GAEA,IAAAmoC,EAAA7tC,EAAA,kBACA0tC,EAAAG,KACAD,EAAAC,MAEA7tC,GAAAytC,IAEAA,EAAA7c,aAAAtmB,EAAA0I,EAAAie,sBAGAyc,EAAAnkC,IAAA,QAAAyJ,EAAAgG,eAAAoD,YAAA3B,EAAAE,SAIAvV,EAAA4N,EAAAqJ,iBAAAlb,SAGAwsC,EAAA3mC,WAAAC,KAAA,SAAAhG,GACAvD,EAAAkD,MAAA8Z,SAAA1H,EAAAqJ,iBAAApb,EAAAmE,OAOA,IAAAwgB,EAAAloB,EAAAue,QAAAjJ,EAAAjV,EAAAiV,WAEA,IAAA4S,GACA7nB,EAAAiV,SAAA4F,OAAAgN,EAAA,OAMAloB,EAAAuJ,KAAA,iCAAAhG,EAAAd,GACAyR,EAAAzR,EAAA,uBAAAnC,GACA,IAAA4I,EAAAhG,KAAAsmC,SAAAtgC,KACAqL,EAAArR,KACA,OAAAA,KAAA2mC,SAAApnC,EAAA,SAAA6S,EAAA86B,EAAAC,EAAAC,EAAAC,GAWAjwC,EAAAqD,KAAA4Q,EAAA9R,GAAA2tC,EAAA,SAAA3tC,EAAA4tC,EAAAnnC,EAAA,SAAAzG,EAAAyG,EAAAnJ,GAAAqwC,EAAAC,EAAAC,EAAAC,SAMAr8B,EAAA,kBAAAs8B,EAAA7kB,EAAA8kB,GACA,IAAA7G,EAAA1mC,KAAAgmC,QAAA,GAEAwH,EAAA/zB,EAAA6zB,EAAA7zB,CAAAitB,EAAAnuB,WAUA,OARAi1B,IAAA3wC,IACA2wC,EAAA/kB,GAGA8kB,IAAA1wC,GAAAC,EAAAsR,cAAAo/B,KACAA,IAAAD,KAAA1wC,EAAA2wC,EAAAD,GAAAC,EAAA7vC,GAGA6vC,EAAA7rC,QAAA,KAAA4rC,KAYApwC,EAAA8H,QAAA,UAcA9H,EAAAiV,SAAA,GAQAjV,EAAAgb,OAAA,GAOAhb,EAAAgb,OAAAgL,QAAA,CAMArP,kBAAA,EAOA2gB,QAAA,GASA9gB,QAAA,EAOAC,QAAA,GASAzW,EAAAgb,OAAA4Q,KAAA,CAMAlW,IAAA,KAQAqY,QAAA,KAWAlC,OAAA,GAcAmC,WAAA,KASAC,aAAA,KAWA4M,YAAA,KAUAlJ,YAAA,GAWA5a,IAAA,KASA8Q,KAAA,GAcA7nB,EAAAgb,OAAA0M,QAAA,CAOAG,IAAA,KAWA3B,UAAA,KAUAzG,UAAA,KAOAiY,YAAA,KAMAzO,UAAA,KAMAwB,SAAA,KASArC,aAAA,KASAK,WAAA,EAcAsG,cAAA,KAgBAjY,UAAA,KAaAgS,UAAA,KASAjQ,MAAA,KAUA0P,QAAA,KAQAhB,IAAA,KASAsI,IAAA,KAOAjY,OAAA,KAaA+rB,gBAAA,KASApX,gBAAA,KAOAiL,MAAA,KAQAgP,cAAA,MAOAnd,cAAA,KAQAE,iBAAA,KAMA5B,OAAA,KAOAQ,MAAA,KAOA6B,OAAA,KAOA/B,WAAA,MAwBAjoB,EAAA4Z,SAAA,CA4DAiH,OAAA,KA6BAtB,UAAA,YAsBA8kB,eAAA,GA4JA/mB,KAAA,KAyBAjC,YAAA,eAcAyD,UAAA,KAqBAG,aAAA,KA0BA8G,aAAA,GAoBApI,gBAAA,KAmBAmM,YAAA,EAsBA1J,cAAA,EA2BA5F,UAAA,EAuBA8X,SAAA,EAmBAgC,OAAA,EAkBAN,eAAA,EAiBAD,WAAA,EAoBAI,aAAA,EAqCA5Z,WAAA,EAuBA+1B,iBAAA,EAqBAxf,aAAA,EAkBAnR,OAAA,EAmBAimB,YAAA,EAmBAnQ,eAAA,EAqBA4Q,cAAA,EAwBAllB,YAAA,EA2BAnF,aAAA,KAoBAN,eAAA,KA2BAQ,iBAAA,KA6BAkgB,eAAA,SAAAmU,GACA,OAAAA,EAAA1mC,WAAArF,QAAA,wBAAqD3B,KAAAuY,UAAAuJ,aA6BrD1I,iBAAA,KA6BAigB,eAAA,KAwBA/f,eAAA,KAyBAC,kBAAA,KA4BAL,cAAA,KAyBAya,aAAA,KA0BA7a,eAAA,KAgCAurB,oBAAA,SAAAjyB,GACA,IACA,OAAAu7B,KAAAC,QAAA,IAAAx7B,EAAA+xB,eAAA0J,eAAAC,cAAAC,QAAA,cAAA37B,EAAAiG,UAAA,IAAAvW,SAAAksC,WACO,MAAA7lC,MAsCP6Q,kBAAA,KAuBAC,cAAA,KA+BA8qB,oBAAA,SAAA3xB,EAAA1O,GACA,MACA,IAAA0O,EAAA+xB,eAAA0J,eAAAC,cAAAG,QAAA,cAAA77B,EAAAiG,UAAA,IAAAvW,SAAAksC,SAAAL,KAAAO,UAAAxqC,IACO,MAAAyE,MA2BP4Q,kBAAA,KAmBAorB,eAAA,KA2CAhqB,cAAA,KAmBA1B,eAAA,GAoBAwB,cAAA,EAsBA0S,UAAA,EAUA/S,SAAA,GASArB,UAAA,CAQAkqB,MAAA,CAsBAC,eAAA,sCAuBAC,gBAAA,wCASAwL,UAAA,CAqBAC,OAAA,QAsBAC,MAAA,OAsBAC,MAAA,OAsBAC,UAAA,YAuBA5sB,YAAA,6BA+BAkX,MAAA,8CAoBAI,WAAA,8BAqBAC,cAAA,sCAsBAC,aAAA,GA8BA5X,SAAA,GAsBAO,WAAA,IAwCA0Y,YAAA,sBAuBA5Y,gBAAA,aAoBAwZ,YAAA,gBAkCA3G,QAAA,UAUA0B,mBAAA,GAwBA3b,KAAA,GAqBAkH,aAAA,6BAwBAyB,QAAArmB,EAAAsa,OAAA,GAA0Bja,EAAAgb,OAAAgL,SAoB1BqS,cAAA,OAkBA5B,YAAA,KAqDAhD,KAAA,SAmBAqF,YAAA,KA2BAyE,gBAAA,iBAwBA3X,SAAA,GAuBAyrB,cAAA,GAuBAC,SAAA,GAiBApb,cAAA,MAiBAsS,SAAA,KAUAjsB,MAAA,YAGAoH,EAAA3jB,EAAA4Z,UAYA5Z,EAAA4Z,SAAA/C,OAAA,CAuCAqP,UAAA,KACAmC,WAAA,EAsCA5I,UAAA,eAgCAiY,aAAA,EAgCAzO,WAAA,EAgCAwB,UAAA,EA+BAsE,cAAA,KAmLAlW,MAAA,KAyHA0P,QAAA,KAuBAsG,UAAA,KAkCAjX,OAAA,GAiCA+rB,gBAAA,GA0CApX,gBAAA,KA2CAiL,MAAA,GAyCAgP,cAAA,MAmCA7e,OAAA,KAwCAQ,MAAA,KAqCA6B,OAAA,MAGArG,EAAA3jB,EAAA4Z,SAAA/C,QAyBA7W,EAAAgb,OAAAD,UAAA,CAKAS,UAAA,CAQAsO,WAAA,KAWA1J,aAAA,KAUAkS,QAAA,KASAgC,MAAA,KASAN,cAAA,KASAD,UAAA,KASAI,YAAA,KAUArD,YAAA,KAQAnR,MAAA,KAQAimB,WAAA,KAUAS,aAAA,KAQAllB,WAAA,MAOAhM,QAAA,CAQAqqB,UAAA,KAQAtY,UAAA,EASA9R,GAAA,KAUA4pB,QAAA,KASA3pB,GAAA,MAQA+F,UAAA,CAOA8gB,eAAA,MAOAjV,SAAA,CAOAN,iBAAA,EASAC,gBAAA,EAOAG,WAAA,EAOAP,SAAA,GAEAlJ,KAAA,KAgBAuX,YAAA,GAQA7e,OAAA,GAOAgL,UAAA,GAOAC,gBAAA,GAOA6K,KAAA,GAOAhN,UAAA,GAOAF,SAAA,GAOAgC,SAAA,GAUA6R,gBAAA,GASA3K,gBAAA,GAcAvI,UAAA,KAUA8kB,eAAA,GASA1mB,gBAAA,KAOAW,iBAAA,GAOArD,cAAA,EAOAs2B,cAAA,GAOAC,iBAAA,GAOAC,iBAAA,GAOA9V,eAAA,GAOA+V,qBAAA,GAQAC,kBAAA,GAOAC,eAAA,GAQAC,kBAAA,GAQAC,kBAAA,GAQAC,cAAA,GAOAp3B,SAAA,GAOAR,OAAA,KAOAC,OAAA,KAOAE,OAAA,KAOAmG,OAAA,KAOAwS,cAAA,KAUAhW,eAAA,EAOAiE,cAAA,EAQA2P,WAAA,GAUA4C,KAAA,KAOAqF,YAAA,KASAyE,gBAAA,aASAyJ,eAAA,EAeAgL,YAAA,GAaAC,YAAA,GAOAtL,YAAA,KAOAM,aAAA,KASAxQ,YAAA,KAUA4B,cAAA,KAOA3B,cAAA,EASAZ,MAAA,KAOArY,KAAA/d,EAOA62B,UAAA72B,EAQA82B,aAAA,KAQA0b,eAAA,GASAhc,cAAA,KAQAkG,eAAA,KASA/gB,YAAA,KAQAgR,MAAA,EAOA0E,UAAA,EAOAtE,YAAA,EAOA2K,gBAAA,GAOAra,eAAA,EAWAK,eAAA,EAWAD,iBAAA,EAOAV,SAAA,GAUA0V,WAAA,EAUAvS,SAAA,EAUA6V,cAAA,KAOAlc,MAAA,KAQA44B,kBAAA,GAMAtgB,eAAA,WACA,aAAA1R,GAAAtd,MAAA,EAAAA,KAAAua,eAAAva,KAAAoe,gBAAA7d,QAOA4tB,iBAAA,WACA,aAAA7Q,GAAAtd,MAAA,EAAAA,KAAAsa,iBAAAta,KAAAme,UAAA5d,QAOA8tB,aAAA,WACA,IAAA9oB,EAAAvF,KAAAu0B,gBACAjU,EAAAtgB,KAAAka,eACAoxB,EAAAhrB,EAAA/a,EACA21B,EAAAl7B,KAAAme,UAAA5d,OACAic,EAAAxc,KAAA2Y,UACA42B,EAAA/yB,EAAA0U,UAEA,OAAA1U,EAAAyR,aACA,IAAAshB,IAAA,IAAAhqC,EAAA+a,EAAA4a,EAAA11B,KAAA+H,IAAA+S,EAAA/a,EAAAvF,KAAAsa,mBAEAi1B,GAAAjE,EAAApQ,IAAA,IAAA31B,EAAA21B,EAAAoQ,GASA1zB,UAAA,KASAS,UAAA,KAMAsU,UAAA,EAKAiQ,YAAA,KAKAE,YAAA,KAOAuG,UAAA,GAOAmM,SAAA,GAOAh2B,QAAA,KAOAE,MAAA,MA2BAvc,EAAA2K,IAAAgJ,EAAA,CASAnN,QAAA,GAQAkW,QAAA,GAOA41B,QAAA,WAWA7K,QAAA,QAuCAhT,QAAA,GA4DA7d,OAAA,GA0BAuyB,SAAA,CACA/5B,KAAA,GACAyH,OAAA,GACA5H,IAAA,IAaAmK,SAAA,GAQAwe,OAAA,CAQAta,KAAA,MAgDAmgB,MAAA,GACA+K,SAAA,CACA+J,WAAA,GACAjrC,OAAA,IA2CAkR,MAAA,GAYApW,KAAA,CAyCA4oB,OAAA,GAsCApU,OAAA,GAkEA4B,MAAA,IASAsC,QAAA,EAaA9B,eAAAhZ,EAAAgZ,eAOA3E,UAAA,EAOAm+B,YAAA,GAOAC,SAAAzyC,EAAA8H,SAKAnI,EAAAsa,OAAAtG,EAAA,CACA++B,aAAA/+B,EAAAiD,OACA+7B,OAAAh/B,EAAAvR,KAAA4oB,OACA4nB,UAAAj/B,EAAAvR,KAAAwU,OACAi8B,MAAAl/B,EAAAvR,KAAAoW,MACAs6B,YAAAn/B,EAAA6E,MACAkc,WAAA/gB,EAAA8gB,QACAtb,KAAAxF,EAAAyF,SACA25B,YAAAp/B,EAAA+I,QACAs2B,YAAAr/B,EAAA8pB,QAEA99B,EAAAsa,OAAAja,EAAA2K,IAAA+R,QAAA,CACAE,OAAA,YACA+D,UAAA,YAGAsyB,YAAA,kBACAC,kBAAA,UACAC,oBAAA,WAGAv1B,WAAA,MACAC,YAAA,OAGAoU,UAAA,mBAGAc,SAAA,qBACA6F,QAAA,oBACA8C,MAAA,kBACAgC,QAAA,8BAGAN,QAAA,oBACAa,YAAA,wBAGAmV,SAAA,cACAC,UAAA,eACA1pB,UAAA,UAGAL,aAAA,uBACAG,cAAA,wBACAP,cAAA,mBACAkd,YAAA,WAKA1N,aAAA,GAGAuE,cAAA,GAGA0B,eAAA,oBACAC,YAAA,wBACAE,iBAAA,6BACAI,YAAA,wBACAC,YAAA,wBACAC,iBAAA,6BAGAzP,UAAA,GACAC,UAAA,GAEA0jB,YAAA,GACAC,aAAA,GACA3pB,SAAA,GACAJ,mBAAA,GACAE,oBAAA,GACA8pB,gBAAA,GACAC,UAAA,GACA/f,WAAA,GACAC,WAAA,KAEA,IAAA+f,GAAA1zC,EAAA2K,IAAA8yB,MAEA,SAAAkW,GAAA37B,EAAA6lB,GACA,IAAA+V,EAAA,GACAptC,EAAAktC,GAAAG,eACAC,EAAAzrC,KAAAC,MAAA9B,EAAA,GAuBA,OApBAq3B,GAAAr3B,EACAotC,EAAA1wB,EAAA,EAAA2a,GACK7lB,GAAA87B,IACLF,EAAA1wB,EAAA,EAAA1c,EAAA,IACAiB,KAAA,YACAmsC,EAAAnsC,KAAAo2B,EAAA,IACK7lB,GAAA6lB,EAAA,EAAAiW,IACLF,EAAA1wB,EAAA2a,GAAAr3B,EAAA,GAAAq3B,IACAhjB,OAAA,gBAEA+4B,EAAA/4B,OAAA,UAEA+4B,EAAA1wB,EAAAlL,EAAA87B,EAAA,EAAA97B,EAAA87B,EAAA,IACArsC,KAAA,YACAmsC,EAAAnsC,KAAAo2B,EAAA,GACA+V,EAAA/4B,OAAA,gBACA+4B,EAAA/4B,OAAA,QAGA+4B,EAAAG,MAAA,OACAH,EAGAj0C,EAAAsa,OAAAy5B,GAAA,CACAM,OAAA,SAAAh8B,EAAA6lB,GACA,2BAEAoW,KAAA,SAAAj8B,EAAA6lB,GACA,0CAEA+V,QAAA,SAAA57B,EAAA6lB,GACA,OAAA8V,GAAA37B,EAAA6lB,KAEAqW,eAAA,SAAAl8B,EAAA6lB,GACA,kBAAA8V,GAAA37B,EAAA6lB,GAAA,SAEAsW,aAAA,SAAAn8B,EAAA6lB,GACA,0BAAA8V,GAAA37B,EAAA6lB,GAAA,gBAEAuW,mBAAA,SAAAp8B,EAAA6lB,GACA,eAAA8V,GAAA37B,EAAA6lB,GAAA,SAGA8V,YAEAE,eAAA,IAEAl0C,EAAAsa,QAAA,EAAAja,EAAA2K,IAAA69B,SAAA,CACA+J,WAAA,CACA/xC,EAAA,SAAAyU,EAAAwzB,EAAA5gB,EAAArhB,EAAAwR,EAAA6lB,GACA,IAGAwW,EACAC,EA0EAC,EA9EA73B,EAAAzH,EAAAwH,SACAyH,EAAAjP,EAAAmG,UAAA41B,UACAwD,EAAAv/B,EAAAmG,UAAAkqB,MAAA8M,UAAA,GAGAqC,EAAA,EA2EA,IAKAF,EAAA50C,EAAA8oC,GAAAzqB,KAAAne,EAAAs5B,eAAA5yB,KAAA,UACS,MAAAyE,KA/ET,SAAA0pC,EAAAloC,EAAAhG,GACA,IAAAtD,EAAAmE,EAAA4D,EAEA0pC,EAAA,SAAA3pC,GACA8yB,GAAA7oB,EAAAjK,EAAAzE,KAAAwE,QAAA,IAGA,IAAA7H,EAAA,EAAAmE,EAAAb,EAAApD,OAA2CF,EAAAmE,EAASnE,IAGpD,GAFA+H,EAAAzE,EAAAtD,GAEAvD,EAAA6U,QAAAvJ,GAAA,CACA,IAAAsb,EAAA5mB,EAAA,KAAAsL,EAAA8oC,OAAA,aAAA1nC,SAAAG,GACAkoC,EAAAnuB,EAAAtb,OACa,CAIb,OAHAopC,EAAA,KACAC,EAAA,GAEArpC,GACA,eACAuB,EAAAO,OAAA,0CACA,MAEA,YACAsnC,EAAAnwB,EAAA+sB,OACAqD,EAAArpC,GAAA+M,EAAA,SAAA0E,EAAAy2B,qBACA,MAEA,eACAkB,EAAAnwB,EAAAktB,UACAkD,EAAArpC,GAAA+M,EAAA,SAAA0E,EAAAy2B,qBACA,MAEA,WACAkB,EAAAnwB,EAAAitB,MACAmD,EAAArpC,GAAA+M,EAAA6lB,EAAA,SAAAnhB,EAAAy2B,qBACA,MAEA,WACAkB,EAAAnwB,EAAAgtB,MACAoD,EAAArpC,GAAA+M,EAAA6lB,EAAA,SAAAnhB,EAAAy2B,qBACA,MAEA,QACAkB,EAAAppC,EAAA,EACAqpC,EAAAt8B,IAAA/M,EAAAyR,EAAAw2B,kBAAA,GAIA,OAAAmB,IAUAtO,GATApmC,EAAA,OACAmyB,MAAApV,EAAAu2B,YAAA,IAAAqB,EACAtX,gBAAA/nB,EAAA0F,SACAi6B,aAAAJ,EAAAvpC,GACA4pC,cAAAJ,EACAK,SAAA7/B,EAAAua,UACA5U,GAAA,IAAAiN,GAAA,kBAAA5c,EAAAgK,EAAA0F,SAAA,IAAA1P,EAAA,OACiByX,KAAA2xB,GAAAhoC,SAAAG,GAEjB,CACAzB,OAAAE,GACiB0pC,GAEjBF,MAmBAC,CAAA/0C,EAAA8oC,GAAAsM,QAAAvuC,GAEA+tC,IAAA70C,GACAC,EAAA8oC,GAAAzqB,KAAA,gBAAAu2B,EAAA,KAAA9nC,YAOA9M,EAAAsa,OAAAja,EAAA2K,IAAAvI,KAAA4oB,OAAA,CAEA,SAAAtgB,EAAAuK,GACA,IAAA2P,EAAA3P,EAAAmG,UAAAgJ,SACA,OAAA9B,EAAA5X,EAAAka,GAAA,MAAAA,EAAA,MAEA,SAAAla,EAAAuK,GAIA,GAAAvK,kBAAAya,QAAA1D,EAAA5gB,KAAA6J,GACA,YAGA,IAAAsqC,EAAA7vB,KAAAsrB,MAAA/lC,GACA,cAAAsqC,IAAAhzB,MAAAgzB,IAAApzB,EAAAlX,GAAA,aAEA,SAAAA,EAAAuK,GACA,IAAA2P,EAAA3P,EAAAmG,UAAAgJ,SACA,OAAA9B,EAAA5X,EAAAka,GAAA,aAAAA,EAAA,MAEA,SAAAla,EAAAuK,GACA,IAAA2P,EAAA3P,EAAAmG,UAAAgJ,SACA,OAAA3B,EAAA/X,EAAAka,GAAA,WAAAA,EAAA,MAEA,SAAAla,EAAAuK,GACA,IAAA2P,EAAA3P,EAAAmG,UAAAgJ,SACA,OAAA3B,EAAA/X,EAAAka,GAAA,kBAAAA,EAAA,MAEA,SAAAla,EAAAuK,GACA,OAAA2M,EAAAlX,IAAA,kBAAAA,IAAA,IAAAA,EAAA7C,QAAA,oBAQAlI,EAAAsa,OAAAja,EAAA2K,IAAAvI,KAAAwU,OAAA,CACA8L,KAAA,SAAAnc,GACA,OAAAqb,EAAArb,KAAA,kBAAAA,IAAA/B,QAAA+c,EAAA,KAAA/c,QAAAgd,EAAA,QAEAyzB,OAAA,SAAA1uC,GACA,OAAAqb,EAAArb,KAAA,kBAAAA,IAAA/B,QAAA+c,EAAA,KAAAhb,KAIA,IAAA2uC,GAAA,SAAAxqC,EAAAyqC,EAAAC,EAAAC,GACA,WAAA3qC,MAAA,MAAAA,GAOAyqC,IACAzqC,EAAAwX,EAAAxX,EAAAyqC,IAGAzqC,EAAAlG,UACA4wC,IACA1qC,IAAAlG,QAAA4wC,EAAA,KAGAC,IACA3qC,IAAAlG,QAAA6wC,EAAA,MAIA,EAAA3qC,IApBA4qC,KA0BA,SAAAjxB,GAAA8wB,GACAx1C,EAAAuJ,KAAA,CAEAiZ,IAAA,SAAAzX,GACA,OAAAwqC,GAAAxqC,EAAAyqC,IAGAI,UAAA,SAAA7qC,GACA,OAAAwqC,GAAAxqC,EAAAyqC,EAAAxzB,IAGA6zB,WAAA,SAAA9qC,GACA,OAAAwqC,GAAAxqC,EAAAyqC,EAAA3zB,IAGAi0B,eAAA,SAAA/qC,GACA,OAAAwqC,GAAAxqC,EAAAyqC,EAAA3zB,EAAAG,KAEK,SAAAxY,EAAAlJ,GAEL0T,EAAAvR,KAAAoW,MAAArP,EAAAgsC,EAAA,QAAAl1C,EAEAkJ,EAAAhD,MAAA,aACAwN,EAAAvR,KAAAwU,OAAAzN,EAAAgsC,GAAAxhC,EAAAvR,KAAAwU,OAAA8L,QAMA/iB,EAAAsa,OAAAtG,EAAAvR,KAAAoW,MAAA,CAEAk9B,WAAA,SAAAhrC,GACA,IAAAirC,EAAAxwB,KAAAsrB,MAAA/lC,GACA,OAAAsX,MAAA2zB,IAAAL,IAAAK,GAGAC,WAAA,SAAAzuC,GACA,OAAAya,EAAAza,GAAA,GAAAA,EAAA3C,QAAA2C,EAAA3C,QAAA,aAAAwS,cAAA7P,EAAA,IAGA0uC,aAAA,SAAA1uC,GAGA,OAAAya,EAAAza,GAAA,qBAAAA,IAAA6P,cAAA7P,EAAA0C,SAAA1C,EAAA0C,WAAA,IAIAisC,aAAA,SAAA9Q,EAAAC,GACA,OAAAD,EAAAC,GAAA,EAAAD,EAAAC,EAAA,KAEA8Q,cAAA,SAAA/Q,EAAAC,GACA,OAAAD,EAAAC,EAAA,EAAAD,EAAAC,GAAA,OAIA5gB,GAAA,IAEA1kB,EAAAsa,QAAA,EAAAja,EAAA2K,IAAA69B,SAAA,CACAlhC,OAAA,CACA9G,EAAA,SAAAyU,EAAA7F,EAAAyH,EAAA6F,GAMA/c,EAAAsV,EAAAkF,QAAAhN,GAAA,uBAAAnC,EAAAu+B,EAAA/pB,EAAAzK,GACA,GAAAE,IAAAs0B,EAAA,CAKA,IAAAnd,EAAAvV,EAAAgR,IACAzY,EAAAiP,YAAAxH,EAAAwS,cAAA,IAAA3M,EAAA02B,SAAA,IAAA12B,EAAA22B,WAAA12B,SAAA,OAAA5H,EAAAqX,GAAA1P,EAAA02B,SAAA,QAAAr+B,EAAAqX,GAAA1P,EAAA22B,UAAAx8B,EAAAwS,mBAGA2sB,SAAA,SAAA/gC,EAAA7F,EAAAyH,EAAA6F,GACA/c,EAAA,UAAAgd,SAAAD,EAAA82B,iBAAAzmC,OAAAqC,EAAA+e,YAAAphB,OAAApN,EAAA,WAAAgd,SAAAD,EAAA+2B,UAAA,IAAA58B,EAAA0S,mBAAAld,SAAA+C,GAEAzP,EAAAsV,EAAAkF,QAAAhN,GAAA,uBAAAnC,EAAAu+B,EAAA/pB,EAAAzK,GACA,GAAAE,IAAAs0B,EAAA,CAIA,IAAAnd,EAAAvV,EAAAgR,IACAzY,EAAAiP,YAAA3B,EAAA02B,SAAA,IAAA12B,EAAA22B,WAAA12B,SAAA,OAAA5H,EAAAqX,GAAA1P,EAAA02B,SAAA,QAAAr+B,EAAAqX,GAAA1P,EAAA22B,UAAAx8B,EAAAwS,eACAja,EAAA4O,KAAA,QAAAtB,EAAA+2B,WAAAp1B,YAAA3B,EAAA42B,YAAA,IAAA52B,EAAA62B,aAAA,IAAA72B,EAAAkN,SAAA,IAAAlN,EAAA8M,mBAAA,IAAA9M,EAAAgN,qBAAA/M,SAAA,OAAA5H,EAAAqX,GAAA1P,EAAA42B,YAAA,QAAAv+B,EAAAqX,GAAA1P,EAAA62B,aAAA18B,EAAA0S,yBAYA,IAAA0sB,GAAA,SAAAvrC,GACA,wBAAAA,IAAAlG,QAAA,aAAwDA,QAAA,aAAsBA,QAAA,eAAwBkG,GA0EtG,SAAA2O,GAAApZ,GACA,kBACA,IAAAmlB,EAAA,CAAAhR,GAAAvR,KAAA7C,EAAA2K,IAAA0J,aAAAlR,OAAAylC,MAAA5jC,UAAAuZ,MAAAjb,KAAA+hB,YACA,OAAArlB,EAAA2K,IAAAyO,SAAAnZ,GAAAuT,MAAA3Q,KAAAuiB,IA+RA,OA9UAplB,EAAAk2C,OAAA,CACAC,OAAA,SAAAC,EAAAxxB,EAAAyxB,EAAAC,EAAAC,GACA,OACAlc,QAAA,SAAA3vB,GACA,qBAAAA,GAAA,kBAAAA,EACA,OAAAA,EAGA,IAAA8rC,EAAA9rC,EAAA,SACA+rC,EAAAzmC,WAAAtF,GAIA,GAAAsX,MAAAy0B,GACA,OAAAR,GAAAvrC,GAGA+rC,IAAAC,QAAAL,GACA3rC,EAAArC,KAAAsuC,IAAAF,GACA,IAAAG,EAAA70B,SAAArX,EAAA,IACAmsC,EAAAR,EAAAzxB,GAAAla,EAAAksC,GAAAF,QAAAL,GAAAlpB,UAAA,MACA,OAAAqpB,GAAAF,GAAA,IAAAM,EAAA/sC,WAAArF,QAAA,wBAAoF4xC,GAAAS,GAAAN,GAAA,OAIpFjtC,KAAA,WACA,OACA+wB,QAAA4b,GACA72B,OAAA62B,MA+BAt2C,EAAAsa,OAAAja,EAAA2K,IAAAyO,SAAA,CACAC,oBACAqc,gBACArE,iBACAsF,qBACAC,qBACAmB,kBACAhZ,eACAI,mBACA0K,wBACAI,0BACAI,0BACAE,mBACAH,gBACAO,iBACA3L,qBACA2E,kBACA3J,sBACAmB,oBACAqB,mBACAsE,aACAC,WACA+1B,mBA1xWA,SAAA/7B,EAAA/S,GACA,OAAAA,EAAA4mB,eAAAlvB,EAAAsI,EAAA4mB,aAAA,MA0xWAmoB,qBA9wWA,SAAAh8B,EAAA7D,EAAAlP,GACA,OAAArI,EAAAue,QAAAlW,EAAA+S,EAAA/E,OAAAkB,GAAA6W,UA8wWA9C,iBACAyB,iBACAG,sBACAvQ,qBACAyM,qBACAuE,mBACAC,gBACAC,kBACAG,iBACA1B,qBACAF,eACAuD,gBACAQ,eACAS,WACA6B,aACAO,qBACAhU,mBACAE,mBACAqV,wBACA1B,qBACAsH,mBACAD,mBACAD,aACAW,yBACAlY,kBACAuY,iBACArG,sBACAqH,iBACAK,iBACAve,iBACAya,mBACAwE,mBACA1I,wBACAO,0BACAsJ,iBACA1J,4BACAjD,wBACAkD,uBACA/e,iBACA6sB,sBACApY,4BACAkP,eACAuK,qBACAE,oBACAO,sBACAxH,kBACA3c,kBACAyS,WACArS,eACAulB,mBACAhW,yBACA/P,qBACAqlB,eACA3jB,gBACAC,gBACAjN,uBACAsG,UACAa,UACAwqB,iBACAtqB,kBACAwE,mBACA2c,qBACAlN,eACAvP,iBACA+N,oBACA1U,aACAw9B,gBAAA,eAMAr3C,EAAAM,GAAAC,UAAAF,EAEAA,EAAAL,IAEAA,EAAAM,GAAAg3C,kBAAAj3C,EAAAiV,SACAtV,EAAAM,GAAAi3C,aAAAl3C,EAAA2K,IAGAhL,EAAAM,GAAAD,UAAA,SAAA6I,GACA,OAAAlJ,EAAAkD,MAAA3C,UAAA2I,GAAAqL,OAKAvU,EAAAuJ,KAAAlJ,EAAA,SAAA8iB,EAAA1W,GACAzM,EAAAM,GAAAD,UAAA8iB,GAAA1W,IAoKAzM,EAAAM,GAAAC,UAnubAqT,CAAA5T,EAAAC,OAAAC,WACK2T,MAAAC,EAAAlU,MAAAmU,EAAAD,QAAAjU,GAPL,wBC1BA,IAAAD,EAAAC,EAeID,EAAO,CAACE,EAAA,GAAUA,EAAA,WAEjBC,KAFkCF,EAAA,SAAEG,GACzC,OAsBC,SAAAA,EAAAC,EAAAC,EAAAH,GACD,aAEA,IAAAM,EAAAL,EAAAM,GAAAC,UAuHA,OApHAP,EAAAsa,QAAA,EAAAja,EAAA4Z,SAAA,CACAu9B,IAAA,2FACA3O,SAAA,cAIA7oC,EAAAsa,OAAAja,EAAA2K,IAAA+R,QAAA,CACAqW,SAAA,8CACA2F,aAAA,wBACAuE,cAAA,wBACAgB,YAAA,8CAIAj+B,EAAA2K,IAAA69B,SAAA+J,WAAA6E,UAAA,SAAAniC,EAAAwzB,EAAA5gB,EAAArhB,EAAAwR,EAAA6lB,GACA,IAIAwW,EACAC,EA+EAC,EApFArgC,EAAA,IAAAlU,EAAAopC,IAAAn0B,GACAyH,EAAAzH,EAAAwH,SACAyH,EAAAjP,EAAAmG,UAAA41B,UACAwD,EAAAv/B,EAAAmG,UAAAkqB,MAAA8M,UAAA,GAGAqC,EAAA,EAgFA,IAKAF,EAAA50C,EAAA8oC,GAAAzqB,KAAAne,EAAAs5B,eAAA5yB,KAAA,UACK,MAAAyE,KApFL,SAAA0pC,EAAAloC,EAAAhG,GACA,IAAAtD,EAAAmE,EAAAvD,EAAAmH,EAEA0pC,EAAA,SAAA3pC,GACAA,EAAAi9B,iBAEAtoC,EAAAqL,EAAAqsC,eAAAj5B,SAAA,aAAAlK,EAAA8D,QAAAhN,EAAAzE,KAAAwE,QACAmJ,EAAA8D,KAAAhN,EAAAzE,KAAAwE,QAAA2J,KAAA,SAIA,IAAAxR,EAAA,EAAAmE,EAAAb,EAAApD,OAAuCF,EAAAmE,EAASnE,IAGhD,GAFA+H,EAAAzE,EAAAtD,GAEAvD,EAAA6U,QAAAvJ,GACAypC,EAAAloC,EAAAvB,OACS,CAIT,OAHAopC,EAAA,GACAC,EAAA,GAEArpC,GACA,eACAopC,EAAA,WACAC,EAAA,WACA,MAEA,YACAD,EAAAnwB,EAAA+sB,OACAqD,EAAArpC,GAAA+M,EAAA,kBACA,MAEA,eACAq8B,EAAAnwB,EAAAktB,UACAkD,EAAArpC,GAAA+M,EAAA,kBACA,MAEA,WACAq8B,EAAAnwB,EAAAitB,MACAmD,EAAArpC,GAAA+M,EAAA6lB,EAAA,kBACA,MAEA,WACAwW,EAAAnwB,EAAAgtB,MACAoD,EAAArpC,GAAA+M,EAAA6lB,EAAA,kBACA,MAEA,QACAwW,EAAAppC,EAAA,EACAqpC,EAAAt8B,IAAA/M,EAAA,YAIAopC,IACAvwC,EAAAnE,EAAA,QACAmyB,MAAApV,EAAAu2B,YAAA,IAAAqB,EACA15B,GAAA,IAAAiN,GAAA,kBAAA5c,EAAAgK,EAAA0F,SAAA,IAAA1P,EAAA,OACa8B,OAAApN,EAAA,OACbiE,KAAA,IACAo5B,gBAAA/nB,EAAA0F,SACAi6B,aAAAJ,EAAAvpC,GACA4pC,cAAAJ,EACAK,SAAA7/B,EAAAua,YACa9M,KAAA2xB,IAAAhoC,SAAAG,GAEbyI,EAAAkE,KAAA4sB,cAAAjiC,EAAA,CACAiH,OAAAE,GACa0pC,GAEbF,MAkBAC,CAAA/0C,EAAA8oC,GAAAsM,QAAAryB,KAAA,4BAAAzZ,SAAA,MAAAzC,GAEA+tC,IAAA70C,GACAC,EAAA8oC,GAAAzqB,KAAA,gBAAAu2B,EAAA,KAAA9nC,SAIAzM,EAhJAuT,CAAA5T,EAAAC,OAAAC,WACK2T,MAAAC,EAAAlU,MAAAmU,EAAAD,QAAAjU,wBCjBL,IAAAD,EAAAC,EAMID,EAAO,CAACE,EAAA,GAAUA,EAAA,WAEjBC,KAFkCF,EAAA,SAAEG,GACzC,OAmBC,SAAAA,EAAAC,EAAAC,EAAAH,GACD,aAEA,IA88CA43C,EA98CAt3C,EAAAL,EAAAM,GAAAC,UAGAq3C,EAAA,EAEAC,EAAA,EACAC,EAAAz3C,EAAA2K,IAAAnE,QAOAjG,EAAA,SAAAA,EAAA8F,EAAAN,GAIA,KAAAlD,gBAAAtC,GACA,gBAAA0U,GACA,WAAA1U,EAAA0U,EAAA5O,GAAAmG,aAKA,qBAAAzG,IACAA,EAAA,KAIA,IAAAA,IACAA,EAAA,IAIApG,EAAA6U,QAAAzO,KACAA,EAAA,CACAS,QAAAT,IAIAlD,KAAA60C,EAAA/3C,EAAAsa,QAAA,KAA8B1Z,EAAAqZ,SAAA7T,GAE9BA,EAAAS,UACA3D,KAAA60C,EAAAlxC,QAAAT,EAAAS,SAGA3D,KAAAuE,EAAA,CACAf,GAAA,IAAArG,EAAAopC,IAAA/iC,GACAG,QAAA,GACAmxC,WAAA,GACAC,UAAA,MAAAL,KAEA10C,KAAAs0C,IAAA,CACA3qC,UAAA7M,EAAA,IAAAkD,KAAA60C,EAAAP,IAAA3qC,UAAAqrC,IAAA,MAAAl7B,SAAA9Z,KAAA60C,EAAAP,IAAA3qC,UAAA3B,YAGAhI,KAAAi1C,gBAGAn4C,EAAAsa,OAAA1Z,EAAAyE,UAAA,CAiBA+F,OAAA,SAAAjH,EAAAi0C,GACA,IAAA9sC,EAAApI,KAAAm1C,cAAAl0C,GAEA,OAAAi0C,IAAAr4C,EACAuL,EAAAgtC,KAAAltC,QAGAE,EAAAgtC,KAAAltC,OAAAgtC,EACAl1C,OAUAq1C,OAAA,SAAAp0C,EAAAq0C,GACA,IAAAltC,EAAApI,KAAAm1C,cAAAl0C,GAEAypC,EAAA1qC,KAAA60C,EAAAP,IAAAlsC,OAAAitC,OACAE,EAAAz4C,EAAAsL,EAAAnH,MAEA,OAAAq0C,IAAAz4C,EACA04C,EAAAh6B,SAAAmvB,IAGA6K,EAAAC,YAAA9K,EAAA4K,IAAAz4C,GAAAy4C,GACAt1C,OASA4R,IAAA,SAAA1O,EAAA8hB,GACA,IAAArhB,EAAA3D,KAAAuE,EAAAZ,QAEA,qBAAAqhB,EAAA,CAIA,IAHA,IAAArkB,EAAAqkB,EAAArkB,MAAA,KACA80C,EAAAz1C,KAAAuE,EAEAlE,EAAA,EAAAmE,EAAA7D,EAAAJ,OAAA,EAA+CF,EAAAmE,EAASnE,IACxDo1C,IAAA9xC,QAAA,EAAAhD,EAAAN,IAGAsD,EAAA8xC,EAAA9xC,QACAqhB,EAAA,EAAArkB,IAAAJ,OAAA,GAOA,OAJAP,KAAA01C,cAAA/xC,EAAAT,GAAA,EAAA8hB,GAEAhlB,KAAA21C,QAEA31C,MAOA2J,UAAA,WACA,OAAA3J,KAAAs0C,IAAA3qC,WAQAisC,QAAA,SAAA30C,GACA,IAAAmH,EAAApI,KAAAm1C,cAAAl0C,GAGA,OADAnE,EAAAsL,EAAAnH,MAAA6Y,SAAA9Z,KAAA60C,EAAAP,IAAAlsC,OAAAytC,UACA71C,MAQAqT,QAAA,WAEAvW,EAAA,QAAAuN,IAAA,SAAArK,KAAAuE,EAAAwwC,WAGA,IACA10C,EAAAmE,EADAb,EAAA3D,KAAAuE,EAAAZ,QAAA+X,QAGA,IAAArb,EAAA,EAAAmE,EAAAb,EAAApD,OAAuCF,EAAAmE,EAASnE,IAChDL,KAAAZ,OAAAuE,EAAAtD,GAAAY,MAIAjB,KAAAs0C,IAAA3qC,UAAAvK,SAEA,IAAA02C,EAAA91C,KAAAuE,EAAAf,GAAA4O,WAAA,GAEA,IAAA/R,EAAA,EAAAmE,EAAAsxC,EAAAv1C,OAA2CF,EAAAmE,EAASnE,IACpD,GAAAy1C,EAAA1M,OAAAppC,KAAA,CACA81C,EAAA99B,OAAA3X,EAAA,GACA,MAIA,OAAAL,MASA+1C,OAAA,SAAA90C,EAAAq0C,GACA,QAAAA,EACA,OAAAt1C,KAAA41C,QAAA30C,GAGA,IAAAmH,EAAApI,KAAAm1C,cAAAl0C,GAGA,OADAnE,EAAAsL,EAAAnH,MAAAua,YAAAxb,KAAA60C,EAAAP,IAAAlsC,OAAAytC,UACA71C,MAOAJ,KAAA,WACA,OAAAI,KAAA60C,EAAAj1C,MAQAqB,KAAA,SAAA+0C,GACA,IAAAA,EACA,OAAAh2C,KAAAs0C,IAAA3qC,UAGA,IAAAvB,EAAApI,KAAAm1C,cAAAa,GAEA,OAAAl5C,EAAAsL,EAAAnH,OAQAoH,WAAA,SAAApH,EAAAq0C,GACA,IAAAltC,EAAApI,KAAAm1C,cAAAl0C,GAEA,OAAAq0C,IAAAz4C,EACAC,EAAAsL,EAAAnH,MAAAsa,SAAA,eAGAze,EAAAsL,EAAAnH,MAAAu0C,YAAA,aAAAF,GACAt1C,OAQAZ,OAAA,SAAA6B,GACA,IAAAmH,EAAApI,KAAAm1C,cAAAl0C,GAEA2kC,EAAA5lC,KAAAi2C,YAAAh1C,GAEAuC,EAAAxD,KAAAuE,EAAAf,GAEA,GAAA4E,EAAAzE,QAAApD,OACA,QAAAF,EAAA+H,EAAAzE,QAAApD,OAAA,EAA+CF,GAAA,EAAQA,IACvDL,KAAAZ,OAAAgJ,EAAAzE,QAAAtD,GAAAY,MAKAmH,EAAAgtC,KAAA/hC,SACAjL,EAAAgtC,KAAA/hC,QAAA5S,KAAA+C,EAAA4E,OAAAnH,GAAAuC,EAAA1G,EAAAmE,GAAAmH,EAAAgtC,MAGAp1C,KAAAk2C,WAAA9tC,EAAAgtC,MAEAt4C,EAAAsL,EAAAnH,MAAA7B,SACA,IAAA4lB,EAAAloB,EAAAue,QAAAjT,EAAAw9B,GAEA,OADAA,EAAA5tB,OAAAgN,EAAA,GACAhlB,MAeAyG,KAAA,SAAAxF,EAAAshC,GACA,IAAAn6B,EAAApI,KAAAm1C,cAAAl0C,GAEAk1C,EAAAn2C,KAAA60C,EAAAP,IAAA8B,WAAAD,YACAE,EAAAjuC,EAAAkuC,cAAAH,KAAAnB,IAAAmB,EAAAnB,IAAAh1C,KAAA60C,EAAAP,IAAA6B,YAAAnB,IACAxxC,EAAAxD,KAAAuE,EAAAf,GACA+xC,EAAAz4C,EAAAsL,EAAAnH,MAEAwF,EAAA,SAAA8vC,GACA,0BAAAA,IAAA/yC,EAAA+xC,EAAAntC,EAAAgtC,MAAAmB,GAGA,OAAAhU,IAAA1lC,EACA4J,EAAA2B,EAAAgtC,KAAA3uC,OAGA2B,EAAAgtC,KAAA3uC,KAAA87B,EAEA8T,EACAd,EAAAnvC,SAAAiwC,GAAAx2B,KAAApZ,EAAA87B,IAEAgT,EAAA11B,KAAApZ,EAAA87B,IAGAviC,OAWAi1C,aAAA,WACA,IAAA3sC,EAAAtI,KACAwD,EAAAxD,KAAAuE,EAAAf,GACAgzC,EAAAhzC,EAAA4O,WAAA,GACAzO,EAAA3D,KAAA60C,EAAAlxC,QAEA6yC,EAAAC,WACAD,EAAAC,SAAA,IAGAD,EAAAC,SAAA7xC,KAAA,CACAwkC,KAAAppC,KACAJ,KAAAI,KAAA60C,EAAAj1C,OAGA,QAAAS,EAAA,EAAAmE,EAAAb,EAAApD,OAA2CF,EAAAmE,EAASnE,IACpDL,KAAA4R,IAAAjO,EAAAtD,IAGAmD,EAAA8G,GAAA,mBAAAnC,EAAAiK,GACAA,IAAAokC,GACAluC,EAAA+K,YAIAvW,EAAA,QAAAwN,GAAA,SAAAtK,KAAAuE,EAAAwwC,UAAA,SAAA5sC,GACA,IAAAnL,EAAAs5B,eAAAt5B,EAAAs5B,gBAAAt5B,EAAA2H,KAAA,CAGA,IAAA+xC,EAAAj3C,OAAAC,aAAAyI,EAAAoC,SAAA4J,eAEA,IAAA7L,EAAA/D,EAAAuwC,WAAA3gC,cAAAnP,QAAA0xC,IACApuC,EAAAquC,UAAAD,EAAAvuC,OAeAyuC,QAAA,SAAAxB,GACAA,EAAA9uC,MACAtG,KAAAuE,EAAAuwC,YAAAh4C,EAAAsR,cAAAgnC,EAAA9uC,KAAA8uC,EAAA9uC,QAAA8uC,EAAA9uC,MAUAqvC,MAAA,SAAAhsC,EAAAhG,GACAgG,IACAA,EAAA3J,KAAAs0C,IAAA3qC,UACAhG,EAAA3D,KAAAuE,EAAAZ,SAGAgG,EAAAvD,WAAAipB,SAEA,QAAAhvB,EAAA,EAAAmE,EAAAb,EAAApD,OAA2CF,EAAAmE,EAASnE,IACpDsJ,EAAAO,OAAAvG,EAAAtD,GAAAw2C,UACAltC,EAAAO,OAAA,KAEAvG,EAAAtD,GAAAsD,WAAAtD,GAAAsD,QAAApD,QACAP,KAAA21C,MAAAhyC,EAAAtD,GAAA+1C,WAAAzyC,EAAAtD,GAAAsD,UAYA+xC,cAAA,SAAAzS,EAAA76B,EAAAkuC,EAAAQ,GAKA,IAJA,IAAAtzC,EAAAxD,KAAAuE,EAAAf,GAEAG,EAAA7G,EAAA6U,QAAAvJ,KAAA,CAAAA,GAEA/H,EAAA,EAAAmE,EAAAb,EAAApD,OAA2CF,EAAAmE,EAASnE,IAAA,CACpD,IAAA+0C,EAAAp1C,KAAA+2C,gBAAApzC,EAAAtD,IAEA,GAAA+0C,EAMA,GAAAt4C,EAAA6U,QAAAyjC,GACAp1C,KAAA01C,cAAAzS,EAAAmS,EAAAkB,EAAAQ,OADA,CAMA,IAAAE,EAAAh3C,KAAAi3C,aAAA7B,EAAAkB,GAEA,GAAAU,EAAA,CAWA,GAPAF,IAAAj6C,GACAomC,EAAAjrB,OAAA8+B,EAAA,EAAAE,GACAF,KAEA7T,EAAAr+B,KAAAoyC,GAGAA,EAAA5B,KAAAzxC,QAAA,CACA,IAAAuzC,EAAAl3C,KAAA60C,EAAAP,IAAA8B,WACAY,EAAAZ,WAAAt5C,EAAA,IAAAo6C,EAAAlC,IAAA,MAAAl7B,SAAAo9B,EAAAlvC,WAAA7B,KAAA,eACA6wC,EAAA5B,KAAA+B,YAAAH,EAAAZ,WAEAp2C,KAAA01C,cAAAsB,EAAArzC,QAAAqzC,EAAA5B,KAAAzxC,SAAA,EAAAmzC,GAKA1B,EAAAtyB,MACAsyB,EAAAtyB,KAAAriB,KAAA+C,EAAA4E,OAAA4uC,EAAA/1C,MAAAuC,EAAA1G,EAAAk6C,EAAA/1C,MAAAm0C,OAcA6B,aAAA,SAAA/zC,EAAAozC,GACA,IAAAc,EAAAp3C,KAAA60C,EAAAP,IAAAlsC,OACAivC,EAAAr3C,KAAA60C,EAAAP,IAAA6B,YACAe,EAAAl3C,KAAA60C,EAAAP,IAAA8B,WACA5yC,EAAAxD,KAAAuE,EAAAf,GAEAiD,EAAA,SAAA8vC,GACA,0BAAAA,IAAA/yC,EAAA4E,EAAAlF,GAAAqzC,GAaA,GAVAD,GAAAY,EAAA9uC,SACAgvC,EAAAF,EAAA9uC,QAGAkuC,GAAAY,EAAAf,cACAkB,EAAAH,EAAAf,aAKAjzC,EAAAwH,YAAAxH,EAAAwH,UAAAlH,EAAAN,GACA,SAGA,IAAAgF,EAAA,SAAAC,EAAA3E,EAAA4E,EAAAlF,GACAA,EAAAgF,OAAAzH,KAAA+C,EAAA4E,UAAAD,EAAA3E,EAAA4E,EAAAlF,GACApG,EAAA0G,EAAAkG,QAAAzI,QAAAq2C,eAAA,qBAAA9zC,EAAA4E,UAAA5E,EAAA4E,EAAAlF,KAGA8xC,EAAA9xC,EAAA8xC,KAAAoC,EAAApC,IACAuC,EAAAr0C,EAAAq0C,aAAA16C,GAAAqG,EAAAq0C,WACAnvC,EAAAtL,EAAA,IAAAk4C,EAAA,MAAAl7B,SAAAs9B,EAAApvC,WAAA7B,KAAA,WAAAnG,KAAAuE,EAAAf,GAAA4O,WAAA,GAAAua,WAAAxmB,KAAA,gBAAAnG,KAAAuE,EAAAf,GAAAkG,QAAAzI,OAAA8W,IAAAzN,GAAA,qBAAAnC,GACAA,EAAAi9B,kBAEAh9B,EAAAmT,SAAA67B,EAAAvB,WAAA3yC,EAAAgF,QACAA,EAAAC,EAAA3E,EAAA4E,EAAAlF,GAGAq0C,GACAnvC,EAAA88B,SAEO56B,GAAA,qBAAAnC,GACP,KAAAA,EAAAoC,UACAnC,EAAAmT,SAAA67B,EAAAvB,WAAA3yC,EAAAgF,QACAA,EAAAC,EAAA3E,EAAA4E,EAAAlF,KAcA,GATA,MAAA8xC,EAAA7gC,eACA/L,EAAAjC,KAAA,YAIA,WAAA6uC,EAAA7gC,eACA/L,EAAAjC,KAAA,iBAGAkxC,EAAArC,IAAA,CACA,IAAAwC,EAAA16C,EAAA,IAAAu6C,EAAArC,IAAA,MAAAn1B,KAAApZ,EAAAvD,EAAAuD,OAAAqT,SAAAu9B,EAAArvC,WAEA,MAAAqvC,EAAArC,IAAA7gC,eACAqjC,EAAArxC,KAAA,YAGAiC,EAAA8B,OAAAstC,QAEApvC,EAAAyX,KAAApZ,EAAAvD,EAAAuD,QAGA,IAAAvD,EAAAu0C,SACArvC,EAAA0R,SAAAs9B,EAAAvB,UAGA3yC,EAAA8E,WACAI,EAAA0R,SAAA5W,EAAA8E,WAGA9E,EAAAw0C,WACAtvC,EAAAjC,KAAA,QAAAM,EAAAvD,EAAAw0C,YAGAx0C,EAAAiD,MACAiC,EAAAjC,KAAAjD,EAAAiD,MAGAjD,EAAA6xC,YACA7xC,EAAA6xC,UAAA,cAAAJ,KAGA,IACAkC,EADAc,EAAA33C,KAAA60C,EAAAP,IAAAqD,gBAkBA,OAdAd,EADAc,KAAA3C,IACAl4C,EAAA,IAAA66C,EAAA3C,IAAA,MAAAl7B,SAAA69B,EAAA3vC,WAAAkC,OAAA9B,GAEAA,EAGApI,KAAA42C,QAAA1zC,GAKAlD,KAAA60C,EAAA+C,gBACAf,EAAA72C,KAAA60C,EAAA+C,cAAA10C,EAAA2zC,IAGA,CACAzB,KAAAlyC,EACAjC,KAAAmH,EAAAkkC,IAAA,GACAuK,WACAlzC,QAAA,GACA2yC,eACAF,WAAA,OAWAjB,cAAA,SAAAl0C,EAAA0C,GACAA,IACAA,EAAA3D,KAAAuE,EAAAZ,SAGA,QAAAtD,EAAA,EAAAmE,EAAAb,EAAApD,OAA2CF,EAAAmE,EAASnE,IAAA,CACpD,GAAAsD,EAAAtD,GAAAY,SACA,OAAA0C,EAAAtD,GAGA,GAAAsD,EAAAtD,GAAAsD,QAAApD,OAAA,CACA,IAAAkzB,EAAAzzB,KAAAm1C,cAAAl0C,EAAA0C,EAAAtD,GAAAsD,SAEA,GAAA8vB,EACA,OAAAA,KAaAwiB,YAAA,SAAAh1C,EAAA0C,GACAA,IACAA,EAAA3D,KAAAuE,EAAAZ,SAGA,QAAAtD,EAAA,EAAAmE,EAAAb,EAAApD,OAA2CF,EAAAmE,EAASnE,IAAA,CACpD,GAAAsD,EAAAtD,GAAAY,SACA,OAAA0C,EAGA,GAAAA,EAAAtD,GAAAsD,QAAApD,OAAA,CACA,IAAAkzB,EAAAzzB,KAAAi2C,YAAAh1C,EAAA0C,EAAAtD,GAAAsD,SAEA,GAAA8vB,EACA,OAAAA,KAaAkjB,UAAA,SAAAD,EAAAvuC,GAEA,IAAAA,EAAA0vC,gBAAA,CAIA,IAAAC,EAAA,SAAA1C,EAAAn0C,GACA,GAAAm0C,EAAA9uC,IAIA,GAAA8uC,EAAA9uC,MAAAowC,EACAvuC,EAAA0vC,iBAAA,EACA/6C,EAAAmE,GAAAG,aACS,GAAAtE,EAAAsR,cAAAgnC,EAAA9uC,KAAA,CACT,GAAA8uC,EAAA9uC,UAAAowC,EACA,OAGA,GAAAtB,EAAA9uC,IAAA68B,WAAAh7B,EAAAg7B,SACA,OAGA,GAAAiS,EAAA9uC,IAAAyxC,SAAA5vC,EAAA4vC,OACA,OAGA,GAAA3C,EAAA9uC,IAAA0xC,UAAA7vC,EAAA6vC,QACA,OAGA,GAAA5C,EAAA9uC,IAAA2xC,UAAA9vC,EAAA8vC,QACA,OAIA9vC,EAAA0vC,iBAAA,EACA/6C,EAAAmE,GAAAG,WAIA,SAAA82C,EAAA5zC,GACA,QAAAjE,EAAA,EAAAmE,EAAAF,EAAA/D,OAAuCF,EAAAmE,EAASnE,IAChDy3C,EAAAxzC,EAAAjE,GAAA+0C,KAAA9wC,EAAAjE,GAAAY,MAEAqD,EAAAjE,GAAAsD,QAAApD,QACA23C,EAAA5zC,EAAAjE,GAAAsD,SAKAu0C,CAAAl4C,KAAAuE,EAAAZ,WASAuyC,WAAA,SAAAd,GACA,GAAAA,EAAA9uC,IAAA,CACA,IAAAowC,EAAA55C,EAAAsR,cAAAgnC,EAAA9uC,KAAA8uC,EAAA9uC,QAAA8uC,EAAA9uC,IAGAhC,EAAAtE,KAAAuE,EAAAuwC,WAAAn0C,MAAA,IACAqkB,EAAAloB,EAAAue,QAAAq7B,EAAApyC,GACAA,EAAA0T,OAAAgN,EAAA,GACAhlB,KAAAuE,EAAAuwC,WAAAxwC,EAAAD,KAAA,MAUA0yC,gBAAA,SAAA3B,GACA,IACA/0C,EAAAmE,EADAhB,EAAAxD,KAAAuE,EAAAf,GAGA20C,EAAA,SAAA1C,GAKA,IAJA,IAAA2C,EAAA,GAIAt7C,EAAAsR,cAAAqnC,KAAA34C,EAAA6U,QAAA8jC,IAAA,CACA,GAAAA,IAAA54C,EACA,OAGA,uBAAA44C,GAGA,KAFAA,IAAAjyC,EAAA4xC,IAGA,cAEW,qBAAAK,EAAA,CACX,IAAAb,EAAAa,GACA,6BAAAA,EAGAA,EAAAb,EAAAa,GAKA,KAFA2C,EAEA,GAEA,oCAIA,OAAAt7C,EAAA6U,QAAA8jC,KAAA34C,EAAAsa,OAAA,GAAmDq+B,IAKnD,IAFAL,EAAA+C,EAAA/C,GAEAA,KAAAh+B,QAAA,CAGA,IAAAw9B,EAAAQ,EAAAh+B,QACA,2CAAAg+B,EAAAh+B,OAGA,IAAAihC,EAAAF,EAAAvD,EAAAQ,EAAAh+B,SAEA,GAAAta,EAAA6U,QAAA0mC,GACA,OAAAA,EACS,IAAAA,EAIT,SAIA,IAAAC,EAAAD,EAAArwC,UACAotC,EAAAt4C,EAAAsa,OAAA,GAA0BihC,EAAAjD,GAI1BkD,GAAAlD,EAAAptC,YAAAswC,IACAlD,EAAAptC,UAAAswC,EAAA,IAAAlD,EAAAptC,WAKA,IAAAuwC,EAAAnD,EAAAmD,eAEA,GAAAA,EAAA,CAKA,IAJAnD,EAAAzxC,UACAyxC,EAAAzxC,QAAA,IAGAtD,EAAA,EAAAmE,EAAA+zC,EAAAh4C,OAAkDF,EAAAmE,EAASnE,IAC3D+0C,EAAAzxC,QAAAiB,KAAA2zC,EAAAl4C,IAGA+0C,EAAAmD,eAAA,KAGA,IAAAC,EAAApD,EAAAoD,cAEA,GAAAA,EAAA,CAKA,IAJApD,EAAAzxC,UACAyxC,EAAAzxC,QAAA,IAGAtD,EAAA,EAAAmE,EAAAg0C,EAAAj4C,OAAiDF,EAAAmE,EAASnE,IAC1D+0C,EAAAzxC,QAAAqU,OAAA3X,EAAA,EAAAm4C,EAAAn4C,IAGA+0C,EAAAoD,cAAA,KAMApD,EAAAh+B,OAAAihC,EAAAjhC,OAGA,OAAAg+B,KAeA13C,EAAA+6C,WAAA,SAAAzjC,EAAAhN,EAAA0wC,EAAAC,GACAD,IAAA77C,IACA67C,EAAA,KAGAC,IACAA,EAAA37C,EAAA2H,MAGAqQ,EACAlY,EAAA,UAAAgd,SAAA9R,GAAAW,IAAA,kBAAA2hC,YAAAqO,GAAAC,OAAAC,OAAAH,GAEA57C,EAAA,OAAAkL,GAAA4wC,OAAAE,QAAAJ,EAAA,WACA57C,EAAAkD,MAAAwb,YAAAxT,GAAA5I,YAiBA1B,EAAAq7C,iBAAA,SAAAC,EAAAr1C,GACA,IAAAq1C,EACA,OAAAl8C,EAAAuS,IAAA1L,EAAA,SAAAs1C,GACA,OAAAA,EAAA7P,OAIA,IAAA3V,EAAA,GACAyX,EAAApuC,EAAAuS,IAAA1L,EAAA,SAAAs1C,GACA,OAAAA,EAAAr5C,OA+BA,OA5BA,SAAAs5C,EAAAtjB,GACA,GAAA94B,EAAA6U,QAAAikB,GACA,QAAAv1B,EAAA,EAAAmE,EAAAoxB,EAAAr1B,OAA2CF,EAAAmE,EAASnE,IACpD64C,EAAAtjB,EAAAv1B,SAMA,qBAAAu1B,EACA,QAAAA,EAAA5wB,QAAA,KAEAk0C,EAAAtjB,EAAAj1B,MAAA,UACS,CAET,IAAAqkB,EAAAloB,EAAAue,QAAAve,EAAA4P,KAAAkpB,GAAAsV,IAEA,IAAAlmB,GACAyO,EAAA7uB,KAAAjB,EAAAqhB,GAAAokB,UAGO,kBAAAxT,GAEPnC,EAAA7uB,KAAAjB,EAAAiyB,GAAAwT,MAIA8P,CAAAF,GACAvlB,GAcA/1B,EAAAy7C,eAAA,SAAAC,EAAA9S,GA0GA,IAzGA,IAAA7S,EAAA,GAwBAqkB,EAAA,SAAAA,EAAAxR,EAAA8C,GACA,IAAA/oC,EAAAmE,EACAb,EAAA,IAxBA,SAAA01C,EAAA/0C,EAAAX,EAAA21C,GAIA,IAHA,IAAAlxC,EACA4c,EAEA3kB,EAAA,EAAAmE,EAAAb,EAAApD,OAA2CF,EAAAmE,EAASnE,KACpD+H,EAAAzE,EAAAtD,MAGA2kB,EAAAs0B,IAAAz8C,EAAAy8C,EAAAj5C,IAAA,GACAiE,EAAAM,KAAA,CACA3D,KAAAmH,EAAAnH,KACArB,KAAAwI,EAAAgtC,KAAAx1C,KACAolB,QAGA5c,EAAAzE,SACA01C,EAAA/0C,EAAA8D,EAAAzE,QAAAqhB,EAAA,MASAq0B,CAAA11C,EAAAylC,EAAA7kC,EAAAZ,SACA,IAAA2Q,EAAAxX,EAAAuS,IAAA1L,EAAA,SAAAs1C,GACA,OAAAA,EAAAh4C,OAGA,GAAAnE,EAAA6U,QAAA20B,iBAAAxpC,EACA,IAAAuD,EAAA,EAAAmE,EAAA8hC,EAAA/lC,OAA0CF,EAAAmE,EAASnE,IACnDy3C,EAAAxR,EAAAjmC,GAAA+oC,QAMA,UAAA9C,OAAAzpC,GAAA,MAAAypC,EAEA,IAAAjmC,EAAA,EAAAmE,EAAAb,EAAApD,OAAyCF,EAAAmE,EAASnE,IAClDozB,EAAA7uB,KAAA,CACAwkC,OACAnoC,KAAA0C,EAAAtD,GAAAY,YAGO,qBAAAqlC,EAEP7S,EAAA7uB,KAAA,CACAwkC,OACAnoC,KAAAmoC,EAAA7kC,EAAAZ,QAAA2iC,GAAArlC,YAEO,qBAAAqlC,EACP,QAAAA,EAAAthC,QAAA,MAEA,IAAAV,EAAAgiC,EAAA3lC,MAAA,KAEA,IAAAN,EAAA,EAAAmE,EAAAF,EAAA/D,OAAqCF,EAAAmE,EAASnE,IAC9Cy3C,EAAAh7C,EAAA4P,KAAApI,EAAAjE,IAAA+oC,QAES,GAAA9C,EAAAhjC,MAAA,kBAET,IAAAi2C,EAAAz8C,EAAAuS,IAAA1L,EAAA,SAAAs1C,GACA,OAAAA,EAAAj0B,MAEAyO,EAAA7uB,KAAA,CACAwkC,OACAnoC,KAAA0C,EAAA7G,EAAAue,QAAAirB,EAAAiT,IAAAt4C,YAES,QAAAqlC,EAAAthC,QAAA,UAET,IAAApF,EAAA0mC,EAAA3kC,QAAA,YAEA,IAAAtB,EAAA,EAAAmE,EAAAb,EAAApD,OAA2CF,EAAAmE,EAASnE,IACpDsD,EAAAtD,GAAAT,UACA6zB,EAAA7uB,KAAA,CACAwkC,OACAnoC,KAAA0C,EAAAtD,GAAAY,YAMAnE,EAAAwX,GAAAiI,OAAA+pB,GAAAjgC,KAAA,WACAotB,EAAA7uB,KAAA,CACAwkC,OACAnoC,KAAAjB,cAIO,qBAAAsmC,KAAAvgC,SAAA,CAEP,IAAAif,EAAAloB,EAAAue,QAAAirB,EAAAhyB,IAEA,IAAA0Q,GACAyO,EAAA7uB,KAAA,CACAwkC,OACAnoC,KAAAqT,EAAA0Q,OAMA3kB,EAAA,EAAAmE,EAAA40C,EAAA74C,OAAuCF,EAAAmE,EAASnE,IAAA,CAChD,IAAA+oC,EAAAgQ,EAAA/4C,GACAy3C,EAAAxR,EAAA8C,GAGA,OAAA3V,GAUA/1B,EAAAqZ,SAAA,CACApT,QAAA,qCACA/D,KAAA,OACA45C,SAAA,EACAlF,IAAA,CACA3qC,UAAA,CACAqrC,IAAA,MACAhtC,UAAA,cAEAouC,WAAA,CACApB,IAAA,MACAhtC,UAAA,wBAEAI,OAAA,CAEA4sC,IAAA,kBAAAj4C,EAAA,aACAiL,UAAA,YACAqtC,OAAA,SACAQ,SAAA,YAEAM,YAAA,CACAnB,IAAA,OACAhtC,UAAA,MAUAtK,EAAAuH,QAAA,QACAnI,EAAAsa,OAAAw9B,EAAA,CACAwB,WAAA,CACA3vC,KAAA,SAAAjD,GACA,OAAAA,EAAAyE,KAAA,oCAEAD,UAAA,qBACA8a,KAAA,SAAAtf,EAAA4E,EAAAlF,GACAkF,EAAAjC,KAAA,qBAEA+B,OAAA,SAAAC,EAAA3E,EAAA4E,EAAAlF,GACA,IAAAkH,EAAA,WACA5G,EAAAG,QAAA,gDAAA2Q,QAAAjO,KAAA,WACA,IAAA+vC,EAAAt5C,EAAAkD,MAAAy5C,SAAA,yBAEArD,EAAA71C,QACA61C,EAAAwC,OAAAE,QAAA51C,EAAAw1C,KAAA,WACAtC,EAAA/mB,WAIAvyB,EAAAkD,MAAAmG,KAAA,2BAEArJ,EAAA,4BAAAuN,IAAA,wBACA3M,EAAA+6C,YAAA,EAAAv1C,EAAAw2C,oBAAAx2C,EAAAw1C,KAAAC,GACA77C,EAAA,QAAAuN,IAAA,mBACA7G,EAAA6G,IAAA,8BAGAsvC,EAAA,SAAAvxC,EAAAjC,KAAA,iBAGA,GAFAiE,KAEAuvC,EAAA,CACA,IAAA/T,EAAAx9B,EACAwxC,EAAA98C,EAAAsL,GAAAyxC,QAAA,4BACAC,EAAAlU,EAAA78B,WACAy3B,EAAA1jC,EAAA0G,EAAAkG,QAAAC,aACAowC,GAAA,EACApB,EAAA/S,EACAx9B,EAAAjC,KAAA,wBAEAyzC,EAAAr5C,SACAw5C,EAAAj9C,EAAA,yBAAAiM,WACA4vC,EAAAiB,EACA98C,EAAA,QAAA4oC,QAAA,yBAGAiT,EAAAkB,QAAA,aAAA78C,EAAA2H,OACAg0C,EAAA37C,EAAA2H,KAAAq1C,WAGA92C,EAAAi0C,YAAAh8B,KAAA,+BAAA/b,SAEA8D,EAAAi0C,YAAA7pC,QAAA,2CAAApK,EAAA+2C,gBAAA,UAEA/2C,EAAAi0C,YAAAr9B,SAAA5W,EAAAg3C,kBAAAvxC,IAAA,kBAAA2hC,YAAAqO,GAAAC,OAAAC,OAAA31C,EAAAw1C,MAEA,IAAA3vC,EAAA7F,EAAAi0C,YAAAxuC,IAAA,YAEA,GAAAoxC,GAAA,aAAAhxC,EACA7F,EAAAi0C,YAAAxuC,IAAA,CACAK,IAAA+wC,EAAA/wC,IACAC,KAAA8wC,EAAA9wC,YAEW,gBAAAF,EAAA,CACX7F,EAAAi0C,YAAAxuC,IAAA,CACAK,IAAA8wC,EAAA9wC,IAAA48B,EAAAuU,cACAlxC,KAAA6wC,EAAA7wC,OAIA,IAAAmxC,EAAA5Z,EAAAvc,SAAAjb,IAAAw3B,EAAA53B,SAEAyxC,EAAAP,EAAA9wC,IAAA48B,EAAAuU,cAAAj3C,EAAAi0C,YAAAgD,cAEAG,EAAAD,EAAAD,EAEAG,EAAAT,EAAA9wC,IAAA9F,EAAAi0C,YAAAgD,cAEAK,EAAAha,EAAAvc,SAAAjb,IACAyxC,EAAAD,EAAAD,GAEAD,EAAAG,GAAAv3C,EAAAw3C,SACAx3C,EAAAi0C,YAAAxuC,IAAA,MAAAmxC,EAAA9wC,IAAA9F,EAAAi0C,YAAAgD,cAAA,GAKAj3C,EAAAi0C,YAAA57B,SAAArY,EAAAy3C,sBACAz3C,EAAAi0C,YAAAxuC,IAAA,OAAAmxC,EAAA7wC,KAAA28B,EAAArG,aAAAr8B,EAAAi0C,YAAA5X,cAIA,IAAAqb,EAAAd,EAAA7wC,KAAA/F,EAAAi0C,YAAA5X,aAEAsb,EAAAra,EAAAvc,SAAAhb,KAAAu3B,EAAA33B,QAEA+xC,EAAAC,GACA33C,EAAAi0C,YAAAxuC,IAAA,OAAAmxC,EAAA7wC,MAAA2xC,EAAAC,IAIA,IAAAC,EAAAlV,EAAA3hB,SAAAhb,KAAA/F,EAAAi0C,YAAA5X,aAEAub,EAAAh+C,EAAAC,GAAA8L,SACA3F,EAAAi0C,YAAAxuC,IAAA,OAAAmxC,EAAA7wC,MAAA6xC,EAAAh+C,EAAAC,GAAA8L,cAEW,CAEX,IAAAG,EAAA9F,EAAAi0C,YAAAvuC,SAAA,EAEAI,EAAAlM,EAAAC,GAAA6L,SAAA,IACAI,EAAAlM,EAAAC,GAAA6L,SAAA,GAGA1F,EAAAi0C,YAAAxuC,IAAA,eAAAK,GAGA9F,EAAAu1C,YACA/6C,EAAA+6C,YAAA,EAAAv1C,EAAAw2C,oBAAAx2C,EAAAw1C,KAAAC,GAKA35C,WAAA,WAKAlC,EAAA,4BAAAwN,GAAA,qCACAxN,EAAA,QAAAwN,GAAA,gCAAAnC,GAEA,IAAA4yC,EAAAj+C,EAAAM,GAAA49C,QAAA,oBAEAl+C,EAAAqL,EAAA8K,QAAA4mC,UAAAkB,KAAAx+B,OAAArZ,EAAAi0C,aAAA52C,QACA6J,MAEaE,GAAA,gCAAAnC,GACb,KAAAA,EAAAoC,SACAH,MAIAlH,EAAA+3C,WACAz3C,EAAA8G,GAAA,uCACAF,OAGW,MAGXquC,YAAA,EACAyB,iBAAA,GACAD,gBAAA,GACAP,oBAAA,uBACAiB,oBAAA,kBACAM,WAAA,EACAvC,KAAA,IACAvyC,KAAA,CACA+0C,iBAAA,IAGAC,KAAA,SAAA33C,EAAA4xC,GACA,OAAAR,EAAA7sC,UACA,YAGA6sC,EAAAwG,WAAAxG,EAAAwG,UAAA1wC,UAAAlH,EAAA4xC,GACA,iBADA,GAIAiG,IAAA,SAAA73C,EAAA4xC,GAEA,OAAAR,EAAApqC,UAAAoqC,EAAApqC,SAAAE,UAAAlH,EAAA4xC,GACA,WAGAR,EAAA0G,UAAA1G,EAAA0G,SAAA5wC,UAAAlH,EAAA4xC,GACA,gBADA,GAIAmG,MAAA,SAAA/3C,EAAA4xC,GAEA,OAAAR,EAAA7pC,YAAA6pC,EAAA7pC,WAAAL,UAAAlH,EAAA4xC,GACA,aAGAR,EAAA4G,YAAA5G,EAAA4G,WAAA9wC,UAAAlH,EAAA4xC,GACA,kBADA,GAIA5kC,IAAA,SAAAhN,EAAA4xC,GAEA,OAAAR,EAAAxlC,UAAAwlC,EAAAxlC,SAAA1E,UAAAlH,EAAA4xC,GACA,WAGAR,EAAA6G,UAAA7G,EAAA6G,SAAA/wC,UAAAlH,EAAA4xC,GACA,gBADA,GAIAsG,WAAA,SAAAl4C,GACA,IAAAm4C,EAAAn4C,EAAA4O,WAAA,GAAAoG,YACAojC,EAAA9+C,EAAA6U,QAAAgqC,EAAA,IAAAA,EAAA,GAAAA,EACAt6B,EAAAvkB,EAAA6U,QAAAgqC,EAAA,IAAAA,EAAA,GAAAA,EASA,OACAvkC,OAAA,aACA3Q,KATA,SAAAjD,GACA,OAAAA,EAAAyE,KAAA,sBACA4zC,KAAA,gBACAl+C,EAAA,gBACS6F,EAAA2R,KAAA5P,QAMTyC,UAAA,sBACAizC,WAAA,EACAt3C,QAAA7G,EAAAuS,IAAAusC,EAAA,SAAAryC,EAAAlJ,GACA,OACAoG,KAAA4a,EAAAhhB,GACA2H,UAAA,qBACAE,OAAA,SAAAC,EAAA3E,GACAA,EAAA2R,KAAA5P,IAAAgE,GAAAsI,QAEAiR,KAAA,SAAAtf,EAAAvC,EAAAm0C,GACA,IAAA9sC,EAAAtI,KAEA5C,EAAA,WACAkL,EAAA+sC,OAAA7xC,EAAA2R,KAAA5P,QAAAgE,IAGA/F,EAAA8G,GAAA,YAAA8qC,EAAAL,UAAA33C,GACAA,KAEAiW,QAAA,SAAA7P,EAAAvC,EAAAm0C,GACA5xC,EAAA6G,IAAA,YAAA+qC,EAAAL,eAIAjyB,KAAA,SAAAtf,EAAAvC,EAAAm0C,GACA,IAAA9sC,EAAAtI,KACAwD,EAAA8G,GAAA,YAAA8qC,EAAAL,UAAA,WACAzsC,EAAA7B,KAAA2uC,EAAA3uC,SAGA4M,QAAA,SAAA7P,EAAAvC,EAAAm0C,GACA5xC,EAAA6G,IAAA,YAAA+qC,EAAAL,gBAaA53C,EAAAopC,IAAA0B,SAAA,qBAAA+Q,EAAA1S,GAEAA,IAAAzpC,IACAypC,EAAA0S,EACAA,EAAAn8C,GAGAmD,KAAAsmC,SAAAwV,YAAA9C,EACA,IAAAhQ,EAAAhpC,KAAA2mC,UAAA,mBAAAD,GACA,GAAAA,EAAA+P,SACA,OAAA/4C,EAAAy7C,eAAAz7C,EAAAq7C,iBAAAC,EAAAtS,EAAA+P,UAAAnQ,KAEK,GAEL,OADA0C,EAAA+S,eAAA/C,EACAhQ,IAGA7rC,EAAAopC,IAAA0B,SAAA,oBAAA+Q,EAAA1S,GAEA,IAAA3iC,EAAA3D,KAAA2D,QAAAq1C,EAAA1S,GAMA,OAJA3iC,EAAApD,OAAA,GACAoD,EAAAqU,OAAA,EAAArU,EAAApD,QAGAoD,IAGAxG,EAAAopC,IAAA6B,eAAA,kDAAAkN,GACA,OAAAA,IAAAz4C,EACAmD,KAAAqP,IAAA,SAAAw8B,GACA,OAAAA,EAAAzC,KAAAiM,OAAAxJ,EAAA5qC,QAIAjB,KAAAqG,KAAA,SAAAwlC,GACAA,EAAAzC,KAAAiM,OAAAxJ,EAAA5qC,KAAAq0C,OAIAn4C,EAAAopC,IAAA6B,eAAA,kDAAAlgC,GACA,OAAAA,IAAArL,EACAmD,KAAAqP,IAAA,SAAAw8B,GACA,OAAAA,EAAAzC,KAAAlhC,OAAA2jC,EAAA5qC,QAIAjB,KAAAqG,KAAA,SAAAwlC,GACAA,EAAAzC,KAAAlhC,OAAA2jC,EAAA5qC,KAAAiH,OAIA/K,EAAAopC,IAAA0B,SAAA,oDAAAqN,GACA,OAAAt1C,KAAAqG,KAAA,SAAAwlC,GACAA,EAAAzC,KAAA2M,OAAAlK,EAAA5qC,KAAAq0C,OAIAn4C,EAAAopC,IAAA0B,SAAA,wDACA,OAAAjoC,KAAAqG,KAAA,SAAAwlC,GACAA,EAAAzC,KAAAwM,QAAA/J,EAAA5qC,UAIA9D,EAAAopC,IAAA6B,eAAA,iDACA,IAAAjC,EAAArpC,IAKA,OAHAA,EAAAkD,KAAAqG,KAAA,SAAAwlC,GACA1F,IAAAv0B,IAAAi6B,EAAAzC,KAAAnoC,KAAA4qC,EAAA5qC,UAEAklC,IAGAhpC,EAAAopC,IAAA6B,eAAA,0DAAAkN,GACA,OAAAA,IAAAz4C,EACAmD,KAAAqP,IAAA,SAAAw8B,GACA,OAAAA,EAAAzC,KAAA/gC,WAAAwjC,EAAA5qC,QAIAjB,KAAAqG,KAAA,SAAAwlC,GACAA,EAAAzC,KAAA/gC,WAAAwjC,EAAA5qC,KAAAq0C,OAIAn4C,EAAAopC,IAAA6B,eAAA,8CAAA7F,GACA,OAAAA,IAAA1lC,EACAmD,KAAAqP,IAAA,SAAAw8B,GACA,OAAAA,EAAAzC,KAAA3iC,KAAAolC,EAAA5qC,QAIAjB,KAAAqG,KAAA,SAAAwlC,GACAA,EAAAzC,KAAA3iC,KAAAolC,EAAA5qC,KAAAshC,OAIAplC,EAAAopC,IAAA6B,eAAA,sDACA,OAAApoC,KAAAqG,KAAA,SAAAwlC,GACAA,EAAAzC,KAAAnoC,KAAA4qC,EAAA5qC,MAAAykC,QAAA,aAIAvoC,EAAAopC,IAAA6B,eAAA,4DACA,IAAAjC,EAAArpC,IACAk/C,EAAAh8C,KAAA+7C,eAYA,OATA/7C,KAAA2mC,UAAA,mBAAAD,GACA,GAAAA,EAAA+P,SAGA,IAFA,IAAA2C,EAAA17C,EAAAq7C,iBAAAiD,EAAAtV,EAAA+P,UAEAp2C,EAAA,EAAAmE,EAAA40C,EAAA74C,OAA2CF,EAAAmE,EAASnE,IACpD8lC,IAAAv0B,IAAAwnC,EAAA/4C,GAAAsJ,eAIAw8B,IAGAhpC,EAAAopC,IAAA0B,SAAA,0BAAAjjB,EAAAowB,GACA,IAAA1O,EAAA1mC,KAAAgmC,QAEA,GAAAU,EAAAnmC,OAAA,CACA,IAAA6oC,EAAA1rC,EAAAq7C,iBAAA/4C,KAAA+7C,eAAArV,EAAA,GAAA+P,UAEArN,EAAA7oC,QACA6oC,EAAA,GAAAx3B,IAAAwjC,EAAApwB,GAIA,OAAAhlB,KAAAoI,OAAApI,KAAA+7C,eAAA/2B,KAGA7nB,EAAAopC,IAAA0B,SAAA,iCAIA,OAHAjoC,KAAAmnC,MAAA,QAAA1U,SAAApsB,KAAA,SAAA+iC,GACAA,EAAA/1B,YAEArT,OAGA7C,EAAAopC,IAAA6B,eAAA,qDAIA,OAHApoC,KAAAqG,KAAA,SAAAwlC,GACAA,EAAAzC,KAAAhqC,OAAAysC,EAAA5qC,QAEAjB,OAKA7C,EAAAopC,IAAA0B,SAAA,0BAAA/+B,EAAAe,EAAA45B,GACA,IAAAv7B,EAAAtI,KAEA,WAAAkJ,GACApM,EAAA,4BAAAg8C,QAAA,WACAh8C,EAAAkD,MAAAZ,WAEAqjB,aAAAgyB,GACAA,EAAA,KACAz0C,OAGAy0C,GACAhyB,aAAAgyB,GAGA33C,EAAA,4BAAAyD,QACAzD,EAAA,4BAAAsC,SAGA8J,IAAA,OAAAA,EAAA,WACApM,EAAA,8DAAA+iB,KAAA3W,GAAAgB,OAAApN,EAAA,4BAAAmN,EAAA,iBAAAA,IAAAtB,IAAA,kBAAAa,SAAA,QAAAqvC,SAEAhV,IAAAhnC,GAAA,IAAAgnC,IACA4Q,EAAAz1C,WAAA,WACAsJ,EAAA3E,QAAA4E,MAAA,IACOs7B,IAGP7jC,QAIA7C,EAAAopC,IAAA0B,SAAA,gCAAA/2B,GACA,GAAAlR,KAAAgmC,QAAAzlC,OACA,OAAAgD,EAAA,IAAApG,EAAAopC,IAAAvmC,KAAAgmC,QAAA,IAAA90B,KAKA/T,EAAAopC,IAAA0B,SAAA,gCAAAmN,GAKA,OAJAA,IACAA,EAAA,IAGA,CACAvqC,SAAAoxC,EAAA7G,GACAlsC,MAAAgzC,EAAA9G,GACAjsC,WAAAgzC,EAAAn8C,KAAAo1C,EAAAnrC,SAAAmrC,EAAAjsC,WAAA,OACAC,cAAA+yC,EAAAn8C,KAAAo1C,EAAAhsC,cAAA,aAUA,IAAA6yC,EAAA,SAAA/4C,GAEA,IAAA2H,EAAA,MAAA3H,EAAA2H,UAAA,MAAA3H,EAAAgG,OAAAhG,EAAAgG,QAAArM,GAAA,OAAAqG,EAAAgG,OAAA,KAAAhG,EAAAgG,MAAAhG,EAAAgG,MAAAhG,EAAA2H,SAMA,GAJA,oBAAAA,IACAA,OAGAA,IAAAhO,GAAA,OAAAgO,EACA,aAGA,IAAAA,EAAA7F,QAAA,OACA6F,EAAA/N,EAAA4P,KAAA7B,EAAAlJ,QAAA,IAAA7E,EAAA,gBAAA2J,UAIAoE,IAAAlJ,QAAA,8CAEA,IAAAmJ,EAAAsxC,EAAAl5C,EAAA4H,WAMA,OAJAA,IACAA,EAAA,IAGAD,EAAAC,GAUAsxC,EAAA,SAAAC,GACA,cAAAA,OAAAx/C,EACA,KACK,oBAAAw/C,EACLA,IAGAA,GASAH,EAAA,SAAAh5C,GACA,IAAAgG,EAAAkzC,EAAAl5C,EAAAgG,OAEA,cAAAA,EAAA,UAAAA,EAAAlE,QAAA,KAAAkE,EAAAvH,QAAA,IAAA7E,EAAA,gBAAA2J,QAAA,iBAAAyC,GAGAizC,EAAA,SAAA34C,EAAA64C,EAAAtzC,GACA,IAAAkB,EAAAmyC,EAAAC,GAEA,UAAApyC,EACA,YAGA,IAAAqxB,EAAAx+B,EAAA,UAAA0G,EAAAkG,QAAAC,aAAAyR,GAAA,GAEA,SAAAnR,EAAA,CACA,IAAAqyC,EAAAhhB,EAAA3yB,IAAA,gBAEA,OAAA2zC,IAAAvzC,EACA,KAGAuyB,EAAA/6B,OAAA+6B,EAAA70B,OAAA,GAGA,OAAAwD,GAGAsyC,EAAAz/C,EAAA,kBAEAyG,EAAA,SAAAC,EAAAg5C,GACA,IAAAt5C,EAAApG,EAAAsa,QAAA,KAAkC,CAClCtS,KAAA,KACAoN,QAAA,GACAuqC,SAAA,CACA1oC,OAAA,UACA4B,MAAA,WAEA+mC,WAAA,UACAC,WAAA,EACAC,eAAA,EACAC,gBAAA,EACAnwC,MAAA,EACAowC,OAAA,CACAr4C,OAAA,SAAAoD,GACA,OAAAk1C,EAAAl1C,IAEAnD,OAAA,SAAAmD,GACA,OAAAk1C,EAAAl1C,IAEAlD,KAAA,SAAAkD,GACA,OAAAk1C,EAAAl1C,KAGAkF,cAAA,MACKyvC,GAELO,EAAA,SAAAl4C,GACA,wBAAAA,EACAA,GAMAA,GAFAA,IAAAlD,QAAA,2DAEAA,QAAA,sBAEAuB,EAAAy5C,YACA93C,IAAAlD,QAAA,gBAGAuB,EAAAwJ,OACA7H,IAAAlD,QAAA,kBAGAuB,EAAA05C,gBACA/3C,IAAAlD,QAAA,YAGAuB,EAAA25C,iBACAN,EAAAx3B,UAAAlgB,EACAA,EAAA03C,EAAAh2C,OAGA1B,IAGAJ,EAAAjB,EAAA0O,QAAAhP,EAAAgP,SAAAqnC,UAAAlqC,IAAA,SAAA2V,GACA,IAAA1J,EAAA9X,EAAAwQ,OAAAgR,GAAAvgB,SACA,OAAAvB,EAAA45C,OAAAr4C,OAAA6W,EAAAyJ,UAAAC,EAAA1J,KACKvJ,UACLrN,EAAAlB,EAAAkG,QAAAhF,SAAAlB,EAAA0O,QAAAhP,EAAAgP,SAAAqnC,UAAAlqC,IAAA,SAAA2V,GACA,IAAA1J,EAAA9X,EAAAwQ,OAAAgR,GAAAtgB,SACA,OAAAxB,EAAA45C,OAAAp4C,OAAA4W,IAAAyJ,UAAA,GAAAC,EAAA1J,KACKvJ,UAAA,KAIL0qC,EAAA3/C,EAAAsa,OAAA,GAA8BlU,EAAAu5C,UAE9Bj5C,EAAAqG,QAAA,oBAAArG,EAAAqG,OAAAtB,MAAAk0C,EAAAO,WAAAngD,GACA2G,EAAAsB,KAAA5B,EAAA4B,KAAAhI,EAAAsa,OAAA,CACA4lC,UAAA,GACOP,IAAAjW,OACP1pC,EAAAsa,OAAAqlC,EAAA,CACAO,UAAA,IAcA,IATA,IAAAC,EAAAz5C,EAAAsB,KAAA5B,EAAA4B,KAAA23C,GAAAlD,UAAAxnC,UACAmrC,EAAA15C,EAAA6lB,MAAA4zB,EAAA/5C,EAAAgP,SACAmX,EAAA6zB,EAAA7J,OAAAnwC,EAAAw5C,YAAA3qC,UACAorC,EAAAD,EAAA5oC,QAAAvC,UACAG,EAAAzN,EAAAlE,OACAuE,EAAAoN,EAAA,EAAAmX,EAAA9oB,OAAA2R,EAAA,EACAvN,EAAA,GACAy4C,EAAA,EAEA/8C,EAAA,EAAAmE,EAAAM,EAA+BzE,EAAAmE,EAASnE,IAAA,CAGxC,IAFA,IAAA+L,EAAA,CAAA8F,GAEAvF,EAAA,EAAqBA,EAAAuF,EAAavF,IAClCP,EAAAO,GAAAzJ,EAAA45C,OAAAn4C,KAAA0kB,EAAA+zB,GAAA/8C,EAAAsM,EAAAwwC,EAAAC,IACAA,IAGAz4C,EAAAtE,GAAA+L,EAGA,IAAA1I,EAAA,CACAe,SACAC,SACAC,QAOA,OAJAzB,EAAA6J,eACA7J,EAAA6J,cAAArJ,GAGAA,GA2BA,SAAA25C,EAAAjrC,GACA,IAAAf,EAAA,IAAAlU,EAAAopC,IAAAn0B,GACApM,EAAAqL,EAAAyR,OAAAnf,SAAAxG,EAAA4Z,SAAApT,QACA,WAAAjG,EAAA2T,EAAArL,GAAA2D,YAaA,OAnCA7M,EAAAM,GAAAC,UAAAK,UACAZ,EAAAM,GAAAD,UAAAO,UAMAZ,EAAAE,GAAAsN,GAAA,kCAAAnC,EAAAiK,GACA,UAAAjK,EAAA4sC,UAAA,CAIA,IAAA/uC,EAAAoM,EAAAsE,MAAA/S,SAAAxG,EAAA4Z,SAAApT,QAEAqC,IAAAoM,EAAAqkC,UACA,IAAA/4C,EAAA0U,EAAApM,GAAA2D,eAWAxM,EAAA2K,IAAA8pB,QAAAhtB,KAAA,CACAmtB,OAAAsrB,EACAvrB,SAAA,MAGA30B,EAAA2K,IAAA0U,UACArf,EAAA2K,IAAA0U,SAAAyrB,SAAA,UAAAoV,GAGA3/C,EA3wDAgT,CAAA5T,EAAAC,OAAAC,WACK2T,MAAAC,EAAAlU,MAAAmU,EAAAD,QAAAjU,wBCRL,IAAAD,EAAAC,EAMID,EAAO,CAACE,EAAA,GAAUA,EAAA,KAAqBA,EAAA,WAEtCC,KAF+DF,EAAA,SAAEG,GACtE,OAuBC,SAAAA,EAAAC,EAAAC,EAAAH,GACD,aAEA,IAAAM,EAAAL,EAAAM,GAAAC,UA8BA,OA7BAP,EAAAsa,QAAA,EAAAja,EAAAO,QAAAqZ,SAAA,CACAu9B,IAAA,CACA3qC,UAAA,CACA3B,UAAA,wBAEAI,OAAA,CACAJ,UAAA,mBAEAouC,WAAA,CACApB,IAAA,KACAhtC,UAAA,qCACAI,OAAA,CACA4sC,IAAA,KACAhtC,UAAA,YACAqtC,OAAA,SACAQ,SAAA,YAEAM,YAAA,CACAnB,IAAA,IACAhtC,UAAA,QAMA7K,EAAA2K,IAAAnE,QAAAyyC,WAAA3vC,KAAA,SAAAjD,GACA,OAAAA,EAAAyE,KAAA,0DAGA9K,EAAAO,QAxDAgT,CAAA5T,EAAAC,OAAAC,WACK2T,MAAAC,EAAAlU,MAAAmU,EAAAD,QAAAjU,wBCRL,IAAAD,EAAAC,EAOID,EAAO,CAACE,EAAA,GAAUA,EAAA,KAAkBA,EAAA,WAEnCC,KAF4DF,EAAA,SAAEG,GACnE,OAuBC,SAAAA,EAAAC,EAAAC,EAAAH,GACD,aAEA,IAAAM,EAAAL,EAAAM,GAAAC,UAqIA,OApIAP,EAAAsa,OAAAja,EAAA2K,IAAAnE,QAAA,CAEA25C,OAAA,SAAA95C,EAAA4xC,GACA,OACAh+B,OAAA,aACA3Q,KAAA,SAAAjD,GACA,OAAAA,EAAAyE,KAAA,uCAEAD,UAAA,iBACArE,QAAA,EACAyT,OAAA,gBACAlF,QAAAkjC,EAAAljC,QACAqrC,WAAAnI,EAAAmI,eAKAC,cAAA,SAAAh6C,EAAA4xC,GAQA,OAPA5xC,EAAA0O,QAAAkjC,EAAAljC,SAAAqnC,UAAAlqC,IAAA,SAAA2V,GACA,OACA5N,OAAA,eACAlF,QAAA8S,EACAu4B,WAAAnI,EAAAmI,cAEOxrC,WAIP0rC,aAAA,SAAAj6C,EAAA4xC,GACA,OACAh+B,OAAA,mBACAlF,QAAAkjC,EAAAljC,QACAqrC,WAAAnI,EAAAmI,aAIAG,kBAAA,SAAAl6C,EAAA4xC,GASA,OARA5xC,EAAA0O,QAAAkjC,EAAAljC,SAAAqnC,UAAAlqC,IAAA,SAAA2V,GACA,OACA5N,OAAA,mBACAlF,QAAA8S,EACA24B,WAAAvI,EAAAuI,WACAJ,WAAAnI,EAAAmI,cAEOxrC,WAIP6rC,iBAAA,CACA1rC,QAAArV,EAEA4J,KAAA,SAAAjD,EAAA4E,EAAAgtC,GACA,OAAAA,EAAAyI,YAAAr6C,EAAA4xC,IAEAptC,UAAA,2BACAE,OAAA,SAAAC,EAAA3E,EAAA4E,EAAAgtC,GACA,IAAAxuC,EAAApD,EAAA0O,QAAAkjC,EAAAljC,SACA4rC,EAAAl3C,EAAA2O,UACA3O,EAAA2O,QAAA6/B,EAAAuI,aAAA9gD,EAAAu4C,EAAAuI,aAAAG,EAAAv9C,QAAAu9C,EAAA,MAEAh7B,KAAA,SAAAtf,EAAA4E,EAAAgtC,GACA,IAAA9sC,EAAAtI,KACAoI,EAAAjC,KAAA,cAAAivC,EAAAljC,SACA1O,EAAA8G,GAAA,uBAAA8qC,EAAAL,UAAA,SAAA5sC,EAAAiK,GACAA,EAAAmc,aAAAnc,EAAAkF,QAAA9T,EAAA4O,WAAA,GAAAkF,QACAhP,EAAA+sC,OAAA7xC,EAAAwQ,OAAAohC,EAAAljC,SAAAqD,aAESjL,GAAA,oBAAA8qC,EAAAL,UAAA,SAAA5sC,EAAAiK,EAAA2rC,GAGT,IAAAv6C,EAAA0O,QAAAkjC,EAAAljC,SAAAu0B,UAIA2O,EAAAljC,QAAApV,EAAAue,QAAA+5B,EAAAljC,QAAA6rC,EAAAC,SACA51C,EAAAjC,KAAA,cAAAivC,EAAAljC,SAEA9J,EAAA6oB,SAAA7qB,SAAA,iBAAAa,KAAA,SAAA3C,EAAA4C,GACA,SAAA5C,EAAAuS,aAAA,iBAAA3P,EAAA2P,aAAA,iBACWrN,SAAApB,EAAA6oB,aAEXjxB,KAAAq1C,OAAA7xC,EAAAwQ,OAAAohC,EAAAljC,SAAAqD,YAEAlC,QAAA,SAAA7P,EAAA4E,EAAAgtC,GACA5xC,EAAA6G,IAAA,uBAAA+qC,EAAAL,WAAA1qC,IAAA,oBAAA+qC,EAAAL,YAEA8I,YAAA,SAAAr6C,EAAA4xC,GAKA,IAAApwB,EAAAxhB,EAAAwQ,OAAAohC,EAAAljC,SAAAuC,QACAvL,EAAA1F,EAAA4O,WAAA,GAAA6J,UAAA+I,GAAAF,OAAAnjB,QAAA,WACAA,QAAA,oBACAA,QAAA,8BACAA,QAAA,sBACAA,QAAA,aACAA,QAAA,iBAEA,OAAAyzC,EAAAmI,WAAAnI,EAAAmI,WAAA/5C,EAAAwhB,EAAA9b,OAGA+0C,cAAA,CACAj2C,UAAA,wBACAvB,KAAA,SAAAjD,GACA,OAAAA,EAAAyE,KAAA,+CAEA6a,KAAA,SAAAtf,EAAA4E,EAAAgtC,GACAA,EAAA8I,aAAA16C,EAAA0O,UAAAqnC,UAAAlqC,IAAA,SAAA2V,GACA,OAAAxhB,EAAAwQ,OAAAgR,GAAAzP,YACSxD,WAET7J,OAAA,SAAAC,EAAA3E,EAAA4E,EAAAgtC,GACA5xC,EAAA0O,UAAAisC,MAAA,SAAA99C,GAGA,IAAA2kB,EAAAxhB,EAAA46C,YAAA56C,EAAA46C,WAAAC,UAAA76C,EAAA46C,WAAAC,UAAAh+C,EAAA,cAAAA,EACAL,KAAAuV,QAAA6/B,EAAA8I,aAAAl5B,QAIAs5B,YAAA,CACAt2C,UAAA,sBACAE,OAAA,SAAAC,EAAA3E,EAAA4E,EAAAgtC,GACA5xC,EAAA0O,QAAAkjC,EAAApgC,MAAAO,SAAA,MACA/R,EAAA0O,QAAAkjC,EAAAriC,MAAAwC,SAAA,MACA/R,EAAA0O,QAAAC,UAEA6C,KAAA,GACAjC,KAAA,MAGA5V,EAAAO,QA/JAgT,CAAA5T,EAAAC,OAAAC,WACK2T,MAAAC,EAAAlU,MAAAmU,EAAAD,QAAAjU,wBCTL,IAAAD,EAAAC,EAUID,EAAO,CAACE,EAAA,GAAUA,EAAA,KAAkBA,EAAA,WAEnCC,KAF4DF,EAAA,SAAEG,GACnE,OAuBC,SAAAA,EAAAC,EAAAC,EAAAH,GACD,aAEA,IAAAM,EAAAL,EAAAM,GAAAC,UAaAkhD,EAAA,CACAt5C,QAAA,oBACAu5C,QAAA,GAEAC,UAAA,GAEAC,OAAA,EAEA5hD,EAAA,SAAA6hD,GA8BA,MA5BA,iBAAAA,IACAA,EAAA3hD,EAAA4hD,eAAAD,IAGAA,EAAA7kC,WAEA6kC,EAAA5rC,KAAA,WACA/S,KAAA2H,MAAA6vB,QAAA,QAGAmnB,EAAA3pC,KAAA,WACAhV,KAAA2H,MAAA6vB,QAAA,IAGAmnB,EAAA7kC,SAAA,SAAAla,GACAI,KAAAwb,YAAA5b,GACAI,KAAAgI,WAAA,IAAApI,GAGA++C,EAAAnjC,YAAA,SAAA5b,GACAI,KAAAgI,UAAAhI,KAAAgI,UAAArG,QAAA,IAAAwC,OAAA,OAAAvE,EAAA,aAAA+B,QAAA,WAAAA,QAAA,YAGAg9C,EAAApjC,SAAA,SAAA3b,GACA,QAAAI,KAAAgI,UAAA1E,MAAA,IAAAa,OAAA,OAAAvE,EAAA,WAIA++C,GAEAE,aAAA,SAAAC,GAEA9+C,KAAAy+C,UAAAK,GAEAp+C,SAAA,SAAAqX,EAAAwtB,EAAAhjB,GAEA,IAAAw8B,EAAA/+C,KAAAw+C,QAAAzmC,GAEAgnC,GACAA,EAAAC,aAAAzZ,EAAAhjB,IAGAmiB,IAAA,SAAA7/B,GACA4/B,QAAAC,IAAA,UAAA7/B,IAEAojC,SAAA,SAAAlwB,EAAAgnC,GAEA/+C,KAAAw+C,QAAAzmC,GAAAgnC,GAEAE,qBAAA,SAAA/wC,GAEA,IAAA3F,EAAA,CACAU,KAAA,EACAD,IAAA,EACAH,MAAAqF,EAAArF,MAAAqF,EAAArF,MAAAqF,EAAA0V,YACAhb,OAAAsF,EAAAtF,OAAAsF,EAAAtF,OAAAsF,EAAAsxB,cAWA,IARA,KAAAtxB,EAAAvG,MAAAkB,QACAN,EAAAM,MAAAqF,EAAAvG,MAAAkB,MAAAlH,QAAA,UAGA,KAAAuM,EAAAvG,MAAAiB,SACAL,EAAAK,OAAAsF,EAAAvG,MAAAiB,OAAAjH,QAAA,UAGAuM,GACA3F,EAAAU,MAAAiF,EAAAgxC,WACA32C,EAAAS,KAAAkF,EAAAixC,UACAjxC,IAAAkxC,aAGA,OAAA72C,GAEA82C,OAAA,SAAAC,GAEAt/C,KAAAu/C,SAAA,GAEAv/C,KAAA+X,GAAAwmC,EAAAG,SACA1+C,KAAAw/C,QAAA,iCAAAx/C,KAAA+X,GAEAwmC,EAAAtW,SAAAjoC,KAAA+X,GAAA/X,MAEAs/C,GACAt/C,KAAAy/C,KAAAH,KAIAf,EAAAc,OAAAl9C,UAAA,CACA4V,GAAA,EAEA2nC,OAAA,EAEAC,MAAA,KAEAC,SAAA,GAEAC,SAAA,GAEA33C,OAAA,OAEA43C,mBAAA,EAEAC,YAAA,EAEAR,SAAA,KAEAS,OAAA,EACA78C,UAAA,GAEAs8C,KAAA,SAAAH,EAAAp2C,GAGAlJ,KAAAigD,WAAA1B,EAAAzhD,EAAAwiD,GAEA,IAAAY,EAAA,GAEAlgD,KAAAigD,WAAAt4C,MAAAu4C,SACAA,EAAAhhC,SAAAlf,KAAAigD,WAAAt4C,MAAAu4C,OAAA,OAIA,IAAAC,EAAA5B,EAAAU,qBAAAj/C,KAAAigD,YAEAjgD,KAAAs6B,IAAAt9B,EAAAkJ,cAAA,OACA,IAAAyB,EAAA3H,KAAAs6B,IAAA3yB,MACAA,EAAAoB,SAAA,WACApB,EAAAsB,KAAA,MACAtB,EAAAqB,IAAA,MACArB,EAAAkB,MAAAs3C,EAAAt3C,MAAA,KACAlB,EAAAiB,OAAAu3C,EAAAv3C,OAAA,KACAjB,EAAAu4C,SAEA,oBAAAh3C,GAAA,KAAAA,IACAlJ,KAAAs6B,IAAApxB,SAGA,IAAAi3C,EAAAt3C,OAAA,IAAAs3C,EAAAv3C,SACA5I,KAAAggD,OAAA,GAIAhgD,KAAAigD,aACAjgD,KAAAigD,WAAAz5C,YAAAxG,KAAAs6B,KACAt6B,KAAAs6B,IAAAvV,UAAA/kB,KAAAogD,QAAAD,EAAAt3C,MAAAs3C,EAAAv3C,QAAAjH,QAAA,gBAGA0+C,gBAAA,WACA,IAAAF,EAAA5B,EAAAU,qBAAAj/C,KAAAigD,YACAt4C,EAAA3H,KAAAs6B,IAAA3yB,MAOA,GANAA,EAAAoB,SAAA,WAGApB,EAAAkB,MAAAs3C,EAAAt3C,MAAA,KACAlB,EAAAiB,OAAAu3C,EAAAv3C,OAAA,KAEA,IAAAu3C,EAAAt3C,OAAA,IAAAs3C,EAAAv3C,OAAA,CACA5I,KAAAggD,OAAA,EAKA,IAAAM,EAAAtgD,KAAAs6B,IAAA9rB,WAAA,GACA8xC,EAAAz3C,MAAAs3C,EAAAt3C,MACAy3C,EAAA13C,OAAAu3C,EAAAv3C,SAEAw3C,QAAA,SAAAv3C,EAAAD,GAEA,IAAAiX,EAAA,GACA0gC,EAAA,MAAAvgD,KAAA+X,GAAA,UAAAlP,EAAA,WAAAD,EAEA,GAAA7K,UAAAE,UAAAqF,MAAA,SAEA,IAAAk9C,EAAA1+C,SAAAf,KAAAuC,MAAA,gCACAuc,GAAA,0EAAA2gC,EAAA,yFAAA33C,EAAA,aAAAD,EAAA,SAAA5I,KAAAw/C,QAAA,8IAAAjB,EAAAE,UAAA,yLAAA8B,EAAA,6DAGA1gC,GAAA,cAAA7f,KAAAw/C,QAAA,UAAAjB,EAAAE,UAAA,uEAAA51C,EAAA,aAAAD,EAAA,WAAA5I,KAAAw/C,QAAA,iLAAAe,EAAA,2BAGA,OAAA1gC,GAEA9M,KAAA,WAEA/S,KAAAs6B,MACAt6B,KAAAs6B,IAAA3yB,MAAAsB,KAAA,YAGA+L,KAAA,WAEAhV,KAAAygD,cAEAptC,QAAA,WAEA,IAAA/K,EAAAtI,KAEAA,KAAAigD,YAAAjgD,KAAAs6B,MACAx9B,EAAAkD,KAAAs6B,KAAAl7B,SACAY,KAAAigD,WAAA,KACAjgD,KAAAs6B,IAAA,KACAx9B,EAAAuJ,KAAAk4C,EAAAC,QAAA,SAAAzmC,EAAAgnC,GACAA,IAAAz2C,UACAi2C,EAAAC,QAAAzmC,OAKA0oC,WAAA,SAAAnB,GAWA,GARAA,IACAt/C,KAAAigD,WAAA1B,EAAAzhD,EAAAwiD,GAEAt/C,KAAAigD,YACAjgD,KAAA+S,QAIA/S,KAAAigD,YAAAjgD,KAAAs6B,IAAA,CACA,IAAA6lB,EAAA5B,EAAAU,qBAAAj/C,KAAAigD,YACAt4C,EAAA3H,KAAAs6B,IAAA3yB,MACAA,EAAAsB,KAAAk3C,EAAAl3C,KAAA,KACAtB,EAAAqB,IAAAm3C,EAAAn3C,IAAA,OAGA03C,UAAA,WAEA1gD,KAAA4/C,SAAA,GAEA5/C,KAAA0/C,OACA1/C,KAAA2/C,MAAAe,aAGAC,WAAA,SAAAC,GAEA5gD,KAAA4/C,UAAAgB,EAEA5gD,KAAA0/C,OACA1/C,KAAA2/C,MAAAgB,WAAAC,IAGAC,QAAA,SAAAD,GAEA5gD,KAAA4/C,SAAAgB,EAEA5gD,KAAA0/C,OACA1/C,KAAA2/C,MAAAkB,QAAAD,IAGAE,YAAA,SAAAF,GAEA5gD,KAAA6/C,SAAAe,EAEA5gD,KAAA0/C,OACA1/C,KAAA2/C,MAAAmB,YAAAF,IAGAG,aAAA,SAAAr9C,GAEA1D,KAAA0/C,OACA1/C,KAAA2/C,MAAAoB,aAAApT,KAAAO,UAAAxqC,KAGAs9C,UAAA,SAAAJ,GAEA5gD,KAAAkI,OAAA04C,EAEA5gD,KAAA0/C,OACA1/C,KAAA2/C,MAAAqB,UAAAJ,IAGAK,iBAAA,SAAA1b,EAAA2b,GAGA3b,IAAAv+B,WAAAmN,cAAAxS,QAAA,UAEA3B,KAAAu/C,SAAAha,KACAvlC,KAAAu/C,SAAAha,GAAA,IAGAvlC,KAAAu/C,SAAAha,GAAA3gC,KAAAs8C,IAEAC,cAAA,SAAA1J,GAEAz3C,KAAA8/C,kBAAArI,EAEAz3C,KAAA0/C,OACA1/C,KAAA2/C,MAAAwB,cAAA1J,IAGA2J,cAAA,SAAA3J,GAEAz3C,KAAA+/C,aAAAtI,GAEAuH,aAAA,SAAAzZ,EAAAhjB,GACA,IAAAzf,EAIA,OAFAyiC,IAAAv+B,WAAAmN,cAAAxS,QAAA,WAGA,WAKA,GAFA3B,KAAA2/C,MAAA3iD,EAAA4hD,eAAA5+C,KAAAw/C,UAEAx/C,KAAA2/C,MAKA,OAJA78C,EAAA9C,UACAhB,WAAA,WACA8D,EAAAk8C,aAAA,cACa,GAKb,IAAAh/C,KAAA0/C,OAAA3hD,UAAAE,UAAAqF,MAAA,YAAAvF,UAAAE,UAAAqF,MAAA,WAMA,OALAR,EAAA9C,KACAhB,WAAA,WACA8D,EAAAk8C,aAAA,cACa,UACbh/C,KAAA0/C,OAAA,GAIA1/C,KAAA0/C,OAAA,EACA1/C,KAAA2/C,MAAAe,YACA1gD,KAAA2/C,MAAAgB,WAAA3gD,KAAA4/C,UACA5/C,KAAA2/C,MAAAmB,YAAA9gD,KAAA6/C,UACA7/C,KAAA2/C,MAAAqB,UAAAhhD,KAAAkI,QACAlI,KAAA2/C,MAAAwB,cAAAnhD,KAAA8/C,mBACA,MAEA,gBACA9/C,KAAAigD,YAAAjgD,KAAA+/C,YAEA//C,KAAAqhD,eACArhD,KAAAigD,WAAAnmC,SAAA,UAIA,MAEA,eACA9Z,KAAAigD,YAAAjgD,KAAA+/C,aACA//C,KAAAqhD,eAAA,EAEArhD,KAAAigD,WAAA1kC,SAAA,YACAvb,KAAAigD,WAAAzkC,YAAA,UACAxb,KAAAqhD,eAAA,IAKA,MAEA,gBACArhD,KAAAigD,YAAAjgD,KAAA+/C,YACA//C,KAAAigD,WAAAnmC,SAAA,UAGA,MAEA,cACA9Z,KAAAigD,YAAAjgD,KAAA+/C,aACA//C,KAAAigD,WAAAzkC,YAAA,UACAxb,KAAAqhD,eAAA,GAOA,GAAArhD,KAAAu/C,SAAAha,GACA,QAAAvgB,EAAA,EAAAzf,EAAAvF,KAAAu/C,SAAAha,GAAAhlC,OAAgEykB,EAAAzf,EAAWyf,IAAA,CAC3E,IAAAk8B,EAAAlhD,KAAAu/C,SAAAha,GAAAvgB,GAEA,mBAAAk8B,EAEAA,EAAAlhD,KAAAuiB,GACW,iBAAA2+B,GAAA,GAAAA,EAAA3gD,OAEX2gD,EAAA,GAAAA,EAAA,IAAAlhD,KAAAuiB,GACW,iBAAA2+B,GAEXnkD,EAAAmkD,GAAAlhD,KAAAuiB,MASAg8B,EAAA+C,SAAA,WACA,IACA,IAAAC,EAAA,IAAAC,cAAA,iCAEA,GAAAD,EACA,SAEK,MAAAp5C,GACL,GAAApK,UAAA0jD,WAAA1jD,UAAA0jD,UAAA,mCAAA5kD,GAAAkB,UAAA0jD,UAAA,iCAAAC,cACA,SAIA,UAKA3kD,EAAAwhD,2BAcA,IAuCAoD,EAAA,SAAArB,EAAA58C,GACA,IAAAk+C,EAAAl+C,EAAAJ,MAAA,oBAA0C,GAC1Cg9C,EAAAI,YAEA,QAAArgD,EAAA,EAAAkF,EAAAq8C,EAAArhD,OAAuCF,EAAAkF,EAASlF,IAChDigD,EAAAK,WAAAiB,EAAAvhD,KAWA+C,EAAA,SAAAF,GACA,OAAAA,EAAAG,QAAAH,EAAAG,QAAAtF,UAAAE,UAAAqF,MAAA,wBAYAC,EAAA,SAAAC,EAAAN,GA4BA,IA3BA,IAAAO,EAAAL,EAAAF,GAEAQ,EAAAF,EAAAG,QAAAC,WAAAV,EAAAW,eACAC,EAAAZ,EAAAa,cACAC,EAAAd,EAAAe,eACAC,EAAA,IAAAC,OAAAL,EAAA,KACAM,EAAAlB,EAAAkB,aAAAvH,EAAAqG,EAAAkB,WAAA,KAEAC,EAAA,SAAAC,GAIA,IAHA,IAAAC,EAAA,GAGAlE,EAAA,EAAAmE,EAAAF,EAAA/D,OAAqCF,EAAAmE,EAASnE,IAC9CA,EAAA,IACAkE,GAAAP,GAGAO,GAAAT,KAAA,GAAAQ,EAAAjE,IAAAsB,QAAAuC,EAAAE,EAAAN,KAAAQ,EAAAjE,GAGA,OAAAkE,GAGAE,EAAAvB,EAAAuB,OAAAJ,EAAAX,EAAAe,QAAAhB,EAAA,GACAiB,EAAAxB,EAAAwB,QAAAhB,EAAAgB,OAAAjB,EAAAY,EAAAX,EAAAgB,QAAA,GACAC,EAAA,GAEAtE,EAAA,EAAAmE,EAAAd,EAAAiB,KAAApE,OAA2CF,EAAAmE,EAASnE,IACpDsE,EAAAC,KAAAP,EAAAX,EAAAiB,KAAAtE,KAGA,OACAwE,IAAAJ,EAAAE,EAAAN,KAAAZ,GAAAiB,EACAI,KAAAH,EAAApE,SAKAshD,EAAA,CACAn3C,UAAA,WACA,OAAA6zC,EAAA+C,YAEAx+B,KAAA,SAAAtf,EAAA4E,EAAAlF,GAEAq7C,EAAAE,UAAAthD,EAAAO,QAAAokD,QACA,IAAAxB,EAAA,IAAA/B,EAAAc,OACAiB,EAAAa,eAAA,GACAb,EAAAW,iBAAA,qBAAAlC,GACA77C,EAAA6+C,YAAA,EACAv+C,EAAA4E,SAAA,IAAAs9B,UACAxiC,EAAA6+C,YAAA,IAvHA,SAAAC,EAAA1B,EAAAr/C,GACAA,EAAAkF,KAAA,MAEAlF,EAAA44C,QAAA,QAAAt5C,OACA+/C,EAAAb,KAAAx+C,EAAA,OAEAjC,WAAA,WACAgjD,EAAA1B,EAAAr/C,IACO,KAkHP+gD,CAAA1B,EAAAl4C,GAEAlF,EAAA++C,OAAA3B,GAEAjtC,QAAA,SAAA7P,EAAA4E,EAAAlF,GACAA,EAAA++C,OAAA5uC,WAEApP,eAAA,IACAF,cAAA,IACAF,cAAA,GACAqF,MAAA,IACAC,WAAA,IACAC,cAAA,IACAyB,SAAA,IACAC,UAAA,OACArG,QAAA,EACAC,QAAA,GAQA,SAAAQ,EAAAC,GAMA,IALA,IAAAC,EAAA,IAAAC,WAAA,GACAC,EAAA,IAAAD,WAAA,GACAE,EAAAD,EAAAF,EAAA,EACAb,EAAA,GAEAY,GAAA,GACAZ,EAAA9E,OAAAC,aAAAyF,EAAAI,EAAAH,GAAAb,EACAY,EAAAK,KAAAC,MAAAN,EAAAI,GAAA,EAGA,OAAAhB,EAcA,SAAAuB,EAAA5H,EAAA6H,EAAAC,GACA,IAAAC,EAAA/H,EAAAgI,cAAAH,GAkBA,OAhBAC,IACAA,EAAAG,MACArJ,EAAAmJ,GAAAE,KAAAH,EAAAG,MAGAH,EAAAI,UACAtJ,EAAAuJ,KAAAL,EAAAI,SAAA,SAAAE,EAAAC,GACAN,EAAAO,YAAAD,KAIA,OAAAP,EAAAS,MAAAT,EAAAS,OAAA5J,GACAoJ,EAAAO,YAAAtI,EAAAwI,eAAAV,EAAAS,QAIAR,EAUA,SAAAU,EAAAjD,EAAAkD,GACA,IACArB,EAAAsB,EAAAhC,EADAiC,EAAApD,EAAAe,OAAAmC,GAAArG,OAGAmD,EAAAgB,QAAAhB,EAAAgB,OAAAkC,GAAArG,OAAAuG,IACAA,EAAApD,EAAAgB,OAAAkC,GAAArG,QAGA,QAAAF,EAAA,EAAAmE,EAAAd,EAAAiB,KAAApE,OAA2CF,EAAAmE,EAASnE,IAAA,CACpD,IAAA0G,EAAArD,EAAAiB,KAAAtE,GAAAuG,GAmBA,IAfA,KAHA/B,EAAA,OAAAkC,OAAAlK,EAAAkK,EAAAC,WAAA,IAGAhC,QAAA,QACA6B,EAAAhC,EAAAlE,MAAA,OACAsG,KAAA,SAAA3C,EAAA4C,GACA,OAAAA,EAAA3G,OAAA+D,EAAA/D,SAEAgF,EAAAsB,EAAA,GAAAtG,QAEAgF,EAAAV,EAAAtE,OAGAgF,EAAAuB,IACAA,EAAAvB,GAIAuB,EAAA,GACA,UAMA,OAFAA,GAAA,KAEA,EAAAA,EAAA,EAGA,IAYApB,EAZAC,EAAA,GAGAA,EADA,qBAAA5I,EAAA6I,cACA,eACA5F,KAAAmO,kBAAA,SAAAynB,GACA,OAAAA,EAAAssB,MAIA,IAAAt8C,cAyEA,IAAAuB,EAAA,CACAC,cAAA,0SACAC,6BAAA,0aACAC,sBAAA,ouBACAC,kBAAA,shBACAC,2BAAA,0aACAC,gBAAA,i+RAQAC,EAAA,EACApE,MAAA,gBACAqE,MAAA,GACAC,IAAA,SAAAC,GACA,OAAAA,EAAA,MAGA,CACAvE,MAAA,kBACAqE,MAAA,GACAC,IAAA,SAAAC,GACA,OAAAA,EAAA,MAGA,CACAvE,MAAA,qBACAqE,MAAA,IAEA,CACArE,MAAA,uBACAqE,MAAA,IAEA,CACArE,MAAA,yBACAqE,MAAA,IAEA,CACArE,MAAA,eACAqE,MAAA,GACAC,IAAA,SAAAC,GACA,SAAAA,EAAAlG,QAAA,gBAGA,CACA2B,MAAA,sBACAqE,MAAA,GACAC,IAAA,SAAAC,GACA,SAAAA,EAAAlG,QAAA,gBAGA,CACA2B,MAAA,WACAqE,MAAA,IAEA,CACArE,MAAA,kBACAqE,MAAA,KAoVA,OA5UAxK,EAAAO,QAAAokD,QAAA,gCAAA3kD,EAAAO,QAAAuH,QAAA,uBAGA9H,EAAAopC,IAAA0B,SAAA,8BACAnrC,EAAAuJ,KAAAk4C,EAAAC,QAAA,SAAAn+C,EAAA0+C,GACAA,EAAAkB,aAAApjD,GAAAkiD,EAAAkB,WAAAzoC,YACAunC,EAAAsB,sBASAljD,EAAA2K,IAAAnE,QAAAy3C,UAAAt+C,EAAAsa,OAAA,GAA+CyqC,EAAA,CAC/C75C,UAAA,6BACAvB,KAAA,SAAAjD,GACA,OAAAA,EAAAyE,KAAA,wBAEAC,OAAA,SAAAC,EAAA3E,EAAA4E,EAAAlF,GAEA,GAAAA,EAAA6+C,WAAA,CAIA/hD,KAAAqI,YAAA,GACA,IAAAi4C,EAAAp9C,EAAA++C,OAEAr+C,EAAAL,EAAAC,EAAAN,GAEAqF,EAAA/E,EAAAG,QAAA6E,WAAAtF,GAEAG,EAAAD,EAAAF,GAEAuF,EAAA7E,EAAAiB,IAEA0D,EAAAW,QACAT,EAAAF,EAAAW,MAAA7F,IAAAoF,GAGAF,EAAAY,aACAV,EAAAF,EAAAY,WAAA9F,IAAAoF,GAGAF,EAAAa,gBACAX,IAAApF,IAAAkF,EAAAa,eAGAlG,EAAAmG,YACAZ,EAAAvF,EAAAmG,UAAAZ,EAAAvF,EAAAM,IAGA88C,EAAAU,UAAA,QAEAW,EAAArB,EAAA73C,GAEAzI,KAAAqI,YAAA,GACA7E,EAAAG,QAAA4E,KAAA/E,EAAAyE,KAAA,yCAAAzE,EAAAyE,KAAA,uBACAtK,EAAA,8BACAqM,EAAA,6BACOtG,KAAAoB,MAAA,OAEPb,eAAA,KACAF,cAAA,KAGA5G,EAAA2K,IAAAnE,QAAA23C,SAAAx+C,EAAAsa,OAAA,GAA8CyqC,EAAA,CAC9C75C,UAAA,4BACAvB,KAAA,SAAAjD,GACA,OAAAA,EAAAyE,KAAA,sBAEAC,OAAA,SAAAC,EAAA3E,EAAA4E,EAAAlF,GAEA,IAAAo9C,EAAAp9C,EAAA++C,OAEAv+C,EAAAH,EAAAC,EAAAN,GAEAqF,EAAA/E,EAAAG,QAAA6E,WAAAtF,GACAuF,EAAAvF,EAAAmG,UAAAnG,EAAAmG,UAAA3F,EAAAmB,IAAA3B,EAAAM,GAAAE,EAAAmB,IACAy7C,EAAAU,UAAA,OACAV,EAAAQ,YAAAv4C,EAAAsC,UAEA82C,EAAArB,EAAA73C,IAEArE,WAAA,MAGAjH,EAAA2K,IAAAnE,QAAA63C,WAAA1+C,EAAAsa,OAAA,GAAgDyqC,EAAA,CAChD75C,UAAA,8BACAvB,KAAA,SAAAjD,GACA,OAAAA,EAAAyE,KAAA,0BAEAC,OAAA,SAAAC,EAAA3E,EAAA4E,EAAAlF,GACAlD,KAAAqI,YAAA,GACA,IAsBA6C,EAAAC,EAtBAm1C,EAAAp9C,EAAA++C,OACA72C,EAAA,EACAG,EAAAzO,EAAAwO,SAAAnE,EAAA,6BAEAqE,EAAAD,EAAAE,qBAAA,gBACAC,EAAA,CACAC,MAAA,CACAC,QAAA9O,EAAAwO,SAAAnE,EAAA,iBAEA0E,GAAA,CACAF,MAAA,CACAG,oBAAAhP,EAAAwO,SAAAnE,EAAA,gCAEA4E,eAAAjP,EAAAwO,SAAAnE,EAAA,oBACA6E,aAAAlP,EAAAwO,SAAAnE,EAAA,kBACA8E,WAAA,CACAC,aAAAX,IAGAjE,sBAAAxK,EAAAwO,SAAAnE,EAAA,yBAEAzD,EAAAF,EAAAG,QAAAC,WAAAV,EAAAW,eAGAsI,EAAA,SAAAC,GAEAjB,EAAArF,EAAAyF,EAAA,OACApF,KAAA,CACAkG,EAHAnB,EAAAE,EAAA,KAOA,QAAA/K,EAAA,EAAAmE,EAAA4H,EAAA7L,OAAyCF,EAAAmE,EAASnE,IAAA,CAElD,IAAAiM,EAAApH,EAAA7E,GAAA,GAAA6K,EACAqB,EAAA,KAEA,UAAAH,EAAA/L,IAAA+L,EAAA/L,KAAAxD,GAAA,KAAAuP,EAAA/L,GAAA,CACA,QAAA6C,EAAAsJ,iBAGA,SAFAJ,EAAA/L,GAAA,GAMA+L,EAAA/L,GAAAvD,EAAA4P,KAAAN,EAAA/L,IAEA,QAAAsM,EAAA,EAAAC,EAAAlF,EAAAnH,OAAsDoM,EAAAC,EAASD,IAAA,CAC/D,IAAAE,EAAAnF,EAAAiF,GAIA,GAAAP,EAAA/L,GAAAiD,QAAA8I,EAAA/L,GAAAiD,MAAA,UAAA8I,EAAA/L,GAAAiD,MAAAuJ,EAAAvJ,OAAA,CACA,IAAAiG,EAAA6C,EAAA/L,GAAAsB,QAAA,iBAEAkL,EAAAjF,MACA2B,EAAAsD,EAAAjF,IAAA2B,IAGAgD,EAAAzG,EAAAyF,EAAA,KACApF,KAAA,CACAkG,EAAAC,EACA/H,EAAAsI,EAAAlF,OAEAvB,SAAA,CAAAN,EAAAyF,EAAA,KACA9E,KAAA8C,OAGA,OAIA,IAAAgD,EACA,qBAAAH,EAAA/L,IAAA+L,EAAA/L,GAAAiD,OAAA8I,EAAA/L,GAAAiD,MAAA,qBAAA8I,EAAA/L,GAAAiD,MAAA,SAGAiJ,EAAAzG,EAAAyF,EAAA,KACApF,KAAA,CACAN,EAAA,IACAwG,EAAAC,GAEAlG,SAAA,CAAAN,EAAAyF,EAAA,KACA9E,KAAA2F,EAAA/L,YAGa,CAEb,IAAAoG,EAAA2F,EAAA/L,GAAAsB,QAAAyK,EAAA/L,GAAAsB,QAAA,6CAAAyK,EAAA/L,GACAkM,EAAAzG,EAAAyF,EAAA,KACApF,KAAA,CACAN,EAAA,YACAwG,EAAAC,GAEAlG,SAAA,CACAgG,IAAAtG,EAAAyF,EAAA,MACAnF,SAAA,CACAgG,IAAAtG,EAAAyF,EAAA,KACA9E,eASA0E,EAAA3E,YAAA+F,GAGAf,EAAAhF,YAAA2E,GACAC,KAGAtO,EAAA,eAAA4O,EAAAG,GAAA,iBAAA1F,KAAA,OAlkBA,SAAAjD,GACA,IAAAC,EAAA,SAMA,OAJAD,EAAAC,YACAA,EAAAD,EAAAC,UAAAxB,QAAA,yBAGAwB,EA2jBAF,CAAAC,IAEAA,EAAA6J,eACA7J,EAAA6J,cAAArJ,GAGA,IAAAsJ,EAAA,SAAAZ,EAAAa,GACA,IAAAD,EAAAlQ,EAAA,aAAAyO,GACAyB,EAAA,GAAAxG,YAAAV,EAAAyF,EAAA,aACApF,KAAA,CACA+G,IAAA,IAAAd,EAAA,IAAAlH,EAAA+H,GAAAb,MAGAY,EAAA7G,KAAA,QAAA6G,EAAA7G,KAAA,YACArJ,EAAA,WAAAsP,EAAA,SAAAb,GAAApF,KAAA,WAIAqC,EAAAhF,EAAAG,QAAA6E,WAAAtF,GAEAsF,EAAAU,QACAiD,EAAA,CAAA3D,EAAAU,QACA8D,EAAA5B,EAAA1H,EAAAe,OAAAlE,OAAA,IAGAiI,EAAAW,aACAgD,EAAA,CAAA3D,EAAAW,aACA6D,EAAA5B,EAAA1H,EAAAe,OAAAlE,OAAA,IAIA2C,EAAAuB,SACA0H,EAAAzI,EAAAe,QACA3H,EAAA,aAAAyO,GAAApF,KAAA,UAGA,QAAAhB,EAAA,EAAAiI,EAAA1J,EAAAiB,KAAApE,OAA4C4E,EAAAiI,EAAQjI,IACpDgH,EAAAzI,EAAAiB,KAAAQ,IAGAjC,EAAAwB,QAAAhB,EAAAgB,SACAyH,EAAAzI,EAAAgB,QACA5H,EAAA,aAAAyO,GAAApF,KAAA,UAIAqC,EAAAY,gBACA+C,EAAA,CAAA3D,EAAAY,gBACA4D,EAAA5B,EAAA1H,EAAAe,OAAAlE,OAAA,IAIA,IAAA8M,EAAAvH,EAAAyF,EAAA,QAEAzO,EAAA,YAAAyO,GAAA+B,QAAAD,GAEA,QAAAhN,EAAA,EAAAmE,EAAAd,EAAAe,OAAAlE,OAA+CF,EAAAmE,EAASnE,IACxDgN,EAAA7G,YAAAV,EAAAyF,EAAA,OACApF,KAAA,CACAoH,IAAAlN,EAAA,EACAyG,IAAAzG,EAAA,EACAwI,MAAAlC,EAAAjD,EAAArD,GACAmN,YAAA,MAMAtK,EAAAmG,WACAnG,EAAAmG,UAAAqC,EAAAxI,EAAAM,GAxZA,SAAA2+C,EAAAj0C,GACAxI,IAAA7I,IAGA6I,GAAA,IAAAC,EAAAwI,kBAAArR,EAAAwO,SAAAnE,EAAA,8BAAAnC,QAAA,YAGAlI,EAAAuJ,KAAA6H,EAAA,SAAAtO,EAAA2J,GACA,GAAAzM,EAAAsR,cAAA7E,GACA44C,EAAA54C,OACO,CACP,GAAA7D,EAAA,CAMA,IACArF,EAAAmE,EADA+J,EAAAhF,EAAAiF,WAAA,GAEAC,EAAA,GAEA,IAAApO,EAAAkO,EAAAG,WAAAnO,OAAA,EAAmDF,GAAA,EAAQA,IAAA,CAC3D,IAAAsO,EAAAJ,EAAAG,WAAArO,GAAA0F,SACA6I,EAAAL,EAAAG,WAAArO,GAAAwO,WAEA,IAAAF,EAAA3J,QAAA,OACAyJ,EAAA7J,KAAA,CACAhF,KAAA+O,EACApI,MAAAqI,IAEAL,EAAAO,gBAAAH,IAIA,IAAAtO,EAAA,EAAAmE,EAAAiK,EAAAlO,OAAyCF,EAAAmE,EAASnE,IAAA,CAClD,IAAA8F,EAAAoD,EAAAwF,gBAAAN,EAAApO,GAAAT,KAAA+B,QAAA,+BACAwE,EAAAI,MAAAkI,EAAApO,GAAAkG,MACAgI,EAAAS,iBAAA7I,IAIA,IAAAtB,EAAAc,EAAAwI,kBAAA5E,GAGA7D,KAEA,IAAAb,EAAAG,QAAA,WACAH,EAAA,0DAAAA,GAIAA,IAAAlD,QAAA,gCAKAkD,IAAAlD,QAAA,4CACAuM,EAAAtO,GAAAiF,KAkWAs9C,CAAAz2C,GAEA40C,EAAAU,UAAA,SACAV,EAAAQ,YAAAt4C,EAAAqC,UACAy1C,EAAAS,aAAAr1C,GAEAi2C,EAAArB,EAAA,IAEAtgD,KAAAqI,YAAA,IAEAyC,UAAA,QACA0B,kBAAA,IAGArP,EAAA2K,IAAAnE,QAAA83C,SAAA3+C,EAAAsa,OAAA,GAA8CyqC,EAAA,CAC9C75C,UAAA,4BACAvB,KAAA,SAAAjD,GACA,OAAAA,EAAAyE,KAAA,sBAEAC,OAAA,SAAAC,EAAA3E,EAAA4E,EAAAlF,GACAlD,KAAAqI,YAAA,GAEA,IAAAi4C,EAAAp9C,EAAA++C,OACAv+C,EAAAF,EAAAG,QAAAC,WAAAV,EAAAW,eACA0E,EAAA/E,EAAAG,QAAA6E,WAAAtF,GACAk/C,EAAA5+C,EAAAkG,QAAAzI,OAAA2iB,YAEAy+B,EAAA7+C,EAAA0O,QAAAhP,EAAAgP,SAAAqnC,UAAAlqC,IAAA,SAAA2V,GACA,OAAAxhB,EAAAwQ,OAAAgR,GAAAvgB,SAAAmf,YAAAw+B,IAEA9B,EAAAU,UAAA,OACAV,EAAAQ,YAAAv4C,EAAAsC,UAEA82C,EAAArB,EAAA3S,KAAAO,UAAA,CACAhlC,MAAAX,EAAAW,OAAA,GACAC,WAAAZ,EAAAY,YAAA,GACAC,cAAAb,EAAAa,eAAA,GACAk5C,SAAAD,EAAAtwC,UACAvC,YAAAtM,EAAAsM,YACAosB,KAAA14B,EAAAoM,SACA7K,OAAAvB,EAAAuB,OAAAf,EAAAe,OAAA,KACAC,OAAAxB,EAAAwB,OAAAhB,EAAAgB,OAAA,KACAC,KAAAjB,EAAAiB,QAGA3E,KAAAqI,YAAA,IAEAyC,UAAA,OACA0E,YAAA,WACAF,SAAA,KACAjM,QAAA,OAEAlG,EAAAO,QAzqCAgT,CAAA5T,EAAAC,OAAAC,WACK2T,MAAAC,EAAAlU,MAAAmU,EAAAD,QAAAjU,wBCZL,IAAAD,EAAAC,EAyBID,EAAO,CAACE,EAAA,GAAUA,EAAA,WAEjBC,KAFkCF,EAAA,SAAEG,GACzC,OAmBC,SAAAA,EAAAC,EAAAC,EAAAH,GACD,aAEA,IAAAM,EAAAL,EAAAM,GAAAC,UASA,SAAAklD,EAAAC,GAGA,IAFA,IAAAC,EAAA,GAEApiD,EAAA,EAAAoW,EAAA+rC,EAAAjiD,OAAsCF,EAAAoW,EAAUpW,IAChDoiD,EAAAD,EAAAniD,MAGA,OAAAoiD,EAYA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAH,EAAA3qC,OAAA4qC,EAAA,MACAD,EAAA3qC,OAAA6qC,EAAA,EAAAC,GAaA,SAAAC,EAAAC,EAAAJ,EAAAC,GAGA,IAFA,IAAAI,EAAA,GAEA5iD,EAAA,EAAAoW,EAAAusC,EAAAx0C,WAAAjO,OAAqDF,EAAAoW,EAAUpW,IAC/D,GAAA2iD,EAAAx0C,WAAAnO,GAAA6/B,UACA+iB,EAAAr+C,KAAAo+C,EAAAx0C,WAAAnO,IAIA,IAAA6iD,EAAAD,EAAAL,GAEA,OAAAC,EACAG,EAAAhzB,aAAAkzB,EAAAD,EAAAJ,IAEAG,EAAAx8C,YAAA08C,GAiBApmD,EAAAM,GAAAi3C,aAAA/9B,KAAA6sC,aAAA,SAAAjrC,EAAA0qC,EAAAC,EAAAO,EAAAC,GACA,IAAAhjD,EACAoW,EACA9J,EACA4b,EACA3b,EAEA2lB,EACA3N,EAFA0+B,EAAAprC,EAAA+D,UAAA1b,OAIAgjD,EAAA,SAAAr1C,EAAA+R,EAAA+9B,GACA,GAAA9vC,EAAA+R,IAAA,oBAAA/R,EAAA+R,GAAA,CAIA,IAAA3b,EAAA4J,EAAA+R,GAAAtf,MAAA,KACA2e,EAAAhb,EAAAijC,QAEApoB,MAAA,EAAAG,KAIApR,EAAA+R,GAAA+9B,EAAA,EAAA1+B,GAAA,IAAAhb,EAAAD,KAAA,QAKA,GAAAu+C,GAAAC,EAKA,GAAAD,EAAA,GAAAA,GAAAU,EACAtjD,KAAAsW,KAAAuB,OAAAK,EAAA,+CAAA0qC,QAKA,GAAAC,EAAA,GAAAA,GAAAS,EACAtjD,KAAAsW,KAAAuB,OAAAK,EAAA,6CAAA2qC,OADA,CAUA,IAAAW,EAAA,GAEA,IAAAnjD,EAAA,EAAAoW,EAAA6sC,EAA6BjjD,EAAAoW,EAAUpW,IACvCmjD,EAAAnjD,KAGAqiD,EAAAc,EAAAZ,EAAAC,GACA,IAAAY,EAAAlB,EAAAiB,GAOA,IAAAnjD,EAAA,EAAAoW,EAAAyB,EAAAwE,UAAAnc,OAAkDF,EAAAoW,EAAUpW,IAC5D6X,EAAAwE,UAAArc,GAAA,GAAAojD,EAAAvrC,EAAAwE,UAAArc,GAAA,IAKA,UAAA6X,EAAAspB,eACA,IAAAnhC,EAAA,EAAAoW,EAAAyB,EAAAspB,eAAAjhC,OAAyDF,EAAAoW,EAAUpW,IACnE6X,EAAAspB,eAAAnhC,GAAA,GAAAojD,EAAAvrC,EAAAspB,eAAAnhC,GAAA,IAMA,IAAAA,EAAA,EAAAoW,EAAA6sC,EAA6BjjD,EAAAoW,EAAUpW,IAAA,CAGvC,IAFAukB,EAAA1M,EAAA+D,UAAA5b,GAEAsM,EAAA,EAAA4b,EAAA3D,EAAAvB,UAAA9iB,OAA+CoM,EAAA4b,EAAU5b,IACzDiY,EAAAvB,UAAA1W,GAAA82C,EAAA7+B,EAAAvB,UAAA1W,IAIAiY,EAAAI,IAAAy+B,EAAA7+B,EAAAI,KASA,IALAloB,EAAAuJ,KAAA6R,EAAAmrB,UAAA,SAAAhjC,EAAAkJ,GACA2O,EAAAmrB,UAAAhjC,GAAA6T,IAAAuvC,EAAAl6C,EAAA2K,OAIA7T,EAAA,EAAAoW,EAAA6sC,EAA6BjjD,EAAAoW,EAAUpW,IAGvC,iBAFAukB,EAAA1M,EAAA+D,UAAA5b,IAEA2V,MACA4O,EAAA5O,MAAAytC,EAAA7+B,EAAA5O,OACOlZ,EAAAsR,cAAAwW,EAAA5O,SAEPutC,EAAA3+B,EAAA5O,MAAA,IAAAytC,GACAF,EAAA3+B,EAAA5O,MAAA,SAAAytC,GACAF,EAAA3+B,EAAA5O,MAAA,OAAAytC,GACAF,EAAA3+B,EAAA5O,MAAA,OAAAytC,IAQA,GAAAvrC,EAAA+D,UAAA2mC,GAAAh7B,SAAA,CAKA,IAAA87B,EAAA1jD,KAAAsW,KAAAkR,wBAAAtP,EAAA0qC,GAEAe,EAAA,KAGA,IAFAtjD,EAAAwiD,EAAAD,EAAAC,IAAA,EAEA,OAAAc,GAAAtjD,EAAAijD,GACAK,EAAA3jD,KAAAsW,KAAAkR,wBAAAtP,EAAA7X,GACAA,IAOA,IAFAkyB,EAAAra,EAAAX,OAAA9L,qBAAA,MAEApL,EAAA,EAAAoW,EAAA8b,EAAAhyB,OAAqCF,EAAAoW,EAAUpW,IAC/C0iD,EAAAxwB,EAAAlyB,GAAAqjD,EAAAC,GAKA,UAAAzrC,EAAAT,OAGA,IAFA8a,EAAAra,EAAAT,OAAAhM,qBAAA,MAEApL,EAAA,EAAAoW,EAAA8b,EAAAhyB,OAAuCF,EAAAoW,EAAUpW,IACjD0iD,EAAAxwB,EAAAlyB,GAAAqjD,EAAAC,GAMA,IAAAtjD,EAAA,EAAAoW,EAAAyB,EAAA/E,OAAA5S,OAAiDF,EAAAoW,EAAUpW,IAC3D,OAAA6X,EAAA/E,OAAA9S,GAAAwS,KACAkwC,EAAA7qC,EAAA/E,OAAA9S,GAAAwS,IAAA6wC,EAAAC,GAaA,IAFAjB,EAAAxqC,EAAA+D,UAAA2mC,EAAAC,GAEAxiD,EAAA,EAAAoW,EAAA6sC,EAA6BjjD,EAAAoW,EAAUpW,IACvC6X,EAAA5B,KAAAgG,iBAAApE,EAAA7X,EAAA,IAQA,IAHAqiD,EAAAxqC,EAAA+M,gBAAA29B,EAAAC,GAGAxiD,EAAA,EAAAoW,EAAAyB,EAAA/E,OAAA5S,OAA+CF,EAAAoW,EAAUpW,IAAA,CACzD,IAAAqD,EAAAwU,EAAA/E,OAAA9S,GACAgpB,EAAA3lB,EAAAwnB,QAEA,GAAA7B,EAIA,IAHAq5B,EAAAr5B,EAAAu5B,EAAAC,GAGAl2C,EAAA,EAAAC,EAAAyc,EAAA9oB,OAAuCoM,EAAAC,EAASD,IAChD0c,EAAA1c,IAAA0c,EAAA1c,GAAAsf,gBACA5C,EAAA1c,GAAAsf,cAAAjY,OAAArH,GAQA,QAAAjJ,EAAAwQ,KAAApX,EAAA6U,QAAAjO,EAAAslB,SACA05B,EAAAh/C,EAAAslB,OAAA45B,EAAAC,GAMA,IAAAxiD,EAAA,EAAAoW,EAAAyB,EAAA6D,SAAAxb,OAAiDF,EAAAoW,EAAUpW,IAC3DqiD,EAAAxqC,EAAA6D,SAAA1b,GAAAuiD,EAAAC,GAGA,UAAA3qC,EAAA6F,SACA,IAAA1d,EAAA,EAAAoW,EAAAyB,EAAA6F,SAAAxd,OAAmDF,EAAAoW,EAAUpW,IAC7DqiD,EAAAxqC,EAAA6F,SAAA1d,GAAAuiD,EAAAC,GAcA,KAVAQ,OAAAxmD,IACAC,EAAAM,GAAAC,UAAAkpC,IAAAruB,GAAApT,OAAA8+C,aASAvjD,EAAA,EAAAoW,EAAA6sC,EAA6BjjD,EAAAoW,EAAUpW,IACvCvD,EAAAob,EAAA+D,UAAA5b,GAAAqkB,KAAAra,IAAA,OAEArK,KAAAsW,KAAAsW,sBAAA1U,IAAA+D,UAAA5b,GAAAqkB,IAAArkB,GAKAvD,EAAAob,EAAAN,WAAA8tB,QAAA,qBAAAxtB,EAAA,CACA2rC,KAAAjB,EACAkB,GAAAjB,EACA7E,QAAAyF,EACAL,OAEAR,QACAC,MACAY,uBAYA,IAAAM,EAAA,SAAAA,EAAAvgD,EAAAwC,GACA,IAAAoM,EAAA,IAAAtV,EAAAM,GAAAC,UAAAkpC,IAAA/iC,GAAA4O,WAAA,GAEA,GAAAA,EAAA4xC,YACA,OAAA5xC,EAAA4xC,aAIA,IAAAh+C,IACAA,EAAA,IAIA,IAAA2mC,EAAA7vC,EAAAM,GAAAC,UAAAsvC,iBAqHA,OAnHAA,IACAA,EAAAoX,EAAAhtC,SAAAgtC,EAAAhtC,UAAA,GACA41B,EAAAoX,EAAAhtC,SAAA/Q,GAAA,KAWAhG,KAAAuE,EAAA,CAOAf,GAAA,KAQAuyC,OAAA,KAQAjzB,KAAAhmB,EAAAsa,QAAA,KAA+B2sC,EAAAhtC,SAAA/Q,GAQ/Bu7B,MAAA,EAQA0iB,WAAA,EAQAC,gBAAA,KAKAC,MAAA,CACAC,QAAA,EACAC,QAAA,EACAC,SAAA,EACAC,SAAA,EACAtxC,QAAA,EACAuxC,aAAA,EACAC,WAAA,GAYAC,UAAA,IAMA1kD,KAAAs0C,IAAA,CAOAqQ,KAAA,KAQAC,QAAA,MAIA5kD,KAAAuE,EAAAwxC,OAAA/1C,KAAAuE,EAAAue,KAAA+hC,QACA7kD,KAAAuE,EAAAf,GAAA4O,EACApS,KAAAuE,EAAAf,GAAAwgD,YAAAhkD,KAEAA,KAAA8kD,eAEA9kD,MAyyBA,OAtyBAlD,EAAAsa,OAAA2sC,EAAA5hD,UAAA,CAQA4iD,SAAA,SAAAzP,GACA,QAAAA,EACA,OAAA0P,YAGAhlD,KAAAuE,EAAAwxC,QAAA,GAMAiP,UAAA,WACAhlD,KAAAuE,EAAAwxC,QAAA,GAoBAkP,QAAA,WAGA,OAFAjlD,KAAAklD,gBAAAllD,KAAAmlD,WAEAnlD,MASAolD,kBAAA,WACA,OAAAplD,KAAAmlD,WAyCAA,QAAA,SAAAtZ,EAAAwZ,GACA,IACAhlD,EACAmE,EAFAF,EAAA,GAKA4N,EAAAlS,KAAAuE,EAAAf,GAAAyY,UAEA,GAAA4vB,IAAAhvC,EAAA,CACA,IAAAwD,EAAA,EAAAmE,EAAA0N,EAAA3R,OAAyCF,EAAAmE,EAASnE,IAClDiE,EAAAM,KAAAsN,EAAA7R,GAAAilD,sBAGA,OAAAhhD,EAMA,GAAA+gD,EAAA,CACA,IAAA1vC,EAAA3V,KAAAmlD,UAEA,IAAA9kD,EAAA,EAAAmE,EAAAqnC,EAAAtrC,OAAqCF,EAAAmE,EAASnE,IAC9CiE,EAAAM,KAAA9H,EAAAue,QAAAwwB,EAAAxrC,GAAAsV,IAGAk2B,EAAAvnC,EAKA,OAFAtE,KAAAklD,gBAAA3C,EAAA1W,IAEA7rC,MAWAulD,YAAA,SAAAvgC,EAAA7H,GACAA,IACAA,EAAA,aAGA,IAAAxH,EAAA3V,KAAAmlD,UACAjzC,EAAAlS,KAAAuE,EAAAf,GAAAyY,UAEA,oBAAAkB,EAEArgB,EAAA6U,QAAAqT,GAAAloB,EAAAuS,IAAA2V,EAAA,SAAAvQ,GACA,OAAA3X,EAAAue,QAAA5G,EAAAkB,KADA7Y,EAAAue,QAAA2J,EAAArP,GAKA7Y,EAAA6U,QAAAqT,GAAAloB,EAAAuS,IAAA2V,EAAA,SAAAvQ,GACA,OAAAvC,EAAAuC,GAAA6wC,uBADApzC,EAAA8S,GAAAsgC,sBAgBAR,aAAA,WACA,IAGAzkD,EAHAiI,EAAAtI,KACAyW,EAAAzW,KAAAuE,EAAAf,GAAAyY,UAAA1b,OACAmJ,EAAA1J,KAAAuE,EAAAf,GAAA8T,OAuBA,IAnBAtX,KAAAuE,EAAAue,KAAA0iC,gBACAxlD,KAAAuE,EAAAg9B,MAAAvhC,KAAAuE,EAAAue,KAAA0iC,eAGAxlD,KAAAuE,EAAAue,KAAA2iC,oBACAzlD,KAAAuE,EAAAg9B,MAAAvhC,KAAAuE,EAAAue,KAAA2iC,mBAKAzlD,KAAAuE,EAAA0/C,WAAAjkD,KAAAuE,EAAAue,KAAA4iC,mBAAA1lD,KAAAuE,EAAAue,KAAA4iC,mBAAA,EAGA1lD,KAAAuE,EAAAue,KAAA6iC,oBACA3lD,KAAAuE,EAAA2/C,gBAAAlkD,KAAAuE,EAAAue,KAAA6iC,mBAKAtlD,EAAA,EAAiBA,EAAAoW,EAAUpW,IAC3BA,EAAAL,KAAAuE,EAAAg9B,MAAA,GAAAlhC,EAAAoW,EAAAzW,KAAAuE,EAAA0/C,YACAjkD,KAAA4lD,iBAAAvlD,EAAAL,KAAAuE,EAAAf,GAAAyY,UAAA5b,GAAAqkB,KAKA1kB,KAAAuE,EAAAf,GAAAyY,UAAA5b,GAAAilD,qBAAAjlD,EAKAL,KAAAuE,EAAAf,GAAA8S,KAAAsC,eAAA5Y,KAAAuE,EAAAf,GAAA,6BAAAqiD,EAAA/8B,GACAxgB,EAAAw9C,aAAArlD,KAAA6H,EAAAwgB,IACO,oBAIP,IAAAi9B,EAAA,KAcA,GAZA/lD,KAAAuE,EAAAue,KAAAijC,UACAA,EAAA/lD,KAAAuE,EAAAue,KAAAijC,QAAArqC,SAKA1b,KAAAuE,EAAAf,GAAA4gC,cAAA,oBAAApkC,KAAAuE,EAAAf,GAAA4gC,aAAA2f,YAAA/jD,KAAAuE,EAAAf,GAAA4gC,aAAA2f,WAAAxjD,QAAAP,KAAAuE,EAAAf,GAAAyY,UAAA1b,SACAwlD,EAAA/lD,KAAAuE,EAAAf,GAAA4gC,aAAA2f,YAKAgC,EAIA,GAAAz9C,EAAA/D,EAAAf,GAAA6xB,eAUS,CACT,IAAA2wB,EAAAzD,EAAAwD,GAEAz9C,EAAA48C,gBAAAzkD,KAAA6H,EAAA09C,OAbA,CACA,IAAAC,GAAA,EACAnpD,EAAA4M,GAAAY,GAAA,gCACA,IAAAhC,EAAA/D,EAAAf,GAAA6xB,iBAAA4wB,EAAA,CACAA,GAAA,EACA,IAAAD,EAAAzD,EAAAwD,GAEAz9C,EAAA48C,gBAAAzkD,KAAA6H,EAAA09C,WASAhmD,KAAAkmD,sBAIAppD,EAAA4M,GAAAY,GAAA,mCACAxN,EAAA4M,GAAAW,IAAA,4CACAvN,EAAAuJ,KAAAiC,EAAA/D,EAAAf,GAAAyY,UAAA,SAAA5b,EAAA2T,GACAlX,EAAAkX,EAAA0Q,KAAAra,IAAA,eACAvN,EAAAkX,EAAA0Q,KAAA0X,WAAA,uBAEA9zB,EAAA/D,EAAAf,GAAAwgD,YAAA,KACA17C,EAAA/D,EAAA,QAWA2gD,gBAAA,SAAA5gD,GACA,IAAA62B,GAAA,EAEA,GAAA72B,EAAA/D,QAAAP,KAAAuE,EAAAf,GAAAyY,UAAA1b,OAAA,CAMA,QAAAF,EAAA,EAAAoW,EAAAnS,EAAA/D,OAAsCF,EAAAoW,EAAUpW,IAAA,CAChD,IAAA8lD,EAAArpD,EAAAue,QAAAhb,EAAAiE,GAEAjE,GAAA8lD,IAEAzD,EAAAp+C,EAAA6hD,EAAA9lD,GAGAL,KAAAuE,EAAAf,GAAAoU,UAAAurC,aAAAgD,EAAA9lD,GAAA,MACA86B,GAAA,GAIAn7B,KAAAkmD,sBAGA/qB,IAIAr+B,EAAAM,GAAAC,UAAAkpC,IAAAvmC,KAAAuE,EAAAf,IAAAsB,OAAA8+C,aAGA,KAAA5jD,KAAAuE,EAAAf,GAAA8O,QAAAC,IAAA,KAAAvS,KAAAuE,EAAAf,GAAA8O,QAAAE,IACAxS,KAAAuE,EAAAf,GAAAoU,UAAA5F,sBAAA,GAKAhS,KAAAuE,EAAAf,GAAAoU,UAAAtB,KAAAiI,aAAAve,KAAAuE,EAAAf,IAEA,OAAAxD,KAAAuE,EAAA2/C,iBACAlkD,KAAAuE,EAAA2/C,gBAAAzjD,KAAAT,YArCAA,KAAAuE,EAAAf,GAAAoU,UAAAtB,KAAAuB,OAAA7X,KAAAuE,EAAAf,GAAA,mFAkDAsiD,aAAA,SAAAM,GACA,IAAA/lD,EAAAoW,EAAA4vC,EAEAn0C,EADAlS,KAAAuE,EAAAf,GACAyY,UAIA,GAHAmqC,EAAArC,WAAA,GAGAqC,EAAA1pC,UAAA,CAEA,IAAArc,EAAA,EAAmBA,EAAA+lD,EAAA1pC,UAAAnc,OAA6BF,IAChD+lD,EAAA1pC,UAAArc,GAAA,GAAA6R,EAAAk0C,EAAA1pC,UAAArc,GAAA,IAAAilD,qBAGA,IAAAgB,EAAAxpD,EAAAsa,QAAA,KAAAgvC,EAAAljC,cAEA,IAAA7iB,EAAA,EAAAoW,EAAAvE,EAAA3R,OAA0CF,EAAAoW,EAAUpW,IACpDgmD,EAAAn0C,EAAA7R,GAAAilD,qBAGAc,EAAAljC,aAAAmjC,GAAAC,EAAAjmD,GAGA+lD,EAAAG,UAAAF,GAAAn0C,EAAA7R,GAAAunB,SAGAw+B,EAAArC,WAAAn/C,KAAAyhD,QAEO,GAAAD,EAAAzwC,MAAA,CAEP,IAAAtV,EAAA,EAAmBA,EAAA+lD,EAAAzwC,MAAApV,OAAyBF,IAC5C+lD,EAAAzwC,MAAAtV,GAAA,GAAA6R,EAAAk0C,EAAAzwC,MAAAtV,GAAA,IAAAilD,qBAGA,IAAAkB,EAAA1pD,EAAAsa,QAAA,KAAAgvC,EAAAl0C,SAEA,IAAA7R,EAAA,EAAAoW,EAAAvE,EAAA3R,OAA0CF,EAAAoW,EAAUpW,IACpDgmD,EAAAn0C,EAAA7R,GAAAilD,qBAGAc,EAAAl0C,QAAAm0C,GAAAG,EAAAnmD,GAGA+lD,EAAArC,WAAAn/C,KAAAyhD,KAiBAT,iBAAA,SAAAvlD,EAAAqkB,GACA,IAAApc,EAAAtI,KACAlD,EAAA4nB,GAAApa,GAAA,gCAAAnC,GACAG,EAAA/D,EAAAwxC,QACAztC,EAAAm+C,aAAAhmD,KAAA6H,EAAAH,EAAAuc,KAEOpa,GAAA,iCAAAnC,GACPG,EAAA/D,EAAAwxC,QACAztC,EAAAm+C,aAAAhmD,KAAA6H,EAAAH,EAAAuc,MAaA+hC,aAAA,SAAAt+C,EAAAuc,GACA,IAAApc,EAAAtI,KAIAikB,EADAnnB,EAAAqL,EAAA8K,QAAA9I,QAAA,UACA8Z,SACAe,EAAA9F,SAAApiB,EAAA4nB,GAAAve,KAAA,yBAEA6e,IAAAnoB,IAIAmD,KAAAuE,EAAA4/C,MAAAC,OAAApkD,KAAA0mD,kBAAAv+C,EAAA,SACAnI,KAAAuE,EAAA4/C,MAAAE,OAAArkD,KAAA0mD,kBAAAv+C,EAAA,SACAnI,KAAAuE,EAAA4/C,MAAAG,QAAAtkD,KAAA0mD,kBAAAv+C,EAAA,SAAA8b,EAAAhb,KACAjJ,KAAAuE,EAAA4/C,MAAAI,QAAAvkD,KAAA0mD,kBAAAv+C,EAAA,SAAA8b,EAAAjb,IACAhJ,KAAAuE,EAAA4/C,MAAAlxC,OAAAjT,KAAAuE,EAAAf,GAAAyY,UAAA+I,GAAAN,IAEA1kB,KAAAuE,EAAA4/C,MAAAK,YAAAx/B,EACAhlB,KAAAuE,EAAA4/C,MAAAM,UAAAz/B,EAEAhlB,KAAA2mD,aAIA7pD,EAAAE,GAAAsN,GAAA,qDAAAnC,GACAG,EAAAs+C,aAAAnmD,KAAA6H,EAAAH,KACOmC,GAAA,kDAAAnC,GACPG,EAAAu+C,WAAApmD,KAAA6H,EAAAH,OAWAy+C,aAAA,SAAAz+C,GAGA,UAAAnI,KAAAs0C,IAAAqQ,KAAA,CAKA,GAAAn/C,KAAAshD,IAAAthD,KAAAshD,IAAA9mD,KAAA0mD,kBAAAv+C,EAAA,SAAAnI,KAAAuE,EAAA4/C,MAAAC,OAAA,GAAA5+C,KAAAshD,IAAA9mD,KAAA0mD,kBAAAv+C,EAAA,SAAAnI,KAAAuE,EAAA4/C,MAAAE,OAAA,SACA,OAGArkD,KAAA+mD,oBAKA/mD,KAAAs0C,IAAAqQ,KAAAh8C,IAAA,CACAM,KAAAjJ,KAAA0mD,kBAAAv+C,EAAA,SAAAnI,KAAAuE,EAAA4/C,MAAAG,QACAt7C,IAAAhJ,KAAA0mD,kBAAAv+C,EAAA,SAAAnI,KAAAuE,EAAA4/C,MAAAI,UAOA,IAHA,IAAAyC,GAAA,EACAC,EAAAjnD,KAAAuE,EAAA4/C,MAAA+C,QAEA7mD,EAAA,EAAAoW,EAAAzW,KAAAuE,EAAAmgD,UAAAnkD,OAAqDF,EAAAoW,EAAUpW,IAC/D,GAAAL,KAAA0mD,kBAAAv+C,EAAA,SAAAnI,KAAAuE,EAAAmgD,UAAArkD,EAAA,GAAA8hC,GAAAniC,KAAAuE,EAAAmgD,UAAArkD,GAAA8hC,EAAAniC,KAAAuE,EAAAmgD,UAAArkD,EAAA,GAAA8hC,GAAA,GACAniC,KAAAs0C,IAAAsQ,QAAAj8C,IAAA,OAAA3I,KAAAuE,EAAAmgD,UAAArkD,EAAA,GAAA8hC,GACAniC,KAAAuE,EAAA4/C,MAAA+C,QAAAlnD,KAAAuE,EAAAmgD,UAAArkD,EAAA,GAAAyjD,GACAkD,GAAA,EACA,MAMAA,IACAhnD,KAAAs0C,IAAAsQ,QAAAj8C,IAAA,OAAA3I,KAAAuE,EAAAmgD,UAAA1kD,KAAAuE,EAAAmgD,UAAAnkD,OAAA,GAAA4hC,GACAniC,KAAAuE,EAAA4/C,MAAA+C,QAAAlnD,KAAAuE,EAAAmgD,UAAA1kD,KAAAuE,EAAAmgD,UAAAnkD,OAAA,GAAAujD,IAIA9jD,KAAAuE,EAAAue,KAAAqkC,WAAAF,IAAAjnD,KAAAuE,EAAA4/C,MAAA+C,UACAlnD,KAAAuE,EAAAf,GAAAoU,UAAAurC,aAAAnjD,KAAAuE,EAAA4/C,MAAAM,UAAAzkD,KAAAuE,EAAA4/C,MAAA+C,SACAlnD,KAAAuE,EAAA4/C,MAAAM,UAAAzkD,KAAAuE,EAAA4/C,MAAA+C,QAEA,KAAAlnD,KAAAuE,EAAAf,GAAA8O,QAAAC,IAAA,KAAAvS,KAAAuE,EAAAf,GAAA8O,QAAAE,IACAxS,KAAAuE,EAAAf,GAAAoU,UAAA5F,sBAAA,GAGAhS,KAAA2mD,eAWAE,WAAA,SAAA1+C,GAEArL,EAAAE,GAAAqN,IAAA,eAEA,OAAArK,KAAAs0C,IAAAqQ,OAEA3kD,KAAAs0C,IAAAqQ,KAAAvlD,SACAY,KAAAs0C,IAAAsQ,QAAAxlD,SACAY,KAAAs0C,IAAAqQ,KAAA,KACA3kD,KAAAs0C,IAAAsQ,QAAA,KAGA5kD,KAAAuE,EAAAf,GAAAoU,UAAAurC,aAAAnjD,KAAAuE,EAAA4/C,MAAAM,UAAAzkD,KAAAuE,EAAA4/C,MAAA+C,SAAA,GAEAlnD,KAAAkmD,sBAIA,KAAAlmD,KAAAuE,EAAAf,GAAA8O,QAAAC,IAAA,KAAAvS,KAAAuE,EAAAf,GAAA8O,QAAAE,IACAxS,KAAAuE,EAAAf,GAAAoU,UAAA5F,sBAAA,GAKAhS,KAAAuE,EAAAf,GAAAoU,UAAAtB,KAAAiI,aAAAve,KAAAuE,EAAAf,IAEA,OAAAxD,KAAAuE,EAAA2/C,iBACAlkD,KAAAuE,EAAA2/C,gBAAAzjD,KAAAT,QAYA2mD,WAAA,WACA,IAAA1qC,EAAAjc,KAAAuE,EAAAf,GAAAyY,UACAjc,KAAAuE,EAAAmgD,UAAA1sC,OAAA,EAAAhY,KAAAuE,EAAAmgD,UAAAnkD,QACAP,KAAAuE,EAAAmgD,UAAA9/C,KAAA,CACAu9B,EAAArlC,EAAAkD,KAAAuE,EAAAf,GAAA8T,QAAA2M,SAAAhb,KACA66C,GAAA,IAKA,IAHA,IAAAsD,EAAA,EACApuB,EAAAh5B,KAAAuE,EAAAmgD,UAAA,GAAAviB,EAEA9hC,EAAA,EAAAoW,EAAAwF,EAAA1b,OAA8CF,EAAAoW,EAAUpW,IAKxDA,GAAAL,KAAAuE,EAAA4/C,MAAAM,WACA2C,IAGAnrC,EAAA5b,GAAAunB,UAAA,SAAA3L,EAAA5b,GAAAqkB,IAAA/c,MAAA6vB,UACAwB,GAAAl8B,EAAAmf,EAAA5b,GAAAqkB,KAAA6a,aACAv/B,KAAAuE,EAAAmgD,UAAA9/C,KAAA,CACAu9B,EAAAnJ,EACA8qB,GAAAsD,KAOA,IAAApnD,KAAAuE,EAAA0/C,YACAjkD,KAAAuE,EAAAmgD,UAAA1sC,OAAAhY,KAAAuE,EAAAmgD,UAAAnkD,OAAAP,KAAAuE,EAAA0/C,YAKA,IAAAjkD,KAAAuE,EAAAg9B,OACAvhC,KAAAuE,EAAAmgD,UAAA1sC,OAAA,EAAAhY,KAAAuE,EAAAg9B,QAWAwlB,kBAAA,WACA,IAAAM,EAAA,KAAArnD,KAAAuE,EAAAf,GAAA8O,QAAAC,IAAA,KAAAvS,KAAAuE,EAAAf,GAAA8O,QAAAE,GACA80C,EAAAtnD,KAAAuE,EAAAf,GAAAyY,UAAAjc,KAAAuE,EAAA4/C,MAAAK,aAAA9/B,IACA6iC,EAAAD,EAAA9vC,WACAgwC,EAAAD,EAAA/vC,WACAiwC,EAAAD,EAAAhwC,WACAkwC,EAAA5qD,EAAAwqD,GAAAloB,QAIAp/B,KAAAs0C,IAAAqQ,KAAA7nD,EAAA2qD,EAAAhsB,WAAA,IAAA3hB,SAAA,oBAAA5P,OAAApN,EAAA0qD,EAAA/rB,WAAA,IAAAvxB,OAAApN,EAAAyqD,EAAA9rB,WAAA,IAAAvxB,OAAAw9C,EAAA,MAAA/+C,IAAA,CACAI,SAAA,WACAC,IAAA,EACAC,KAAA,EACAJ,MAAA/L,EAAAwqD,GAAA/nB,aACA32B,OAAA9L,EAAAwqD,GAAAnN,gBACO3wC,SAAA,QACPxJ,KAAAs0C,IAAAsQ,QAAA9nD,EAAA,eAAAgd,SAAA,gBAAAnR,IAAA,CACAI,SAAA,WACAC,IAAAq+C,EAAAvqD,EAAA,wBAAAkD,KAAAuE,EAAAf,GAAA4sB,eAAAnM,SAAAjb,IAAAlM,EAAAkD,KAAAuE,EAAAf,GAAA8T,QAAA2M,SAAAjb,IACAJ,OAAAy+C,EAAAvqD,EAAA,wBAAAkD,KAAAuE,EAAAf,GAAA4sB,eAAAxnB,SAAA9L,EAAAkD,KAAAuE,EAAAf,GAAA8T,QAAA1O,WACOY,SAAA,SASP08C,oBAAA,WACAppD,EAAAuJ,KAAArG,KAAAuE,EAAAf,GAAAyY,UAAA,SAAA5b,EAAA2T,GACAlX,EAAAkX,EAAA0Q,KAAAve,KAAA,oBAAA9F,MAUAqmD,kBAAA,SAAAv+C,EAAA8X,GACA,WAAA9X,EAAA5I,KAAAyF,QAAA,SACAmD,EAAAw/C,cAAAC,QAAA,GAAA3nC,GAGA9X,EAAA8X,MAaA8jC,EAAAhtC,SAAA,CASAgvC,QAAA,KAQAlB,SAAA,EAYAsC,WAAA,EASA1B,kBAAA,EAQAC,mBAAA,EASAC,kBAAA,MAaA5B,EAAA9+C,QAAA,QAMAnI,EAAAM,GAAAC,UAAA0mD,aACAjnD,EAAAM,GAAAD,UAAA4mD,aAEA,mBAAAjnD,EAAAM,GAAAC,WAAA,mBAAAP,EAAAM,GAAAi3C,aAAAl+B,gBAAArZ,EAAAM,GAAAi3C,aAAAl+B,eAAA,UACArZ,EAAAM,GAAAi3C,aAAAxiB,WAAAjtB,KAAA,CACAmtB,OAAA,SAAA3f,GACA,IAAA1I,EAAA0I,EAAAwF,UAEA,GAAAxF,EAAA4xC,YAKAt6C,EAAA4M,KAAAuB,OAAAzF,EAAA,mEALA,CACA,IAAAy1C,EAAAz1C,EAAAsE,MACA1Q,EAAA6hD,EAAAzJ,YAAAyJ,EAAAC,aAAA,GACA,IAAA/D,EAAA3xC,EAAApM,GAKA,aAGA8rB,SAAA,IACAi2B,SAAA,eAGAljB,MAAA,2FAKA/nC,EAAAE,GAAAsN,GAAA,iCAAAnC,EAAAiK,GACA,UAAAjK,EAAA4sC,UAAA,CAIA,IAAAjyB,EAAA1Q,EAAAsE,MAAA0nC,WACArnC,EAAA5Z,EAAA4Z,SAAAqnC,WAEA,GAAAt7B,GAAA/L,EAAA,CACA,IAAA/Q,EAAAlJ,EAAAsa,OAAA,GAA4B0L,EAAA/L,IAE5B,IAAA+L,GACA,IAAAihC,EAAA3xC,EAAApM,OAKAlJ,EAAAM,GAAAC,UAAAkpC,IAAA0B,SAAA,gCACA,OAAAjoC,KAAA2mC,SAAA,iBAAAD,GACAA,EAAAsd,YAAAiB,cAGAnoD,EAAAM,GAAAC,UAAAkpC,IAAA0B,SAAA,8BAAA4D,EAAAwZ,GACA,OAAAxZ,EACA7rC,KAAA2mC,SAAA,iBAAAD,GACAA,EAAAsd,YAAAmB,QAAAtZ,EAAAwZ,KAIArlD,KAAAgmC,QAAAzlC,OAAAP,KAAAgmC,QAAA,GAAAge,YAAAmB,UAAA,OAEAroD,EAAAM,GAAAC,UAAAkpC,IAAA0B,SAAA,kCAAAjjB,EAAA7H,GACA,OAAAnd,KAAAgmC,QAAAzlC,QAAAP,KAAAgmC,QAAA,GAAAge,YAAAhkD,KAAAgmC,QAAA,GAAAge,YAAAuB,YAAAvgC,EAAA7H,GAAA6H,IAEAloB,EAAAM,GAAAC,UAAAkpC,IAAA0B,SAAA,6BAAA4b,EAAAC,EAAAV,EAAAC,GAKA,OAJArjD,KAAAgmC,QAAAzlC,QACAP,KAAAgmC,QAAA,GAAAge,YAAAz/C,EAAAf,GAAAoU,UAAAurC,aAAAU,EAAAC,EAAAV,EAAAC,GAGArjD,OAEAlD,EAAAM,GAAAC,UAAAkpC,IAAA0B,SAAA,+BAAAqN,GACA,OAAAt1C,KAAA2mC,SAAA,iBAAAD,GACAA,EAAAsd,aACAtd,EAAAsd,YAAAe,SAAAzP,OAIAx4C,EAAAM,GAAAC,UAAAkpC,IAAA0B,SAAA,kCACA,OAAAjoC,KAAA2mC,SAAA,iBAAAD,GACAA,EAAAsd,aACAtd,EAAAsd,YAAAgB,gBAIAjB,EA9vCArzC,CAAA5T,EAAAC,OAAAC,WACK2T,MAAAC,EAAAlU,MAAAmU,EAAAD,QAAAjU,wBC3BL,IAAAD,EAAAC,EAOID,EAAO,CAACE,EAAA,GAAUA,EAAA,KAAkBA,EAAA,WAEnCC,KAF4DF,EAAA,SAAEG,GACnE,OAuBC,SAAAA,EAAAC,EAAAC,EAAAH,GACD,aAEA,IAAAM,EAAAL,EAAAM,GAAAC,UAEA2qD,EAAAhrD,EAAAkJ,cAAA,KA4BA+hD,EAAA,SAAAlnD,GAGAinD,EAAAjnD,OACA,IAAAmnD,EAAAF,EAAApiB,KAOA,OAJA,IAAAsiB,EAAAljD,QAAA,UAAAgjD,EAAAha,SAAAhpC,QAAA,OACAkjD,GAAA,KAGAF,EAAAxH,SAAA,KAAA0H,EAAAF,EAAAha,SAAAga,EAAAj0C,QAyGA,OAtGA5W,EAAA2K,IAAAnE,QAAAwkD,MAAA,CACAngD,UAAA,gBACAvB,KAAA,SAAAjD,GACA,OAAAA,EAAAyE,KAAA,0BAEAC,OAAA,SAAAC,EAAA3E,EAAA4E,EAAAlF,GACA,IAAAQ,EAAAF,EAAAG,QAAAC,WAAA9G,EAAAsa,OAAA,CACAylC,gBAAA,GACO35C,EAAAW,gBAEP2E,EAAAhF,EAAAG,QAAA6E,WAAAtF,GACAklD,EAAA5kD,EAAA0O,QAAAhP,EAAAW,cAAAqO,SAAAJ,UAAAzC,IAAA,SAAA2V,GACA,OAAAxhB,EAAA4O,WAAA,GAAA6J,UAAAzY,EAAAwQ,OAAAgR,GAAAvQ,SAAAM,SACOhD,UAEP5F,EAAA,SAAAtE,EAAAmtC,GAGA,IAFA,IAAAnwC,EAAA,OAEAxE,EAAA,EAAAmE,EAAAqD,EAAAtH,OAAuCF,EAAAmE,EAASnE,IAAA,CAEhD,IAAAgoD,EAAA,OAAAxgD,EAAAxH,IAAAwH,EAAAxH,KAAAxD,EAAA,GAAAgL,EAAAxH,GAEAwE,GAAA,IAAAmwC,EAAA,KADAoT,EAAA/nD,GAAA,UAAA+nD,EAAA/nD,GAAA,QACA,IAAAgoD,EAAA,KAAArT,EAAA,IAGA,OAAAnwC,EAAA,SAIAgb,EAAA,iBAAArc,EAAAkG,QAAAzI,OAAA+G,UAAA,KAEA9E,EAAAuB,SACAob,GAAA,UAAA1T,EAAAzI,EAAAe,OAAA,kBAGAob,GAAA,UAEA,QAAAxf,EAAA,EAAAmE,EAAAd,EAAAiB,KAAApE,OAA6CF,EAAAmE,EAASnE,IACtDwf,GAAA1T,EAAAzI,EAAAiB,KAAAtE,GAAA,MAGAwf,GAAA,WAEA3c,EAAAwB,QAAAhB,EAAAgB,SACAmb,GAAA,UAAA1T,EAAAzI,EAAAgB,OAAA,kBAGAmb,GAAA,WAEA,IAAAyoC,EAAAvrD,EAAA8E,KAAA,OACAymD,EAAAtrD,SAAAoN,QAKA,IAAAoiC,EAAA,UAAAhkC,EAAAU,MAAA,WACApM,EAAA,eAAAuJ,KAAA,WACAmmC,GA1FA,SAAAlxB,GACA,IACA8jB,EAAAtiC,EAAAwe,GAAA8jB,QAAA,GAOA,MAJA,SAAAA,EAAAr5B,SAAAoO,gBACAirB,EAAAr+B,KAAAknD,EAAA7oB,EAAAr+B,OAGAq+B,EAAA3E,UAiFA8tB,CAAAvoD,QAGA,IACAsoD,EAAAtrD,SAAAwvC,KAAAznB,UAAAynB,EACO,MAAArkC,GACPrL,EAAAwrD,EAAAtrD,SAAAwvC,MAAA3sB,KAAA2sB,GAIA8b,EAAAtrD,SAAA2H,KAAAogB,UAAA,OAAAvc,EAAAU,MAAA,cAAAV,EAAAW,YAAA,aAAA0W,EAAA,SAAArX,EAAAY,eAAA,aACAtM,EAAAwrD,EAAAtrD,SAAA2H,MAAAmV,SAAA,iBACAhd,EAAA,MAAAwrD,EAAAtrD,SAAA2H,MAAA0B,KAAA,SAAAhG,EAAAmoD,GACAA,EAAAr8B,aAAA,MAAA87B,EAAAO,EAAA3xC,aAAA,WAGA3T,EAAAmG,WACAnG,EAAAmG,UAAAi/C,EAAAplD,EAAAM,GAIA,IAAAilD,EAAA,WACAvlD,EAAAulD,YACAH,EAAAH,QAEAG,EAAAl+C,UAIArM,UAAAE,UAAAqF,MAAA,kBAEAmlD,IAEAH,EAAAtpD,WAAAypD,EAAA,MAGAv/C,MAAA,IACAC,WAAA,IACAC,cAAA,IACAvF,cAAA,GACAY,QAAA,EACAC,QAAA,EACA+jD,WAAA,EACAp/C,UAAA,MAEAlM,EAAAO,QA5KAgT,CAAA5T,EAAAC,OAAAC,WACK2T,MAAAC,EAAAlU,MAAAmU,EAAAD,QAAAjU,wBCTL,IAAAD,EAAAC,EAMID,EAAO,CAACE,EAAA,GAAUA,EAAA,KAAqBA,EAAA,WAEtCC,KAFkEF,EAAA,SAAEG,GACzE,OAuBC,SAAAA,EAAAC,EAAAC,EAAAH,GACD,aAEA,IAAAM,EAAAL,EAAAM,GAAAC,UACAqrD,EAAAvrD,EAAAwrD,WAAAnxB,QACAoxB,EAAAF,EAAAG,MAEAC,EAAAhsD,EAAA,mUAuBA,OArBA4rD,EAAAG,MAAA,SAAA33C,GACA,gBAAA9E,EAAA28C,EAAA1V,GACA,GAAAv2C,EAAAM,GAAAyrD,OAGA,IAAAE,EAAA,CACA,GAAA73C,KAAAzM,OAAA,CACA,IAAAA,EAAAqkD,EAAA3tC,KAAA,oBAEA/S,EAAA3D,EAAA0W,KAAA,UAAAkU,SACA5qB,EAAAytC,QAAAhoC,OAAA,2BAAAgH,EAAAzM,OAAA2H,GAAA,SAAAkB,QAAAlF,GAGA0gD,EAAA3tC,KAAA,kBAAA+2B,QAAAhoC,OAAAmpC,KAEAyV,EAAAt/C,SAAA,QAAAq/C,cAZAD,EAAAx8C,EAAA28C,EAAA1V,KAkBAl2C,EAAAwrD,WArDAj4C,CAAA5T,EAAAC,OAAAC,WACK2T,MAAAC,EAAAlU,MAAAmU,EAAAD,QAAAjU,wBCRL,IAAAD,EAAAC,EAMID,EAAO,CAACE,EAAA,GAAUA,EAAA,KAAqBA,EAAA,WAEtCC,KAF8DF,EAAA,SAAEG,GACrE,OAuBC,SAAAA,EAAAC,EAAAC,EAAAH,GACD,OAAAC,EAAAM,GAAAC,UAxBAqT,CAAA5T,EAAAC,OAAAC,WACK2T,MAAAC,EAAAlU,MAAAmU,EAAAD,QAAAjU,wBCRL,IAAAD,EAAAC,EAyBID,EAAO,CAACE,EAAA,GAAUA,EAAA,WAEjBC,KAFkCF,EAAA,SAAEG,GACzC,OAmBC,SAAAA,EAAAC,EAAAC,EAAAH,GACD,aAEA,IAAAM,EAAAL,EAAAM,GAAAC,UA+CAsrD,EAAA,SAAAA,EAAAv2C,EAAApM,GAEA,IAAA7I,EAAA4uC,eAAA5uC,EAAA4uC,aAAA,WACA,kEAGA/rC,KAAAuE,EAAA,CACAf,GAAA,IAAArG,EAAAopC,IAAAn0B,GACAF,QAAA,GACA82C,QAAA,IAGAhpD,KAAAuE,EAAAf,GAAA4O,WAAA,GAAA62C,aAMAjjD,GAAA,kBAAAA,EAAA+3C,QACA/3C,EAAA+3C,QAAA,CACAx+C,KAAAyG,EAAA+3C,SAEK/3C,IAAA,IAAAA,EAAA+3C,QACL/3C,EAAA+3C,QAAA,CACAx+C,MAAA,GAEKyG,IAAA,IAAAA,EAAA+3C,UACL/3C,EAAA+3C,QAAA,CACAx+C,KAAA,WAIAS,KAAA60C,EAAA/3C,EAAAsa,QAAA,KAA8BuxC,EAAA5xC,SAAA5Z,EAAA4Z,SAAAkyC,WAAAjjD,GAC9BoM,EAAA62C,WAAAjpD,KAEAA,KAAAi1C,iBAGAn4C,EAAAsa,OAAAuxC,EAAAxmD,UAAA,CAUA8yC,aAAA,WACA,IAAA3sC,EAAAtI,KACAwD,EAAAxD,KAAAuE,EAAAf,GACA0lD,EAAA1lD,EAAA4O,WAAA,GACA+2C,EAAArsD,EAAAC,GAAA8L,QACArF,EAAA4O,WAAA,GAAAg3C,YAAAppD,KAGAlD,EAAAC,GAAAuN,GAAA,mCAAAnN,EAAA6kB,KAAAC,SAAA,WAGA,IAAApZ,EAAA/L,EAAAC,GAAA8L,QAEAA,IAAAsgD,IACA7gD,EAAA+gD,UAEAF,EAAAtgD,MAMAqgD,EAAA5yC,KAAAsC,eAAAswC,EAAA,gCAAA98B,EAAA1oB,EAAAshB,IACA,IAAAloB,EAAAue,SAAA,EAAA/S,EAAA/D,EAAAykD,UACAlsD,EAAA,WAAAsvB,GAAA/lB,KAAA,SAAAhG,GACA,IAAA2kB,EAAAxhB,EAAAwQ,OAAAS,MAAA,SAAApU,IAEA,IAAAiI,EAAA/D,EAAAykD,QAAAhkC,IACAloB,EAAAkD,MAAA2I,IAAA,sBAOAnF,EAAA8G,GAAA,yBACA9G,EAAA6G,IAAA,QACAvN,EAAA0G,EAAAkG,QAAA/E,QAAA0F,IAAA,QACAvN,EAAAC,GAAAsN,IAAA,oCAEAvN,EAAAuJ,KAAAiC,EAAA/D,EAAAykD,QAAA,SAAA3oD,EAAAkJ,IACA,IAAAA,GACAjB,EAAAghD,cAAAjpD,GAAA,OAMAL,KAAA60C,EAAA0U,YAAAtiD,KAAA,SAAA3C,EAAA4C,GACA,OAAA5C,EAAAuE,MAAA3B,EAAA2B,MAAA,EAAAvE,EAAAuE,MAAA3B,EAAA2B,OAAA,MAGA7I,KAAAwpD,cAEAxpD,KAAAypD,cAGA,IAAA1L,EAAA/9C,KAAA60C,EAAAkJ,SAEA,IAAAA,EAAAx+C,OACA+I,EAAAohD,eAIAlmD,EAAA8G,GAAA,mCAEAhC,EAAAqhD,QACAlnC,aAAAna,EAAAqhD,QAGArhD,EAAAqhD,OAAA3qD,WAAA,WACAsJ,EAAAqhD,OAAA,KAEArhD,EAAAkhD,cAEAlhD,EAAAmhD,cAEAnhD,EAAA+gD,UAEA/gD,EAAAshD,mBACW,OAKXpmD,EAAA8G,GAAA,sBACAhC,EAAAshD,oBAEA9sD,EAAA0G,EAAAkG,QAAAzI,QAAA6Y,SAAA,OAAAikC,EAAAx+C,OAGAiE,EAAA8G,GAAA,8BAAAnC,EAAAiK,EAAA2rC,GACAz1C,EAAAkhD,cAEAlhD,EAAAmhD,cAEAnhD,EAAA+gD,YAGA7lD,EAAA8G,GAAA,+BACAhC,EAAAmhD,cAEAnhD,EAAA+gD,YAIA7lD,EAAA8G,GAAA,wBACA,IAAAu/C,EAAA,GACArmD,EAAAsB,OAAAq5C,MAAA,WACAn+C,KAAA8S,MAAA8B,WACAi1C,EAAAjlD,KAAA5E,KAAA+X,IAAA,MAGAvU,EAAAolC,IAAA,sBACAtgC,EAAAmhD,cAEAnhD,EAAA+gD,UAEA7lD,EAAAsB,KAAA+kD,GAAA1L,MAAA,WACA71C,EAAAwhD,gBAAA9pD,MAAA,SAIAwD,EAAA8G,GAAA,oBAAAnC,EAAAiK,EAAA2rC,GACAz1C,EAAAmhD,cAEAnhD,EAAA+gD,UAIAvsD,EAAAue,SAAA,EAAA/S,EAAA/D,EAAAykD,UACAxlD,EAAA0O,QAAAC,WAIAnS,KAAAqpD,WAmBAU,kBAAA,SAAAC,GACA,IAEA3pD,EAAAmE,EAFAhB,EAAAxD,KAAAuE,EAAAf,GACA0O,EAAAlS,KAAAuE,EAAA2N,QAKAyD,EAAAzD,EAAA7C,IAAA,SAAAzI,EAAAoe,GACA,OACAob,UAAApb,EACAilC,SAAArjD,EAAAqjD,YAEOhjD,KAAA,SAAA3C,EAAA4C,GACP,OAAA5C,EAAA2lD,WAAA/iD,EAAA+iD,SACA3lD,EAAA2lD,SAAA/iD,EAAA+iD,SAGA3lD,EAAA87B,UAAAl5B,EAAAk5B,YAKA5I,EAAA16B,EAAAuS,IAAA6C,EAAA,SAAAtL,EAAAvG,GACA,WAAAmD,EAAAwQ,OAAA3T,GAAAkV,UACA,gBAGA3O,EAAAsjD,MAAA,OAAAtjD,EAAAujD,aAAA,IAAAvjD,EAAAsjD,KAAA,SAAAptD,EAAAue,QAAA2uC,EAAApjD,EAAAwjD,cAIAC,EAAA,EAEA,IAAAhqD,EAAA,EAAAmE,EAAAgzB,EAAAj3B,OAAuCF,EAAAmE,EAASnE,KAChD,IAAAm3B,EAAAn3B,KACAgqD,GAAAn4C,EAAA7R,GAAA8pD,UASA,IAAA9C,EAAA7jD,EAAA4O,WAAA,GAAAE,QACAg4C,EAAAjD,EAAA70C,IAAA60C,EAAA90C,GAAA80C,EAAAhjC,UAAA,EACAkmC,EAAA/mD,EAAAkG,QAAAC,YAAAia,YAAA0mC,EACAE,EAAAD,EAAAF,EAMA,IAAAhqD,EAAA,EAAAmE,EAAAgzB,EAAAj3B,OAAuCF,EAAAmE,EAASnE,IAChD6R,EAAA7R,GAAAoqD,UACAD,GAAAt4C,EAAA7R,GAAA8pD,UAMA,IAAAjY,GAAA,EAEA,IAAA7xC,EAAA,EAAAmE,EAAAmR,EAAApV,OAAqCF,EAAAmE,EAASnE,IAAA,CAC9C,IAAAkpB,EAAA5T,EAAAtV,GAAA+/B,UAEA,MAAA5I,EAAAjO,KAAArX,EAAAqX,GAAAkhC,SAAAv4C,EAAAqX,GAAA4gC,WAIAjY,GAAAsY,EAAAt4C,EAAAqX,GAAA4gC,SAAA,GACAjY,GAAA,EACA1a,EAAAjO,IAAA,GAEAiO,EAAAjO,IAAA,EAGAihC,GAAAt4C,EAAAqX,GAAA4gC,UASA,IAAAO,GAAA,EAEA,IAAArqD,EAAA,EAAAmE,EAAA0N,EAAA3R,OAAuCF,EAAAmE,EAASnE,IAChD,IAAA6R,EAAA7R,GAAAoqD,UAAAv4C,EAAA7R,GAAAsqD,QAAA,IAAAnzB,EAAAn3B,GAAA,CACAqqD,GAAA,EACA,MAIA,IAAArqD,EAAA,EAAAmE,EAAA0N,EAAA3R,OAAuCF,EAAAmE,EAASnE,IAChD6R,EAAA7R,GAAAoqD,UACAjzB,EAAAn3B,GAAAqqD,GAIA,gBAAAlzB,EAAAn3B,KACAm3B,EAAAn3B,IAAA,GAUA,OAJA,IAAAvD,EAAAue,SAAA,EAAAmc,KACAA,EAAA,OAGAA,GAWAgyB,YAAA,WACA,IAAAlhD,EAAAtI,KAEAupD,EAAAvpD,KAAA60C,EAAA0U,YACA/lD,EAAAxD,KAAAuE,EAAAf,GACA0O,EAAA1O,EAAA0O,UAAAkJ,GAAA,GAAA/L,IAAA,SAAAhP,GACA,IAAA2T,EAAAhU,KAAAgU,OAAA3T,GACA2H,EAAAgM,EAAAvP,SAAAuD,UACAiiD,EAAAzmD,EAAA4O,WAAA,GAAA6J,UAAA5b,GAAAuqD,mBAEA,GAAAX,IAAAptD,EAAA,CACA,IAAAguD,EAAA/tD,EAAAkX,EAAAvP,UAAAf,KAAA,YACAumD,EAAAY,IAAAhuD,EAAA,EAAAguD,EAAA,IAGA,OACA7iD,YACAoiD,UAAA,GACAF,MAAA,EACAO,SAAA,EACAE,QAAA3iD,EAAA1E,MAAA,aACA2mD,cAKAr4C,EAAA,SAAA2X,EAAA3pB,GACA,IAAAwqD,EAAAl4C,EAAAqX,GAAA6gC,WAEA,IAAAttD,EAAAue,QAAAzb,EAAAwqD,IACAA,EAAAxlD,KAAAhF,IAIAoU,EAAA,SAAAuV,EAAA3pB,EAAAkrD,EAAAC,GACA,IAAAnvB,EAAAv7B,EAAAmE,EAEA,GAAAsmD,GAES,YAAAA,EAIT,IAFAlvB,EAAAtzB,EAAA0iD,MAAAprD,GAAAiJ,MAEAxI,EAAA,EAAAmE,EAAA+kD,EAAAhpD,OAA+CF,EAAAmE,EAASnE,IACxDkpD,EAAAlpD,GAAAwI,OAAA+yB,GACAhqB,EAAA2X,EAAAggC,EAAAlpD,GAAAT,WAGS,YAAAkrD,EAIT,IAFAlvB,EAAAtzB,EAAA0iD,MAAAprD,GAAAiJ,MAEAxI,EAAA,EAAAmE,EAAA+kD,EAAAhpD,OAA+CF,EAAAmE,EAASnE,IACxDkpD,EAAAlpD,GAAAwI,OAAA+yB,GACAhqB,EAAA2X,EAAAggC,EAAAlpD,GAAAT,WAGS,YAAAkrD,EAET,IAAAzqD,EAAA,EAAAmE,EAAA+kD,EAAAhpD,OAA+CF,EAAAmE,EAASnE,KACxD,IAAAkpD,EAAAlpD,GAAAT,KAAAoF,QAAA+lD,IACAn5C,EAAA2X,EAAAggC,EAAAlpD,GAAAT,WAvBAsS,EAAAqX,GAAA6gC,UAAAxlD,KAAAhF,IA+BAsS,EAAA7L,KAAA,SAAAO,EAAAvG,GAIA,IAHA,IAAA4qD,EAAArkD,EAAAoB,UAAArH,MAAA,KACA4a,GAAA,EAEAqF,EAAA,EAAAmH,EAAAkjC,EAAA1qD,OAAgDqgB,EAAAmH,EAASnH,IAAA,CACzD,IAAA5Y,EAAAlL,EAAA4P,KAAAu+C,EAAArqC,IAEA,WAAA5Y,EAMA,OAJAuT,GAAA,OACA3U,EAAAwjD,UAAAttD,EAAAuS,IAAAk6C,EAAA,SAAAjlD,GACA,OAAAA,EAAA1E,QAGW,YAAAoI,GAAApB,EAAA+jD,MAGX,YADApvC,GAAA,GAEW,eAAAvT,EAKX,OAFAuT,GAAA,OACA3U,EAAA6jD,SAAA,GAIA3tD,EAAAuJ,KAAAkjD,EAAA,SAAA58C,EAAAq9C,GAEA,IAAAkB,EAAAlB,EAAApqD,KAAAe,MAAA,KACAwqD,EAAA,IAAAhnD,OAAA,2BAAA+mD,EAAA,0BACA5nD,EAAA0E,EAAA1E,MAAA6nD,GAEA7nD,IACAiY,GAAA,EAEAjY,EAAA,KAAA4nD,EAAA,IAAA5nD,EAAA,SAAA4nD,EAAA,GAEAl3C,EAAA3T,EAAA2pD,EAAApqD,KAAA0D,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACeA,EAAA,KAAA4nD,EAAA,IAAA5nD,EAAA,IAEf0Q,EAAA3T,EAAA2pD,EAAApqD,KAAA0D,EAAA,GAAAA,EAAA,OAOAiY,IACA3U,EAAAsjD,MAAA,KAGAlqD,KAAAuE,EAAA2N,WAUA43C,gBAAA,SAAA19C,EAAA28C,GACA,IAAAzgD,EAAAtI,KACAwD,EAAAxD,KAAAuE,EAAAf,GACAu6C,EAAA/9C,KAAA60C,EAAAkJ,QAEA,GAAAA,IAAA,IAAAA,EAAAx+C,KAAA,CACA,IAAAypC,EAAA+U,EAAAvmB,QAAAprB,EAAA28C,EAAA,WACA,OAAAhL,EAAApY,SAAAniC,EAAA4I,EAAA,GAAA9D,EAAA8iD,YAAAh/C,EAAA,QAGA,IAAA48B,IAAA,IAAAA,GACAlsC,EAAA0G,EAAAkG,QAAAzI,QAAAq2C,eAAA,yBAAA9zC,EAAA4I,EAAA48B,EAAA+f,MAUAW,aAAA,WACA,IAAAphD,EAAAtI,KACAwD,EAAAxD,KAAAuE,EAAAf,GACAu6C,EAAA/9C,KAAA60C,EAAAkJ,QAEA,WAAAA,EAAAx+C,OACAw+C,EAAA9qC,OAAA,kCAIAzP,EAAA8G,GAAA,sBACAhC,EAAA+iD,gBAGA/iD,EAAA+iD,cAGAvuD,EAAA0G,EAAAkG,QAAA/E,QAAA2F,GAAA,8BAAAnC,GACA,KAAAA,EAAAoC,SAAAzN,EAAAkD,MAAA0D,KAAA,iBACA5G,EAAAkD,MAAAoB,UAIA,IAAA6R,EAAA8qC,EAAA9qC,OACAqzB,EAAA,kBAAArzB,IAAA,SAEAnW,EAAA0G,EAAAkG,QAAA/E,QAAA2F,GAAA,sCAAAg8B,EAAA,SAAAn+B,GAGA,GAAArL,EAAA0G,EAAAkG,QAAAzI,QAAAsa,SAAA,eAKA,IAAAze,EAAAue,QAAAve,EAAAkD,MAAAmK,QAAA,MAAAmiC,IAAA,GAAA9oC,EAAAsB,OAAAwP,QAAAvC,WAAA,CAMA,qBAAAkB,EAAA,CACA,IAAAq4C,EAAAr4C,EAAA,EAAAzP,EAAA0O,UAAAkJ,GAAA,GAAA7a,OAAA0S,IAEA,GAAAzP,EAAA+I,KAAAvM,MAAAyU,QAAAT,SAAAs3C,EACA,OAKA,IAAAl/C,EAAA5I,EAAA4I,IAAAtP,EAAAkD,MAAAmK,QAAA,OAEA,UAAAhC,EAAA5I,KAIA+I,EAAAwhD,gBAAA19C,GAAA,GACS,cAAAjE,EAAA5I,KAETzC,EAAAkD,MAAA2I,IAAA,kBACS,YAAAR,EAAA5I,MAETzC,EAAAkD,MAAAklC,OAAAv8B,IAAA,kBAUAyiD,YAAA,SAAA9hC,GACA,IAAAhhB,EAAAtI,KACAwD,EAAAxD,KAAAuE,EAAAf,GACA,OAAA1G,EAAAuS,IAAArP,KAAAuE,EAAA2N,QAAA,SAAAtL,EAAAvG,GAEA,IAAAuG,EAAA+jD,QAAA/jD,EAAA6jD,QAIA,OACAvhD,MAAA1F,EAAA4O,WAAA,GAAA6J,UAAA5b,GAAAykB,OACAphB,KAAAF,EAAA+I,KAAA+c,EAAAjpB,GAAAgzC,OAAA/qC,EAAAusC,EAAA6H,YACA7uC,OAAArK,EAAAwQ,OAAA3T,GAAAkV,YAAAjN,EAAA/D,EAAAykD,QAAA3oD,GACAkrD,YAAAlrD,EACAmrD,SAAAliC,MAYA0hC,MAAA,SAAAprD,GAGA,IAFA,IAAA2pD,EAAAvpD,KAAA60C,EAAA0U,YAEAlpD,EAAA,EAAAmE,EAAA+kD,EAAAhpD,OAA+CF,EAAAmE,EAASnE,IACxD,GAAAkpD,EAAAlpD,GAAAT,SACA,OAAA2pD,EAAAlpD,IAWAupD,gBAAA,WACA,IAAAthD,EAAAtI,KACAwD,EAAAxD,KAAAuE,EAAAf,GACAA,EAAAsB,KAAA,CACAqQ,KAAA,YACOwxB,SAAA,eAAAv0B,EAAA4S,GACPxhB,EAAA4I,IAAA4Y,GAEA1c,EAAAwhD,gBAAAtmD,EAAA4I,IAAA4Y,IAAA,MAWAqkC,QAAA,WACA,IAMAhpD,EAAAmE,EANA8D,EAAAtI,KACAwD,EAAAxD,KAAAuE,EAAAf,GACAqF,EAAA/L,EAAAC,GAAA8L,QACA0gD,EAAAvpD,KAAA60C,EAAA0U,YACAS,EAAAT,EAAA,GAAA3pD,KACAsS,EAAAlS,KAAAuE,EAAA2N,QAEAu5C,EAAAzrD,KAAAuE,EAAAykD,QAAAttC,QAEA,IAAArb,EAAAkpD,EAAAhpD,OAAA,EAAsCF,GAAA,EAAQA,IAC9C,GAAAwI,GAAA0gD,EAAAlpD,GAAAwI,MAAA,CACAmhD,EAAAT,EAAAlpD,GAAAT,KACA,MAKA,IAAA8rD,EAAA1rD,KAAA+pD,kBAAAC,GAEAhqD,KAAAuE,EAAAykD,QAAA0C,EAIA,IAAAC,GAAA,EAEA,IAAAtrD,EAAA,EAAAmE,EAAA0N,EAAA3R,OAAuCF,EAAAmE,EAASnE,IAChD,QAAAqrD,EAAArrD,KAAA6R,EAAA7R,GAAAsqD,QAAAz4C,EAAA7R,GAAAoqD,UAAA,KAAAjnD,EAAAwQ,OAAA3T,GAAAkV,UAAA,CACAo2C,GAAA,EACA,MAIA7uD,EAAA0G,EAAAkG,QAAAzI,QAAAu0C,YAAA,YAAAmW,GACA,IAAAxwB,GAAA,EACA5lB,EAAA,EACA/R,EAAA0O,UAAAkJ,GAAA,GAAA/U,KAAA,SAAAkjB,EAAAlpB,IACA,IAAAqrD,EAAArrD,IACAkV,IAGAm2C,EAAArrD,KAAAorD,EAAAprD,KACA86B,GAAA,EAEA7yB,EAAAghD,cAAA//B,EAAAmiC,EAAArrD,OAIA86B,IACAn7B,KAAA4pD,kBAGA9sD,EAAA0G,EAAAkG,QAAAzI,QAAAykC,QAAA,wBAAAliC,EAAAxD,KAAAuE,EAAAykD,UAEA,IAAAxlD,EAAA2R,KAAA5M,OAAAkgC,gBACA3rC,EAAA,KAAA0G,EAAAkG,QAAA/E,QAAAyW,GAAA,GAAAjV,KAAA,UAAAoP,KAaAk0C,YAAA,WACA,IAAAjmD,EAAAxD,KAAAuE,EAAAf,GACA0O,EAAAlS,KAAAuE,EAAA2N,QAEA,GAAAlS,KAAA60C,EAAAqV,OAQO,IAFPptD,EAAAue,SAAA,EAAAve,EAAAuS,IAAA6C,EAAA,SAAA2iC,GACA,OAAAA,EAAAqV,QADA,CAOAptD,EAAA8uD,cAAAC,IACA/uD,EAAAuJ,KAAAwlD,EAAA,SAAAvlD,GACA,IAAA0e,EAAA1e,EAAA3F,MAAA,KAEAmrD,EAAAtoD,EAAA,EAAAwhB,EAAA,KAAAA,EAAA,MAKAxhB,EAAAkG,QAAAzI,OAAA2iB,YACApgB,EAAA0O,QADA,IAEA65C,EAAAvoD,EAAAkG,QAAAzI,OAAAw6B,WAAA,GACAuwB,EAAAlvD,EAAA0G,EAAAkG,QAAAjF,SAAAg3B,WAAA,IAAAjyB,SAAAuiD,GACAE,EAAAnvD,EAAA0G,EAAAkG,QAAA/E,QAAAy6B,OAAA,MAAA8S,QAAA1oC,SAAAuiD,GAGAzrB,EAAA98B,EAAA0O,UAAAzN,SAAA8X,OAAA,SAAAyI,GACA,OAAAxhB,EAAAwQ,OAAAgR,GAAAzP,YACOiyB,MAAApI,OAAA,GAAAz2B,IAAA,wBAAAA,IAAA,eAGP7L,EAAAmvD,GAAA/hD,OAAApN,EAAA0G,EAAAsB,KAAA,CACAqQ,KAAA,YACOb,SAAA8qB,OAAA,IAAAjkB,KAAA,UAAAxS,IAAA,cAEP,IAAAjE,EAAAlB,EAAAkG,QAAAhF,SAEA,GAAAA,EAAA,CACA,IAAAwnD,EAAApvD,EAAA4H,EAAA+2B,WAAA,IAAAjyB,SAAAuiD,GACAI,EAAA3oD,EAAA0O,UAAAxN,SAAA6X,OAAA,SAAAyI,GACA,OAAAxhB,EAAAwQ,OAAAgR,GAAAzP,YACSiyB,MAAApI,OAAA,GAAAz2B,IAAA,wBACT7L,EAAA,SAAAoN,OAAAiiD,GAAA3iD,SAAA0iD,GAGApvD,EAAA,SAAAoN,OAAAo2B,GAAA92B,SAAAwiD,GAIA,WAAAhsD,KAAA60C,EAAAkJ,QAAAx+C,MACAzC,EAAAivD,GAAAjyC,SAAA,wBAMAhd,EAAAivD,GAAA5wC,KAAA,UAAAihB,WAAA,QAGAt/B,EAAAivD,GAAApjD,IAAA,uBACA,IAAAyjD,EAAAtvD,EAAA,UAAA6L,IAAA,CACAE,MAAA,EACAD,OAAA,EACAE,SAAA,SACA6J,MAAA,SACOzI,OAAA6hD,GACPK,EAAAp8B,aAAAxsB,EAAAkG,QAAAzI,QAEAq/B,EAAAj6B,KAAA,SAAAhG,GACA,IAAA2kB,EAAAxhB,EAAAwQ,OAAAS,MAAA,cAAApU,GACA6R,EAAA8S,GAAAmlC,SAAAnqD,KAAA4jB,aAAA,IAEAwoC,EAAAhtD,WAeAkqD,cAAA,SAAA1iD,EAAAylD,GACA,IAAA7oD,EAAAxD,KAAAuE,EAAAf,GACAg0B,EAAA60B,EAAA,UAEAvvD,EAAA0G,EAAAwQ,OAAApN,GAAAnC,UAAAkE,IAAA,UAAA6uB,GACA16B,EAAA0G,EAAAwQ,OAAApN,GAAAlC,UAAAiE,IAAA,UAAA6uB,GACAh0B,EAAAwQ,OAAApN,GAAA0N,QAAAkzB,MAAA7+B,IAAA,UAAA6uB,GAEA16B,EAAA8uD,cAAAC,IACAroD,EAAA6lB,MAAA,KAAAziB,GAAA2yC,UAAAlzC,KAAA,SAAA2e,GACA8mC,EAAAtoD,EAAAwhB,EAAA5Y,IAAA4Y,EAAAhR,WAcAq3C,YAAA,WACA,IAAA7nD,EAAAxD,KAAAuE,EAAAf,GACA6lB,EAAA7lB,EAAA6lB,MAAA,CACAlU,KAAA,YACOb,QAAAkzB,MACPd,EAAAljC,EAAA4O,WAAA,GACAa,EAAAjT,KAAA60C,EAAAkJ,QAAA9qC,OACAoW,EAAA9M,OAAA,uBAAA+vC,WAAA,uBAEA,kBAAAr5C,EACAzP,EAAA6lB,MAAA,KAAApW,EAAA,CACAkC,KAAA,YACSb,QAAAkzB,MAAArhC,KAAA,WAAAugC,EAAA/Z,WAAAjpB,KAAA,mBAIT,mCAAAuP,IACAA,EAAA,oCAGAnW,EAAAmW,EAAAzP,EAAAsB,KAAA,CACAqQ,KAAA,YACSb,SAAAnO,KAAA,WAAAugC,EAAA/Z,WAAAjpB,KAAA,sBAeTilD,EAAAY,YAAA,EACA3pD,KAAA,UACAiJ,MAAA4pC,KACG,CACH7yC,KAAA,WACAiJ,MAAA,MACG,CACHjJ,KAAA,WACAiJ,MAAA,KACG,CACHjJ,KAAA,WACAiJ,MAAA,KACG,CACHjJ,KAAA,WACAiJ,MAAA,MAWA8/C,EAAAnxB,QAAA,CACA+0B,SAAA,SAAAngD,EAAA28C,EAAA1V,GACA,OAAA0V,EACAjsD,EAAAsP,EAAAnL,QAAAsa,SAAA,WACAnP,EAAA0G,MAAAugC,IAAA,SAAAr+B,QACA,QAFA,EAKA5I,EAAA0G,MAAA8B,WAKAxI,EAAA0G,OAAA,GACAhW,EAAAsP,EAAAnL,QAAAua,YAAA,WACA,IANApP,EAAA0G,MAAAugC,IAAA,SAAAr+B,OACAlY,EAAAsP,EAAAnL,QAAA6Y,SAAA,WACA,IAQA0yC,kBAAA,SAAApgD,EAAA28C,EAAA1V,GACA,OAAA0V,GAAA38C,EAAA0G,MAAA8B,YAAAxI,EAAA68C,WAAAwD,aAEArgD,EAAA0G,OAAA,GACAhW,EAAAsP,EAAAnL,QAAAua,YAAA,WACA,IAGApP,EAAA0G,MAAAugC,IAAA,SAAAr+B,OACAlY,EAAAsP,EAAAnL,QAAA6Y,SAAA,WACA,IAMA+uC,MAAA,SAAA33C,GACA,gBAAA9E,EAAA28C,EAAA1V,GACA,GAAA0V,EAoBAjsD,EAAA,yBAAAo1C,QAAAhoC,OAAAmpC,SApBA,CAEA,IAAAjpC,EAAA,WACAy+C,EAAAzpD,SAEAtC,EAAAE,GAAAqN,IAAA,iBAGAw+C,EAAA/rD,EAAA,4BAAAoN,OAAApN,EAAA,oCAAAoN,OAAApN,EAAA,oCAAAoN,OAAAmpC,MAAAnpC,OAAApN,EAAA,8CAA8MsE,MAAA,WAC9MgJ,QACWF,OAAApN,EAAA,uCAAAsE,MAAA,WACXgJ,OACWZ,SAAA,QACX1M,EAAAE,GAAAsN,GAAA,qBAAAnC,GACA,KAAAA,EAAAoC,UACApC,EAAAukD,kBACAtiD,OAOA8G,KAAAzM,QACA3H,EAAA,yBAAAwQ,QAAA,OAAA4D,EAAAzM,OAAA2H,GAAA,YAKA,IAAAy/C,EAAA,GAqBA,SAAAC,EAAAtoD,EAAA4I,EAAAxF,GACA,IAAAhH,EAAAwM,EAAA,IAAAxF,EAEA,GAAAilD,EAAAjsD,GAAA,CAUA,IANA,IAAAqB,EAAAuC,EAAA+I,KAAAH,EAAAxF,GAAA3F,OACA0rD,EAAAd,EAAAjsD,GACAqxB,EAAA07B,EAAA,GAAAn1C,WACAo1C,EAAA37B,EAAAziB,WACAlK,EAAA,GAEAjE,EAAA,EAAAmE,EAAAooD,EAAArsD,OAAgDF,EAAAmE,EAASnE,IACzDiE,EAAAM,KAAAgoD,EAAAvsD,IAGA,QAAAsM,EAAA,EAAAC,EAAAtI,EAAA/D,OAAmCoM,EAAAC,EAASD,IAC5C1L,EAAAuF,YAAAlC,EAAAqI,IAGAk/C,EAAAjsD,GAAA/C,GAYA8rD,EAAAhjB,SAAA,CACAknB,gBAAA,WACA,gBAAAx7C,EAAAiY,EAAApX,GACA,IAAA46C,EAAAhwD,EAAA,uBAAAwsB,EAAA,2BACAyjC,GAAA,EAQA,OAPAjwD,EAAAuJ,KAAA6L,EAAA,SAAA7R,EAAAuG,GACAA,EAAAiH,SACA/Q,EAAA,uBAAA8J,EAAA2kD,YAAA,kBAAA3kD,EAAA4kD,SAAA,qBAAA5kD,EAAA2kD,YAAA,6BAAA3kD,EAAAsC,MAAA,iBAAAgB,OAAApN,EAAA,4BAAAoN,OA3DA,SAAA1G,EAAA4I,EAAAxF,GACA,IAAAhH,EAAAwM,EAAA,IAAAxF,EAEA,GAAAilD,EAAAjsD,GACA,OAAAisD,EAAAjsD,GAOA,IAHA,IAAA0U,EAAA,GACAlO,EAAA5C,EAAA+I,KAAAH,EAAAxF,GAAA3F,OAAAuN,WAEAnO,EAAA,EAAAmE,EAAA4B,EAAA7F,OAA0CF,EAAAmE,EAASnE,IACnDiU,EAAA1P,KAAAwB,EAAA/F,IAIA,OADAwrD,EAAAjsD,GAAA0U,EACAA,EA2CA04C,CAAA37C,EAAAzK,EAAA4kD,SAAA5kD,EAAA2kD,eACA/hD,SAAAsjD,GACAC,GAAA,OAGAA,GAAAD,IAGAG,WAAA,WACA,gBAAA57C,EAAAiY,EAAApX,GACA,IAAAxO,EAAA5G,EAAAuS,IAAA6C,EAAA,SAAAtL,GACA,OAAAA,EAAAiH,OAAA,uBAAAjH,EAAA2kD,YAAA,kBAAA3kD,EAAA4kD,SAAA,qBAAA5kD,EAAA2kD,YAAA,6BAAA3kD,EAAAsC,MAAA,kCAAAtC,EAAAlD,KAAA,oBACSW,KAAA,IACT,QAAAX,GAAA5G,EAAA,uBAAAwsB,EAAA,2BAAApf,OAAAxG,KAGAwpD,SAAA,SAAAh8C,GAIA,OAHAA,EAAApU,EAAAsa,OAAA,CACA+1C,WAAA,IACOj8C,GACP,SAAAG,EAAAiY,EAAApX,GACA,IAAAxO,EAAA5G,EAAAuS,IAAA6C,EAAA,SAAAtL,GACA,0BAAAA,EAAA4kD,SAAA,qBAAA5kD,EAAA2kD,YAAA,SAAA3kD,EAAAsC,MAAA,cAAAtC,EAAAlD,KAAA,eACSW,KAAA,IACT,OAAAvH,EAAA,iBAAAoU,EAAAi8C,WAAA,gCAAAjjD,OAAAxG,MAYAilD,EAAA5xC,SAAA,CASAwyC,YAAAZ,EAAAY,YAUAW,MAAA,EAmBAnM,QAAA,CACAvmB,QAAAmxB,EAAAnxB,QAAA+0B,SACA5mB,SAAAgjB,EAAAhjB,SAAAsnB,aACAh6C,OAAA,EACA1T,KAAA,UASAm9C,WAAA,WAMA,IAAAnW,EAAAzpC,EAAAM,GAAAC,UAAAkpC,IA8DA,OA5DAA,EAAA0B,SAAA,0BACA,OAAAjoC,OAEAumC,EAAA0B,SAAA,8BAAAmlB,GAEA,OACAp5C,QAFAo5C,EAAAtwD,EAAAswD,IAEA1pD,KAAA,aACA0I,IAAAghD,EAAAn8B,SAAAvtB,KAAA,gBAGA6iC,EAAA0B,SAAA,kCACA,OAAAjoC,KAAA2mC,SAAA,iBAAAD,GACAA,EAAA0iB,aACA1iB,EAAA0iB,YAAAI,kBAIAjjB,EAAA0B,SAAA,iCACA,OAAAjoC,KAAA2mC,SAAA,iBAAAD,GACAA,EAAA0iB,cACA1iB,EAAA0iB,YAAAK,cAEA/iB,EAAA0iB,YAAAC,eAIA9iB,EAAA0B,SAAA,oCACA,IAAAvB,EAAA1mC,KAAAgmC,QAAA,GACA,QAAAU,EAAA0iB,cAAA,IAAAtsD,EAAAue,SAAA,EAAAqrB,EAAA0iB,YAAA7kD,EAAAykD,WAEAziB,EAAA6B,eAAA,wEACA,OAAApoC,KAAA2mC,SAAA,kBAAAv0B,EAAA4B,GACA,QAAA5B,EAAAg3C,aAAAh3C,EAAAg3C,YAAA7kD,EAAAykD,QAAAh1C,IACK,KASL20C,EAAA1jD,QAAA,QACAnI,EAAAM,GAAAC,UAAAsrD,aACA7rD,EAAAM,GAAAD,UAAAwrD,aAGA7rD,EAAAE,GAAAsN,GAAA,0BAAAnC,EAAAiK,EAAAwI,GACA,UAAAzS,EAAA4sC,YAIAj4C,EAAAsV,EAAAkF,QAAAiE,SAAA,eAAAze,EAAAsV,EAAAkF,QAAAiE,SAAA,kBAAAnJ,EAAAsE,MAAAuyC,YAAA9rD,EAAA4Z,SAAAkyC,YAAA,CACA,IAAAnmC,EAAA1Q,EAAAsE,MAAAuyC,YAEA,IAAAnmC,GACA,IAAA6lC,EAAAv2C,EAAAtV,EAAAsR,cAAA0U,KAAA,OAIA6lC,EAvrCAj4C,CAAA5T,EAAAC,OAAAC,WACK2T,MAAAC,EAAAlU,MAAAmU,EAAAD,QAAAjU,wBC3BL,IAAAD,EAAAC,EA0BID,EAAO,CAACE,EAAA,GAAUA,EAAA,WAEjBC,KAFkCF,EAAA,SAAEG,GACzC,OAmBC,SAAAA,EAAAC,EAAAC,EAAAH,GACD,aAEA,IAAAM,EAAAL,EAAAM,GAAAC,UAqKA,SAAAgwD,EAAA7pD,EAAAwhB,EAAAtE,GACA,IAAA64B,EACA+T,EACArQ,EAEAsQ,EAAA,SAAAjtC,EAAAC,GACA,GAAAD,EAAAC,EAAA,CACA,IAAAlG,EAAAkG,EACAA,EAAAD,EACAA,EAAAjG,EAGA,IAAAmzC,GAAA,EACA,OAAAhqD,EAAA0O,QAAA,YAAAqnC,UAAAh9B,OAAA,SAAAlc,GAKA,OAJAA,IAAAigB,IACAktC,GAAA,GAGAntD,IAAAkgB,GAEAitC,GAAA,GACA,GAGAA,KAIAC,EAAA,SAAAntC,EAAAC,GACA,IAAAg5B,EAAA/1C,EAAAsB,KAAA,CACAiP,OAAA,YACOwlC,UAEP,GAAAA,EAAAv0C,QAAAsb,GAAAi5B,EAAAv0C,QAAAub,GAAA,CACA,IAAAlG,EAAAkG,EACAA,EAAAD,EACAA,EAAAjG,EAGA,IAAAmzC,GAAA,EACA,OAAAjU,EAAAh9B,OAAA,SAAAlc,GAKA,OAJAA,IAAAigB,IACAktC,GAAA,GAGAntD,IAAAkgB,GACAitC,GAAA,GACA,GAGAA,KAIAhqD,EAAA6lB,MAAA,CACA2zB,UAAA,IACKxW,OAAA9lB,GAML4sC,EAAAC,EAAA7sC,EAAA1M,OAAAgR,EAAAhR,QACAipC,EAAAwQ,EAAA/sC,EAAAtU,IAAA4Y,EAAA5Y,OALAkhD,EAAAC,EAAA,EAAAvoC,EAAAhR,QACAipC,EAAAwQ,EAAA,EAAAzoC,EAAA5Y,MAOAmtC,EAAA/1C,EAAA6lB,MAAA4zB,EAAAqQ,GAAAx7C,UAEAtO,EAAA6lB,MAAArE,EAAA,CACAg4B,UAAA,IACKxW,MAKLhjC,EAAA6lB,MAAAkwB,GAAAmU,WAHAlqD,EAAA6lB,MAAAkwB,GAAA1vC,SAcA,SAAA8jD,EAAAnqD,GACA,IAAAkjC,EAAAljC,EAAA4O,WAAA,GACAk0B,EAAAI,EAAAknB,QAAAtnB,SACAxpC,EAAA0G,EAAAkG,QAAAC,aAAAU,IAAA,qBAAAi8B,GAAAj8B,IAAA,mBAAAi8B,GAAAj8B,IAAA,iBAAAi8B,GACAxpC,EAAA,QAAAuN,IAAA,iBAAA7G,EAAAkG,QAAAzI,OAAA8W,IAUA,SAAA81C,EAAArqD,GACA,IAGAsqD,EAHAnkD,EAAA7M,EAAA0G,EAAAkG,QAAAC,aACA+8B,EAAAljC,EAAA4O,WAAA,GACAk0B,EAAAI,EAAAknB,QAAAtnB,SAEA38B,EAAAW,GAAA,qBAAAg8B,EAAA,SAAAn+B,IAGAA,EAAAg7B,UAAAh7B,EAAA8vC,SAAA9vC,EAAA6vC,UACAruC,EAAAhB,IAAA,2BAAAigC,IAAA,uBAAAtC,EAAA,WACA,WAIAvpC,EAAAgxD,eACAD,EAAA/wD,EAAAgxD,kBAEKzjD,GAAA,mBAAAg8B,EAAA,WAGL38B,EAAAhB,IAAA,yBACK2B,GAAA,iBAAAg8B,EAAA,SAAAn+B,GACL,IACA6c,EADA6hB,EAAArjC,EAAAqG,OAAAg9B,QAIA,GAAAinB,EAAA,CACA,IAAAE,EAAAjxD,EAAAgxD,eAGA,KAAAC,EAAAC,YAAAnxD,EAAAkxD,EAAAC,YAAA9jD,QAAA,cAAA3G,EAAAkG,QAAAzI,SACA+sD,IAAAF,EACA,OAKA,IAAApnB,EAAAljC,EAAA4O,WAAA,GACA87C,EAAApxD,EAAA4P,KAAAlJ,EAAA4O,WAAA,GAAAwH,SAAAsW,UAAAvuB,QAAA,WAEA,GAAA7E,EAAAqL,EAAA8K,QAAA9I,QAAA,OAAA+jD,GAAA,IAAA1qD,EAAAkG,QAAAC,YAAA,CAIA,IAAA4C,EAAA/I,EAAA+I,KAAAzP,EAAAqL,EAAA8K,QAAA9I,QAAA,WAGA,GAAAoC,EAAAi6B,MAAA,CAIA,IAAApmC,EAAAtD,EAAA2oC,MAAA,kBAGA,GAFA0oB,EAAA3qD,EAAApD,EAAA,CAAAymC,EAAAt6B,EAAApE,KAEA/H,EAAAguD,qBAAA,CAIA,IAAAC,EAAA9hD,EAAAkI,QAEA,QAAAoyB,GACA7hB,EAAAqpC,EAAAjiD,IACAkiD,EAAAnmD,EAAA3E,EAAAkjC,EAAA,MAAA1hB,IACO,WAAA6hB,GACP7hB,EAAAzY,EAAAkI,QAAAT,OACAs6C,EAAAnmD,EAAA3E,EAAAkjC,EAAA,SAAA1hB,IACO,SAAA6hB,IACP7hB,EAAAzY,EAAAkI,QACA65C,EAAAnmD,EAAA3E,EAAAkjC,EAAA,OAAA1hB,IAGA0hB,EAAA6nB,iBAAAF,OAGAvxD,EAAA,QAAAwN,GAAA,iBAAA9G,EAAAkG,QAAAzI,OAAA8W,GAAA,SAAA5P,GACA,GAAAu+B,EAAAknB,QAAAY,SAAA,CAEA,GAAA1xD,EAAAqL,EAAA8K,QAAA4mC,UAAAt9B,OAAA/Y,EAAAkG,QAAAC,aAAApJ,OACA,OAKA,OAAAzD,EAAAqL,EAAA8K,QAAA4mC,QAAA,QAAAt5C,OACA,OAIA,GAAAzD,EAAAqL,EAAA8K,QAAA4mC,QAAA,WAAAt5C,OACA,OAGAoS,EAAA+zB,GAAA,MAgBA,SAAAynB,EAAA98C,EAAA9R,EAAAgjB,EAAAikB,GACAA,IAAAn1B,EAAAS,UAAAvR,SAIA,kBAAAhB,IACAA,GAAA,OAGAgjB,EAAAjS,QAAAe,GACAvU,EAAAuU,EAAA3H,QAAAzI,QAAAykC,QAAAnmC,EAAAgjB,IAWA,SAAAha,EAAA8I,GACA,IAAAq1B,EAAAr1B,EAAAe,WAAA,GAEA,GAAAs0B,EAAAknB,QAAArlD,MAAAm+B,EAAA1U,YAAA3xB,GAIA,QAAAgR,EAAAxH,OAAAlC,QAAA,CAIA,IAAA7C,EAAAuM,EAAAvM,KAAA,CACAk4C,UAAA,IACKlrC,UAAAvR,OACL2R,EAAAb,EAAAa,QAAA,CACA8qC,UAAA,IACKlrC,UAAAvR,OACL8oB,EAAAhY,EAAAgY,MAAA,CACA2zB,UAAA,IACKlrC,UAAAvR,OAELqR,EAAA,SAAA0J,EAAA1b,EAAA0f,GACAhE,EAAApR,OAAApN,EAAA,+BAAAoN,OAAAmH,EAAApJ,KAAA,UAAArI,EAAA,KACAjC,EAAA,MAAAiC,EAAA,aACA6uD,EAAA,GACAzkD,EAAA,KAAApK,EAAA,aACO0f,MAIPxiB,EAAAuJ,KAAAqgC,EAAA1U,YAAA3xB,EAAA,SAAAA,EAAAib,GACAA,EAAAxe,EAAAwe,GACA,IAAA7S,EAAA3L,EAAA,+BACA8U,EAAAnJ,EAAA,MAAA3D,GACA8M,EAAAnJ,EAAA,SAAAyJ,GACAN,EAAAnJ,EAAA,OAAA4gB,GACA,IAAAqlC,EAAApzC,EAAAlV,SAAA,oBAEAsoD,EAAAnuD,QACAmuD,EAAAtvD,SAGA,KAAAqJ,EAAAhC,QACA6U,EAAApR,OAAAzB,MAkGA,SAAAkmD,EAAAnrD,EAAAjE,EAAAylB,EAAAtE,GAEA,IAAA64B,EAAA/1C,EAAAjE,EAAA,MACAwU,OAAA,YACKwlC,UACLqV,EAAA9xD,EAAAue,QAAAqF,EAAA64B,GACAsV,EAAA/xD,EAAAue,QAAA2J,EAAAu0B,GAEA,GAAA/1C,EAAAjE,EAAA,MACAy9C,UAAA,IACKxW,QAAA,IAAAooB,EAIA,CAEL,GAAAA,EAAAC,EAAA,CACA,IAAAx0C,EAAAw0C,EACAA,EAAAD,EACAA,EAAAv0C,EAGAk/B,EAAAvhC,OAAA62C,EAAA,EAAAtV,EAAAh5C,QACAg5C,EAAAvhC,OAAA,EAAA42C,QAVArV,EAAAvhC,OAAAlb,EAAAue,QAAA2J,EAAAu0B,GAAA,EAAAA,EAAAh5C,QAaAiD,EAAAjE,GAAAylB,EAAA,CACAg4B,UAAA,IACKxW,OAKL+S,EAAAvhC,OAAAlb,EAAAue,QAAA2J,EAAAu0B,GAAA,GACA/1C,EAAAjE,EAAA,KAAAg6C,GAAAmU,YAJAlqD,EAAAjE,EAAA,KAAAg6C,GAAA1vC,SAiBA,SAAA8I,EAAA+zB,EAAAzmC,GACA,GAAAA,GAAA,WAAAymC,EAAAknB,QAAAjmD,MAAA,CACA,IAAA0J,EAAA,IAAAlU,EAAAopC,IAAAG,GACAr1B,EAAAvM,KAAA,CACAk4C,UAAA,IACO0Q,WACPr8C,EAAAa,QAAA,CACA8qC,UAAA,IACO0Q,WACPr8C,EAAAgY,MAAA,CACA2zB,UAAA,IACO0Q,YAeP,SAAAY,EAAAnmD,EAAA3E,EAAAkjC,EAAAnnC,EAAAylB,GACA,IAAArd,EAAAnE,EAAAqG,OAAAlC,QACAmnD,EAAAtrD,EAAAjE,GAAAylB,EAAA,CACAg4B,UAAA,IACKxW,MAEL,UAAA7+B,EACA,GAAAQ,EAAA6vC,SAAA7vC,EAAA8vC,QAEAz0C,EAAAjE,GAAAylB,GAAAnb,QAAAilD,QACO,GAAA3mD,EAAAg7B,SACP,SAAA5jC,EACA8tD,EAAA7pD,EAAAwhB,EAAA0hB,EAAA6nB,kBAAA,MAEAI,EAAAnrD,EAAAjE,EAAAylB,EAAA0hB,EAAA6nB,iBAAA7nB,EAAA6nB,iBAAAhvD,GAAA,UAEO,CAGP,IAAAy9C,EAAAx5C,EAAAjE,EAAA,MACAy9C,UAAA,IAGA8R,GAAA,IAAA9R,EAAAlrC,UAAAvR,OACAiD,EAAAjE,GAAAylB,GAAA0oC,YAEA1Q,EAAA0Q,WACAlqD,EAAAjE,GAAAylB,GAAAnb,cAGK,eAAAlC,GACLQ,EAAAg7B,SACA,SAAA5jC,EACA8tD,EAAA7pD,EAAAwhB,EAAA0hB,EAAA6nB,kBAAA,MAEAI,EAAAnrD,EAAAjE,EAAAylB,EAAA0hB,EAAA6nB,iBAAA7nB,EAAA6nB,iBAAAhvD,GAAA,MAMAiE,EAAAjE,GAAAylB,GAAAnb,QAAAilD,GAvoBA3xD,EAAA0M,OAAA,GACA1M,EAAA0M,OAAA5E,QAAA,QAEA9H,EAAA0M,OAAAiZ,KAAA,SAAAtf,GACA,IAAAkjC,EAAAljC,EAAA4O,WAAA,GACA0Q,EAAA4jB,EAAAhwB,MAAA7M,OACAkN,EAAA5Z,EAAA4Z,SAAAlN,OACA7D,EAAA8c,IAAAjmB,EAAAka,EAAA+L,EAEA+jB,EAAA,MACAl/B,EAAA,MACA6mD,GAAA,EACAjmD,GAAA,EACA+9B,EAAA,SACAt+B,EAAA,WACA+mD,GAAA,EACAroB,EAAAknB,QAAA,IAEA,IAAA5nD,GACA2B,EAAA,KACAonD,GAAA,GACK,kBAAA/oD,GACL2B,EAAA3B,EACA+oD,GAAA,GACKjyD,EAAAsR,cAAApI,KACLA,EAAAwoD,WAAA3xD,IACA2xD,EAAAxoD,EAAAwoD,UAGAxoD,EAAAuC,OAAA1L,IACA0L,EAAAvC,EAAAuC,MAGAvC,EAAA6gC,QAAAhqC,IACAgqC,EAAA7gC,EAAA6gC,OAGA7gC,EAAA2B,QAAA9K,GACA8K,EAAA3B,EAAA2B,MACAonD,GAAA,IAEApnD,EAAA,KACAonD,GAAA,GAGA/oD,EAAAsgC,WAAAzpC,IACAypC,EAAAtgC,EAAAsgC,UAGAtgC,EAAAgC,YAAAnL,IACAmL,EAAAhC,EAAAgC,YAIAxE,EAAAqG,OAAAy8B,YACA9iC,EAAAqG,OAAAg9B,SACArjC,EAAAqG,OAAAlC,SACAnE,EAAAqG,OAAA2kD,YACAhrD,EAAAqG,OAAAtB,QACAm+B,EAAAknB,QAAA5lD,YAEAlL,EAAAM,GAAAC,UAAAyK,IAAA6N,MAAA,4BAAAvD,EAAAxL,GACA,OAAA5G,KAAAqR,MAAA2C,OAAApN,EAAA,CACA+O,MAAA,UACOrB,QAAAjF,IAAA,SAAAmc,GACP,cAAApZ,EAAAw7C,QAAA/mB,MACA/pC,EAAA0uB,GAAAyF,SAAA1V,SAAAnJ,EAAAw7C,QAAA5lD,WACS,SAAAoK,EAAAw7C,QAAA/mB,OACT/pC,EAAA0uB,GAAAjQ,SAAAnJ,EAAAw7C,QAAA5lD,eASA+mD,GAAAjyD,EAAA0G,EAAAkG,QAAAzI,QAAAsa,SAAA,eACA/X,EAAAqG,OAAAlC,MAAA,OAokBA7K,EAAAuJ,KAAA,EACA9G,KAAA,MACA0gB,KAAA,UACG,CACH1gB,KAAA,SACA0gB,KAAA,cACG,SAAA5f,EAAA0gB,GACH5jB,EAAA2K,IAAAw+B,SAAAvlB,EAAAxhB,MAAAqF,KAAA,SAAAwN,EAAApM,EAAAuzC,GACA,IACA71C,EADAs5C,EAAAh3C,EAAAg3C,SAEA78B,EAAA,GAEA,QAAA68B,IAAA,IAAAA,EACA,OAAAzD,EAGA,QAAAl5C,EAAA,EAAAmE,EAAA+0C,EAAAh5C,OAA2CF,EAAAmE,EAASnE,IACpDqD,EAAA0O,EAAA2O,EAAAd,MAAAs5B,EAAAl5C,MAEA,IAAA28C,IAAA,IAAAt5C,EAAAsrD,mBAAA,IAAAhS,IAAAt5C,EAAAsrD,mBACA7uC,EAAAvb,KAAA20C,EAAAl5C,IAIA,OAAA8f,MAGAhjB,EAAA2K,IAAAw+B,SAAA/5B,KAAA3H,KAAA,SAAAwN,EAAApM,EAAAqjB,GACA,IACAvD,EADAk3B,EAAAh3C,EAAAg3C,SAEA78B,EAAA,GAEA,GAAA68B,IAAAngD,EACA,OAAAwsB,EAGA,QAAAhpB,EAAA,EAAAmE,EAAA6kB,EAAA9oB,OAAuCF,EAAAmE,EAASnE,IAChDylB,EAAA1T,EAAAe,OAAAkW,EAAAhpB,GAAA+L,OAEA,IAAA4wC,GAAAl3B,EAAAmpC,kBAAA,IAAAnpC,EAAAmpC,gBAAA5lC,EAAAhpB,GAAA2T,UAAA,IAAAgpC,KAAAl3B,EAAAmpC,kBAAAnpC,EAAAmpC,gBAAA5lC,EAAAhpB,GAAA2T,WACAmM,EAAAvb,KAAAykB,EAAAhpB,IAIA,OAAA8f,IAUA,IAAA+uC,EAAA/xD,EAAAopC,IAAA0B,SACAknB,EAAAhyD,EAAAopC,IAAA6B,eAkMA,SAAAngC,EAAAs6B,EAAA9Z,GACA,gBAAAjlB,GACA,OAAAA,EAAAyE,KAAA,WAAAs6B,EAAA9Z,IAKA,SAAA2mC,EAAAlsD,GACA,IAAAuvB,EAAAvvB,EAAAmsD,gBACA,mBAAA58B,EAAA,gBAAAA,EAAA,kBAAAA,EA1MAy8B,EAAA,sBACA,OAAAlvD,KAAA2mC,SAAA,iBAAAD,GACAvpC,EAAA0M,OAAAiZ,KAAA,IAAA3lB,EAAAopC,IAAAG,QAGAwoB,EAAA,6BAAA5Z,GACA,OAAAA,IAAAz4C,EACAmD,KAAAgmC,QAAA,GAAA4nB,QAAAY,SAGAxuD,KAAA2mC,SAAA,iBAAAD,GACAA,EAAAknB,QAAAY,SAAAlZ,MAGA4Z,EAAA,yBAAA5Z,GACA,OAAA/sC,IAAA1L,EACAmD,KAAAgmC,QAAA,GAAA4nB,QAAArlD,KAGAvI,KAAA2mC,SAAA,iBAAAD,GACAA,EAAAknB,QAAArlD,KAAA+sC,MAGA4Z,EAAA,0BAAAroB,GACA,OAAAA,IAAAhqC,EACAmD,KAAAgmC,QAAA,GAAA4nB,QAAA/mB,MAGA7mC,KAAA2mC,SAAA,iBAAAD,GACAA,EAAAknB,QAAA/mB,QACAsnB,EAAA,IAAAhxD,EAAAopC,IAAAG,GAAA,eAAAG,QAKAqoB,EAAA,0BAAAvnD,GACA,OAAAA,IAAA9K,EACAmD,KAAAgmC,QAAA,GAAA4nB,QAAAjmD,MAGA3H,KAAA2mC,SAAA,iBAAAD,GACAA,EAAAknB,QAAAjmD,QAEA++B,EAAA4oB,cAlTA,SAAA5oB,GACA,IAAAr1B,EAAA,IAAAlU,EAAAopC,IAAAG,GAQAA,EAAAmI,qBAAAjqC,KAAA,CACAxH,GAAA,SAAAgP,EAAA1I,EAAA+Q,GACA,IAAApU,EAAAmE,EACAqD,EAAA6+B,EAAAvzB,OAAAsB,GAQA,IANA5M,EAAAmnD,kBACAlyD,EAAAsP,GAAA0N,SAAA4sB,EAAAknB,QAAA5lD,WAKA3H,EAAA,EAAAmE,EAAAkiC,EAAAzqB,UAAA1b,OAA+CF,EAAAmE,EAASnE,KACxDqmC,EAAAzqB,UAAA5b,GAAA2uD,kBAAAnnD,EAAAonD,iBAAApnD,EAAAonD,gBAAA5uD,KACAvD,EAAA+K,EAAAqjB,QAAA7qB,IAAAyZ,SAAA4sB,EAAAknB,QAAA5lD,YAIA2sB,MAAA,uBAIAtjB,EAAA/G,GAAA,gCAGA,IAAAxF,EAAAuM,EAAAvM,KAAA,CACAk4C,UAAA,IACOuS,KAAA,GAAAhzC,OAAA,SAAA1U,GACP,OAAAA,IAAAhL,IAEAwsB,EAAAhY,EAAAgY,MAAA,CACA2zB,UAAA,IACO5hC,GAAA,GAAA/L,IAAA,SAAAo6B,GACP,IAAA1xB,EAAA1G,EAAAjF,IAAAq9B,EAAAr9B,KAAA2L,IAAA,GACA,OAAAA,EAAA,CACA3L,IAAA2L,EACA/D,OAAAy1B,EAAAz1B,QACSnX,IACF0f,OAAA,SAAA1U,GACP,OAAAA,IAAAhL,IAGAwU,EAAAu3B,IAAA,8BACAv3B,EAAAvM,QAAA+E,SAEAwf,EAAAmd,OACAnd,EAAAhjB,KAAA,SAAA0R,GACA1G,EAAAgY,MAAAtR,EAAA3L,IAAA2L,EAAA/D,QAAAnK,eAMAwH,EAAA/G,GAAA,8EACA/B,EAAA8I,KAGAA,EAAA/G,GAAA,8BACAqjD,EAAAt8C,GACAA,EAAAhH,IAAA,eAgPAyY,CAAA4jB,GAKA,IAAAljC,EAAA,IAAArG,EAAAopC,IAAAG,GACAinB,EAAAnqD,GAEA,QAAAmE,GACAkmD,EAAArqD,GAGA2qD,EAAA,IAAAhxD,EAAAopC,IAAAG,GAAA,eAAA/+B,QAGAunD,EAAA,6BAAA5oB,GACA,OAAAA,IAAAzpC,EACAmD,KAAAgmC,QAAA,GAAA4nB,QAAAtnB,SAGAtmC,KAAA2mC,SAAA,iBAAAD,GACAinB,EAAA,IAAAxwD,EAAAopC,IAAAG,IACAA,EAAAknB,QAAAtnB,WAEA,QAAAI,EAAAknB,QAAAjmD,OACAkmD,EAAA,IAAA1wD,EAAAopC,IAAAG,QAIAyoB,EAAA,4CAAAtlD,GACA,IAAAwH,EAAArR,KAEA,WAAA6J,EACA7J,KAAA0tD,YAGA1tD,KAAA2mC,SAAA,eAAAD,EAAA1hB,GACArS,EAAA+zB,GACAA,EAAAvzB,OAAA6R,GAAAgqC,kBAAA,EACAlyD,EAAA4pC,EAAAvzB,OAAA6R,GAAAnS,KAAAiH,SAAA4sB,EAAAknB,QAAA5lD,aAEAhI,KAAA2mC,SAAA,iBAAAD,EAAArmC,GACA8tD,EAAA98C,EAAA,gBAAAA,EAAAhR,KAAA,KAEAL,QAEAmvD,EAAA,kDAAAtlD,GACA,IAAAwH,EAAArR,KAEA,WAAA6J,EACA7J,KAAA0tD,YAGA1tD,KAAA2mC,SAAA,kBAAAD,EAAA1hB,GACArS,EAAA+zB,GACAA,EAAAzqB,UAAA+I,GAAAgqC,kBAAA,EACA,IAAAh7C,EAAA,IAAA7W,EAAAopC,IAAAG,GAAA1yB,OAAAgR,GACAloB,EAAAkX,EAAAvP,UAAAqV,SAAA4sB,EAAAknB,QAAA5lD,WACAlL,EAAAkX,EAAAtP,UAAAoV,SAAA4sB,EAAAknB,QAAA5lD,WACAgM,EAAAM,QAAAkzB,MAAA1tB,SAAA4sB,EAAAknB,QAAA5lD,aAEAhI,KAAA2mC,SAAA,iBAAAD,EAAArmC,GACA8tD,EAAA98C,EAAA,mBAAAA,EAAAhR,KAAA,KAEAL,QAEAmvD,EAAA,8CAAAtlD,GACA,IAAAwH,EAAArR,KAEA,WAAA6J,EACA7J,KAAA0tD,YAGA1tD,KAAA2mC,SAAA,gBAAAD,EAAApd,EAAAC,GACA5W,EAAA+zB,GACA,IAAAhjC,EAAAgjC,EAAAvzB,OAAAmW,GAEA5lB,EAAAurD,kBAAApyD,IACA6G,EAAAurD,gBAAA,IAGAvrD,EAAAurD,gBAAA1lC,IAAA,EAEA7lB,EAAAwnB,SACApuB,EAAA4G,EAAAwnB,QAAA3B,IAAAzP,SAAA4sB,EAAAknB,QAAA5lD,aAGAhI,KAAA2mC,SAAA,iBAAAD,EAAArmC,GACA8tD,EAAA98C,EAAA,iBAAAA,EAAAhR,KAAA,KAEAL,QAEAmvD,EAAA,kDACA,IAAA99C,EAAArR,KAQA,OAPAA,KAAA2mC,SAAA,eAAAD,EAAA1hB,GACA0hB,EAAAvzB,OAAA6R,GAAAgqC,kBAAA,EACAlyD,EAAA4pC,EAAAvzB,OAAA6R,GAAAnS,KAAA2I,YAAAkrB,EAAAknB,QAAA5lD,aAEAhI,KAAA2mC,SAAA,iBAAAD,EAAArmC,GACA8tD,EAAA98C,EAAA,kBAAAA,EAAAhR,KAAA,KAEAL,OAEAmvD,EAAA,wDACA,IAAA99C,EAAArR,KAsBA,OArBAA,KAAA2mC,SAAA,kBAAAD,EAAA1hB,GACA0hB,EAAAzqB,UAAA+I,GAAAgqC,kBAAA,EACA,IAAA39C,EAAA,IAAAlU,EAAAopC,IAAAG,GACA1yB,EAAA3C,EAAA2C,OAAAgR,GACAloB,EAAAkX,EAAAvP,UAAA+W,YAAAkrB,EAAAknB,QAAA5lD,WACAlL,EAAAkX,EAAAtP,UAAA8W,YAAAkrB,EAAAknB,QAAA5lD,WAIAqJ,EAAAgY,MAAA,KAAArE,GAAAu0B,UAAAlzC,KAAA,SAAAojC,GACA,IAAA/lC,EAAAgjC,EAAAvzB,OAAAs2B,EAAAr9B,KACAojD,EAAA9rD,EAAAurD,iBAEAvrD,EAAAwnB,SAAAskC,KAAA/lB,EAAAz1B,SACAlX,EAAA4G,EAAAwnB,QAAAue,EAAAz1B,SAAAwH,YAAAkrB,EAAAknB,QAAA5lD,eAIAhI,KAAA2mC,SAAA,iBAAAD,EAAArmC,GACA8tD,EAAA98C,EAAA,qBAAAA,EAAAhR,KAAA,KAEAL,OAEAmvD,EAAA,oDACA,IAAA99C,EAAArR,KAcA,OAbAA,KAAA2mC,SAAA,gBAAAD,EAAApd,EAAAC,GACA,IAAA7lB,EAAAgjC,EAAAvzB,OAAAmW,GACA5lB,EAAAurD,gBAAA1lC,IAAA,EAIA7lB,EAAAwnB,UAAAwb,EAAAzqB,UAAAsN,GAAAylC,kBACAlyD,EAAA4G,EAAAwnB,QAAA3B,IAAA/N,YAAAkrB,EAAAknB,QAAA5lD,aAGAhI,KAAA2mC,SAAA,iBAAAD,EAAArmC,GACA8tD,EAAA98C,EAAA,mBAAAA,EAAAhR,KAAA,KAEAL,OAwCA,IAAAyvD,EAAA,EA2GA,OA1GA3yD,EAAAsa,OAAAja,EAAA2K,IAAAnE,QAAA,CACAq5C,SAAA,CACAv2C,KAAAwB,EAAA,uBACAD,UAAA,mBACA0nD,QAAA,2BACA5sC,KAAA,SAAAtf,EAAAvC,EAAAiC,GACA,IAAAoF,EAAAtI,KACAkD,EAAAmsD,gBAAA,UAAAI,IAGAjsD,EAAA8G,GAAA8kD,EAAAlsD,GAAA,WACAoF,EAAAytC,OAlCA,SAAAvyC,EAAAN,GACA,aAAApG,EAAAue,QAAA,OAAAnY,EAAAwsD,WAAAlsD,EAAAsB,KAAA,CACAk4C,UAAA,IACKxW,WAIL,IAAA1pC,EAAAue,QAAA,UAAAnY,EAAAwsD,WAAAlsD,EAAA0O,QAAA,CACA8qC,UAAA,IACKxW,WAIL,IAAA1pC,EAAAue,QAAA,QAAAnY,EAAAwsD,WAAAlsD,EAAA6lB,MAAA,CACA2zB,UAAA,IACKxW,OAmBLiR,CAAAj0C,EAAAN,MAEAlD,KAAA41C,WAEAviC,QAAA,SAAA7P,EAAAvC,EAAAiC,GACAM,EAAA6G,IAAAnH,EAAAmsD,mBAGAM,eAAA,CACAlpD,KAAAwB,EAAA,oCACAD,UAAA,0BACA8a,KAAA,SAAAtf,EAAAvC,EAAAiC,GACA,IAAAoF,EAAAtI,KACAkD,EAAAmsD,gBAAA,UAAAI,IACAjsD,EAAA8G,GAAA8kD,EAAAlsD,GAAA,WACA,IAAAujC,EAAAjjC,EAAAsB,KAAA,CACAk4C,UAAA,IACWlrC,UAAAvR,OAAAiD,EAAA0O,QAAA,CACX8qC,UAAA,IACWlrC,UAAAvR,OAAAiD,EAAA6lB,MAAA,CACX2zB,UAAA,IACWlrC,UAAAvR,OACX+H,EAAAytC,OAAA,IAAAtP,KAEAzmC,KAAA41C,WAEAviC,QAAA,SAAA7P,EAAAvC,EAAAiC,GACAM,EAAA6G,IAAAnH,EAAAmsD,mBAGAO,UAAA,CACAnpD,KAAAwB,EAAA,0BACAD,UAAA,qBACAE,OAAA,WAEAlI,KADAA,KAAA6J,OAAAg9B,QACA,OAAAh9B,WAGAgmD,WAAA,CACAppD,KAAAwB,EAAA,6BACAD,UAAA,sBACAE,OAAA,WACAyK,EAAA3S,KAAAoS,WAAA,QAEA0Q,KAAA,SAAAtf,EAAAvC,EAAAiC,GACA,IAAAoF,EAAAtI,KACAkD,EAAAmsD,gBAAA,UAAAI,IACAjsD,EAAA8G,GAAA8kD,EAAAlsD,GAAA,WACA,IAAAujC,EAAAjjC,EAAAsB,KAAA,CACAk4C,UAAA,IACWlrC,UAAAvR,OAAAiD,EAAA0O,QAAA,CACX8qC,UAAA,IACWlrC,UAAAvR,OAAAiD,EAAA6lB,MAAA,CACX2zB,UAAA,IACWlrC,UAAAvR,OACX+H,EAAAytC,OAAAtP,EAAA,KAEAzmC,KAAA41C,WAEAviC,QAAA,SAAA7P,EAAAvC,EAAAiC,GACAM,EAAA6G,IAAAnH,EAAAmsD,qBAIAvyD,EAAAuJ,KAAA,iCAAAhG,EAAAymC,GACA,IAAAgpB,EAAAhpB,EAAA3yB,cACAhX,EAAA2K,IAAAnE,QAAA,SAAAmjC,EAAA,MACArgC,KAAAwB,EAAA,SAAA6+B,EAAA,cAAAgpB,EAAA,KACA9nD,UAAA,kBAAA8nD,EAAA,IACA5nD,OAAA,WACAlI,KAAA6J,OAAAg9B,MAAAipB,IAEAhtC,KAAA,SAAAtf,GACA,IAAA8E,EAAAtI,KACAwD,EAAA8G,GAAA,6BAAAnC,EAAAu+B,EAAAG,GACAv+B,EAAA+sC,OAAAxO,IAAAipB,SAaAhzD,EAAAE,GAAAsN,GAAA,+BAAAnC,EAAAu+B,GACA,OAAAv+B,EAAA4sC,WAIA53C,EAAA0M,OAAAiZ,KAAA,IAAA3lB,EAAAopC,IAAAG,MAEAvpC,EAAA0M,OAhjCA6G,CAAA5T,EAAAC,OAAAC,WACK2T,MAAAC,EAAAlU,MAAAmU,EAAAD,QAAAjU","file":"static/js/0.7975b2b4.chunk.js","sourcesContent":["/*!\n * HTML5 export buttons for Buttons and DataTables.\n * 2016 SpryMedia Ltd - datatables.net/license\n *\n * FileSaver.js (1.3.3) - MIT license\n * Copyright © 2016 Eli Grey - http://eligrey.com\n */\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['jquery', 'datatables.net', 'datatables.net-buttons'], function ($) {\n      return factory($, window, document);\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = function (root, $, jszip, pdfmake) {\n      if (!root) {\n        root = window;\n      }\n\n      if (!$ || !$.fn.dataTable) {\n        $ = require('datatables.net')(root, $).$;\n      }\n\n      if (!$.fn.dataTable.Buttons) {\n        require('datatables.net-buttons')(root, $);\n      }\n\n      return factory($, root, root.document, jszip, pdfmake);\n    };\n  } else {\n    // Browser\n    factory(jQuery, window, document);\n  }\n})(function ($, window, document, jszip, pdfmake, undefined) {\n  'use strict';\n\n  var DataTable = $.fn.dataTable; // Allow the constructor to pass in JSZip and PDFMake from external requires.\n  // Otherwise, use globally defined variables, if they are available.\n\n  function _jsZip() {\n    return jszip || window.JSZip;\n  }\n\n  function _pdfMake() {\n    return pdfmake || window.pdfMake;\n  }\n\n  DataTable.Buttons.pdfMake = function (_) {\n    if (!_) {\n      return _pdfMake();\n    }\n\n    pdfmake = m_ake;\n  };\n\n  DataTable.Buttons.jszip = function (_) {\n    if (!_) {\n      return _jsZip();\n    }\n\n    jszip = _;\n  };\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * FileSaver.js dependency\n   */\n\n  /*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */\n\n\n  var _saveAs = function (view) {\n    \"use strict\"; // IE <10 is explicitly unsupported\n\n    if (typeof view === \"undefined\" || typeof navigator !== \"undefined\" && /MSIE [1-9]\\./.test(navigator.userAgent)) {\n      return;\n    }\n\n    var doc = view.document // only get URL when necessary in case Blob.js hasn't overridden it yet\n    ,\n        get_URL = function get_URL() {\n      return view.URL || view.webkitURL || view;\n    },\n        save_link = doc.createElementNS(\"http://www.w3.org/1999/xhtml\", \"a\"),\n        can_use_save_link = \"download\" in save_link,\n        click = function click(node) {\n      var event = new MouseEvent(\"click\");\n      node.dispatchEvent(event);\n    },\n        is_safari = /constructor/i.test(view.HTMLElement) || view.safari,\n        is_chrome_ios = /CriOS\\/[\\d]+/.test(navigator.userAgent),\n        throw_outside = function throw_outside(ex) {\n      (view.setImmediate || view.setTimeout)(function () {\n        throw ex;\n      }, 0);\n    },\n        force_saveable_type = \"application/octet-stream\" // the Blob API is fundamentally broken as there is no \"downloadfinished\" event to subscribe to\n    ,\n        arbitrary_revoke_timeout = 1000 * 40 // in ms\n    ,\n        revoke = function revoke(file) {\n      var revoker = function revoker() {\n        if (typeof file === \"string\") {\n          // file is an object URL\n          get_URL().revokeObjectURL(file);\n        } else {\n          // file is a File\n          file.remove();\n        }\n      };\n\n      setTimeout(revoker, arbitrary_revoke_timeout);\n    },\n        dispatch = function dispatch(filesaver, event_types, event) {\n      event_types = [].concat(event_types);\n      var i = event_types.length;\n\n      while (i--) {\n        var listener = filesaver[\"on\" + event_types[i]];\n\n        if (typeof listener === \"function\") {\n          try {\n            listener.call(filesaver, event || filesaver);\n          } catch (ex) {\n            throw_outside(ex);\n          }\n        }\n      }\n    },\n        auto_bom = function auto_bom(blob) {\n      // prepend BOM for UTF-8 XML and text/* types (including HTML)\n      // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n      if (/^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\n        return new Blob([String.fromCharCode(0xFEFF), blob], {\n          type: blob.type\n        });\n      }\n\n      return blob;\n    },\n        FileSaver = function FileSaver(blob, name, no_auto_bom) {\n      if (!no_auto_bom) {\n        blob = auto_bom(blob);\n      } // First try a.download, then web filesystem, then object URLs\n\n\n      var filesaver = this,\n          type = blob.type,\n          force = type === force_saveable_type,\n          object_url,\n          dispatch_all = function dispatch_all() {\n        dispatch(filesaver, \"writestart progress write writeend\".split(\" \"));\n      } // on any filesys errors revert to saving with object URLs\n      ,\n          fs_error = function fs_error() {\n        if ((is_chrome_ios || force && is_safari) && view.FileReader) {\n          // Safari doesn't allow downloading of blob urls\n          var reader = new FileReader();\n\n          reader.onloadend = function () {\n            var url = is_chrome_ios ? reader.result : reader.result.replace(/^data:[^;]*;/, 'data:attachment/file;');\n            var popup = view.open(url, '_blank');\n            if (!popup) view.location.href = url;\n            url = undefined; // release reference before dispatching\n\n            filesaver.readyState = filesaver.DONE;\n            dispatch_all();\n          };\n\n          reader.readAsDataURL(blob);\n          filesaver.readyState = filesaver.INIT;\n          return;\n        } // don't create more object URLs than needed\n\n\n        if (!object_url) {\n          object_url = get_URL().createObjectURL(blob);\n        }\n\n        if (force) {\n          view.location.href = object_url;\n        } else {\n          var opened = view.open(object_url, \"_blank\");\n\n          if (!opened) {\n            // Apple does not allow window.open, see https://developer.apple.com/library/safari/documentation/Tools/Conceptual/SafariExtensionGuide/WorkingwithWindowsandTabs/WorkingwithWindowsandTabs.html\n            view.location.href = object_url;\n          }\n        }\n\n        filesaver.readyState = filesaver.DONE;\n        dispatch_all();\n        revoke(object_url);\n      };\n\n      filesaver.readyState = filesaver.INIT;\n\n      if (can_use_save_link) {\n        object_url = get_URL().createObjectURL(blob);\n        setTimeout(function () {\n          save_link.href = object_url;\n          save_link.download = name;\n          click(save_link);\n          dispatch_all();\n          revoke(object_url);\n          filesaver.readyState = filesaver.DONE;\n        });\n        return;\n      }\n\n      fs_error();\n    },\n        FS_proto = FileSaver.prototype,\n        saveAs = function saveAs(blob, name, no_auto_bom) {\n      return new FileSaver(blob, name || blob.name || \"download\", no_auto_bom);\n    }; // IE 10+ (native saveAs)\n\n\n    if (typeof navigator !== \"undefined\" && navigator.msSaveOrOpenBlob) {\n      return function (blob, name, no_auto_bom) {\n        name = name || blob.name || \"download\";\n\n        if (!no_auto_bom) {\n          blob = auto_bom(blob);\n        }\n\n        return navigator.msSaveOrOpenBlob(blob, name);\n      };\n    }\n\n    FS_proto.abort = function () {};\n\n    FS_proto.readyState = FS_proto.INIT = 0;\n    FS_proto.WRITING = 1;\n    FS_proto.DONE = 2;\n    FS_proto.error = FS_proto.onwritestart = FS_proto.onprogress = FS_proto.onwrite = FS_proto.onabort = FS_proto.onerror = FS_proto.onwriteend = null;\n    return saveAs;\n  }(typeof self !== \"undefined\" && self || typeof window !== \"undefined\" && window || this.content); // Expose file saver on the DataTables API. Can't attach to `DataTables.Buttons`\n  // since this file can be loaded before Button's core!\n\n\n  DataTable.fileSave = _saveAs;\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * Local (private) functions\n   */\n\n  /**\n   * Get the sheet name for Excel exports.\n   *\n   * @param {object}\tconfig Button configuration\n   */\n\n  var _sheetname = function _sheetname(config) {\n    var sheetName = 'Sheet1';\n\n    if (config.sheetName) {\n      sheetName = config.sheetName.replace(/[\\[\\]\\*\\/\\\\\\?\\:]/g, '');\n    }\n\n    return sheetName;\n  };\n  /**\n   * Get the newline character(s)\n   *\n   * @param {object}\tconfig Button configuration\n   * @return {string}\t\t\t\tNewline character\n   */\n\n\n  var _newLine = function _newLine(config) {\n    return config.newline ? config.newline : navigator.userAgent.match(/Windows/) ? '\\r\\n' : '\\n';\n  };\n  /**\n   * Combine the data from the `buttons.exportData` method into a string that\n   * will be used in the export file.\n   *\n   * @param\t{DataTable.Api} dt\t\t DataTables API instance\n   * @param\t{object}\t\t\t\tconfig Button configuration\n   * @return {object}\t\t\t\t\t\t\t The data to export\n   */\n\n\n  var _exportData = function _exportData(dt, config) {\n    var newLine = _newLine(config);\n\n    var data = dt.buttons.exportData(config.exportOptions);\n    var boundary = config.fieldBoundary;\n    var separator = config.fieldSeparator;\n    var reBoundary = new RegExp(boundary, 'g');\n    var escapeChar = config.escapeChar !== undefined ? config.escapeChar : '\\\\';\n\n    var join = function join(a) {\n      var s = ''; // If there is a field boundary, then we might need to escape it in\n      // the source data\n\n      for (var i = 0, ien = a.length; i < ien; i++) {\n        if (i > 0) {\n          s += separator;\n        }\n\n        s += boundary ? boundary + ('' + a[i]).replace(reBoundary, escapeChar + boundary) + boundary : a[i];\n      }\n\n      return s;\n    };\n\n    var header = config.header ? join(data.header) + newLine : '';\n    var footer = config.footer && data.footer ? newLine + join(data.footer) : '';\n    var body = [];\n\n    for (var i = 0, ien = data.body.length; i < ien; i++) {\n      body.push(join(data.body[i]));\n    }\n\n    return {\n      str: header + body.join(newLine) + footer,\n      rows: body.length\n    };\n  };\n  /**\n   * Older versions of Safari (prior to tech preview 18) don't support the\n   * download option required.\n   *\n   * @return {Boolean} `true` if old Safari\n   */\n\n\n  var _isDuffSafari = function _isDuffSafari() {\n    var safari = navigator.userAgent.indexOf('Safari') !== -1 && navigator.userAgent.indexOf('Chrome') === -1 && navigator.userAgent.indexOf('Opera') === -1;\n\n    if (!safari) {\n      return false;\n    }\n\n    var version = navigator.userAgent.match(/AppleWebKit\\/(\\d+\\.\\d+)/);\n\n    if (version && version.length > 1 && version[1] * 1 < 603.1) {\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * Convert from numeric position to letter for column names in Excel\n   * @param  {int} n Column number\n   * @return {string} Column letter(s) name\n   */\n\n\n  function createCellPos(n) {\n    var ordA = 'A'.charCodeAt(0);\n    var ordZ = 'Z'.charCodeAt(0);\n    var len = ordZ - ordA + 1;\n    var s = \"\";\n\n    while (n >= 0) {\n      s = String.fromCharCode(n % len + ordA) + s;\n      n = Math.floor(n / len) - 1;\n    }\n\n    return s;\n  }\n\n  try {\n    var _serialiser = new XMLSerializer();\n\n    var _ieExcel;\n  } catch (t) {}\n  /**\n   * Recursively add XML files from an object's structure to a ZIP file. This\n   * allows the XSLX file to be easily defined with an object's structure matching\n   * the files structure.\n   *\n   * @param {JSZip} zip ZIP package\n   * @param {object} obj Object to add (recursive)\n   */\n\n\n  function _addToZip(zip, obj) {\n    if (_ieExcel === undefined) {\n      // Detect if we are dealing with IE's _awful_ serialiser by seeing if it\n      // drop attributes\n      _ieExcel = _serialiser.serializeToString($.parseXML(excelStrings['xl/worksheets/sheet1.xml'])).indexOf('xmlns:r') === -1;\n    }\n\n    $.each(obj, function (name, val) {\n      if ($.isPlainObject(val)) {\n        var newDir = zip.folder(name);\n\n        _addToZip(newDir, val);\n      } else {\n        if (_ieExcel) {\n          // IE's XML serialiser will drop some name space attributes from\n          // from the root node, so we need to save them. Do this by\n          // replacing the namespace nodes with a regular attribute that\n          // we convert back when serialised. Edge does not have this\n          // issue\n          var worksheet = val.childNodes[0];\n          var i, ien;\n          var attrs = [];\n\n          for (i = worksheet.attributes.length - 1; i >= 0; i--) {\n            var attrName = worksheet.attributes[i].nodeName;\n            var attrValue = worksheet.attributes[i].nodeValue;\n\n            if (attrName.indexOf(':') !== -1) {\n              attrs.push({\n                name: attrName,\n                value: attrValue\n              });\n              worksheet.removeAttribute(attrName);\n            }\n          }\n\n          for (i = 0, ien = attrs.length; i < ien; i++) {\n            var attr = val.createAttribute(attrs[i].name.replace(':', '_dt_b_namespace_token_'));\n            attr.value = attrs[i].value;\n            worksheet.setAttributeNode(attr);\n          }\n        }\n\n        var str = _serialiser.serializeToString(val); // Fix IE's XML\n\n\n        if (_ieExcel) {\n          // IE doesn't include the XML declaration\n          if (str.indexOf('<?xml') === -1) {\n            str = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>' + str;\n          } // Return namespace attributes to being as such\n\n\n          str = str.replace(/_dt_b_namespace_token_/g, ':'); // Remove testing name space that IE puts into the space preserve attr\n\n          str = str.replace(/xmlns:NS[\\d]+=\"\" NS[\\d]+:/g, '');\n        } // Safari, IE and Edge will put empty name space attributes onto\n        // various elements making them useless. This strips them out\n\n\n        str = str.replace(/<([^<>]*?) xmlns=\"\"([^<>]*?)>/g, '<$1 $2>');\n        zip.file(name, str);\n      }\n    });\n  }\n  /**\n   * Create an XML node and add any children, attributes, etc without needing to\n   * be verbose in the DOM.\n   *\n   * @param  {object} doc      XML document\n   * @param  {string} nodeName Node name\n   * @param  {object} opts     Options - can be `attr` (attributes), `children`\n   *   (child nodes) and `text` (text content)\n   * @return {node}            Created node\n   */\n\n\n  function _createNode(doc, nodeName, opts) {\n    var tempNode = doc.createElement(nodeName);\n\n    if (opts) {\n      if (opts.attr) {\n        $(tempNode).attr(opts.attr);\n      }\n\n      if (opts.children) {\n        $.each(opts.children, function (key, value) {\n          tempNode.appendChild(value);\n        });\n      }\n\n      if (opts.text !== null && opts.text !== undefined) {\n        tempNode.appendChild(doc.createTextNode(opts.text));\n      }\n    }\n\n    return tempNode;\n  }\n  /**\n   * Get the width for an Excel column based on the contents of that column\n   * @param  {object} data Data for export\n   * @param  {int}    col  Column index\n   * @return {int}         Column width\n   */\n\n\n  function _excelColWidth(data, col) {\n    var max = data.header[col].length;\n    var len, lineSplit, str;\n\n    if (data.footer && data.footer[col].length > max) {\n      max = data.footer[col].length;\n    }\n\n    for (var i = 0, ien = data.body.length; i < ien; i++) {\n      var point = data.body[i][col];\n      str = point !== null && point !== undefined ? point.toString() : ''; // If there is a newline character, workout the width of the column\n      // based on the longest line in the string\n\n      if (str.indexOf('\\n') !== -1) {\n        lineSplit = str.split('\\n');\n        lineSplit.sort(function (a, b) {\n          return b.length - a.length;\n        });\n        len = lineSplit[0].length;\n      } else {\n        len = str.length;\n      }\n\n      if (len > max) {\n        max = len;\n      } // Max width rather than having potentially massive column widths\n\n\n      if (max > 40) {\n        return 54; // 40 * 1.35\n      }\n    }\n\n    max *= 1.35; // And a min width\n\n    return max > 6 ? max : 6;\n  } // Excel - Pre-defined strings to build a basic XLSX file\n\n\n  var excelStrings = {\n    \"_rels/.rels\": '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>' + '<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">' + '<Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\" Target=\"xl/workbook.xml\"/>' + '</Relationships>',\n    \"xl/_rels/workbook.xml.rels\": '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>' + '<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">' + '<Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\" Target=\"worksheets/sheet1.xml\"/>' + '<Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\" Target=\"styles.xml\"/>' + '</Relationships>',\n    \"[Content_Types].xml\": '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>' + '<Types xmlns=\"http://schemas.openxmlformats.org/package/2006/content-types\">' + '<Default Extension=\"xml\" ContentType=\"application/xml\" />' + '<Default Extension=\"rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\" />' + '<Default Extension=\"jpeg\" ContentType=\"image/jpeg\" />' + '<Override PartName=\"/xl/workbook.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\" />' + '<Override PartName=\"/xl/worksheets/sheet1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\" />' + '<Override PartName=\"/xl/styles.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\" />' + '</Types>',\n    \"xl/workbook.xml\": '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>' + '<workbook xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\">' + '<fileVersion appName=\"xl\" lastEdited=\"5\" lowestEdited=\"5\" rupBuild=\"24816\"/>' + '<workbookPr showInkAnnotation=\"0\" autoCompressPictures=\"0\"/>' + '<bookViews>' + '<workbookView xWindow=\"0\" yWindow=\"0\" windowWidth=\"25600\" windowHeight=\"19020\" tabRatio=\"500\"/>' + '</bookViews>' + '<sheets>' + '<sheet name=\"Sheet1\" sheetId=\"1\" r:id=\"rId1\"/>' + '</sheets>' + '<definedNames/>' + '</workbook>',\n    \"xl/worksheets/sheet1.xml\": '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>' + '<worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\">' + '<sheetData/>' + '<mergeCells count=\"0\"/>' + '</worksheet>',\n    \"xl/styles.xml\": '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + '<styleSheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\">' + '<numFmts count=\"6\">' + '<numFmt numFmtId=\"164\" formatCode=\"#,##0.00_-\\ [$$-45C]\"/>' + '<numFmt numFmtId=\"165\" formatCode=\"&quot;£&quot;#,##0.00\"/>' + '<numFmt numFmtId=\"166\" formatCode=\"[$€-2]\\ #,##0.00\"/>' + '<numFmt numFmtId=\"167\" formatCode=\"0.0%\"/>' + '<numFmt numFmtId=\"168\" formatCode=\"#,##0;(#,##0)\"/>' + '<numFmt numFmtId=\"169\" formatCode=\"#,##0.00;(#,##0.00)\"/>' + '</numFmts>' + '<fonts count=\"5\" x14ac:knownFonts=\"1\">' + '<font>' + '<sz val=\"11\" />' + '<name val=\"Calibri\" />' + '</font>' + '<font>' + '<sz val=\"11\" />' + '<name val=\"Calibri\" />' + '<color rgb=\"FFFFFFFF\" />' + '</font>' + '<font>' + '<sz val=\"11\" />' + '<name val=\"Calibri\" />' + '<b />' + '</font>' + '<font>' + '<sz val=\"11\" />' + '<name val=\"Calibri\" />' + '<i />' + '</font>' + '<font>' + '<sz val=\"11\" />' + '<name val=\"Calibri\" />' + '<u />' + '</font>' + '</fonts>' + '<fills count=\"6\">' + '<fill>' + '<patternFill patternType=\"none\" />' + '</fill>' + '<fill>' + // Excel appears to use this as a dotted background regardless of values but\n    '<patternFill patternType=\"none\" />' + // to be valid to the schema, use a patternFill\n    '</fill>' + '<fill>' + '<patternFill patternType=\"solid\">' + '<fgColor rgb=\"FFD9D9D9\" />' + '<bgColor indexed=\"64\" />' + '</patternFill>' + '</fill>' + '<fill>' + '<patternFill patternType=\"solid\">' + '<fgColor rgb=\"FFD99795\" />' + '<bgColor indexed=\"64\" />' + '</patternFill>' + '</fill>' + '<fill>' + '<patternFill patternType=\"solid\">' + '<fgColor rgb=\"ffc6efce\" />' + '<bgColor indexed=\"64\" />' + '</patternFill>' + '</fill>' + '<fill>' + '<patternFill patternType=\"solid\">' + '<fgColor rgb=\"ffc6cfef\" />' + '<bgColor indexed=\"64\" />' + '</patternFill>' + '</fill>' + '</fills>' + '<borders count=\"2\">' + '<border>' + '<left />' + '<right />' + '<top />' + '<bottom />' + '<diagonal />' + '</border>' + '<border diagonalUp=\"false\" diagonalDown=\"false\">' + '<left style=\"thin\">' + '<color auto=\"1\" />' + '</left>' + '<right style=\"thin\">' + '<color auto=\"1\" />' + '</right>' + '<top style=\"thin\">' + '<color auto=\"1\" />' + '</top>' + '<bottom style=\"thin\">' + '<color auto=\"1\" />' + '</bottom>' + '<diagonal />' + '</border>' + '</borders>' + '<cellStyleXfs count=\"1\">' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" />' + '</cellStyleXfs>' + '<cellXfs count=\"67\">' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"2\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"2\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"2\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"2\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"2\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"3\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"3\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"3\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"3\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"3\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"4\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"4\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"4\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"4\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"4\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"5\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"5\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"5\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"5\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"5\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"0\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"0\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"0\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"0\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"2\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"2\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"2\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"2\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"2\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"3\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"3\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"3\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"3\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"3\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"4\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"4\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"4\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"4\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"4\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"5\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"5\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"5\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"5\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"5\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyAlignment=\"1\">' + '<alignment horizontal=\"left\"/>' + '</xf>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyAlignment=\"1\">' + '<alignment horizontal=\"center\"/>' + '</xf>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyAlignment=\"1\">' + '<alignment horizontal=\"right\"/>' + '</xf>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyAlignment=\"1\">' + '<alignment horizontal=\"fill\"/>' + '</xf>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyAlignment=\"1\">' + '<alignment textRotation=\"90\"/>' + '</xf>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyAlignment=\"1\">' + '<alignment wrapText=\"1\"/>' + '</xf>' + '<xf numFmtId=\"9\"   fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '<xf numFmtId=\"164\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '<xf numFmtId=\"165\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '<xf numFmtId=\"166\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '<xf numFmtId=\"167\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '<xf numFmtId=\"168\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '<xf numFmtId=\"169\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '<xf numFmtId=\"3\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '<xf numFmtId=\"4\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '<xf numFmtId=\"1\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '<xf numFmtId=\"2\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '</cellXfs>' + '<cellStyles count=\"1\">' + '<cellStyle name=\"Normal\" xfId=\"0\" builtinId=\"0\" />' + '</cellStyles>' + '<dxfs count=\"0\" />' + '<tableStyles count=\"0\" defaultTableStyle=\"TableStyleMedium9\" defaultPivotStyle=\"PivotStyleMedium4\" />' + '</styleSheet>'\n  }; // Note we could use 3 `for` loops for the styles, but when gzipped there is\n  // virtually no difference in size, since the above can be easily compressed\n  // Pattern matching for special number formats. Perhaps this should be exposed\n  // via an API in future?\n  // Ref: section 3.8.30 - built in formatters in open spreadsheet\n  //   https://www.ecma-international.org/news/TC45_current_work/Office%20Open%20XML%20Part%204%20-%20Markup%20Language%20Reference.pdf\n\n  var _excelSpecials = [{\n    match: /^\\-?\\d+\\.\\d%$/,\n    style: 60,\n    fmt: function fmt(d) {\n      return d / 100;\n    }\n  }, // Precent with d.p.\n  {\n    match: /^\\-?\\d+\\.?\\d*%$/,\n    style: 56,\n    fmt: function fmt(d) {\n      return d / 100;\n    }\n  }, // Percent\n  {\n    match: /^\\-?\\$[\\d,]+.?\\d*$/,\n    style: 57\n  }, // Dollars\n  {\n    match: /^\\-?£[\\d,]+.?\\d*$/,\n    style: 58\n  }, // Pounds\n  {\n    match: /^\\-?€[\\d,]+.?\\d*$/,\n    style: 59\n  }, // Euros\n  {\n    match: /^\\-?\\d+$/,\n    style: 65\n  }, // Numbers without thousand separators\n  {\n    match: /^\\-?\\d+\\.\\d{2}$/,\n    style: 66\n  }, // Numbers 2 d.p. without thousands separators\n  {\n    match: /^\\([\\d,]+\\)$/,\n    style: 61,\n    fmt: function fmt(d) {\n      return -1 * d.replace(/[\\(\\)]/g, '');\n    }\n  }, // Negative numbers indicated by brackets\n  {\n    match: /^\\([\\d,]+\\.\\d{2}\\)$/,\n    style: 62,\n    fmt: function fmt(d) {\n      return -1 * d.replace(/[\\(\\)]/g, '');\n    }\n  }, // Negative numbers indicated by brackets - 2d.p.\n  {\n    match: /^\\-?[\\d,]+$/,\n    style: 63\n  }, // Numbers with thousand separators\n  {\n    match: /^\\-?[\\d,]+\\.\\d{2}$/,\n    style: 64 // Numbers with 2 d.p. and thousands separators\n\n  }];\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * Buttons\n   */\n  //\n  // Copy to clipboard\n  //\n\n  DataTable.ext.buttons.copyHtml5 = {\n    className: 'buttons-copy buttons-html5',\n    text: function text(dt) {\n      return dt.i18n('buttons.copy', 'Copy');\n    },\n    action: function action(e, dt, button, config) {\n      this.processing(true);\n      var that = this;\n\n      var exportData = _exportData(dt, config);\n\n      var info = dt.buttons.exportInfo(config);\n\n      var newline = _newLine(config);\n\n      var output = exportData.str;\n      var hiddenDiv = $('<div/>').css({\n        height: 1,\n        width: 1,\n        overflow: 'hidden',\n        position: 'fixed',\n        top: 0,\n        left: 0\n      });\n\n      if (info.title) {\n        output = info.title + newline + newline + output;\n      }\n\n      if (info.messageTop) {\n        output = info.messageTop + newline + newline + output;\n      }\n\n      if (info.messageBottom) {\n        output = output + newline + newline + info.messageBottom;\n      }\n\n      if (config.customize) {\n        output = config.customize(output, config, dt);\n      }\n\n      var textarea = $('<textarea readonly/>').val(output).appendTo(hiddenDiv); // For browsers that support the copy execCommand, try to use it\n\n      if (document.queryCommandSupported('copy')) {\n        hiddenDiv.appendTo(dt.table().container());\n        textarea[0].focus();\n        textarea[0].select();\n\n        try {\n          var successful = document.execCommand('copy');\n          hiddenDiv.remove();\n\n          if (successful) {\n            dt.buttons.info(dt.i18n('buttons.copyTitle', 'Copy to clipboard'), dt.i18n('buttons.copySuccess', {\n              1: 'Copied one row to clipboard',\n              _: 'Copied %d rows to clipboard'\n            }, exportData.rows), 2000);\n            this.processing(false);\n            return;\n          }\n        } catch (t) {}\n      } // Otherwise we show the text box and instruct the user to use it\n\n\n      var message = $('<span>' + dt.i18n('buttons.copyKeys', \"Press <i>ctrl</i> or <i>\\u2318</i> + <i>C</i> to copy the table data<br>to your system clipboard.<br><br>\" + 'To cancel, click this message or press escape.') + '</span>').append(hiddenDiv);\n      dt.buttons.info(dt.i18n('buttons.copyTitle', 'Copy to clipboard'), message, 0); // Select the text so when the user activates their system clipboard\n      // it will copy that text\n\n      textarea[0].focus();\n      textarea[0].select(); // Event to hide the message when the user is done\n\n      var container = $(message).closest('.dt-button-info');\n\n      var close = function close() {\n        container.off('click.buttons-copy');\n        $(document).off('.buttons-copy');\n        dt.buttons.info(false);\n      };\n\n      container.on('click.buttons-copy', close);\n      $(document).on('keydown.buttons-copy', function (e) {\n        if (e.keyCode === 27) {\n          // esc\n          close();\n          that.processing(false);\n        }\n      }).on('copy.buttons-copy cut.buttons-copy', function () {\n        close();\n        that.processing(false);\n      });\n    },\n    exportOptions: {},\n    fieldSeparator: '\\t',\n    fieldBoundary: '',\n    header: true,\n    footer: false,\n    title: '*',\n    messageTop: '*',\n    messageBottom: '*'\n  }; //\n  // CSV export\n  //\n\n  DataTable.ext.buttons.csvHtml5 = {\n    bom: false,\n    className: 'buttons-csv buttons-html5',\n    available: function available() {\n      return window.FileReader !== undefined && window.Blob;\n    },\n    text: function text(dt) {\n      return dt.i18n('buttons.csv', 'CSV');\n    },\n    action: function action(e, dt, button, config) {\n      this.processing(true); // Set the text\n\n      var output = _exportData(dt, config).str;\n\n      var info = dt.buttons.exportInfo(config);\n      var charset = config.charset;\n\n      if (config.customize) {\n        output = config.customize(output, config, dt);\n      }\n\n      if (charset !== false) {\n        if (!charset) {\n          charset = document.characterSet || document.charset;\n        }\n\n        if (charset) {\n          charset = ';charset=' + charset;\n        }\n      } else {\n        charset = '';\n      }\n\n      if (config.bom) {\n        output = \"\\uFEFF\" + output;\n      }\n\n      _saveAs(new Blob([output], {\n        type: 'text/csv' + charset\n      }), info.filename, true);\n\n      this.processing(false);\n    },\n    filename: '*',\n    extension: '.csv',\n    exportOptions: {},\n    fieldSeparator: ',',\n    fieldBoundary: '\"',\n    escapeChar: '\"',\n    charset: null,\n    header: true,\n    footer: false\n  }; //\n  // Excel (xlsx) export\n  //\n\n  DataTable.ext.buttons.excelHtml5 = {\n    className: 'buttons-excel buttons-html5',\n    available: function available() {\n      return window.FileReader !== undefined && _jsZip() !== undefined && !_isDuffSafari() && _serialiser;\n    },\n    text: function text(dt) {\n      return dt.i18n('buttons.excel', 'Excel');\n    },\n    action: function action(e, dt, button, config) {\n      this.processing(true);\n      var that = this;\n      var rowPos = 0;\n      var dataStartRow, dataEndRow;\n\n      var getXml = function getXml(type) {\n        var str = excelStrings[type]; //str = str.replace( /xmlns:/g, 'xmlns_' ).replace( /mc:/g, 'mc_' );\n\n        return $.parseXML(str);\n      };\n\n      var rels = getXml('xl/worksheets/sheet1.xml');\n      var relsGet = rels.getElementsByTagName(\"sheetData\")[0];\n      var xlsx = {\n        _rels: {\n          \".rels\": getXml('_rels/.rels')\n        },\n        xl: {\n          _rels: {\n            \"workbook.xml.rels\": getXml('xl/_rels/workbook.xml.rels')\n          },\n          \"workbook.xml\": getXml('xl/workbook.xml'),\n          \"styles.xml\": getXml('xl/styles.xml'),\n          \"worksheets\": {\n            \"sheet1.xml\": rels\n          }\n        },\n        \"[Content_Types].xml\": getXml('[Content_Types].xml')\n      };\n      var data = dt.buttons.exportData(config.exportOptions);\n      var currentRow, rowNode;\n\n      var addRow = function addRow(row) {\n        currentRow = rowPos + 1;\n        rowNode = _createNode(rels, \"row\", {\n          attr: {\n            r: currentRow\n          }\n        });\n\n        for (var i = 0, ien = row.length; i < ien; i++) {\n          // Concat both the Cell Columns as a letter and the Row of the cell.\n          var cellId = createCellPos(i) + '' + currentRow;\n          var cell = null; // For null, undefined of blank cell, continue so it doesn't create the _createNode\n\n          if (row[i] === null || row[i] === undefined || row[i] === '') {\n            if (config.createEmptyCells === true) {\n              row[i] = '';\n            } else {\n              continue;\n            }\n          }\n\n          var originalContent = row[i];\n          row[i] = $.trim(row[i]); // Special number formatting options\n\n          for (var j = 0, jen = _excelSpecials.length; j < jen; j++) {\n            var special = _excelSpecials[j]; // TODO Need to provide the ability for the specials to say\n            // if they are returning a string, since at the moment it is\n            // assumed to be a number\n\n            if (row[i].match && !row[i].match(/^0\\d+/) && row[i].match(special.match)) {\n              var val = row[i].replace(/[^\\d\\.\\-]/g, '');\n\n              if (special.fmt) {\n                val = special.fmt(val);\n              }\n\n              cell = _createNode(rels, 'c', {\n                attr: {\n                  r: cellId,\n                  s: special.style\n                },\n                children: [_createNode(rels, 'v', {\n                  text: val\n                })]\n              });\n              break;\n            }\n          }\n\n          if (!cell) {\n            if (typeof row[i] === 'number' || row[i].match && row[i].match(/^-?\\d+(\\.\\d+)?$/) && !row[i].match(/^0\\d+/)) {\n              // Detect numbers - don't match numbers with leading zeros\n              // or a negative anywhere but the start\n              cell = _createNode(rels, 'c', {\n                attr: {\n                  t: 'n',\n                  r: cellId\n                },\n                children: [_createNode(rels, 'v', {\n                  text: row[i]\n                })]\n              });\n            } else {\n              // String output - replace non standard characters for text output\n              var text = !originalContent.replace ? originalContent : originalContent.replace(/[\\x00-\\x09\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x9F]/g, '');\n              cell = _createNode(rels, 'c', {\n                attr: {\n                  t: 'inlineStr',\n                  r: cellId\n                },\n                children: {\n                  row: _createNode(rels, 'is', {\n                    children: {\n                      row: _createNode(rels, 't', {\n                        text: text,\n                        attr: {\n                          'xml:space': 'preserve'\n                        }\n                      })\n                    }\n                  })\n                }\n              });\n            }\n          }\n\n          rowNode.appendChild(cell);\n        }\n\n        relsGet.appendChild(rowNode);\n        rowPos++;\n      };\n\n      if (config.customizeData) {\n        config.customizeData(data);\n      }\n\n      var mergeCells = function mergeCells(row, colspan) {\n        var mergeCells = $('mergeCells', rels);\n        mergeCells[0].appendChild(_createNode(rels, 'mergeCell', {\n          attr: {\n            ref: 'A' + row + ':' + createCellPos(colspan) + row\n          }\n        }));\n        mergeCells.attr('count', parseFloat(mergeCells.attr('count')) + 1);\n        $('row:eq(' + (row - 1) + ') c', rels).attr('s', '51'); // centre\n      }; // Title and top messages\n\n\n      var exportInfo = dt.buttons.exportInfo(config);\n\n      if (exportInfo.title) {\n        addRow([exportInfo.title], rowPos);\n        mergeCells(rowPos, data.header.length - 1);\n      }\n\n      if (exportInfo.messageTop) {\n        addRow([exportInfo.messageTop], rowPos);\n        mergeCells(rowPos, data.header.length - 1);\n      } // Table itself\n\n\n      if (config.header) {\n        addRow(data.header, rowPos);\n        $('row:last c', rels).attr('s', '2'); // bold\n      }\n\n      dataStartRow = rowPos;\n\n      for (var n = 0, ie = data.body.length; n < ie; n++) {\n        addRow(data.body[n], rowPos);\n      }\n\n      dataEndRow = rowPos;\n\n      if (config.footer && data.footer) {\n        addRow(data.footer, rowPos);\n        $('row:last c', rels).attr('s', '2'); // bold\n      } // Below the table\n\n\n      if (exportInfo.messageBottom) {\n        addRow([exportInfo.messageBottom], rowPos);\n        mergeCells(rowPos, data.header.length - 1);\n      } // Set column widths\n\n\n      var cols = _createNode(rels, 'cols');\n\n      $('worksheet', rels).prepend(cols);\n\n      for (var i = 0, ien = data.header.length; i < ien; i++) {\n        cols.appendChild(_createNode(rels, 'col', {\n          attr: {\n            min: i + 1,\n            max: i + 1,\n            width: _excelColWidth(data, i),\n            customWidth: 1\n          }\n        }));\n      } // Workbook modifications\n\n\n      var workbook = xlsx.xl['workbook.xml'];\n      $('sheets sheet', workbook).attr('name', _sheetname(config)); // Auto filter for columns\n\n      if (config.autoFilter) {\n        $('mergeCells', rels).before(_createNode(rels, 'autoFilter', {\n          attr: {\n            ref: 'A' + dataStartRow + ':' + createCellPos(data.header.length - 1) + dataEndRow\n          }\n        }));\n        $('definedNames', workbook).append(_createNode(workbook, 'definedName', {\n          attr: {\n            name: '_xlnm._FilterDatabase',\n            localSheetId: '0',\n            hidden: 1\n          },\n          text: _sheetname(config) + '!$A$' + dataStartRow + ':' + createCellPos(data.header.length - 1) + dataEndRow\n        }));\n      } // Let the developer customise the document if they want to\n\n\n      if (config.customize) {\n        config.customize(xlsx, config, dt);\n      } // Excel doesn't like an empty mergeCells tag\n\n\n      if ($('mergeCells', rels).children().length === 0) {\n        $('mergeCells', rels).remove();\n      }\n\n      var jszip = _jsZip();\n\n      var zip = new jszip();\n      var zipConfig = {\n        type: 'blob',\n        mimeType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n      };\n\n      _addToZip(zip, xlsx);\n\n      if (zip.generateAsync) {\n        // JSZip 3+\n        zip.generateAsync(zipConfig).then(function (blob) {\n          _saveAs(blob, exportInfo.filename);\n\n          that.processing(false);\n        });\n      } else {\n        // JSZip 2.5\n        _saveAs(zip.generate(zipConfig), exportInfo.filename);\n\n        this.processing(false);\n      }\n    },\n    filename: '*',\n    extension: '.xlsx',\n    exportOptions: {},\n    header: true,\n    footer: false,\n    title: '*',\n    messageTop: '*',\n    messageBottom: '*',\n    createEmptyCells: false,\n    autoFilter: false,\n    sheetName: ''\n  }; //\n  // PDF export - using pdfMake - http://pdfmake.org\n  //\n\n  DataTable.ext.buttons.pdfHtml5 = {\n    className: 'buttons-pdf buttons-html5',\n    available: function available() {\n      return window.FileReader !== undefined && _pdfMake();\n    },\n    text: function text(dt) {\n      return dt.i18n('buttons.pdf', 'PDF');\n    },\n    action: function action(e, dt, button, config) {\n      this.processing(true);\n      var that = this;\n      var data = dt.buttons.exportData(config.exportOptions);\n      var info = dt.buttons.exportInfo(config);\n      var rows = [];\n\n      if (config.header) {\n        rows.push($.map(data.header, function (d) {\n          return {\n            text: typeof d === 'string' ? d : d + '',\n            style: 'tableHeader'\n          };\n        }));\n      }\n\n      for (var i = 0, ien = data.body.length; i < ien; i++) {\n        rows.push($.map(data.body[i], function (d) {\n          if (d === null || d === undefined) {\n            d = '';\n          }\n\n          return {\n            text: typeof d === 'string' ? d : d + '',\n            style: i % 2 ? 'tableBodyEven' : 'tableBodyOdd'\n          };\n        }));\n      }\n\n      if (config.footer && data.footer) {\n        rows.push($.map(data.footer, function (d) {\n          return {\n            text: typeof d === 'string' ? d : d + '',\n            style: 'tableFooter'\n          };\n        }));\n      }\n\n      var doc = {\n        pageSize: config.pageSize,\n        pageOrientation: config.orientation,\n        content: [{\n          table: {\n            headerRows: 1,\n            body: rows\n          },\n          layout: 'noBorders'\n        }],\n        styles: {\n          tableHeader: {\n            bold: true,\n            fontSize: 11,\n            color: 'white',\n            fillColor: '#2d4154',\n            alignment: 'center'\n          },\n          tableBodyEven: {},\n          tableBodyOdd: {\n            fillColor: '#f3f3f3'\n          },\n          tableFooter: {\n            bold: true,\n            fontSize: 11,\n            color: 'white',\n            fillColor: '#2d4154'\n          },\n          title: {\n            alignment: 'center',\n            fontSize: 15\n          },\n          message: {}\n        },\n        defaultStyle: {\n          fontSize: 10\n        }\n      };\n\n      if (info.messageTop) {\n        doc.content.unshift({\n          text: info.messageTop,\n          style: 'message',\n          margin: [0, 0, 0, 12]\n        });\n      }\n\n      if (info.messageBottom) {\n        doc.content.push({\n          text: info.messageBottom,\n          style: 'message',\n          margin: [0, 0, 0, 12]\n        });\n      }\n\n      if (info.title) {\n        doc.content.unshift({\n          text: info.title,\n          style: 'title',\n          margin: [0, 0, 0, 12]\n        });\n      }\n\n      if (config.customize) {\n        config.customize(doc, config, dt);\n      }\n\n      var pdf = _pdfMake().createPdf(doc);\n\n      if (config.download === 'open' && !_isDuffSafari()) {\n        pdf.open();\n      } else {\n        pdf.download(info.filename);\n      }\n\n      this.processing(false);\n    },\n    title: '*',\n    filename: '*',\n    extension: '.pdf',\n    exportOptions: {},\n    orientation: 'portrait',\n    pageSize: 'A4',\n    header: true,\n    footer: false,\n    messageTop: '*',\n    messageBottom: '*',\n    customize: null,\n    download: 'download'\n  };\n  return DataTable.Buttons;\n});","/*! Bootstrap 3 styling wrapper for ColReorder\n * ©2018 SpryMedia Ltd - datatables.net/license\n */\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['jquery', 'datatables.net-bs', 'datatables.net-colreorder'], function ($) {\n      return factory($, window, document);\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = function (root, $) {\n      if (!root) {\n        root = window;\n      }\n\n      if (!$ || !$.fn.dataTable) {\n        $ = require('datatables.net-bs')(root, $).$;\n      }\n\n      if (!$.fn.dataTable.ColReorder) {\n        require('datatables.net-colreorder')(root, $);\n      }\n\n      return factory($, root, root.document);\n    };\n  } else {\n    // Browser\n    factory(jQuery, window, document);\n  }\n})(function ($, window, document, undefined) {\n  return $.fn.dataTable;\n});","/*! DataTables 1.10.19\n * ©2008-2018 SpryMedia Ltd - datatables.net/license\n */\n\n/**\n * @summary     DataTables\n * @description Paginate, search and order HTML tables\n * @version     1.10.19\n * @file        jquery.dataTables.js\n * @author      SpryMedia Ltd\n * @contact     www.datatables.net\n * @copyright   Copyright 2008-2018 SpryMedia Ltd.\n *\n * This source file is free software, available under the following license:\n *   MIT license - http://datatables.net/license\n *\n * This source file is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.\n *\n * For details please refer to: http://www.datatables.net\n */\n\n/*jslint evil: true, undef: true, browser: true */\n\n/*globals $,require,jQuery,define,_selector_run,_selector_opts,_selector_first,_selector_row_indexes,_ext,_Api,_api_register,_api_registerPlural,_re_new_lines,_re_html,_re_formatted_numeric,_re_escape_regex,_empty,_intVal,_numToDecimal,_isNumber,_isHtml,_htmlNumeric,_pluck,_pluck_order,_range,_stripHtml,_unique,_fnBuildAjax,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnAjaxDataSrc,_fnAddColumn,_fnColumnOptions,_fnAdjustColumnSizing,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnVisbleColumns,_fnGetColumns,_fnColumnTypes,_fnApplyColumnDefs,_fnHungarianMap,_fnCamelToHungarian,_fnLanguageCompat,_fnBrowserDetect,_fnAddData,_fnAddTr,_fnNodeToDataIndex,_fnNodeToColumnIndex,_fnGetCellData,_fnSetCellData,_fnSplitObjNotation,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnGetDataMaster,_fnClearTable,_fnDeleteIndex,_fnInvalidate,_fnGetRowElements,_fnCreateTr,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAddOptionsHtml,_fnDetectHeader,_fnGetUniqueThs,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnFilterCreateSearch,_fnEscapeRegex,_fnFilterData,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnInfoMacros,_fnInitialise,_fnInitComplete,_fnLengthChange,_fnFeatureHtmlLength,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnFeatureHtmlTable,_fnScrollDraw,_fnApplyToChildren,_fnCalculateColumnWidths,_fnThrottle,_fnConvertToWidth,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnSortFlatten,_fnSort,_fnSortAria,_fnSortListener,_fnSortAttachListener,_fnSortingClasses,_fnSortData,_fnSaveState,_fnLoadState,_fnSettingsFromNode,_fnLog,_fnMap,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnLengthOverflow,_fnRenderer,_fnDataSource,_fnRowAttributes*/\n(function (factory) {\n  \"use strict\";\n\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['jquery'], function ($) {\n      return factory($, window, document);\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = function (root, $) {\n      if (!root) {\n        // CommonJS environments without a window global must pass a\n        // root. This will give an error otherwise\n        root = window;\n      }\n\n      if (!$) {\n        $ = typeof window !== 'undefined' ? // jQuery's factory checks for a global window\n        require('jquery') : require('jquery')(root);\n      }\n\n      return factory($, root, root.document);\n    };\n  } else {\n    // Browser\n    factory(jQuery, window, document);\n  }\n})(function ($, window, document, undefined) {\n  \"use strict\";\n  /**\n   * DataTables is a plug-in for the jQuery Javascript library. It is a highly\n   * flexible tool, based upon the foundations of progressive enhancement,\n   * which will add advanced interaction controls to any HTML table. For a\n   * full list of features please refer to\n   * [DataTables.net](href=\"http://datatables.net).\n   *\n   * Note that the `DataTable` object is not a global variable but is aliased\n   * to `jQuery.fn.DataTable` and `jQuery.fn.dataTable` through which it may\n   * be  accessed.\n   *\n   *  @class\n   *  @param {object} [init={}] Configuration object for DataTables. Options\n   *    are defined by {@link DataTable.defaults}\n   *  @requires jQuery 1.7+\n   *\n   *  @example\n   *    // Basic initialisation\n   *    $(document).ready( function {\n   *      $('#example').dataTable();\n   *    } );\n   *\n   *  @example\n   *    // Initialisation with configuration options - in this case, disable\n   *    // pagination and sorting.\n   *    $(document).ready( function {\n   *      $('#example').dataTable( {\n   *        \"paginate\": false,\n   *        \"sort\": false\n   *      } );\n   *    } );\n   */\n\n  var DataTable = function DataTable(options) {\n    /**\n     * Perform a jQuery selector action on the table's TR elements (from the tbody) and\n     * return the resulting jQuery object.\n     *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on\n     *  @param {object} [oOpts] Optional parameters for modifying the rows to be included\n     *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter\n     *    criterion (\"applied\") or all TR elements (i.e. no filter).\n     *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.\n     *    Can be either 'current', whereby the current sorting of the table is used, or\n     *    'original' whereby the original order the data was read into the table is used.\n     *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page\n     *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\n     *    'current' and filter is 'applied', regardless of what they might be given as.\n     *  @returns {object} jQuery object, filtered by the given selector.\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *\n     *      // Highlight every second row\n     *      oTable.$('tr:odd').css('backgroundColor', 'blue');\n     *    } );\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *\n     *      // Filter to rows with 'Webkit' in them, add a background colour and then\n     *      // remove the filter, thus highlighting the 'Webkit' rows only.\n     *      oTable.fnFilter('Webkit');\n     *      oTable.$('tr', {\"search\": \"applied\"}).css('backgroundColor', 'blue');\n     *      oTable.fnFilter('');\n     *    } );\n     */\n    this.$ = function (sSelector, oOpts) {\n      return this.api(true).$(sSelector, oOpts);\n    };\n    /**\n     * Almost identical to $ in operation, but in this case returns the data for the matched\n     * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes\n     * rather than any descendants, so the data can be obtained for the row/cell. If matching\n     * rows are found, the data returned is the original data array/object that was used to\n     * create the row (or a generated array if from a DOM source).\n     *\n     * This method is often useful in-combination with $ where both functions are given the\n     * same parameters and the array indexes will match identically.\n     *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on\n     *  @param {object} [oOpts] Optional parameters for modifying the rows to be included\n     *  @param {string} [oOpts.filter=none] Select elements that meet the current filter\n     *    criterion (\"applied\") or all elements (i.e. no filter).\n     *  @param {string} [oOpts.order=current] Order of the data in the processed array.\n     *    Can be either 'current', whereby the current sorting of the table is used, or\n     *    'original' whereby the original order the data was read into the table is used.\n     *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page\n     *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\n     *    'current' and filter is 'applied', regardless of what they might be given as.\n     *  @returns {array} Data for the matched elements. If any elements, as a result of the\n     *    selector, were not TR, TD or TH elements in the DataTable, they will have a null\n     *    entry in the array.\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *\n     *      // Get the data from the first row in the table\n     *      var data = oTable._('tr:first');\n     *\n     *      // Do something useful with the data\n     *      alert( \"First cell is: \"+data[0] );\n     *    } );\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *\n     *      // Filter to 'Webkit' and get all data for\n     *      oTable.fnFilter('Webkit');\n     *      var data = oTable._('tr', {\"search\": \"applied\"});\n     *\n     *      // Do something with the data\n     *      alert( data.length+\" rows matched the search\" );\n     *    } );\n     */\n\n\n    this._ = function (sSelector, oOpts) {\n      return this.api(true).rows(sSelector, oOpts).data();\n    };\n    /**\n     * Create a DataTables Api instance, with the currently selected tables for\n     * the Api's context.\n     * @param {boolean} [traditional=false] Set the API instance's context to be\n     *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was\n     *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),\n     *   or if all tables captured in the jQuery object should be used.\n     * @return {DataTables.Api}\n     */\n\n\n    this.api = function (traditional) {\n      return traditional ? new _Api2(_fnSettingsFromNode(this[_ext.iApiIndex])) : new _Api2(this);\n    };\n    /**\n     * Add a single new row or multiple rows of data to the table. Please note\n     * that this is suitable for client-side processing only - if you are using\n     * server-side processing (i.e. \"bServerSide\": true), then to add data, you\n     * must add it to the data source, i.e. the server-side, through an Ajax call.\n     *  @param {array|object} data The data to be added to the table. This can be:\n     *    <ul>\n     *      <li>1D array of data - add a single row with the data provided</li>\n     *      <li>2D array of arrays - add multiple rows in a single call</li>\n     *      <li>object - data object when using <i>mData</i></li>\n     *      <li>array of objects - multiple data objects when using <i>mData</i></li>\n     *    </ul>\n     *  @param {bool} [redraw=true] redraw the table or not\n     *  @returns {array} An array of integers, representing the list of indexes in\n     *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to\n     *    the table.\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    // Global var for counter\n     *    var giCount = 2;\n     *\n     *    $(document).ready(function() {\n     *      $('#example').dataTable();\n     *    } );\n     *\n     *    function fnClickAddRow() {\n     *      $('#example').dataTable().fnAddData( [\n     *        giCount+\".1\",\n     *        giCount+\".2\",\n     *        giCount+\".3\",\n     *        giCount+\".4\" ]\n     *      );\n     *\n     *      giCount++;\n     *    }\n     */\n\n\n    this.fnAddData = function (data, redraw) {\n      var api = this.api(true);\n      /* Check if we want to add multiple rows or not */\n\n      var rows = $.isArray(data) && ($.isArray(data[0]) || $.isPlainObject(data[0])) ? api.rows.add(data) : api.row.add(data);\n\n      if (redraw === undefined || redraw) {\n        api.draw();\n      }\n\n      return rows.flatten().toArray();\n    };\n    /**\n     * This function will make DataTables recalculate the column sizes, based on the data\n     * contained in the table and the sizes applied to the columns (in the DOM, CSS or\n     * through the sWidth parameter). This can be useful when the width of the table's\n     * parent element changes (for example a window resize).\n     *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable( {\n     *        \"sScrollY\": \"200px\",\n     *        \"bPaginate\": false\n     *      } );\n     *\n     *      $(window).on('resize', function () {\n     *        oTable.fnAdjustColumnSizing();\n     *      } );\n     *    } );\n     */\n\n\n    this.fnAdjustColumnSizing = function (bRedraw) {\n      var api = this.api(true).columns.adjust();\n      var settings = api.settings()[0];\n      var scroll = settings.oScroll;\n\n      if (bRedraw === undefined || bRedraw) {\n        api.draw(false);\n      } else if (scroll.sX !== \"\" || scroll.sY !== \"\") {\n        /* If not redrawing, but scrolling, we want to apply the new column sizes anyway */\n        _fnScrollDraw(settings);\n      }\n    };\n    /**\n     * Quickly and simply clear a table\n     *  @param {bool} [bRedraw=true] redraw the table or not\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *\n     *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)\n     *      oTable.fnClearTable();\n     *    } );\n     */\n\n\n    this.fnClearTable = function (bRedraw) {\n      var api = this.api(true).clear();\n\n      if (bRedraw === undefined || bRedraw) {\n        api.draw();\n      }\n    };\n    /**\n     * The exact opposite of 'opening' a row, this function will close any rows which\n     * are currently 'open'.\n     *  @param {node} nTr the table row to 'close'\n     *  @returns {int} 0 on success, or 1 if failed (can't find the row)\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable;\n     *\n     *      // 'open' an information row when a row is clicked on\n     *      $('#example tbody tr').click( function () {\n     *        if ( oTable.fnIsOpen(this) ) {\n     *          oTable.fnClose( this );\n     *        } else {\n     *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n     *        }\n     *      } );\n     *\n     *      oTable = $('#example').dataTable();\n     *    } );\n     */\n\n\n    this.fnClose = function (nTr) {\n      this.api(true).row(nTr).child.hide();\n    };\n    /**\n     * Remove a row for the table\n     *  @param {mixed} target The index of the row from aoData to be deleted, or\n     *    the TR element you want to delete\n     *  @param {function|null} [callBack] Callback function\n     *  @param {bool} [redraw=true] Redraw the table or not\n     *  @returns {array} The row that was deleted\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *\n     *      // Immediately remove the first row\n     *      oTable.fnDeleteRow( 0 );\n     *    } );\n     */\n\n\n    this.fnDeleteRow = function (target, callback, redraw) {\n      var api = this.api(true);\n      var rows = api.rows(target);\n      var settings = rows.settings()[0];\n      var data = settings.aoData[rows[0][0]];\n      rows.remove();\n\n      if (callback) {\n        callback.call(this, settings, data);\n      }\n\n      if (redraw === undefined || redraw) {\n        api.draw();\n      }\n\n      return data;\n    };\n    /**\n     * Restore the table to it's original state in the DOM by removing all of DataTables\n     * enhancements, alterations to the DOM structure of the table and event listeners.\n     *  @param {boolean} [remove=false] Completely remove the table from the DOM\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      // This example is fairly pointless in reality, but shows how fnDestroy can be used\n     *      var oTable = $('#example').dataTable();\n     *      oTable.fnDestroy();\n     *    } );\n     */\n\n\n    this.fnDestroy = function (remove) {\n      this.api(true).destroy(remove);\n    };\n    /**\n     * Redraw the table\n     *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *\n     *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)\n     *      oTable.fnDraw();\n     *    } );\n     */\n\n\n    this.fnDraw = function (complete) {\n      // Note that this isn't an exact match to the old call to _fnDraw - it takes\n      // into account the new data, but can hold position.\n      this.api(true).draw(complete);\n    };\n    /**\n     * Filter the input based on data\n     *  @param {string} sInput String to filter the table on\n     *  @param {int|null} [iColumn] Column to limit filtering to\n     *  @param {bool} [bRegex=false] Treat as regular expression or not\n     *  @param {bool} [bSmart=true] Perform smart filtering or not\n     *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)\n     *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *\n     *      // Sometime later - filter...\n     *      oTable.fnFilter( 'test string' );\n     *    } );\n     */\n\n\n    this.fnFilter = function (sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive) {\n      var api = this.api(true);\n\n      if (iColumn === null || iColumn === undefined) {\n        api.search(sInput, bRegex, bSmart, bCaseInsensitive);\n      } else {\n        api.column(iColumn).search(sInput, bRegex, bSmart, bCaseInsensitive);\n      }\n\n      api.draw();\n    };\n    /**\n     * Get the data for the whole table, an individual row or an individual cell based on the\n     * provided parameters.\n     *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as\n     *    a TR node then the data source for the whole row will be returned. If given as a\n     *    TD/TH cell node then iCol will be automatically calculated and the data for the\n     *    cell returned. If given as an integer, then this is treated as the aoData internal\n     *    data index for the row (see fnGetPosition) and the data for that row used.\n     *  @param {int} [col] Optional column index that you want the data of.\n     *  @returns {array|object|string} If mRow is undefined, then the data for all rows is\n     *    returned. If mRow is defined, just data for that row, and is iCol is\n     *    defined, only data for the designated cell is returned.\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    // Row data\n     *    $(document).ready(function() {\n     *      oTable = $('#example').dataTable();\n     *\n     *      oTable.$('tr').click( function () {\n     *        var data = oTable.fnGetData( this );\n     *        // ... do something with the array / object of data for the row\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Individual cell data\n     *    $(document).ready(function() {\n     *      oTable = $('#example').dataTable();\n     *\n     *      oTable.$('td').click( function () {\n     *        var sData = oTable.fnGetData( this );\n     *        alert( 'The cell clicked on had the value of '+sData );\n     *      } );\n     *    } );\n     */\n\n\n    this.fnGetData = function (src, col) {\n      var api = this.api(true);\n\n      if (src !== undefined) {\n        var type = src.nodeName ? src.nodeName.toLowerCase() : '';\n        return col !== undefined || type == 'td' || type == 'th' ? api.cell(src, col).data() : api.row(src).data() || null;\n      }\n\n      return api.data().toArray();\n    };\n    /**\n     * Get an array of the TR nodes that are used in the table's body. Note that you will\n     * typically want to use the '$' API method in preference to this as it is more\n     * flexible.\n     *  @param {int} [iRow] Optional row index for the TR element you want\n     *  @returns {array|node} If iRow is undefined, returns an array of all TR elements\n     *    in the table's body, or iRow is defined, just the TR element requested.\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *\n     *      // Get the nodes from the table\n     *      var nNodes = oTable.fnGetNodes( );\n     *    } );\n     */\n\n\n    this.fnGetNodes = function (iRow) {\n      var api = this.api(true);\n      return iRow !== undefined ? api.row(iRow).node() : api.rows().nodes().flatten().toArray();\n    };\n    /**\n     * Get the array indexes of a particular cell from it's DOM element\n     * and column index including hidden columns\n     *  @param {node} node this can either be a TR, TD or TH in the table's body\n     *  @returns {int} If nNode is given as a TR, then a single index is returned, or\n     *    if given as a cell, an array of [row index, column index (visible),\n     *    column index (all)] is given.\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      $('#example tbody td').click( function () {\n     *        // Get the position of the current data from the node\n     *        var aPos = oTable.fnGetPosition( this );\n     *\n     *        // Get the data array for this row\n     *        var aData = oTable.fnGetData( aPos[0] );\n     *\n     *        // Update the data array and return the value\n     *        aData[ aPos[1] ] = 'clicked';\n     *        this.innerHTML = 'clicked';\n     *      } );\n     *\n     *      // Init DataTables\n     *      oTable = $('#example').dataTable();\n     *    } );\n     */\n\n\n    this.fnGetPosition = function (node) {\n      var api = this.api(true);\n      var nodeName = node.nodeName.toUpperCase();\n\n      if (nodeName == 'TR') {\n        return api.row(node).index();\n      } else if (nodeName == 'TD' || nodeName == 'TH') {\n        var cell = api.cell(node).index();\n        return [cell.row, cell.columnVisible, cell.column];\n      }\n\n      return null;\n    };\n    /**\n     * Check to see if a row is 'open' or not.\n     *  @param {node} nTr the table row to check\n     *  @returns {boolean} true if the row is currently open, false otherwise\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable;\n     *\n     *      // 'open' an information row when a row is clicked on\n     *      $('#example tbody tr').click( function () {\n     *        if ( oTable.fnIsOpen(this) ) {\n     *          oTable.fnClose( this );\n     *        } else {\n     *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n     *        }\n     *      } );\n     *\n     *      oTable = $('#example').dataTable();\n     *    } );\n     */\n\n\n    this.fnIsOpen = function (nTr) {\n      return this.api(true).row(nTr).child.isShown();\n    };\n    /**\n     * This function will place a new row directly after a row which is currently\n     * on display on the page, with the HTML contents that is passed into the\n     * function. This can be used, for example, to ask for confirmation that a\n     * particular record should be deleted.\n     *  @param {node} nTr The table row to 'open'\n     *  @param {string|node|jQuery} mHtml The HTML to put into the row\n     *  @param {string} sClass Class to give the new TD cell\n     *  @returns {node} The row opened. Note that if the table row passed in as the\n     *    first parameter, is not found in the table, this method will silently\n     *    return.\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable;\n     *\n     *      // 'open' an information row when a row is clicked on\n     *      $('#example tbody tr').click( function () {\n     *        if ( oTable.fnIsOpen(this) ) {\n     *          oTable.fnClose( this );\n     *        } else {\n     *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n     *        }\n     *      } );\n     *\n     *      oTable = $('#example').dataTable();\n     *    } );\n     */\n\n\n    this.fnOpen = function (nTr, mHtml, sClass) {\n      return this.api(true).row(nTr).child(mHtml, sClass).show().child()[0];\n    };\n    /**\n     * Change the pagination - provides the internal logic for pagination in a simple API\n     * function. With this function you can have a DataTables table go to the next,\n     * previous, first or last pages.\n     *  @param {string|int} mAction Paging action to take: \"first\", \"previous\", \"next\" or \"last\"\n     *    or page number to jump to (integer), note that page 0 is the first page.\n     *  @param {bool} [bRedraw=true] Redraw the table or not\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *      oTable.fnPageChange( 'next' );\n     *    } );\n     */\n\n\n    this.fnPageChange = function (mAction, bRedraw) {\n      var api = this.api(true).page(mAction);\n\n      if (bRedraw === undefined || bRedraw) {\n        api.draw(false);\n      }\n    };\n    /**\n     * Show a particular column\n     *  @param {int} iCol The column whose display should be changed\n     *  @param {bool} bShow Show (true) or hide (false) the column\n     *  @param {bool} [bRedraw=true] Redraw the table or not\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *\n     *      // Hide the second column after initialisation\n     *      oTable.fnSetColumnVis( 1, false );\n     *    } );\n     */\n\n\n    this.fnSetColumnVis = function (iCol, bShow, bRedraw) {\n      var api = this.api(true).column(iCol).visible(bShow);\n\n      if (bRedraw === undefined || bRedraw) {\n        api.columns.adjust().draw();\n      }\n    };\n    /**\n     * Get the settings for a particular table for external manipulation\n     *  @returns {object} DataTables settings object. See\n     *    {@link DataTable.models.oSettings}\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *      var oSettings = oTable.fnSettings();\n     *\n     *      // Show an example parameter from the settings\n     *      alert( oSettings._iDisplayStart );\n     *    } );\n     */\n\n\n    this.fnSettings = function () {\n      return _fnSettingsFromNode(this[_ext.iApiIndex]);\n    };\n    /**\n     * Sort the table by a particular column\n     *  @param {int} iCol the data index to sort on. Note that this will not match the\n     *    'display index' if you have hidden data entries\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *\n     *      // Sort immediately with columns 0 and 1\n     *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );\n     *    } );\n     */\n\n\n    this.fnSort = function (aaSort) {\n      this.api(true).order(aaSort).draw();\n    };\n    /**\n     * Attach a sort listener to an element for a given column\n     *  @param {node} nNode the element to attach the sort listener to\n     *  @param {int} iColumn the column that a click on this node will sort on\n     *  @param {function} [fnCallback] callback function when sort is run\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *\n     *      // Sort on column 1, when 'sorter' is clicked on\n     *      oTable.fnSortListener( document.getElementById('sorter'), 1 );\n     *    } );\n     */\n\n\n    this.fnSortListener = function (nNode, iColumn, fnCallback) {\n      this.api(true).order.listener(nNode, iColumn, fnCallback);\n    };\n    /**\n     * Update a table cell or row - this method will accept either a single value to\n     * update the cell with, an array of values with one element for each column or\n     * an object in the same format as the original data source. The function is\n     * self-referencing in order to make the multi column updates easier.\n     *  @param {object|array|string} mData Data to update the cell/row with\n     *  @param {node|int} mRow TR element you want to update or the aoData index\n     *  @param {int} [iColumn] The column to update, give as null or undefined to\n     *    update a whole row.\n     *  @param {bool} [bRedraw=true] Redraw the table or not\n     *  @param {bool} [bAction=true] Perform pre-draw actions or not\n     *  @returns {int} 0 on success, 1 on error\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell\n     *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row\n     *    } );\n     */\n\n\n    this.fnUpdate = function (mData, mRow, iColumn, bRedraw, bAction) {\n      var api = this.api(true);\n\n      if (iColumn === undefined || iColumn === null) {\n        api.row(mRow).data(mData);\n      } else {\n        api.cell(mRow, iColumn).data(mData);\n      }\n\n      if (bAction === undefined || bAction) {\n        api.columns.adjust();\n      }\n\n      if (bRedraw === undefined || bRedraw) {\n        api.draw();\n      }\n\n      return 0;\n    };\n    /**\n     * Provide a common method for plug-ins to check the version of DataTables being used, in order\n     * to ensure compatibility.\n     *  @param {string} sVersion Version string to check for, in the format \"X.Y.Z\". Note that the\n     *    formats \"X\" and \"X.Y\" are also acceptable.\n     *  @returns {boolean} true if this version of DataTables is greater or equal to the required\n     *    version, or false if this version of DataTales is not suitable\n     *  @method\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *      alert( oTable.fnVersionCheck( '1.9.0' ) );\n     *    } );\n     */\n\n\n    this.fnVersionCheck = _ext.fnVersionCheck;\n\n    var _that = this;\n\n    var emptyInit = options === undefined;\n    var len = this.length;\n\n    if (emptyInit) {\n      options = {};\n    }\n\n    this.oApi = this.internal = _ext.internal; // Extend with old style plug-in API methods\n\n    for (var fn in DataTable.ext.internal) {\n      if (fn) {\n        this[fn] = _fnExternApiFunc(fn);\n      }\n    }\n\n    this.each(function () {\n      // For each initialisation we want to give it a clean initialisation\n      // object that can be bashed around\n      var o = {};\n      var oInit = len > 1 ? // optimisation for single table case\n      _fnExtend(o, options, true) : options;\n      /*global oInit,_that,emptyInit*/\n\n      var i = 0,\n          iLen,\n          j,\n          jLen,\n          k,\n          kLen;\n      var sId = this.getAttribute('id');\n      var bInitHandedOff = false;\n      var defaults = DataTable.defaults;\n      var $this = $(this);\n      /* Sanity check */\n\n      if (this.nodeName.toLowerCase() != 'table') {\n        _fnLog(null, 0, 'Non-table node initialisation (' + this.nodeName + ')', 2);\n\n        return;\n      }\n      /* Backwards compatibility for the defaults */\n\n\n      _fnCompatOpts(defaults);\n\n      _fnCompatCols(defaults.column);\n      /* Convert the camel-case defaults to Hungarian */\n\n\n      _fnCamelToHungarian(defaults, defaults, true);\n\n      _fnCamelToHungarian(defaults.column, defaults.column, true);\n      /* Setting up the initialisation object */\n\n\n      _fnCamelToHungarian(defaults, $.extend(oInit, $this.data()));\n      /* Check to see if we are re-initialising a table */\n\n\n      var allSettings = DataTable.settings;\n\n      for (i = 0, iLen = allSettings.length; i < iLen; i++) {\n        var s = allSettings[i];\n        /* Base check on table node */\n\n        if (s.nTable == this || s.nTHead && s.nTHead.parentNode == this || s.nTFoot && s.nTFoot.parentNode == this) {\n          var bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;\n          var bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;\n\n          if (emptyInit || bRetrieve) {\n            return s.oInstance;\n          } else if (bDestroy) {\n            s.oInstance.fnDestroy();\n            break;\n          } else {\n            _fnLog(s, 0, 'Cannot reinitialise DataTable', 3);\n\n            return;\n          }\n        }\n        /* If the element we are initialising has the same ID as a table which was previously\n         * initialised, but the table nodes don't match (from before) then we destroy the old\n         * instance by simply deleting it. This is under the assumption that the table has been\n         * destroyed by other methods. Anyone using non-id selectors will need to do this manually\n         */\n\n\n        if (s.sTableId == this.id) {\n          allSettings.splice(i, 1);\n          break;\n        }\n      }\n      /* Ensure the table has an ID - required for accessibility */\n\n\n      if (sId === null || sId === \"\") {\n        sId = \"DataTables_Table_\" + DataTable.ext._unique++;\n        this.id = sId;\n      }\n      /* Create the settings object for this table and set some of the default parameters */\n\n\n      var oSettings = $.extend(true, {}, DataTable.models.oSettings, {\n        \"sDestroyWidth\": $this[0].style.width,\n        \"sInstance\": sId,\n        \"sTableId\": sId\n      });\n      oSettings.nTable = this;\n      oSettings.oApi = _that.internal;\n      oSettings.oInit = oInit;\n      allSettings.push(oSettings); // Need to add the instance after the instance after the settings object has been added\n      // to the settings array, so we can self reference the table instance if more than one\n\n      oSettings.oInstance = _that.length === 1 ? _that : $this.dataTable(); // Backwards compatibility, before we apply all the defaults\n\n      _fnCompatOpts(oInit);\n\n      _fnLanguageCompat(oInit.oLanguage); // If the length menu is given, but the init display length is not, use the length menu\n\n\n      if (oInit.aLengthMenu && !oInit.iDisplayLength) {\n        oInit.iDisplayLength = $.isArray(oInit.aLengthMenu[0]) ? oInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];\n      } // Apply the defaults and init options to make a single init object will all\n      // options defined from defaults and instance options.\n\n\n      oInit = _fnExtend($.extend(true, {}, defaults), oInit); // Map the initialisation options onto the settings object\n\n      _fnMap(oSettings.oFeatures, oInit, [\"bPaginate\", \"bLengthChange\", \"bFilter\", \"bSort\", \"bSortMulti\", \"bInfo\", \"bProcessing\", \"bAutoWidth\", \"bSortClasses\", \"bServerSide\", \"bDeferRender\"]);\n\n      _fnMap(oSettings, oInit, [\"asStripeClasses\", \"ajax\", \"fnServerData\", \"fnFormatNumber\", \"sServerMethod\", \"aaSorting\", \"aaSortingFixed\", \"aLengthMenu\", \"sPaginationType\", \"sAjaxSource\", \"sAjaxDataProp\", \"iStateDuration\", \"sDom\", \"bSortCellsTop\", \"iTabIndex\", \"fnStateLoadCallback\", \"fnStateSaveCallback\", \"renderer\", \"searchDelay\", \"rowId\", [\"iCookieDuration\", \"iStateDuration\"], // backwards compat\n      [\"oSearch\", \"oPreviousSearch\"], [\"aoSearchCols\", \"aoPreSearchCols\"], [\"iDisplayLength\", \"_iDisplayLength\"]]);\n\n      _fnMap(oSettings.oScroll, oInit, [[\"sScrollX\", \"sX\"], [\"sScrollXInner\", \"sXInner\"], [\"sScrollY\", \"sY\"], [\"bScrollCollapse\", \"bCollapse\"]]);\n\n      _fnMap(oSettings.oLanguage, oInit, \"fnInfoCallback\");\n      /* Callback functions which are array driven */\n\n\n      _fnCallbackReg(oSettings, 'aoDrawCallback', oInit.fnDrawCallback, 'user');\n\n      _fnCallbackReg(oSettings, 'aoServerParams', oInit.fnServerParams, 'user');\n\n      _fnCallbackReg(oSettings, 'aoStateSaveParams', oInit.fnStateSaveParams, 'user');\n\n      _fnCallbackReg(oSettings, 'aoStateLoadParams', oInit.fnStateLoadParams, 'user');\n\n      _fnCallbackReg(oSettings, 'aoStateLoaded', oInit.fnStateLoaded, 'user');\n\n      _fnCallbackReg(oSettings, 'aoRowCallback', oInit.fnRowCallback, 'user');\n\n      _fnCallbackReg(oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow, 'user');\n\n      _fnCallbackReg(oSettings, 'aoHeaderCallback', oInit.fnHeaderCallback, 'user');\n\n      _fnCallbackReg(oSettings, 'aoFooterCallback', oInit.fnFooterCallback, 'user');\n\n      _fnCallbackReg(oSettings, 'aoInitComplete', oInit.fnInitComplete, 'user');\n\n      _fnCallbackReg(oSettings, 'aoPreDrawCallback', oInit.fnPreDrawCallback, 'user');\n\n      oSettings.rowIdFn = _fnGetObjectDataFn(oInit.rowId);\n      /* Browser support detection */\n\n      _fnBrowserDetect(oSettings);\n\n      var oClasses = oSettings.oClasses;\n      $.extend(oClasses, DataTable.ext.classes, oInit.oClasses);\n      $this.addClass(oClasses.sTable);\n\n      if (oSettings.iInitDisplayStart === undefined) {\n        /* Display start point, taking into account the save saving */\n        oSettings.iInitDisplayStart = oInit.iDisplayStart;\n        oSettings._iDisplayStart = oInit.iDisplayStart;\n      }\n\n      if (oInit.iDeferLoading !== null) {\n        oSettings.bDeferLoading = true;\n        var tmp = $.isArray(oInit.iDeferLoading);\n        oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;\n        oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;\n      }\n      /* Language definitions */\n\n\n      var oLanguage = oSettings.oLanguage;\n      $.extend(true, oLanguage, oInit.oLanguage);\n\n      if (oLanguage.sUrl) {\n        /* Get the language definitions from a file - because this Ajax call makes the language\n         * get async to the remainder of this function we use bInitHandedOff to indicate that\n         * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor\n         */\n        $.ajax({\n          dataType: 'json',\n          url: oLanguage.sUrl,\n          success: function success(json) {\n            _fnLanguageCompat(json);\n\n            _fnCamelToHungarian(defaults.oLanguage, json);\n\n            $.extend(true, oLanguage, json);\n\n            _fnInitialise(oSettings);\n          },\n          error: function error() {\n            // Error occurred loading language file, continue on as best we can\n            _fnInitialise(oSettings);\n          }\n        });\n        bInitHandedOff = true;\n      }\n      /*\n       * Stripes\n       */\n\n\n      if (oInit.asStripeClasses === null) {\n        oSettings.asStripeClasses = [oClasses.sStripeOdd, oClasses.sStripeEven];\n      }\n      /* Remove row stripe classes if they are already on the table row */\n\n\n      var stripeClasses = oSettings.asStripeClasses;\n      var rowOne = $this.children('tbody').find('tr').eq(0);\n\n      if ($.inArray(true, $.map(stripeClasses, function (el, i) {\n        return rowOne.hasClass(el);\n      })) !== -1) {\n        $('tbody tr', this).removeClass(stripeClasses.join(' '));\n        oSettings.asDestroyStripes = stripeClasses.slice();\n      }\n      /*\n       * Columns\n       * See if we should load columns automatically or use defined ones\n       */\n\n\n      var anThs = [];\n      var aoColumnsInit;\n      var nThead = this.getElementsByTagName('thead');\n\n      if (nThead.length !== 0) {\n        _fnDetectHeader(oSettings.aoHeader, nThead[0]);\n\n        anThs = _fnGetUniqueThs(oSettings);\n      }\n      /* If not given a column array, generate one with nulls */\n\n\n      if (oInit.aoColumns === null) {\n        aoColumnsInit = [];\n\n        for (i = 0, iLen = anThs.length; i < iLen; i++) {\n          aoColumnsInit.push(null);\n        }\n      } else {\n        aoColumnsInit = oInit.aoColumns;\n      }\n      /* Add the columns */\n\n\n      for (i = 0, iLen = aoColumnsInit.length; i < iLen; i++) {\n        _fnAddColumn(oSettings, anThs ? anThs[i] : null);\n      }\n      /* Apply the column definitions */\n\n\n      _fnApplyColumnDefs(oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {\n        _fnColumnOptions(oSettings, iCol, oDef);\n      });\n      /* HTML5 attribute detection - build an mData object automatically if the\n       * attributes are found\n       */\n\n\n      if (rowOne.length) {\n        var a = function a(cell, name) {\n          return cell.getAttribute('data-' + name) !== null ? name : null;\n        };\n\n        $(rowOne[0]).children('th, td').each(function (i, cell) {\n          var col = oSettings.aoColumns[i];\n\n          if (col.mData === i) {\n            var sort = a(cell, 'sort') || a(cell, 'order');\n            var filter = a(cell, 'filter') || a(cell, 'search');\n\n            if (sort !== null || filter !== null) {\n              col.mData = {\n                _: i + '.display',\n                sort: sort !== null ? i + '.@data-' + sort : undefined,\n                type: sort !== null ? i + '.@data-' + sort : undefined,\n                filter: filter !== null ? i + '.@data-' + filter : undefined\n              };\n\n              _fnColumnOptions(oSettings, i);\n            }\n          }\n        });\n      }\n\n      var features = oSettings.oFeatures;\n\n      var loadedInit = function loadedInit() {\n        /*\n         * Sorting\n         * @todo For modularisation (1.11) this needs to do into a sort start up handler\n         */\n        // If aaSorting is not defined, then we use the first indicator in asSorting\n        // in case that has been altered, so the default sort reflects that option\n        if (oInit.aaSorting === undefined) {\n          var sorting = oSettings.aaSorting;\n\n          for (i = 0, iLen = sorting.length; i < iLen; i++) {\n            sorting[i][1] = oSettings.aoColumns[i].asSorting[0];\n          }\n        }\n        /* Do a first pass on the sorting classes (allows any size changes to be taken into\n         * account, and also will apply sorting disabled classes if disabled\n         */\n\n\n        _fnSortingClasses(oSettings);\n\n        if (features.bSort) {\n          _fnCallbackReg(oSettings, 'aoDrawCallback', function () {\n            if (oSettings.bSorted) {\n              var aSort = _fnSortFlatten(oSettings);\n\n              var sortedColumns = {};\n              $.each(aSort, function (i, val) {\n                sortedColumns[val.src] = val.dir;\n              });\n\n              _fnCallbackFire(oSettings, null, 'order', [oSettings, aSort, sortedColumns]);\n\n              _fnSortAria(oSettings);\n            }\n          });\n        }\n\n        _fnCallbackReg(oSettings, 'aoDrawCallback', function () {\n          if (oSettings.bSorted || _fnDataSource(oSettings) === 'ssp' || features.bDeferRender) {\n            _fnSortingClasses(oSettings);\n          }\n        }, 'sc');\n        /*\n         * Final init\n         * Cache the header, body and footer as required, creating them if needed\n         */\n        // Work around for Webkit bug 83867 - store the caption-side before removing from doc\n\n\n        var captions = $this.children('caption').each(function () {\n          this._captionSide = $(this).css('caption-side');\n        });\n        var thead = $this.children('thead');\n\n        if (thead.length === 0) {\n          thead = $('<thead/>').appendTo($this);\n        }\n\n        oSettings.nTHead = thead[0];\n        var tbody = $this.children('tbody');\n\n        if (tbody.length === 0) {\n          tbody = $('<tbody/>').appendTo($this);\n        }\n\n        oSettings.nTBody = tbody[0];\n        var tfoot = $this.children('tfoot');\n\n        if (tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== \"\" || oSettings.oScroll.sY !== \"\")) {\n          // If we are a scrolling table, and no footer has been given, then we need to create\n          // a tfoot element for the caption element to be appended to\n          tfoot = $('<tfoot/>').appendTo($this);\n        }\n\n        if (tfoot.length === 0 || tfoot.children().length === 0) {\n          $this.addClass(oClasses.sNoFooter);\n        } else if (tfoot.length > 0) {\n          oSettings.nTFoot = tfoot[0];\n\n          _fnDetectHeader(oSettings.aoFooter, oSettings.nTFoot);\n        }\n        /* Check if there is data passing into the constructor */\n\n\n        if (oInit.aaData) {\n          for (i = 0; i < oInit.aaData.length; i++) {\n            _fnAddData(oSettings, oInit.aaData[i]);\n          }\n        } else if (oSettings.bDeferLoading || _fnDataSource(oSettings) == 'dom') {\n          /* Grab the data from the page - only do this when deferred loading or no Ajax\n           * source since there is no point in reading the DOM data if we are then going\n           * to replace it with Ajax data\n           */\n          _fnAddTr(oSettings, $(oSettings.nTBody).children('tr'));\n        }\n        /* Copy the data index array */\n\n\n        oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();\n        /* Initialisation complete - table can be drawn */\n\n        oSettings.bInitialised = true;\n        /* Check if we need to initialise the table (it might not have been handed off to the\n         * language processor)\n         */\n\n        if (bInitHandedOff === false) {\n          _fnInitialise(oSettings);\n        }\n      };\n      /* Must be done after everything which can be overridden by the state saving! */\n\n\n      if (oInit.bStateSave) {\n        features.bStateSave = true;\n\n        _fnCallbackReg(oSettings, 'aoDrawCallback', _fnSaveState, 'state_save');\n\n        _fnLoadState(oSettings, oInit, loadedInit);\n      } else {\n        loadedInit();\n      }\n    });\n    _that = null;\n    return this;\n  };\n  /*\n   * It is useful to have variables which are scoped locally so only the\n   * DataTables functions can access them and they don't leak into global space.\n   * At the same time these functions are often useful over multiple files in the\n   * core and API, so we list, or at least document, all variables which are used\n   * by DataTables as private variables here. This also ensures that there is no\n   * clashing of variable names and that they can easily referenced for reuse.\n   */\n  // Defined else where\n  //  _selector_run\n  //  _selector_opts\n  //  _selector_first\n  //  _selector_row_indexes\n\n\n  var _ext; // DataTable.ext\n\n\n  var _Api2; // DataTable.Api\n\n\n  var _api_register; // DataTable.Api.register\n\n\n  var _api_registerPlural; // DataTable.Api.registerPlural\n\n\n  var _re_dic = {};\n  var _re_new_lines = /[\\r\\n]/g;\n  var _re_html = /<.*?>/g; // This is not strict ISO8601 - Date.parse() is quite lax, although\n  // implementations differ between browsers.\n\n  var _re_date = /^\\d{2,4}[\\.\\/\\-]\\d{1,2}[\\.\\/\\-]\\d{1,2}([T ]{1}\\d{1,2}[:\\.]\\d{2}([\\.:]\\d{2})?)?$/; // Escape regular expression special characters\n\n  var _re_escape_regex = new RegExp('(\\\\' + ['/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\\\', '$', '^', '-'].join('|\\\\') + ')', 'g'); // http://en.wikipedia.org/wiki/Foreign_exchange_market\n  // - \\u20BD - Russian ruble.\n  // - \\u20a9 - South Korean Won\n  // - \\u20BA - Turkish Lira\n  // - \\u20B9 - Indian Rupee\n  // - R - Brazil (R$) and South Africa\n  // - fr - Swiss Franc\n  // - kr - Swedish krona, Norwegian krone and Danish krone\n  // - \\u2009 is thin space and \\u202F is narrow no-break space, both used in many\n  // - Ƀ - Bitcoin\n  // - Ξ - Ethereum\n  //   standards as thousands separators.\n\n\n  var _re_formatted_numeric = /[',$£€¥%\\u2009\\u202F\\u20BD\\u20a9\\u20BArfkɃΞ]/gi;\n\n  var _empty = function _empty(d) {\n    return !d || d === true || d === '-' ? true : false;\n  };\n\n  var _intVal = function _intVal(s) {\n    var integer = parseInt(s, 10);\n    return !isNaN(integer) && isFinite(s) ? integer : null;\n  }; // Convert from a formatted number with characters other than `.` as the\n  // decimal place, to a Javascript number\n\n\n  var _numToDecimal = function _numToDecimal(num, decimalPoint) {\n    // Cache created regular expressions for speed as this function is called often\n    if (!_re_dic[decimalPoint]) {\n      _re_dic[decimalPoint] = new RegExp(_fnEscapeRegex(decimalPoint), 'g');\n    }\n\n    return typeof num === 'string' && decimalPoint !== '.' ? num.replace(/\\./g, '').replace(_re_dic[decimalPoint], '.') : num;\n  };\n\n  var _isNumber = function _isNumber(d, decimalPoint, formatted) {\n    var strType = typeof d === 'string'; // If empty return immediately so there must be a number if it is a\n    // formatted string (this stops the string \"k\", or \"kr\", etc being detected\n    // as a formatted number for currency\n\n    if (_empty(d)) {\n      return true;\n    }\n\n    if (decimalPoint && strType) {\n      d = _numToDecimal(d, decimalPoint);\n    }\n\n    if (formatted && strType) {\n      d = d.replace(_re_formatted_numeric, '');\n    }\n\n    return !isNaN(parseFloat(d)) && isFinite(d);\n  }; // A string without HTML in it can be considered to be HTML still\n\n\n  var _isHtml = function _isHtml(d) {\n    return _empty(d) || typeof d === 'string';\n  };\n\n  var _htmlNumeric = function _htmlNumeric(d, decimalPoint, formatted) {\n    if (_empty(d)) {\n      return true;\n    }\n\n    var html = _isHtml(d);\n\n    return !html ? null : _isNumber(_stripHtml(d), decimalPoint, formatted) ? true : null;\n  };\n\n  var _pluck = function _pluck(a, prop, prop2) {\n    var out = [];\n    var i = 0,\n        ien = a.length; // Could have the test in the loop for slightly smaller code, but speed\n    // is essential here\n\n    if (prop2 !== undefined) {\n      for (; i < ien; i++) {\n        if (a[i] && a[i][prop]) {\n          out.push(a[i][prop][prop2]);\n        }\n      }\n    } else {\n      for (; i < ien; i++) {\n        if (a[i]) {\n          out.push(a[i][prop]);\n        }\n      }\n    }\n\n    return out;\n  }; // Basically the same as _pluck, but rather than looping over `a` we use `order`\n  // as the indexes to pick from `a`\n\n\n  var _pluck_order = function _pluck_order(a, order, prop, prop2) {\n    var out = [];\n    var i = 0,\n        ien = order.length; // Could have the test in the loop for slightly smaller code, but speed\n    // is essential here\n\n    if (prop2 !== undefined) {\n      for (; i < ien; i++) {\n        if (a[order[i]][prop]) {\n          out.push(a[order[i]][prop][prop2]);\n        }\n      }\n    } else {\n      for (; i < ien; i++) {\n        out.push(a[order[i]][prop]);\n      }\n    }\n\n    return out;\n  };\n\n  var _range = function _range(len, start) {\n    var out = [];\n    var end;\n\n    if (start === undefined) {\n      start = 0;\n      end = len;\n    } else {\n      end = start;\n      start = len;\n    }\n\n    for (var i = start; i < end; i++) {\n      out.push(i);\n    }\n\n    return out;\n  };\n\n  var _removeEmpty = function _removeEmpty(a) {\n    var out = [];\n\n    for (var i = 0, ien = a.length; i < ien; i++) {\n      if (a[i]) {\n        // careful - will remove all falsy values!\n        out.push(a[i]);\n      }\n    }\n\n    return out;\n  };\n\n  var _stripHtml = function _stripHtml(d) {\n    return d.replace(_re_html, '');\n  };\n  /**\n   * Determine if all values in the array are unique. This means we can short\n   * cut the _unique method at the cost of a single loop. A sorted array is used\n   * to easily check the values.\n   *\n   * @param  {array} src Source array\n   * @return {boolean} true if all unique, false otherwise\n   * @ignore\n   */\n\n\n  var _areAllUnique = function _areAllUnique(src) {\n    if (src.length < 2) {\n      return true;\n    }\n\n    var sorted = src.slice().sort();\n    var last = sorted[0];\n\n    for (var i = 1, ien = sorted.length; i < ien; i++) {\n      if (sorted[i] === last) {\n        return false;\n      }\n\n      last = sorted[i];\n    }\n\n    return true;\n  };\n  /**\n   * Find the unique elements in a source array.\n   *\n   * @param  {array} src Source array\n   * @return {array} Array of unique items\n   * @ignore\n   */\n\n\n  var _unique = function _unique(src) {\n    if (_areAllUnique(src)) {\n      return src.slice();\n    } // A faster unique method is to use object keys to identify used values,\n    // but this doesn't work with arrays or objects, which we must also\n    // consider. See jsperf.com/compare-array-unique-versions/4 for more\n    // information.\n\n\n    var out = [],\n        val,\n        i,\n        ien = src.length,\n        j,\n        k = 0;\n\n    again: for (i = 0; i < ien; i++) {\n      val = src[i];\n\n      for (j = 0; j < k; j++) {\n        if (out[j] === val) {\n          continue again;\n        }\n      }\n\n      out.push(val);\n      k++;\n    }\n\n    return out;\n  };\n  /**\n   * DataTables utility methods\n   * \n   * This namespace provides helper methods that DataTables uses internally to\n   * create a DataTable, but which are not exclusively used only for DataTables.\n   * These methods can be used by extension authors to save the duplication of\n   * code.\n   *\n   *  @namespace\n   */\n\n\n  DataTable.util = {\n    /**\n     * Throttle the calls to a function. Arguments and context are maintained\n     * for the throttled function.\n     *\n     * @param {function} fn Function to be called\n     * @param {integer} freq Call frequency in mS\n     * @return {function} Wrapped function\n     */\n    throttle: function throttle(fn, freq) {\n      var frequency = freq !== undefined ? freq : 200,\n          last,\n          timer;\n      return function () {\n        var that = this,\n            now = +new Date(),\n            args = arguments;\n\n        if (last && now < last + frequency) {\n          clearTimeout(timer);\n          timer = setTimeout(function () {\n            last = undefined;\n            fn.apply(that, args);\n          }, frequency);\n        } else {\n          last = now;\n          fn.apply(that, args);\n        }\n      };\n    },\n\n    /**\n     * Escape a string such that it can be used in a regular expression\n     *\n     *  @param {string} val string to escape\n     *  @returns {string} escaped string\n     */\n    escapeRegex: function escapeRegex(val) {\n      return val.replace(_re_escape_regex, '\\\\$1');\n    }\n  };\n  /**\n   * Create a mapping object that allows camel case parameters to be looked up\n   * for their Hungarian counterparts. The mapping is stored in a private\n   * parameter called `_hungarianMap` which can be accessed on the source object.\n   *  @param {object} o\n   *  @memberof DataTable#oApi\n   */\n\n  function _fnHungarianMap(o) {\n    var hungarian = 'a aa ai ao as b fn i m o s ',\n        match,\n        newKey,\n        map = {};\n    $.each(o, function (key, val) {\n      match = key.match(/^([^A-Z]+?)([A-Z])/);\n\n      if (match && hungarian.indexOf(match[1] + ' ') !== -1) {\n        newKey = key.replace(match[0], match[2].toLowerCase());\n        map[newKey] = key;\n\n        if (match[1] === 'o') {\n          _fnHungarianMap(o[key]);\n        }\n      }\n    });\n    o._hungarianMap = map;\n  }\n  /**\n   * Convert from camel case parameters to Hungarian, based on a Hungarian map\n   * created by _fnHungarianMap.\n   *  @param {object} src The model object which holds all parameters that can be\n   *    mapped.\n   *  @param {object} user The object to convert from camel case to Hungarian.\n   *  @param {boolean} force When set to `true`, properties which already have a\n   *    Hungarian value in the `user` object will be overwritten. Otherwise they\n   *    won't be.\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnCamelToHungarian(src, user, force) {\n    if (!src._hungarianMap) {\n      _fnHungarianMap(src);\n    }\n\n    var hungarianKey;\n    $.each(user, function (key, val) {\n      hungarianKey = src._hungarianMap[key];\n\n      if (hungarianKey !== undefined && (force || user[hungarianKey] === undefined)) {\n        // For objects, we need to buzz down into the object to copy parameters\n        if (hungarianKey.charAt(0) === 'o') {\n          // Copy the camelCase options over to the hungarian\n          if (!user[hungarianKey]) {\n            user[hungarianKey] = {};\n          }\n\n          $.extend(true, user[hungarianKey], user[key]);\n\n          _fnCamelToHungarian(src[hungarianKey], user[hungarianKey], force);\n        } else {\n          user[hungarianKey] = user[key];\n        }\n      }\n    });\n  }\n  /**\n   * Language compatibility - when certain options are given, and others aren't, we\n   * need to duplicate the values over, in order to provide backwards compatibility\n   * with older language files.\n   *  @param {object} oSettings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnLanguageCompat(lang) {\n    // Note the use of the Hungarian notation for the parameters in this method as\n    // this is called after the mapping of camelCase to Hungarian\n    var defaults = DataTable.defaults.oLanguage; // Default mapping\n\n    var defaultDecimal = defaults.sDecimal;\n\n    if (defaultDecimal) {\n      _addNumericSort(defaultDecimal);\n    }\n\n    if (lang) {\n      var zeroRecords = lang.sZeroRecords; // Backwards compatibility - if there is no sEmptyTable given, then use the same as\n      // sZeroRecords - assuming that is given.\n\n      if (!lang.sEmptyTable && zeroRecords && defaults.sEmptyTable === \"No data available in table\") {\n        _fnMap(lang, lang, 'sZeroRecords', 'sEmptyTable');\n      } // Likewise with loading records\n\n\n      if (!lang.sLoadingRecords && zeroRecords && defaults.sLoadingRecords === \"Loading...\") {\n        _fnMap(lang, lang, 'sZeroRecords', 'sLoadingRecords');\n      } // Old parameter name of the thousands separator mapped onto the new\n\n\n      if (lang.sInfoThousands) {\n        lang.sThousands = lang.sInfoThousands;\n      }\n\n      var decimal = lang.sDecimal;\n\n      if (decimal && defaultDecimal !== decimal) {\n        _addNumericSort(decimal);\n      }\n    }\n  }\n  /**\n   * Map one parameter onto another\n   *  @param {object} o Object to map\n   *  @param {*} knew The new parameter name\n   *  @param {*} old The old parameter name\n   */\n\n\n  var _fnCompatMap = function _fnCompatMap(o, knew, old) {\n    if (o[knew] !== undefined) {\n      o[old] = o[knew];\n    }\n  };\n  /**\n   * Provide backwards compatibility for the main DT options. Note that the new\n   * options are mapped onto the old parameters, so this is an external interface\n   * change only.\n   *  @param {object} init Object to map\n   */\n\n\n  function _fnCompatOpts(init) {\n    _fnCompatMap(init, 'ordering', 'bSort');\n\n    _fnCompatMap(init, 'orderMulti', 'bSortMulti');\n\n    _fnCompatMap(init, 'orderClasses', 'bSortClasses');\n\n    _fnCompatMap(init, 'orderCellsTop', 'bSortCellsTop');\n\n    _fnCompatMap(init, 'order', 'aaSorting');\n\n    _fnCompatMap(init, 'orderFixed', 'aaSortingFixed');\n\n    _fnCompatMap(init, 'paging', 'bPaginate');\n\n    _fnCompatMap(init, 'pagingType', 'sPaginationType');\n\n    _fnCompatMap(init, 'pageLength', 'iDisplayLength');\n\n    _fnCompatMap(init, 'searching', 'bFilter'); // Boolean initialisation of x-scrolling\n\n\n    if (typeof init.sScrollX === 'boolean') {\n      init.sScrollX = init.sScrollX ? '100%' : '';\n    }\n\n    if (typeof init.scrollX === 'boolean') {\n      init.scrollX = init.scrollX ? '100%' : '';\n    } // Column search objects are in an array, so it needs to be converted\n    // element by element\n\n\n    var searchCols = init.aoSearchCols;\n\n    if (searchCols) {\n      for (var i = 0, ien = searchCols.length; i < ien; i++) {\n        if (searchCols[i]) {\n          _fnCamelToHungarian(DataTable.models.oSearch, searchCols[i]);\n        }\n      }\n    }\n  }\n  /**\n   * Provide backwards compatibility for column options. Note that the new options\n   * are mapped onto the old parameters, so this is an external interface change\n   * only.\n   *  @param {object} init Object to map\n   */\n\n\n  function _fnCompatCols(init) {\n    _fnCompatMap(init, 'orderable', 'bSortable');\n\n    _fnCompatMap(init, 'orderData', 'aDataSort');\n\n    _fnCompatMap(init, 'orderSequence', 'asSorting');\n\n    _fnCompatMap(init, 'orderDataType', 'sortDataType'); // orderData can be given as an integer\n\n\n    var dataSort = init.aDataSort;\n\n    if (typeof dataSort === 'number' && !$.isArray(dataSort)) {\n      init.aDataSort = [dataSort];\n    }\n  }\n  /**\n   * Browser feature detection for capabilities, quirks\n   *  @param {object} settings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnBrowserDetect(settings) {\n    // We don't need to do this every time DataTables is constructed, the values\n    // calculated are specific to the browser and OS configuration which we\n    // don't expect to change between initialisations\n    if (!DataTable.__browser) {\n      var browser = {};\n      DataTable.__browser = browser; // Scrolling feature / quirks detection\n\n      var n = $('<div/>').css({\n        position: 'fixed',\n        top: 0,\n        left: $(window).scrollLeft() * -1,\n        // allow for scrolling\n        height: 1,\n        width: 1,\n        overflow: 'hidden'\n      }).append($('<div/>').css({\n        position: 'absolute',\n        top: 1,\n        left: 1,\n        width: 100,\n        overflow: 'scroll'\n      }).append($('<div/>').css({\n        width: '100%',\n        height: 10\n      }))).appendTo('body');\n      var outer = n.children();\n      var inner = outer.children(); // Numbers below, in order, are:\n      // inner.offsetWidth, inner.clientWidth, outer.offsetWidth, outer.clientWidth\n      //\n      // IE6 XP:                           100 100 100  83\n      // IE7 Vista:                        100 100 100  83\n      // IE 8+ Windows:                     83  83 100  83\n      // Evergreen Windows:                 83  83 100  83\n      // Evergreen Mac with scrollbars:     85  85 100  85\n      // Evergreen Mac without scrollbars: 100 100 100 100\n      // Get scrollbar width\n\n      browser.barWidth = outer[0].offsetWidth - outer[0].clientWidth; // IE6/7 will oversize a width 100% element inside a scrolling element, to\n      // include the width of the scrollbar, while other browsers ensure the inner\n      // element is contained without forcing scrolling\n\n      browser.bScrollOversize = inner[0].offsetWidth === 100 && outer[0].clientWidth !== 100; // In rtl text layout, some browsers (most, but not all) will place the\n      // scrollbar on the left, rather than the right.\n\n      browser.bScrollbarLeft = Math.round(inner.offset().left) !== 1; // IE8- don't provide height and width for getBoundingClientRect\n\n      browser.bBounding = n[0].getBoundingClientRect().width ? true : false;\n      n.remove();\n    }\n\n    $.extend(settings.oBrowser, DataTable.__browser);\n    settings.oScroll.iBarWidth = DataTable.__browser.barWidth;\n  }\n  /**\n   * Array.prototype reduce[Right] method, used for browsers which don't support\n   * JS 1.6. Done this way to reduce code size, since we iterate either way\n   *  @param {object} settings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnReduce(that, fn, init, start, end, inc) {\n    var i = start,\n        value,\n        isSet = false;\n\n    if (init !== undefined) {\n      value = init;\n      isSet = true;\n    }\n\n    while (i !== end) {\n      if (!that.hasOwnProperty(i)) {\n        continue;\n      }\n\n      value = isSet ? fn(value, that[i], i, that) : that[i];\n      isSet = true;\n      i += inc;\n    }\n\n    return value;\n  }\n  /**\n   * Add a column to the list used for the table with default values\n   *  @param {object} oSettings dataTables settings object\n   *  @param {node} nTh The th element for this column\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnAddColumn(oSettings, nTh) {\n    // Add column to aoColumns array\n    var oDefaults = DataTable.defaults.column;\n    var iCol = oSettings.aoColumns.length;\n    var oCol = $.extend({}, DataTable.models.oColumn, oDefaults, {\n      \"nTh\": nTh ? nTh : document.createElement('th'),\n      \"sTitle\": oDefaults.sTitle ? oDefaults.sTitle : nTh ? nTh.innerHTML : '',\n      \"aDataSort\": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],\n      \"mData\": oDefaults.mData ? oDefaults.mData : iCol,\n      idx: iCol\n    });\n    oSettings.aoColumns.push(oCol); // Add search object for column specific search. Note that the `searchCols[ iCol ]`\n    // passed into extend can be undefined. This allows the user to give a default\n    // with only some of the parameters defined, and also not give a default\n\n    var searchCols = oSettings.aoPreSearchCols;\n    searchCols[iCol] = $.extend({}, DataTable.models.oSearch, searchCols[iCol]); // Use the default column options function to initialise classes etc\n\n    _fnColumnOptions(oSettings, iCol, $(nTh).data());\n  }\n  /**\n   * Apply options for a column\n   *  @param {object} oSettings dataTables settings object\n   *  @param {int} iCol column index to consider\n   *  @param {object} oOptions object with sType, bVisible and bSearchable etc\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnColumnOptions(oSettings, iCol, oOptions) {\n    var oCol = oSettings.aoColumns[iCol];\n    var oClasses = oSettings.oClasses;\n    var th = $(oCol.nTh); // Try to get width information from the DOM. We can't get it from CSS\n    // as we'd need to parse the CSS stylesheet. `width` option can override\n\n    if (!oCol.sWidthOrig) {\n      // Width attribute\n      oCol.sWidthOrig = th.attr('width') || null; // Style attribute\n\n      var t = (th.attr('style') || '').match(/width:\\s*(\\d+[pxem%]+)/);\n\n      if (t) {\n        oCol.sWidthOrig = t[1];\n      }\n    }\n    /* User specified column options */\n\n\n    if (oOptions !== undefined && oOptions !== null) {\n      // Backwards compatibility\n      _fnCompatCols(oOptions); // Map camel case parameters to their Hungarian counterparts\n\n\n      _fnCamelToHungarian(DataTable.defaults.column, oOptions);\n      /* Backwards compatibility for mDataProp */\n\n\n      if (oOptions.mDataProp !== undefined && !oOptions.mData) {\n        oOptions.mData = oOptions.mDataProp;\n      }\n\n      if (oOptions.sType) {\n        oCol._sManualType = oOptions.sType;\n      } // `class` is a reserved word in Javascript, so we need to provide\n      // the ability to use a valid name for the camel case input\n\n\n      if (oOptions.className && !oOptions.sClass) {\n        oOptions.sClass = oOptions.className;\n      }\n\n      if (oOptions.sClass) {\n        th.addClass(oOptions.sClass);\n      }\n\n      $.extend(oCol, oOptions);\n\n      _fnMap(oCol, oOptions, \"sWidth\", \"sWidthOrig\");\n      /* iDataSort to be applied (backwards compatibility), but aDataSort will take\n       * priority if defined\n       */\n\n\n      if (oOptions.iDataSort !== undefined) {\n        oCol.aDataSort = [oOptions.iDataSort];\n      }\n\n      _fnMap(oCol, oOptions, \"aDataSort\");\n    }\n    /* Cache the data get and set functions for speed */\n\n\n    var mDataSrc = oCol.mData;\n\n    var mData = _fnGetObjectDataFn(mDataSrc);\n\n    var mRender = oCol.mRender ? _fnGetObjectDataFn(oCol.mRender) : null;\n\n    var attrTest = function attrTest(src) {\n      return typeof src === 'string' && src.indexOf('@') !== -1;\n    };\n\n    oCol._bAttrSrc = $.isPlainObject(mDataSrc) && (attrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter));\n    oCol._setter = null;\n\n    oCol.fnGetData = function (rowData, type, meta) {\n      var innerData = mData(rowData, type, undefined, meta);\n      return mRender && type ? mRender(innerData, type, rowData, meta) : innerData;\n    };\n\n    oCol.fnSetData = function (rowData, val, meta) {\n      return _fnSetObjectDataFn(mDataSrc)(rowData, val, meta);\n    }; // Indicate if DataTables should read DOM data as an object or array\n    // Used in _fnGetRowElements\n\n\n    if (typeof mDataSrc !== 'number') {\n      oSettings._rowReadObject = true;\n    }\n    /* Feature sorting overrides column specific when off */\n\n\n    if (!oSettings.oFeatures.bSort) {\n      oCol.bSortable = false;\n      th.addClass(oClasses.sSortableNone); // Have to add class here as order event isn't called\n    }\n    /* Check that the class assignment is correct for sorting */\n\n\n    var bAsc = $.inArray('asc', oCol.asSorting) !== -1;\n    var bDesc = $.inArray('desc', oCol.asSorting) !== -1;\n\n    if (!oCol.bSortable || !bAsc && !bDesc) {\n      oCol.sSortingClass = oClasses.sSortableNone;\n      oCol.sSortingClassJUI = \"\";\n    } else if (bAsc && !bDesc) {\n      oCol.sSortingClass = oClasses.sSortableAsc;\n      oCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;\n    } else if (!bAsc && bDesc) {\n      oCol.sSortingClass = oClasses.sSortableDesc;\n      oCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;\n    } else {\n      oCol.sSortingClass = oClasses.sSortable;\n      oCol.sSortingClassJUI = oClasses.sSortJUI;\n    }\n  }\n  /**\n   * Adjust the table column widths for new data. Note: you would probably want to\n   * do a redraw after calling this function!\n   *  @param {object} settings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnAdjustColumnSizing(settings) {\n    /* Not interested in doing column width calculation if auto-width is disabled */\n    if (settings.oFeatures.bAutoWidth !== false) {\n      var columns = settings.aoColumns;\n\n      _fnCalculateColumnWidths(settings);\n\n      for (var i = 0, iLen = columns.length; i < iLen; i++) {\n        columns[i].nTh.style.width = columns[i].sWidth;\n      }\n    }\n\n    var scroll = settings.oScroll;\n\n    if (scroll.sY !== '' || scroll.sX !== '') {\n      _fnScrollDraw(settings);\n    }\n\n    _fnCallbackFire(settings, null, 'column-sizing', [settings]);\n  }\n  /**\n   * Covert the index of a visible column to the index in the data array (take account\n   * of hidden columns)\n   *  @param {object} oSettings dataTables settings object\n   *  @param {int} iMatch Visible column index to lookup\n   *  @returns {int} i the data index\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnVisibleToColumnIndex(oSettings, iMatch) {\n    var aiVis = _fnGetColumns(oSettings, 'bVisible');\n\n    return typeof aiVis[iMatch] === 'number' ? aiVis[iMatch] : null;\n  }\n  /**\n   * Covert the index of an index in the data array and convert it to the visible\n   *   column index (take account of hidden columns)\n   *  @param {int} iMatch Column index to lookup\n   *  @param {object} oSettings dataTables settings object\n   *  @returns {int} i the data index\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnColumnIndexToVisible(oSettings, iMatch) {\n    var aiVis = _fnGetColumns(oSettings, 'bVisible');\n\n    var iPos = $.inArray(iMatch, aiVis);\n    return iPos !== -1 ? iPos : null;\n  }\n  /**\n   * Get the number of visible columns\n   *  @param {object} oSettings dataTables settings object\n   *  @returns {int} i the number of visible columns\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnVisbleColumns(oSettings) {\n    var vis = 0; // No reduce in IE8, use a loop for now\n\n    $.each(oSettings.aoColumns, function (i, col) {\n      if (col.bVisible && $(col.nTh).css('display') !== 'none') {\n        vis++;\n      }\n    });\n    return vis;\n  }\n  /**\n   * Get an array of column indexes that match a given property\n   *  @param {object} oSettings dataTables settings object\n   *  @param {string} sParam Parameter in aoColumns to look for - typically\n   *    bVisible or bSearchable\n   *  @returns {array} Array of indexes with matched properties\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnGetColumns(oSettings, sParam) {\n    var a = [];\n    $.map(oSettings.aoColumns, function (val, i) {\n      if (val[sParam]) {\n        a.push(i);\n      }\n    });\n    return a;\n  }\n  /**\n   * Calculate the 'type' of a column\n   *  @param {object} settings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnColumnTypes(settings) {\n    var columns = settings.aoColumns;\n    var data = settings.aoData;\n    var types = DataTable.ext.type.detect;\n    var i, ien, j, jen, k, ken;\n    var col, cell, detectedType, cache; // For each column, spin over the \n\n    for (i = 0, ien = columns.length; i < ien; i++) {\n      col = columns[i];\n      cache = [];\n\n      if (!col.sType && col._sManualType) {\n        col.sType = col._sManualType;\n      } else if (!col.sType) {\n        for (j = 0, jen = types.length; j < jen; j++) {\n          for (k = 0, ken = data.length; k < ken; k++) {\n            // Use a cache array so we only need to get the type data\n            // from the formatter once (when using multiple detectors)\n            if (cache[k] === undefined) {\n              cache[k] = _fnGetCellData(settings, k, i, 'type');\n            }\n\n            detectedType = types[j](cache[k], settings); // If null, then this type can't apply to this column, so\n            // rather than testing all cells, break out. There is an\n            // exception for the last type which is `html`. We need to\n            // scan all rows since it is possible to mix string and HTML\n            // types\n\n            if (!detectedType && j !== types.length - 1) {\n              break;\n            } // Only a single match is needed for html type since it is\n            // bottom of the pile and very similar to string\n\n\n            if (detectedType === 'html') {\n              break;\n            }\n          } // Type is valid for all data points in the column - use this\n          // type\n\n\n          if (detectedType) {\n            col.sType = detectedType;\n            break;\n          }\n        } // Fall back - if no type was detected, always use string\n\n\n        if (!col.sType) {\n          col.sType = 'string';\n        }\n      }\n    }\n  }\n  /**\n   * Take the column definitions and static columns arrays and calculate how\n   * they relate to column indexes. The callback function will then apply the\n   * definition found for a column to a suitable configuration object.\n   *  @param {object} oSettings dataTables settings object\n   *  @param {array} aoColDefs The aoColumnDefs array that is to be applied\n   *  @param {array} aoCols The aoColumns array that defines columns individually\n   *  @param {function} fn Callback function - takes two parameters, the calculated\n   *    column index and the definition for that column.\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnApplyColumnDefs(oSettings, aoColDefs, aoCols, fn) {\n    var i, iLen, j, jLen, k, kLen, def;\n    var columns = oSettings.aoColumns; // Column definitions with aTargets\n\n    if (aoColDefs) {\n      /* Loop over the definitions array - loop in reverse so first instance has priority */\n      for (i = aoColDefs.length - 1; i >= 0; i--) {\n        def = aoColDefs[i];\n        /* Each definition can target multiple columns, as it is an array */\n\n        var aTargets = def.targets !== undefined ? def.targets : def.aTargets;\n\n        if (!$.isArray(aTargets)) {\n          aTargets = [aTargets];\n        }\n\n        for (j = 0, jLen = aTargets.length; j < jLen; j++) {\n          if (typeof aTargets[j] === 'number' && aTargets[j] >= 0) {\n            /* Add columns that we don't yet know about */\n            while (columns.length <= aTargets[j]) {\n              _fnAddColumn(oSettings);\n            }\n            /* Integer, basic index */\n\n\n            fn(aTargets[j], def);\n          } else if (typeof aTargets[j] === 'number' && aTargets[j] < 0) {\n            /* Negative integer, right to left column counting */\n            fn(columns.length + aTargets[j], def);\n          } else if (typeof aTargets[j] === 'string') {\n            /* Class name matching on TH element */\n            for (k = 0, kLen = columns.length; k < kLen; k++) {\n              if (aTargets[j] == \"_all\" || $(columns[k].nTh).hasClass(aTargets[j])) {\n                fn(k, def);\n              }\n            }\n          }\n        }\n      }\n    } // Statically defined columns array\n\n\n    if (aoCols) {\n      for (i = 0, iLen = aoCols.length; i < iLen; i++) {\n        fn(i, aoCols[i]);\n      }\n    }\n  }\n  /**\n   * Add a data array to the table, creating DOM node etc. This is the parallel to\n   * _fnGatherData, but for adding rows from a Javascript source, rather than a\n   * DOM source.\n   *  @param {object} oSettings dataTables settings object\n   *  @param {array} aData data array to be added\n   *  @param {node} [nTr] TR element to add to the table - optional. If not given,\n   *    DataTables will create a row automatically\n   *  @param {array} [anTds] Array of TD|TH elements for the row - must be given\n   *    if nTr is.\n   *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnAddData(oSettings, aDataIn, nTr, anTds) {\n    /* Create the object for storing information about this new row */\n    var iRow = oSettings.aoData.length;\n    var oData = $.extend(true, {}, DataTable.models.oRow, {\n      src: nTr ? 'dom' : 'data',\n      idx: iRow\n    });\n    oData._aData = aDataIn;\n    oSettings.aoData.push(oData);\n    /* Create the cells */\n\n    var nTd, sThisType;\n    var columns = oSettings.aoColumns; // Invalidate the column types as the new data needs to be revalidated\n\n    for (var i = 0, iLen = columns.length; i < iLen; i++) {\n      columns[i].sType = null;\n    }\n    /* Add to the display array */\n\n\n    oSettings.aiDisplayMaster.push(iRow);\n    var id = oSettings.rowIdFn(aDataIn);\n\n    if (id !== undefined) {\n      oSettings.aIds[id] = oData;\n    }\n    /* Create the DOM information, or register it if already present */\n\n\n    if (nTr || !oSettings.oFeatures.bDeferRender) {\n      _fnCreateTr(oSettings, iRow, nTr, anTds);\n    }\n\n    return iRow;\n  }\n  /**\n   * Add one or more TR elements to the table. Generally we'd expect to\n   * use this for reading data from a DOM sourced table, but it could be\n   * used for an TR element. Note that if a TR is given, it is used (i.e.\n   * it is not cloned).\n   *  @param {object} settings dataTables settings object\n   *  @param {array|node|jQuery} trs The TR element(s) to add to the table\n   *  @returns {array} Array of indexes for the added rows\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnAddTr(settings, trs) {\n    var row; // Allow an individual node to be passed in\n\n    if (!(trs instanceof $)) {\n      trs = $(trs);\n    }\n\n    return trs.map(function (i, el) {\n      row = _fnGetRowElements(settings, el);\n      return _fnAddData(settings, row.data, el, row.cells);\n    });\n  }\n  /**\n   * Take a TR element and convert it to an index in aoData\n   *  @param {object} oSettings dataTables settings object\n   *  @param {node} n the TR element to find\n   *  @returns {int} index if the node is found, null if not\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnNodeToDataIndex(oSettings, n) {\n    return n._DT_RowIndex !== undefined ? n._DT_RowIndex : null;\n  }\n  /**\n   * Take a TD element and convert it into a column data index (not the visible index)\n   *  @param {object} oSettings dataTables settings object\n   *  @param {int} iRow The row number the TD/TH can be found in\n   *  @param {node} n The TD/TH element to find\n   *  @returns {int} index if the node is found, -1 if not\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnNodeToColumnIndex(oSettings, iRow, n) {\n    return $.inArray(n, oSettings.aoData[iRow].anCells);\n  }\n  /**\n   * Get the data for a given cell from the internal cache, taking into account data mapping\n   *  @param {object} settings dataTables settings object\n   *  @param {int} rowIdx aoData row id\n   *  @param {int} colIdx Column index\n   *  @param {string} type data get type ('display', 'type' 'filter' 'sort')\n   *  @returns {*} Cell data\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnGetCellData(settings, rowIdx, colIdx, type) {\n    var draw = settings.iDraw;\n    var col = settings.aoColumns[colIdx];\n    var rowData = settings.aoData[rowIdx]._aData;\n    var defaultContent = col.sDefaultContent;\n    var cellData = col.fnGetData(rowData, type, {\n      settings: settings,\n      row: rowIdx,\n      col: colIdx\n    });\n\n    if (cellData === undefined) {\n      if (settings.iDrawError != draw && defaultContent === null) {\n        _fnLog(settings, 0, \"Requested unknown parameter \" + (typeof col.mData == 'function' ? '{function}' : \"'\" + col.mData + \"'\") + \" for row \" + rowIdx + \", column \" + colIdx, 4);\n\n        settings.iDrawError = draw;\n      }\n\n      return defaultContent;\n    } // When the data source is null and a specific data type is requested (i.e.\n    // not the original data), we can use default column data\n\n\n    if ((cellData === rowData || cellData === null) && defaultContent !== null && type !== undefined) {\n      cellData = defaultContent;\n    } else if (typeof cellData === 'function') {\n      // If the data source is a function, then we run it and use the return,\n      // executing in the scope of the data object (for instances)\n      return cellData.call(rowData);\n    }\n\n    if (cellData === null && type == 'display') {\n      return '';\n    }\n\n    return cellData;\n  }\n  /**\n   * Set the value for a specific cell, into the internal data cache\n   *  @param {object} settings dataTables settings object\n   *  @param {int} rowIdx aoData row id\n   *  @param {int} colIdx Column index\n   *  @param {*} val Value to set\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnSetCellData(settings, rowIdx, colIdx, val) {\n    var col = settings.aoColumns[colIdx];\n    var rowData = settings.aoData[rowIdx]._aData;\n    col.fnSetData(rowData, val, {\n      settings: settings,\n      row: rowIdx,\n      col: colIdx\n    });\n  } // Private variable that is used to match action syntax in the data property object\n\n\n  var __reArray = /\\[.*?\\]$/;\n  var __reFn = /\\(\\)$/;\n  /**\n   * Split string on periods, taking into account escaped periods\n   * @param  {string} str String to split\n   * @return {array} Split string\n   */\n\n  function _fnSplitObjNotation(str) {\n    return $.map(str.match(/(\\\\.|[^\\.])+/g) || [''], function (s) {\n      return s.replace(/\\\\\\./g, '.');\n    });\n  }\n  /**\n   * Return a function that can be used to get data from a source object, taking\n   * into account the ability to use nested objects as a source\n   *  @param {string|int|function} mSource The data source for the object\n   *  @returns {function} Data get function\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnGetObjectDataFn(mSource) {\n    if ($.isPlainObject(mSource)) {\n      /* Build an object of get functions, and wrap them in a single call */\n      var o = {};\n      $.each(mSource, function (key, val) {\n        if (val) {\n          o[key] = _fnGetObjectDataFn(val);\n        }\n      });\n      return function (data, type, row, meta) {\n        var t = o[type] || o._;\n        return t !== undefined ? t(data, type, row, meta) : data;\n      };\n    } else if (mSource === null) {\n      /* Give an empty string for rendering / sorting etc */\n      return function (data) {\n        // type, row and meta also passed, but not used\n        return data;\n      };\n    } else if (typeof mSource === 'function') {\n      return function (data, type, row, meta) {\n        return mSource(data, type, row, meta);\n      };\n    } else if (typeof mSource === 'string' && (mSource.indexOf('.') !== -1 || mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1)) {\n      /* If there is a . in the source string then the data source is in a\n       * nested object so we loop over the data for each level to get the next\n       * level down. On each loop we test for undefined, and if found immediately\n       * return. This allows entire objects to be missing and sDefaultContent to\n       * be used if defined, rather than throwing an error\n       */\n      var fetchData = function fetchData(data, type, src) {\n        var arrayNotation, funcNotation, out, innerSrc;\n\n        if (src !== \"\") {\n          var a = _fnSplitObjNotation(src);\n\n          for (var i = 0, iLen = a.length; i < iLen; i++) {\n            // Check if we are dealing with special notation\n            arrayNotation = a[i].match(__reArray);\n            funcNotation = a[i].match(__reFn);\n\n            if (arrayNotation) {\n              // Array notation\n              a[i] = a[i].replace(__reArray, ''); // Condition allows simply [] to be passed in\n\n              if (a[i] !== \"\") {\n                data = data[a[i]];\n              }\n\n              out = []; // Get the remainder of the nested object to get\n\n              a.splice(0, i + 1);\n              innerSrc = a.join('.'); // Traverse each entry in the array getting the properties requested\n\n              if ($.isArray(data)) {\n                for (var j = 0, jLen = data.length; j < jLen; j++) {\n                  out.push(fetchData(data[j], type, innerSrc));\n                }\n              } // If a string is given in between the array notation indicators, that\n              // is used to join the strings together, otherwise an array is returned\n\n\n              var join = arrayNotation[0].substring(1, arrayNotation[0].length - 1);\n              data = join === \"\" ? out : out.join(join); // The inner call to fetchData has already traversed through the remainder\n              // of the source requested, so we exit from the loop\n\n              break;\n            } else if (funcNotation) {\n              // Function call\n              a[i] = a[i].replace(__reFn, '');\n              data = data[a[i]]();\n              continue;\n            }\n\n            if (data === null || data[a[i]] === undefined) {\n              return undefined;\n            }\n\n            data = data[a[i]];\n          }\n        }\n\n        return data;\n      };\n\n      return function (data, type) {\n        // row and meta also passed, but not used\n        return fetchData(data, type, mSource);\n      };\n    } else {\n      /* Array or flat object mapping */\n      return function (data, type) {\n        // row and meta also passed, but not used\n        return data[mSource];\n      };\n    }\n  }\n  /**\n   * Return a function that can be used to set data from a source object, taking\n   * into account the ability to use nested objects as a source\n   *  @param {string|int|function} mSource The data source for the object\n   *  @returns {function} Data set function\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnSetObjectDataFn(mSource) {\n    if ($.isPlainObject(mSource)) {\n      /* Unlike get, only the underscore (global) option is used for for\n       * setting data since we don't know the type here. This is why an object\n       * option is not documented for `mData` (which is read/write), but it is\n       * for `mRender` which is read only.\n       */\n      return _fnSetObjectDataFn(mSource._);\n    } else if (mSource === null) {\n      /* Nothing to do when the data source is null */\n      return function () {};\n    } else if (typeof mSource === 'function') {\n      return function (data, val, meta) {\n        mSource(data, 'set', val, meta);\n      };\n    } else if (typeof mSource === 'string' && (mSource.indexOf('.') !== -1 || mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1)) {\n      /* Like the get, we need to get data from a nested object */\n      var setData = function setData(data, val, src) {\n        var a = _fnSplitObjNotation(src),\n            b;\n\n        var aLast = a[a.length - 1];\n        var arrayNotation, funcNotation, o, innerSrc;\n\n        for (var i = 0, iLen = a.length - 1; i < iLen; i++) {\n          // Check if we are dealing with an array notation request\n          arrayNotation = a[i].match(__reArray);\n          funcNotation = a[i].match(__reFn);\n\n          if (arrayNotation) {\n            a[i] = a[i].replace(__reArray, '');\n            data[a[i]] = []; // Get the remainder of the nested object to set so we can recurse\n\n            b = a.slice();\n            b.splice(0, i + 1);\n            innerSrc = b.join('.'); // Traverse each entry in the array setting the properties requested\n\n            if ($.isArray(val)) {\n              for (var j = 0, jLen = val.length; j < jLen; j++) {\n                o = {};\n                setData(o, val[j], innerSrc);\n                data[a[i]].push(o);\n              }\n            } else {\n              // We've been asked to save data to an array, but it\n              // isn't array data to be saved. Best that can be done\n              // is to just save the value.\n              data[a[i]] = val;\n            } // The inner call to setData has already traversed through the remainder\n            // of the source and has set the data, thus we can exit here\n\n\n            return;\n          } else if (funcNotation) {\n            // Function call\n            a[i] = a[i].replace(__reFn, '');\n            data = data[a[i]](val);\n          } // If the nested object doesn't currently exist - since we are\n          // trying to set the value - create it\n\n\n          if (data[a[i]] === null || data[a[i]] === undefined) {\n            data[a[i]] = {};\n          }\n\n          data = data[a[i]];\n        } // Last item in the input - i.e, the actual set\n\n\n        if (aLast.match(__reFn)) {\n          // Function call\n          data = data[aLast.replace(__reFn, '')](val);\n        } else {\n          // If array notation is used, we just want to strip it and use the property name\n          // and assign the value. If it isn't used, then we get the result we want anyway\n          data[aLast.replace(__reArray, '')] = val;\n        }\n      };\n\n      return function (data, val) {\n        // meta is also passed in, but not used\n        return setData(data, val, mSource);\n      };\n    } else {\n      /* Array or flat object mapping */\n      return function (data, val) {\n        // meta is also passed in, but not used\n        data[mSource] = val;\n      };\n    }\n  }\n  /**\n   * Return an array with the full table data\n   *  @param {object} oSettings dataTables settings object\n   *  @returns array {array} aData Master data array\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnGetDataMaster(settings) {\n    return _pluck(settings.aoData, '_aData');\n  }\n  /**\n   * Nuke the table\n   *  @param {object} oSettings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnClearTable(settings) {\n    settings.aoData.length = 0;\n    settings.aiDisplayMaster.length = 0;\n    settings.aiDisplay.length = 0;\n    settings.aIds = {};\n  }\n  /**\n  * Take an array of integers (index array) and remove a target integer (value - not\n  * the key!)\n  *  @param {array} a Index array to target\n  *  @param {int} iTarget value to find\n  *  @memberof DataTable#oApi\n  */\n\n\n  function _fnDeleteIndex(a, iTarget, splice) {\n    var iTargetIndex = -1;\n\n    for (var i = 0, iLen = a.length; i < iLen; i++) {\n      if (a[i] == iTarget) {\n        iTargetIndex = i;\n      } else if (a[i] > iTarget) {\n        a[i]--;\n      }\n    }\n\n    if (iTargetIndex != -1 && splice === undefined) {\n      a.splice(iTargetIndex, 1);\n    }\n  }\n  /**\n   * Mark cached data as invalid such that a re-read of the data will occur when\n   * the cached data is next requested. Also update from the data source object.\n   *\n   * @param {object} settings DataTables settings object\n   * @param {int}    rowIdx   Row index to invalidate\n   * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'\n   *     or 'data'\n   * @param {int}    [colIdx] Column index to invalidate. If undefined the whole\n   *     row will be invalidated\n   * @memberof DataTable#oApi\n   *\n   * @todo For the modularisation of v1.11 this will need to become a callback, so\n   *   the sort and filter methods can subscribe to it. That will required\n   *   initialisation options for sorting, which is why it is not already baked in\n   */\n\n\n  function _fnInvalidate(settings, rowIdx, src, colIdx) {\n    var row = settings.aoData[rowIdx];\n    var i, ien;\n\n    var cellWrite = function cellWrite(cell, col) {\n      // This is very frustrating, but in IE if you just write directly\n      // to innerHTML, and elements that are overwritten are GC'ed,\n      // even if there is a reference to them elsewhere\n      while (cell.childNodes.length) {\n        cell.removeChild(cell.firstChild);\n      }\n\n      cell.innerHTML = _fnGetCellData(settings, rowIdx, col, 'display');\n    }; // Are we reading last data from DOM or the data object?\n\n\n    if (src === 'dom' || (!src || src === 'auto') && row.src === 'dom') {\n      // Read the data from the DOM\n      row._aData = _fnGetRowElements(settings, row, colIdx, colIdx === undefined ? undefined : row._aData).data;\n    } else {\n      // Reading from data object, update the DOM\n      var cells = row.anCells;\n\n      if (cells) {\n        if (colIdx !== undefined) {\n          cellWrite(cells[colIdx], colIdx);\n        } else {\n          for (i = 0, ien = cells.length; i < ien; i++) {\n            cellWrite(cells[i], i);\n          }\n        }\n      }\n    } // For both row and cell invalidation, the cached data for sorting and\n    // filtering is nulled out\n\n\n    row._aSortData = null;\n    row._aFilterData = null; // Invalidate the type for a specific column (if given) or all columns since\n    // the data might have changed\n\n    var cols = settings.aoColumns;\n\n    if (colIdx !== undefined) {\n      cols[colIdx].sType = null;\n    } else {\n      for (i = 0, ien = cols.length; i < ien; i++) {\n        cols[i].sType = null;\n      } // Update DataTables special `DT_*` attributes for the row\n\n\n      _fnRowAttributes(settings, row);\n    }\n  }\n  /**\n   * Build a data source object from an HTML row, reading the contents of the\n   * cells that are in the row.\n   *\n   * @param {object} settings DataTables settings object\n   * @param {node|object} TR element from which to read data or existing row\n   *   object from which to re-read the data from the cells\n   * @param {int} [colIdx] Optional column index\n   * @param {array|object} [d] Data source object. If `colIdx` is given then this\n   *   parameter should also be given and will be used to write the data into.\n   *   Only the column in question will be written\n   * @returns {object} Object with two parameters: `data` the data read, in\n   *   document order, and `cells` and array of nodes (they can be useful to the\n   *   caller, so rather than needing a second traversal to get them, just return\n   *   them from here).\n   * @memberof DataTable#oApi\n   */\n\n\n  function _fnGetRowElements(settings, row, colIdx, d) {\n    var tds = [],\n        td = row.firstChild,\n        name,\n        col,\n        o,\n        i = 0,\n        contents,\n        columns = settings.aoColumns,\n        objectRead = settings._rowReadObject; // Allow the data object to be passed in, or construct\n\n    d = d !== undefined ? d : objectRead ? {} : [];\n\n    var attr = function attr(str, td) {\n      if (typeof str === 'string') {\n        var idx = str.indexOf('@');\n\n        if (idx !== -1) {\n          var attr = str.substring(idx + 1);\n\n          var setter = _fnSetObjectDataFn(str);\n\n          setter(d, td.getAttribute(attr));\n        }\n      }\n    }; // Read data from a cell and store into the data object\n\n\n    var cellProcess = function cellProcess(cell) {\n      if (colIdx === undefined || colIdx === i) {\n        col = columns[i];\n        contents = $.trim(cell.innerHTML);\n\n        if (col && col._bAttrSrc) {\n          var setter = _fnSetObjectDataFn(col.mData._);\n\n          setter(d, contents);\n          attr(col.mData.sort, cell);\n          attr(col.mData.type, cell);\n          attr(col.mData.filter, cell);\n        } else {\n          // Depending on the `data` option for the columns the data can\n          // be read to either an object or an array.\n          if (objectRead) {\n            if (!col._setter) {\n              // Cache the setter function\n              col._setter = _fnSetObjectDataFn(col.mData);\n            }\n\n            col._setter(d, contents);\n          } else {\n            d[i] = contents;\n          }\n        }\n      }\n\n      i++;\n    };\n\n    if (td) {\n      // `tr` element was passed in\n      while (td) {\n        name = td.nodeName.toUpperCase();\n\n        if (name == \"TD\" || name == \"TH\") {\n          cellProcess(td);\n          tds.push(td);\n        }\n\n        td = td.nextSibling;\n      }\n    } else {\n      // Existing row object passed in\n      tds = row.anCells;\n\n      for (var j = 0, jen = tds.length; j < jen; j++) {\n        cellProcess(tds[j]);\n      }\n    } // Read the ID from the DOM if present\n\n\n    var rowNode = row.firstChild ? row : row.nTr;\n\n    if (rowNode) {\n      var id = rowNode.getAttribute('id');\n\n      if (id) {\n        _fnSetObjectDataFn(settings.rowId)(d, id);\n      }\n    }\n\n    return {\n      data: d,\n      cells: tds\n    };\n  }\n  /**\n   * Create a new TR element (and it's TD children) for a row\n   *  @param {object} oSettings dataTables settings object\n   *  @param {int} iRow Row to consider\n   *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,\n   *    DataTables will create a row automatically\n   *  @param {array} [anTds] Array of TD|TH elements for the row - must be given\n   *    if nTr is.\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnCreateTr(oSettings, iRow, nTrIn, anTds) {\n    var row = oSettings.aoData[iRow],\n        rowData = row._aData,\n        cells = [],\n        nTr,\n        nTd,\n        oCol,\n        i,\n        iLen;\n\n    if (row.nTr === null) {\n      nTr = nTrIn || document.createElement('tr');\n      row.nTr = nTr;\n      row.anCells = cells;\n      /* Use a private property on the node to allow reserve mapping from the node\n       * to the aoData array for fast look up\n       */\n\n      nTr._DT_RowIndex = iRow;\n      /* Special parameters can be given by the data source to be used on the row */\n\n      _fnRowAttributes(oSettings, row);\n      /* Process each column */\n\n\n      for (i = 0, iLen = oSettings.aoColumns.length; i < iLen; i++) {\n        oCol = oSettings.aoColumns[i];\n        nTd = nTrIn ? anTds[i] : document.createElement(oCol.sCellType);\n        nTd._DT_CellIndex = {\n          row: iRow,\n          column: i\n        };\n        cells.push(nTd); // Need to create the HTML if new, or if a rendering function is defined\n\n        if ((!nTrIn || oCol.mRender || oCol.mData !== i) && (!$.isPlainObject(oCol.mData) || oCol.mData._ !== i + '.display')) {\n          nTd.innerHTML = _fnGetCellData(oSettings, iRow, i, 'display');\n        }\n        /* Add user defined class */\n\n\n        if (oCol.sClass) {\n          nTd.className += ' ' + oCol.sClass;\n        } // Visibility - add or remove as required\n\n\n        if (oCol.bVisible && !nTrIn) {\n          nTr.appendChild(nTd);\n        } else if (!oCol.bVisible && nTrIn) {\n          nTd.parentNode.removeChild(nTd);\n        }\n\n        if (oCol.fnCreatedCell) {\n          oCol.fnCreatedCell.call(oSettings.oInstance, nTd, _fnGetCellData(oSettings, iRow, i), rowData, iRow, i);\n        }\n      }\n\n      _fnCallbackFire(oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow, cells]);\n    } // Remove once webkit bug 131819 and Chromium bug 365619 have been resolved\n    // and deployed\n\n\n    row.nTr.setAttribute('role', 'row');\n  }\n  /**\n   * Add attributes to a row based on the special `DT_*` parameters in a data\n   * source object.\n   *  @param {object} settings DataTables settings object\n   *  @param {object} DataTables row object for the row to be modified\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnRowAttributes(settings, row) {\n    var tr = row.nTr;\n    var data = row._aData;\n\n    if (tr) {\n      var id = settings.rowIdFn(data);\n\n      if (id) {\n        tr.id = id;\n      }\n\n      if (data.DT_RowClass) {\n        // Remove any classes added by DT_RowClass before\n        var a = data.DT_RowClass.split(' ');\n        row.__rowc = row.__rowc ? _unique(row.__rowc.concat(a)) : a;\n        $(tr).removeClass(row.__rowc.join(' ')).addClass(data.DT_RowClass);\n      }\n\n      if (data.DT_RowAttr) {\n        $(tr).attr(data.DT_RowAttr);\n      }\n\n      if (data.DT_RowData) {\n        $(tr).data(data.DT_RowData);\n      }\n    }\n  }\n  /**\n   * Create the HTML header for the table\n   *  @param {object} oSettings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnBuildHead(oSettings) {\n    var i, ien, cell, row, column;\n    var thead = oSettings.nTHead;\n    var tfoot = oSettings.nTFoot;\n    var createHeader = $('th, td', thead).length === 0;\n    var classes = oSettings.oClasses;\n    var columns = oSettings.aoColumns;\n\n    if (createHeader) {\n      row = $('<tr/>').appendTo(thead);\n    }\n\n    for (i = 0, ien = columns.length; i < ien; i++) {\n      column = columns[i];\n      cell = $(column.nTh).addClass(column.sClass);\n\n      if (createHeader) {\n        cell.appendTo(row);\n      } // 1.11 move into sorting\n\n\n      if (oSettings.oFeatures.bSort) {\n        cell.addClass(column.sSortingClass);\n\n        if (column.bSortable !== false) {\n          cell.attr('tabindex', oSettings.iTabIndex).attr('aria-controls', oSettings.sTableId);\n\n          _fnSortAttachListener(oSettings, column.nTh, i);\n        }\n      }\n\n      if (column.sTitle != cell[0].innerHTML) {\n        cell.html(column.sTitle);\n      }\n\n      _fnRenderer(oSettings, 'header')(oSettings, cell, column, classes);\n    }\n\n    if (createHeader) {\n      _fnDetectHeader(oSettings.aoHeader, thead);\n    }\n    /* ARIA role for the rows */\n\n\n    $(thead).find('>tr').attr('role', 'row');\n    /* Deal with the footer - add classes if required */\n\n    $(thead).find('>tr>th, >tr>td').addClass(classes.sHeaderTH);\n    $(tfoot).find('>tr>th, >tr>td').addClass(classes.sFooterTH); // Cache the footer cells. Note that we only take the cells from the first\n    // row in the footer. If there is more than one row the user wants to\n    // interact with, they need to use the table().foot() method. Note also this\n    // allows cells to be used for multiple columns using colspan\n\n    if (tfoot !== null) {\n      var cells = oSettings.aoFooter[0];\n\n      for (i = 0, ien = cells.length; i < ien; i++) {\n        column = columns[i];\n        column.nTf = cells[i].cell;\n\n        if (column.sClass) {\n          $(column.nTf).addClass(column.sClass);\n        }\n      }\n    }\n  }\n  /**\n   * Draw the header (or footer) element based on the column visibility states. The\n   * methodology here is to use the layout array from _fnDetectHeader, modified for\n   * the instantaneous column visibility, to construct the new layout. The grid is\n   * traversed over cell at a time in a rows x columns grid fashion, although each\n   * cell insert can cover multiple elements in the grid - which is tracks using the\n   * aApplied array. Cell inserts in the grid will only occur where there isn't\n   * already a cell in that position.\n   *  @param {object} oSettings dataTables settings object\n   *  @param array {objects} aoSource Layout array from _fnDetectHeader\n   *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnDrawHead(oSettings, aoSource, bIncludeHidden) {\n    var i, iLen, j, jLen, k, kLen, n, nLocalTr;\n    var aoLocal = [];\n    var aApplied = [];\n    var iColumns = oSettings.aoColumns.length;\n    var iRowspan, iColspan;\n\n    if (!aoSource) {\n      return;\n    }\n\n    if (bIncludeHidden === undefined) {\n      bIncludeHidden = false;\n    }\n    /* Make a copy of the master layout array, but without the visible columns in it */\n\n\n    for (i = 0, iLen = aoSource.length; i < iLen; i++) {\n      aoLocal[i] = aoSource[i].slice();\n      aoLocal[i].nTr = aoSource[i].nTr;\n      /* Remove any columns which are currently hidden */\n\n      for (j = iColumns - 1; j >= 0; j--) {\n        if (!oSettings.aoColumns[j].bVisible && !bIncludeHidden) {\n          aoLocal[i].splice(j, 1);\n        }\n      }\n      /* Prep the applied array - it needs an element for each row */\n\n\n      aApplied.push([]);\n    }\n\n    for (i = 0, iLen = aoLocal.length; i < iLen; i++) {\n      nLocalTr = aoLocal[i].nTr;\n      /* All cells are going to be replaced, so empty out the row */\n\n      if (nLocalTr) {\n        while (n = nLocalTr.firstChild) {\n          nLocalTr.removeChild(n);\n        }\n      }\n\n      for (j = 0, jLen = aoLocal[i].length; j < jLen; j++) {\n        iRowspan = 1;\n        iColspan = 1;\n        /* Check to see if there is already a cell (row/colspan) covering our target\n         * insert point. If there is, then there is nothing to do.\n         */\n\n        if (aApplied[i][j] === undefined) {\n          nLocalTr.appendChild(aoLocal[i][j].cell);\n          aApplied[i][j] = 1;\n          /* Expand the cell to cover as many rows as needed */\n\n          while (aoLocal[i + iRowspan] !== undefined && aoLocal[i][j].cell == aoLocal[i + iRowspan][j].cell) {\n            aApplied[i + iRowspan][j] = 1;\n            iRowspan++;\n          }\n          /* Expand the cell to cover as many columns as needed */\n\n\n          while (aoLocal[i][j + iColspan] !== undefined && aoLocal[i][j].cell == aoLocal[i][j + iColspan].cell) {\n            /* Must update the applied array over the rows for the columns */\n            for (k = 0; k < iRowspan; k++) {\n              aApplied[i + k][j + iColspan] = 1;\n            }\n\n            iColspan++;\n          }\n          /* Do the actual expansion in the DOM */\n\n\n          $(aoLocal[i][j].cell).attr('rowspan', iRowspan).attr('colspan', iColspan);\n        }\n      }\n    }\n  }\n  /**\n   * Insert the required TR nodes into the table for display\n   *  @param {object} oSettings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnDraw(oSettings) {\n    /* Provide a pre-callback function which can be used to cancel the draw is false is returned */\n    var aPreDraw = _fnCallbackFire(oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings]);\n\n    if ($.inArray(false, aPreDraw) !== -1) {\n      _fnProcessingDisplay(oSettings, false);\n\n      return;\n    }\n\n    var i, iLen, n;\n    var anRows = [];\n    var iRowCount = 0;\n    var asStripeClasses = oSettings.asStripeClasses;\n    var iStripes = asStripeClasses.length;\n    var iOpenRows = oSettings.aoOpenRows.length;\n    var oLang = oSettings.oLanguage;\n    var iInitDisplayStart = oSettings.iInitDisplayStart;\n    var bServerSide = _fnDataSource(oSettings) == 'ssp';\n    var aiDisplay = oSettings.aiDisplay;\n    oSettings.bDrawing = true;\n    /* Check and see if we have an initial draw position from state saving */\n\n    if (iInitDisplayStart !== undefined && iInitDisplayStart !== -1) {\n      oSettings._iDisplayStart = bServerSide ? iInitDisplayStart : iInitDisplayStart >= oSettings.fnRecordsDisplay() ? 0 : iInitDisplayStart;\n      oSettings.iInitDisplayStart = -1;\n    }\n\n    var iDisplayStart = oSettings._iDisplayStart;\n    var iDisplayEnd = oSettings.fnDisplayEnd();\n    /* Server-side processing draw intercept */\n\n    if (oSettings.bDeferLoading) {\n      oSettings.bDeferLoading = false;\n      oSettings.iDraw++;\n\n      _fnProcessingDisplay(oSettings, false);\n    } else if (!bServerSide) {\n      oSettings.iDraw++;\n    } else if (!oSettings.bDestroying && !_fnAjaxUpdate(oSettings)) {\n      return;\n    }\n\n    if (aiDisplay.length !== 0) {\n      var iStart = bServerSide ? 0 : iDisplayStart;\n      var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;\n\n      for (var j = iStart; j < iEnd; j++) {\n        var iDataIndex = aiDisplay[j];\n        var aoData = oSettings.aoData[iDataIndex];\n\n        if (aoData.nTr === null) {\n          _fnCreateTr(oSettings, iDataIndex);\n        }\n\n        var nRow = aoData.nTr;\n        /* Remove the old striping classes and then add the new one */\n\n        if (iStripes !== 0) {\n          var sStripe = asStripeClasses[iRowCount % iStripes];\n\n          if (aoData._sRowStripe != sStripe) {\n            $(nRow).removeClass(aoData._sRowStripe).addClass(sStripe);\n            aoData._sRowStripe = sStripe;\n          }\n        } // Row callback functions - might want to manipulate the row\n        // iRowCount and j are not currently documented. Are they at all\n        // useful?\n\n\n        _fnCallbackFire(oSettings, 'aoRowCallback', null, [nRow, aoData._aData, iRowCount, j, iDataIndex]);\n\n        anRows.push(nRow);\n        iRowCount++;\n      }\n    } else {\n      /* Table is empty - create a row with an empty message in it */\n      var sZero = oLang.sZeroRecords;\n\n      if (oSettings.iDraw == 1 && _fnDataSource(oSettings) == 'ajax') {\n        sZero = oLang.sLoadingRecords;\n      } else if (oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0) {\n        sZero = oLang.sEmptyTable;\n      }\n\n      anRows[0] = $('<tr/>', {\n        'class': iStripes ? asStripeClasses[0] : ''\n      }).append($('<td />', {\n        'valign': 'top',\n        'colSpan': _fnVisbleColumns(oSettings),\n        'class': oSettings.oClasses.sRowEmpty\n      }).html(sZero))[0];\n    }\n    /* Header and footer callbacks */\n\n\n    _fnCallbackFire(oSettings, 'aoHeaderCallback', 'header', [$(oSettings.nTHead).children('tr')[0], _fnGetDataMaster(oSettings), iDisplayStart, iDisplayEnd, aiDisplay]);\n\n    _fnCallbackFire(oSettings, 'aoFooterCallback', 'footer', [$(oSettings.nTFoot).children('tr')[0], _fnGetDataMaster(oSettings), iDisplayStart, iDisplayEnd, aiDisplay]);\n\n    var body = $(oSettings.nTBody);\n    body.children().detach();\n    body.append($(anRows));\n    /* Call all required callback functions for the end of a draw */\n\n    _fnCallbackFire(oSettings, 'aoDrawCallback', 'draw', [oSettings]);\n    /* Draw is complete, sorting and filtering must be as well */\n\n\n    oSettings.bSorted = false;\n    oSettings.bFiltered = false;\n    oSettings.bDrawing = false;\n  }\n  /**\n   * Redraw the table - taking account of the various features which are enabled\n   *  @param {object} oSettings dataTables settings object\n   *  @param {boolean} [holdPosition] Keep the current paging position. By default\n   *    the paging is reset to the first page\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnReDraw(settings, holdPosition) {\n    var features = settings.oFeatures,\n        sort = features.bSort,\n        filter = features.bFilter;\n\n    if (sort) {\n      _fnSort(settings);\n    }\n\n    if (filter) {\n      _fnFilterComplete(settings, settings.oPreviousSearch);\n    } else {\n      // No filtering, so we want to just use the display master\n      settings.aiDisplay = settings.aiDisplayMaster.slice();\n    }\n\n    if (holdPosition !== true) {\n      settings._iDisplayStart = 0;\n    } // Let any modules know about the draw hold position state (used by\n    // scrolling internally)\n\n\n    settings._drawHold = holdPosition;\n\n    _fnDraw(settings);\n\n    settings._drawHold = false;\n  }\n  /**\n   * Add the options to the page HTML for the table\n   *  @param {object} oSettings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnAddOptionsHtml(oSettings) {\n    var classes = oSettings.oClasses;\n    var table = $(oSettings.nTable);\n    var holding = $('<div/>').insertBefore(table); // Holding element for speed\n\n    var features = oSettings.oFeatures; // All DataTables are wrapped in a div\n\n    var insert = $('<div/>', {\n      id: oSettings.sTableId + '_wrapper',\n      'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' ' + classes.sNoFooter)\n    });\n    oSettings.nHolding = holding[0];\n    oSettings.nTableWrapper = insert[0];\n    oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;\n    /* Loop over the user set positioning and place the elements as needed */\n\n    var aDom = oSettings.sDom.split('');\n    var featureNode, cOption, nNewNode, cNext, sAttr, j;\n\n    for (var i = 0; i < aDom.length; i++) {\n      featureNode = null;\n      cOption = aDom[i];\n\n      if (cOption == '<') {\n        /* New container div */\n        nNewNode = $('<div/>')[0];\n        /* Check to see if we should append an id and/or a class name to the container */\n\n        cNext = aDom[i + 1];\n\n        if (cNext == \"'\" || cNext == '\"') {\n          sAttr = \"\";\n          j = 2;\n\n          while (aDom[i + j] != cNext) {\n            sAttr += aDom[i + j];\n            j++;\n          }\n          /* Replace jQuery UI constants @todo depreciated */\n\n\n          if (sAttr == \"H\") {\n            sAttr = classes.sJUIHeader;\n          } else if (sAttr == \"F\") {\n            sAttr = classes.sJUIFooter;\n          }\n          /* The attribute can be in the format of \"#id.class\", \"#id\" or \"class\" This logic\n           * breaks the string into parts and applies them as needed\n           */\n\n\n          if (sAttr.indexOf('.') != -1) {\n            var aSplit = sAttr.split('.');\n            nNewNode.id = aSplit[0].substr(1, aSplit[0].length - 1);\n            nNewNode.className = aSplit[1];\n          } else if (sAttr.charAt(0) == \"#\") {\n            nNewNode.id = sAttr.substr(1, sAttr.length - 1);\n          } else {\n            nNewNode.className = sAttr;\n          }\n\n          i += j;\n          /* Move along the position array */\n        }\n\n        insert.append(nNewNode);\n        insert = $(nNewNode);\n      } else if (cOption == '>') {\n        /* End container div */\n        insert = insert.parent();\n      } // @todo Move options into their own plugins?\n      else if (cOption == 'l' && features.bPaginate && features.bLengthChange) {\n          /* Length */\n          featureNode = _fnFeatureHtmlLength(oSettings);\n        } else if (cOption == 'f' && features.bFilter) {\n          /* Filter */\n          featureNode = _fnFeatureHtmlFilter(oSettings);\n        } else if (cOption == 'r' && features.bProcessing) {\n          /* pRocessing */\n          featureNode = _fnFeatureHtmlProcessing(oSettings);\n        } else if (cOption == 't') {\n          /* Table */\n          featureNode = _fnFeatureHtmlTable(oSettings);\n        } else if (cOption == 'i' && features.bInfo) {\n          /* Info */\n          featureNode = _fnFeatureHtmlInfo(oSettings);\n        } else if (cOption == 'p' && features.bPaginate) {\n          /* Pagination */\n          featureNode = _fnFeatureHtmlPaginate(oSettings);\n        } else if (DataTable.ext.feature.length !== 0) {\n          /* Plug-in features */\n          var aoFeatures = DataTable.ext.feature;\n\n          for (var k = 0, kLen = aoFeatures.length; k < kLen; k++) {\n            if (cOption == aoFeatures[k].cFeature) {\n              featureNode = aoFeatures[k].fnInit(oSettings);\n              break;\n            }\n          }\n        }\n      /* Add to the 2D features array */\n\n\n      if (featureNode) {\n        var aanFeatures = oSettings.aanFeatures;\n\n        if (!aanFeatures[cOption]) {\n          aanFeatures[cOption] = [];\n        }\n\n        aanFeatures[cOption].push(featureNode);\n        insert.append(featureNode);\n      }\n    }\n    /* Built our DOM structure - replace the holding div with what we want */\n\n\n    holding.replaceWith(insert);\n    oSettings.nHolding = null;\n  }\n  /**\n   * Use the DOM source to create up an array of header cells. The idea here is to\n   * create a layout grid (array) of rows x columns, which contains a reference\n   * to the cell that that point in the grid (regardless of col/rowspan), such that\n   * any column / row could be removed and the new grid constructed\n   *  @param array {object} aLayout Array to store the calculated layout in\n   *  @param {node} nThead The header/footer element for the table\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnDetectHeader(aLayout, nThead) {\n    var nTrs = $(nThead).children('tr');\n    var nTr, nCell;\n    var i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;\n    var bUnique;\n\n    var fnShiftCol = function fnShiftCol(a, i, j) {\n      var k = a[i];\n\n      while (k[j]) {\n        j++;\n      }\n\n      return j;\n    };\n\n    aLayout.splice(0, aLayout.length);\n    /* We know how many rows there are in the layout - so prep it */\n\n    for (i = 0, iLen = nTrs.length; i < iLen; i++) {\n      aLayout.push([]);\n    }\n    /* Calculate a layout array */\n\n\n    for (i = 0, iLen = nTrs.length; i < iLen; i++) {\n      nTr = nTrs[i];\n      iColumn = 0;\n      /* For every cell in the row... */\n\n      nCell = nTr.firstChild;\n\n      while (nCell) {\n        if (nCell.nodeName.toUpperCase() == \"TD\" || nCell.nodeName.toUpperCase() == \"TH\") {\n          /* Get the col and rowspan attributes from the DOM and sanitise them */\n          iColspan = nCell.getAttribute('colspan') * 1;\n          iRowspan = nCell.getAttribute('rowspan') * 1;\n          iColspan = !iColspan || iColspan === 0 || iColspan === 1 ? 1 : iColspan;\n          iRowspan = !iRowspan || iRowspan === 0 || iRowspan === 1 ? 1 : iRowspan;\n          /* There might be colspan cells already in this row, so shift our target\n           * accordingly\n           */\n\n          iColShifted = fnShiftCol(aLayout, i, iColumn);\n          /* Cache calculation for unique columns */\n\n          bUnique = iColspan === 1 ? true : false;\n          /* If there is col / rowspan, copy the information into the layout grid */\n\n          for (l = 0; l < iColspan; l++) {\n            for (k = 0; k < iRowspan; k++) {\n              aLayout[i + k][iColShifted + l] = {\n                \"cell\": nCell,\n                \"unique\": bUnique\n              };\n              aLayout[i + k].nTr = nTr;\n            }\n          }\n        }\n\n        nCell = nCell.nextSibling;\n      }\n    }\n  }\n  /**\n   * Get an array of unique th elements, one for each column\n   *  @param {object} oSettings dataTables settings object\n   *  @param {node} nHeader automatically detect the layout from this node - optional\n   *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional\n   *  @returns array {node} aReturn list of unique th's\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnGetUniqueThs(oSettings, nHeader, aLayout) {\n    var aReturn = [];\n\n    if (!aLayout) {\n      aLayout = oSettings.aoHeader;\n\n      if (nHeader) {\n        aLayout = [];\n\n        _fnDetectHeader(aLayout, nHeader);\n      }\n    }\n\n    for (var i = 0, iLen = aLayout.length; i < iLen; i++) {\n      for (var j = 0, jLen = aLayout[i].length; j < jLen; j++) {\n        if (aLayout[i][j].unique && (!aReturn[j] || !oSettings.bSortCellsTop)) {\n          aReturn[j] = aLayout[i][j].cell;\n        }\n      }\n    }\n\n    return aReturn;\n  }\n  /**\n   * Create an Ajax call based on the table's settings, taking into account that\n   * parameters can have multiple forms, and backwards compatibility.\n   *\n   * @param {object} oSettings dataTables settings object\n   * @param {array} data Data to send to the server, required by\n   *     DataTables - may be augmented by developer callbacks\n   * @param {function} fn Callback function to run when data is obtained\n   */\n\n\n  function _fnBuildAjax(oSettings, data, fn) {\n    // Compatibility with 1.9-, allow fnServerData and event to manipulate\n    _fnCallbackFire(oSettings, 'aoServerParams', 'serverParams', [data]); // Convert to object based for 1.10+ if using the old array scheme which can\n    // come from server-side processing or serverParams\n\n\n    if (data && $.isArray(data)) {\n      var tmp = {};\n      var rbracket = /(.*?)\\[\\]$/;\n      $.each(data, function (key, val) {\n        var match = val.name.match(rbracket);\n\n        if (match) {\n          // Support for arrays\n          var name = match[0];\n\n          if (!tmp[name]) {\n            tmp[name] = [];\n          }\n\n          tmp[name].push(val.value);\n        } else {\n          tmp[val.name] = val.value;\n        }\n      });\n      data = tmp;\n    }\n\n    var ajaxData;\n    var ajax = oSettings.ajax;\n    var instance = oSettings.oInstance;\n\n    var callback = function callback(json) {\n      _fnCallbackFire(oSettings, null, 'xhr', [oSettings, json, oSettings.jqXHR]);\n\n      fn(json);\n    };\n\n    if ($.isPlainObject(ajax) && ajax.data) {\n      ajaxData = ajax.data;\n      var newData = typeof ajaxData === 'function' ? ajaxData(data, oSettings) : // fn can manipulate data or return\n      ajaxData; // an object object or array to merge\n      // If the function returned something, use that alone\n\n      data = typeof ajaxData === 'function' && newData ? newData : $.extend(true, data, newData); // Remove the data property as we've resolved it already and don't want\n      // jQuery to do it again (it is restored at the end of the function)\n\n      delete ajax.data;\n    }\n\n    var baseAjax = {\n      \"data\": data,\n      \"success\": function success(json) {\n        var error = json.error || json.sError;\n\n        if (error) {\n          _fnLog(oSettings, 0, error);\n        }\n\n        oSettings.json = json;\n        callback(json);\n      },\n      \"dataType\": \"json\",\n      \"cache\": false,\n      \"type\": oSettings.sServerMethod,\n      \"error\": function error(xhr, _error, thrown) {\n        var ret = _fnCallbackFire(oSettings, null, 'xhr', [oSettings, null, oSettings.jqXHR]);\n\n        if ($.inArray(true, ret) === -1) {\n          if (_error == \"parsererror\") {\n            _fnLog(oSettings, 0, 'Invalid JSON response', 1);\n          } else if (xhr.readyState === 4) {\n            _fnLog(oSettings, 0, 'Ajax error', 7);\n          }\n        }\n\n        _fnProcessingDisplay(oSettings, false);\n      }\n    }; // Store the data submitted for the API\n\n    oSettings.oAjaxData = data; // Allow plug-ins and external processes to modify the data\n\n    _fnCallbackFire(oSettings, null, 'preXhr', [oSettings, data]);\n\n    if (oSettings.fnServerData) {\n      // DataTables 1.9- compatibility\n      oSettings.fnServerData.call(instance, oSettings.sAjaxSource, $.map(data, function (val, key) {\n        // Need to convert back to 1.9 trad format\n        return {\n          name: key,\n          value: val\n        };\n      }), callback, oSettings);\n    } else if (oSettings.sAjaxSource || typeof ajax === 'string') {\n      // DataTables 1.9- compatibility\n      oSettings.jqXHR = $.ajax($.extend(baseAjax, {\n        url: ajax || oSettings.sAjaxSource\n      }));\n    } else if (typeof ajax === 'function') {\n      // Is a function - let the caller define what needs to be done\n      oSettings.jqXHR = ajax.call(instance, data, callback, oSettings);\n    } else {\n      // Object to extend the base settings\n      oSettings.jqXHR = $.ajax($.extend(baseAjax, ajax)); // Restore for next time around\n\n      ajax.data = ajaxData;\n    }\n  }\n  /**\n   * Update the table using an Ajax call\n   *  @param {object} settings dataTables settings object\n   *  @returns {boolean} Block the table drawing or not\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnAjaxUpdate(settings) {\n    if (settings.bAjaxDataGet) {\n      settings.iDraw++;\n\n      _fnProcessingDisplay(settings, true);\n\n      _fnBuildAjax(settings, _fnAjaxParameters(settings), function (json) {\n        _fnAjaxUpdateDraw(settings, json);\n      });\n\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Build up the parameters in an object needed for a server-side processing\n   * request. Note that this is basically done twice, is different ways - a modern\n   * method which is used by default in DataTables 1.10 which uses objects and\n   * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if\n   * the sAjaxSource option is used in the initialisation, or the legacyAjax\n   * option is set.\n   *  @param {object} oSettings dataTables settings object\n   *  @returns {bool} block the table drawing or not\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnAjaxParameters(settings) {\n    var columns = settings.aoColumns,\n        columnCount = columns.length,\n        features = settings.oFeatures,\n        preSearch = settings.oPreviousSearch,\n        preColSearch = settings.aoPreSearchCols,\n        i,\n        data = [],\n        dataProp,\n        column,\n        columnSearch,\n        sort = _fnSortFlatten(settings),\n        displayStart = settings._iDisplayStart,\n        displayLength = features.bPaginate !== false ? settings._iDisplayLength : -1;\n\n    var param = function param(name, value) {\n      data.push({\n        'name': name,\n        'value': value\n      });\n    }; // DataTables 1.9- compatible method\n\n\n    param('sEcho', settings.iDraw);\n    param('iColumns', columnCount);\n    param('sColumns', _pluck(columns, 'sName').join(','));\n    param('iDisplayStart', displayStart);\n    param('iDisplayLength', displayLength); // DataTables 1.10+ method\n\n    var d = {\n      draw: settings.iDraw,\n      columns: [],\n      order: [],\n      start: displayStart,\n      length: displayLength,\n      search: {\n        value: preSearch.sSearch,\n        regex: preSearch.bRegex\n      }\n    };\n\n    for (i = 0; i < columnCount; i++) {\n      column = columns[i];\n      columnSearch = preColSearch[i];\n      dataProp = typeof column.mData == \"function\" ? 'function' : column.mData;\n      d.columns.push({\n        data: dataProp,\n        name: column.sName,\n        searchable: column.bSearchable,\n        orderable: column.bSortable,\n        search: {\n          value: columnSearch.sSearch,\n          regex: columnSearch.bRegex\n        }\n      });\n      param(\"mDataProp_\" + i, dataProp);\n\n      if (features.bFilter) {\n        param('sSearch_' + i, columnSearch.sSearch);\n        param('bRegex_' + i, columnSearch.bRegex);\n        param('bSearchable_' + i, column.bSearchable);\n      }\n\n      if (features.bSort) {\n        param('bSortable_' + i, column.bSortable);\n      }\n    }\n\n    if (features.bFilter) {\n      param('sSearch', preSearch.sSearch);\n      param('bRegex', preSearch.bRegex);\n    }\n\n    if (features.bSort) {\n      $.each(sort, function (i, val) {\n        d.order.push({\n          column: val.col,\n          dir: val.dir\n        });\n        param('iSortCol_' + i, val.col);\n        param('sSortDir_' + i, val.dir);\n      });\n      param('iSortingCols', sort.length);\n    } // If the legacy.ajax parameter is null, then we automatically decide which\n    // form to use, based on sAjaxSource\n\n\n    var legacy = DataTable.ext.legacy.ajax;\n\n    if (legacy === null) {\n      return settings.sAjaxSource ? data : d;\n    } // Otherwise, if legacy has been specified then we use that to decide on the\n    // form\n\n\n    return legacy ? data : d;\n  }\n  /**\n   * Data the data from the server (nuking the old) and redraw the table\n   *  @param {object} oSettings dataTables settings object\n   *  @param {object} json json data return from the server.\n   *  @param {string} json.sEcho Tracking flag for DataTables to match requests\n   *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering\n   *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering\n   *  @param {array} json.aaData The data to display on this page\n   *  @param {string} [json.sColumns] Column ordering (sName, comma separated)\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnAjaxUpdateDraw(settings, json) {\n    // v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.\n    // Support both\n    var compat = function compat(old, modern) {\n      return json[old] !== undefined ? json[old] : json[modern];\n    };\n\n    var data = _fnAjaxDataSrc(settings, json);\n\n    var draw = compat('sEcho', 'draw');\n    var recordsTotal = compat('iTotalRecords', 'recordsTotal');\n    var recordsFiltered = compat('iTotalDisplayRecords', 'recordsFiltered');\n\n    if (draw) {\n      // Protect against out of sequence returns\n      if (draw * 1 < settings.iDraw) {\n        return;\n      }\n\n      settings.iDraw = draw * 1;\n    }\n\n    _fnClearTable(settings);\n\n    settings._iRecordsTotal = parseInt(recordsTotal, 10);\n    settings._iRecordsDisplay = parseInt(recordsFiltered, 10);\n\n    for (var i = 0, ien = data.length; i < ien; i++) {\n      _fnAddData(settings, data[i]);\n    }\n\n    settings.aiDisplay = settings.aiDisplayMaster.slice();\n    settings.bAjaxDataGet = false;\n\n    _fnDraw(settings);\n\n    if (!settings._bInitComplete) {\n      _fnInitComplete(settings, json);\n    }\n\n    settings.bAjaxDataGet = true;\n\n    _fnProcessingDisplay(settings, false);\n  }\n  /**\n   * Get the data from the JSON data source to use for drawing a table. Using\n   * `_fnGetObjectDataFn` allows the data to be sourced from a property of the\n   * source object, or from a processing function.\n   *  @param {object} oSettings dataTables settings object\n   *  @param  {object} json Data source object / array from the server\n   *  @return {array} Array of data to use\n   */\n\n\n  function _fnAjaxDataSrc(oSettings, json) {\n    var dataSrc = $.isPlainObject(oSettings.ajax) && oSettings.ajax.dataSrc !== undefined ? oSettings.ajax.dataSrc : oSettings.sAjaxDataProp; // Compatibility with 1.9-.\n    // Compatibility with 1.9-. In order to read from aaData, check if the\n    // default has been changed, if not, check for aaData\n\n    if (dataSrc === 'data') {\n      return json.aaData || json[dataSrc];\n    }\n\n    return dataSrc !== \"\" ? _fnGetObjectDataFn(dataSrc)(json) : json;\n  }\n  /**\n   * Generate the node required for filtering text\n   *  @returns {node} Filter control element\n   *  @param {object} oSettings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnFeatureHtmlFilter(settings) {\n    var classes = settings.oClasses;\n    var tableId = settings.sTableId;\n    var language = settings.oLanguage;\n    var previousSearch = settings.oPreviousSearch;\n    var features = settings.aanFeatures;\n    var input = '<input type=\"search\" class=\"' + classes.sFilterInput + '\"/>';\n    var str = language.sSearch;\n    str = str.match(/_INPUT_/) ? str.replace('_INPUT_', input) : str + input;\n    var filter = $('<div/>', {\n      'id': !features.f ? tableId + '_filter' : null,\n      'class': classes.sFilter\n    }).append($('<label/>').append(str));\n\n    var searchFn = function searchFn() {\n      /* Update all other filter input elements for the new display */\n      var n = features.f;\n      var val = !this.value ? \"\" : this.value; // mental IE8 fix :-(\n\n      /* Now do the filter */\n\n      if (val != previousSearch.sSearch) {\n        _fnFilterComplete(settings, {\n          \"sSearch\": val,\n          \"bRegex\": previousSearch.bRegex,\n          \"bSmart\": previousSearch.bSmart,\n          \"bCaseInsensitive\": previousSearch.bCaseInsensitive\n        }); // Need to redraw, without resorting\n\n\n        settings._iDisplayStart = 0;\n\n        _fnDraw(settings);\n      }\n    };\n\n    var searchDelay = settings.searchDelay !== null ? settings.searchDelay : _fnDataSource(settings) === 'ssp' ? 400 : 0;\n    var jqFilter = $('input', filter).val(previousSearch.sSearch).attr('placeholder', language.sSearchPlaceholder).on('keyup.DT search.DT input.DT paste.DT cut.DT', searchDelay ? _fnThrottle(searchFn, searchDelay) : searchFn).on('keypress.DT', function (e) {\n      /* Prevent form submission */\n      if (e.keyCode == 13) {\n        return false;\n      }\n    }).attr('aria-controls', tableId); // Update the input elements whenever the table is filtered\n\n    $(settings.nTable).on('search.dt.DT', function (ev, s) {\n      if (settings === s) {\n        // IE9 throws an 'unknown error' if document.activeElement is used\n        // inside an iframe or frame...\n        try {\n          if (jqFilter[0] !== document.activeElement) {\n            jqFilter.val(previousSearch.sSearch);\n          }\n        } catch (e) {}\n      }\n    });\n    return filter[0];\n  }\n  /**\n   * Filter the table using both the global filter and column based filtering\n   *  @param {object} oSettings dataTables settings object\n   *  @param {object} oSearch search information\n   *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnFilterComplete(oSettings, oInput, iForce) {\n    var oPrevSearch = oSettings.oPreviousSearch;\n    var aoPrevSearch = oSettings.aoPreSearchCols;\n\n    var fnSaveFilter = function fnSaveFilter(oFilter) {\n      /* Save the filtering values */\n      oPrevSearch.sSearch = oFilter.sSearch;\n      oPrevSearch.bRegex = oFilter.bRegex;\n      oPrevSearch.bSmart = oFilter.bSmart;\n      oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;\n    };\n\n    var fnRegex = function fnRegex(o) {\n      // Backwards compatibility with the bEscapeRegex option\n      return o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;\n    }; // Resolve any column types that are unknown due to addition or invalidation\n    // @todo As per sort - can this be moved into an event handler?\n\n\n    _fnColumnTypes(oSettings);\n    /* In server-side processing all filtering is done by the server, so no point hanging around here */\n\n\n    if (_fnDataSource(oSettings) != 'ssp') {\n      /* Global filter */\n      _fnFilter(oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive);\n\n      fnSaveFilter(oInput);\n      /* Now do the individual column filter */\n\n      for (var i = 0; i < aoPrevSearch.length; i++) {\n        _fnFilterColumn(oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]), aoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive);\n      }\n      /* Custom filtering */\n\n\n      _fnFilterCustom(oSettings);\n    } else {\n      fnSaveFilter(oInput);\n    }\n    /* Tell the draw function we have been filtering */\n\n\n    oSettings.bFiltered = true;\n\n    _fnCallbackFire(oSettings, null, 'search', [oSettings]);\n  }\n  /**\n   * Apply custom filtering functions\n   *  @param {object} oSettings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnFilterCustom(settings) {\n    var filters = DataTable.ext.search;\n    var displayRows = settings.aiDisplay;\n    var row, rowIdx;\n\n    for (var i = 0, ien = filters.length; i < ien; i++) {\n      var rows = []; // Loop over each row and see if it should be included\n\n      for (var j = 0, jen = displayRows.length; j < jen; j++) {\n        rowIdx = displayRows[j];\n        row = settings.aoData[rowIdx];\n\n        if (filters[i](settings, row._aFilterData, rowIdx, row._aData, j)) {\n          rows.push(rowIdx);\n        }\n      } // So the array reference doesn't break set the results into the\n      // existing array\n\n\n      displayRows.length = 0;\n      $.merge(displayRows, rows);\n    }\n  }\n  /**\n   * Filter the table on a per-column basis\n   *  @param {object} oSettings dataTables settings object\n   *  @param {string} sInput string to filter on\n   *  @param {int} iColumn column to filter\n   *  @param {bool} bRegex treat search string as a regular expression or not\n   *  @param {bool} bSmart use smart filtering or not\n   *  @param {bool} bCaseInsensitive Do case insenstive matching or not\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnFilterColumn(settings, searchStr, colIdx, regex, smart, caseInsensitive) {\n    if (searchStr === '') {\n      return;\n    }\n\n    var data;\n    var out = [];\n    var display = settings.aiDisplay;\n\n    var rpSearch = _fnFilterCreateSearch(searchStr, regex, smart, caseInsensitive);\n\n    for (var i = 0; i < display.length; i++) {\n      data = settings.aoData[display[i]]._aFilterData[colIdx];\n\n      if (rpSearch.test(data)) {\n        out.push(display[i]);\n      }\n    }\n\n    settings.aiDisplay = out;\n  }\n  /**\n   * Filter the data table based on user input and draw the table\n   *  @param {object} settings dataTables settings object\n   *  @param {string} input string to filter on\n   *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)\n   *  @param {bool} regex treat as a regular expression or not\n   *  @param {bool} smart perform smart filtering or not\n   *  @param {bool} caseInsensitive Do case insenstive matching or not\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnFilter(settings, input, force, regex, smart, caseInsensitive) {\n    var rpSearch = _fnFilterCreateSearch(input, regex, smart, caseInsensitive);\n\n    var prevSearch = settings.oPreviousSearch.sSearch;\n    var displayMaster = settings.aiDisplayMaster;\n    var display, invalidated, i;\n    var filtered = []; // Need to take account of custom filtering functions - always filter\n\n    if (DataTable.ext.search.length !== 0) {\n      force = true;\n    } // Check if any of the rows were invalidated\n\n\n    invalidated = _fnFilterData(settings); // If the input is blank - we just want the full data set\n\n    if (input.length <= 0) {\n      settings.aiDisplay = displayMaster.slice();\n    } else {\n      // New search - start from the master array\n      if (invalidated || force || prevSearch.length > input.length || input.indexOf(prevSearch) !== 0 || settings.bSorted // On resort, the display master needs to be\n      // re-filtered since indexes will have changed\n      ) {\n          settings.aiDisplay = displayMaster.slice();\n        } // Search the display array\n\n\n      display = settings.aiDisplay;\n\n      for (i = 0; i < display.length; i++) {\n        if (rpSearch.test(settings.aoData[display[i]]._sFilterRow)) {\n          filtered.push(display[i]);\n        }\n      }\n\n      settings.aiDisplay = filtered;\n    }\n  }\n  /**\n   * Build a regular expression object suitable for searching a table\n   *  @param {string} sSearch string to search for\n   *  @param {bool} bRegex treat as a regular expression or not\n   *  @param {bool} bSmart perform smart filtering or not\n   *  @param {bool} bCaseInsensitive Do case insensitive matching or not\n   *  @returns {RegExp} constructed object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnFilterCreateSearch(search, regex, smart, caseInsensitive) {\n    search = regex ? search : _fnEscapeRegex(search);\n\n    if (smart) {\n      /* For smart filtering we want to allow the search to work regardless of\n       * word order. We also want double quoted text to be preserved, so word\n       * order is important - a la google. So this is what we want to\n       * generate:\n       * \n       * ^(?=.*?\\bone\\b)(?=.*?\\btwo three\\b)(?=.*?\\bfour\\b).*$\n       */\n      var a = $.map(search.match(/\"[^\"]+\"|[^ ]+/g) || [''], function (word) {\n        if (word.charAt(0) === '\"') {\n          var m = word.match(/^\"(.*)\"$/);\n          word = m ? m[1] : word;\n        }\n\n        return word.replace('\"', '');\n      });\n      search = '^(?=.*?' + a.join(')(?=.*?') + ').*$';\n    }\n\n    return new RegExp(search, caseInsensitive ? 'i' : '');\n  }\n  /**\n   * Escape a string such that it can be used in a regular expression\n   *  @param {string} sVal string to escape\n   *  @returns {string} escaped string\n   *  @memberof DataTable#oApi\n   */\n\n\n  var _fnEscapeRegex = DataTable.util.escapeRegex;\n  var __filter_div = $('<div>')[0];\n\n  var __filter_div_textContent = __filter_div.textContent !== undefined; // Update the filtering data for each row if needed (by invalidation or first run)\n\n\n  function _fnFilterData(settings) {\n    var columns = settings.aoColumns;\n    var column;\n    var i, j, ien, jen, filterData, cellData, row;\n    var fomatters = DataTable.ext.type.search;\n    var wasInvalidated = false;\n\n    for (i = 0, ien = settings.aoData.length; i < ien; i++) {\n      row = settings.aoData[i];\n\n      if (!row._aFilterData) {\n        filterData = [];\n\n        for (j = 0, jen = columns.length; j < jen; j++) {\n          column = columns[j];\n\n          if (column.bSearchable) {\n            cellData = _fnGetCellData(settings, i, j, 'filter');\n\n            if (fomatters[column.sType]) {\n              cellData = fomatters[column.sType](cellData);\n            } // Search in DataTables 1.10 is string based. In 1.11 this\n            // should be altered to also allow strict type checking.\n\n\n            if (cellData === null) {\n              cellData = '';\n            }\n\n            if (typeof cellData !== 'string' && cellData.toString) {\n              cellData = cellData.toString();\n            }\n          } else {\n            cellData = '';\n          } // If it looks like there is an HTML entity in the string,\n          // attempt to decode it so sorting works as expected. Note that\n          // we could use a single line of jQuery to do this, but the DOM\n          // method used here is much faster http://jsperf.com/html-decode\n\n\n          if (cellData.indexOf && cellData.indexOf('&') !== -1) {\n            __filter_div.innerHTML = cellData;\n            cellData = __filter_div_textContent ? __filter_div.textContent : __filter_div.innerText;\n          }\n\n          if (cellData.replace) {\n            cellData = cellData.replace(/[\\r\\n]/g, '');\n          }\n\n          filterData.push(cellData);\n        }\n\n        row._aFilterData = filterData;\n        row._sFilterRow = filterData.join('  ');\n        wasInvalidated = true;\n      }\n    }\n\n    return wasInvalidated;\n  }\n  /**\n   * Convert from the internal Hungarian notation to camelCase for external\n   * interaction\n   *  @param {object} obj Object to convert\n   *  @returns {object} Inverted object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnSearchToCamel(obj) {\n    return {\n      search: obj.sSearch,\n      smart: obj.bSmart,\n      regex: obj.bRegex,\n      caseInsensitive: obj.bCaseInsensitive\n    };\n  }\n  /**\n   * Convert from camelCase notation to the internal Hungarian. We could use the\n   * Hungarian convert function here, but this is cleaner\n   *  @param {object} obj Object to convert\n   *  @returns {object} Inverted object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnSearchToHung(obj) {\n    return {\n      sSearch: obj.search,\n      bSmart: obj.smart,\n      bRegex: obj.regex,\n      bCaseInsensitive: obj.caseInsensitive\n    };\n  }\n  /**\n   * Generate the node required for the info display\n   *  @param {object} oSettings dataTables settings object\n   *  @returns {node} Information element\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnFeatureHtmlInfo(settings) {\n    var tid = settings.sTableId,\n        nodes = settings.aanFeatures.i,\n        n = $('<div/>', {\n      'class': settings.oClasses.sInfo,\n      'id': !nodes ? tid + '_info' : null\n    });\n\n    if (!nodes) {\n      // Update display on each draw\n      settings.aoDrawCallback.push({\n        \"fn\": _fnUpdateInfo,\n        \"sName\": \"information\"\n      });\n      n.attr('role', 'status').attr('aria-live', 'polite'); // Table is described by our info div\n\n      $(settings.nTable).attr('aria-describedby', tid + '_info');\n    }\n\n    return n[0];\n  }\n  /**\n   * Update the information elements in the display\n   *  @param {object} settings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnUpdateInfo(settings) {\n    /* Show information about the table */\n    var nodes = settings.aanFeatures.i;\n\n    if (nodes.length === 0) {\n      return;\n    }\n\n    var lang = settings.oLanguage,\n        start = settings._iDisplayStart + 1,\n        end = settings.fnDisplayEnd(),\n        max = settings.fnRecordsTotal(),\n        total = settings.fnRecordsDisplay(),\n        out = total ? lang.sInfo : lang.sInfoEmpty;\n\n    if (total !== max) {\n      /* Record set after filtering */\n      out += ' ' + lang.sInfoFiltered;\n    } // Convert the macros\n\n\n    out += lang.sInfoPostFix;\n    out = _fnInfoMacros(settings, out);\n    var callback = lang.fnInfoCallback;\n\n    if (callback !== null) {\n      out = callback.call(settings.oInstance, settings, start, end, max, total, out);\n    }\n\n    $(nodes).html(out);\n  }\n\n  function _fnInfoMacros(settings, str) {\n    // When infinite scrolling, we are always starting at 1. _iDisplayStart is used only\n    // internally\n    var formatter = settings.fnFormatNumber,\n        start = settings._iDisplayStart + 1,\n        len = settings._iDisplayLength,\n        vis = settings.fnRecordsDisplay(),\n        all = len === -1;\n    return str.replace(/_START_/g, formatter.call(settings, start)).replace(/_END_/g, formatter.call(settings, settings.fnDisplayEnd())).replace(/_MAX_/g, formatter.call(settings, settings.fnRecordsTotal())).replace(/_TOTAL_/g, formatter.call(settings, vis)).replace(/_PAGE_/g, formatter.call(settings, all ? 1 : Math.ceil(start / len))).replace(/_PAGES_/g, formatter.call(settings, all ? 1 : Math.ceil(vis / len)));\n  }\n  /**\n   * Draw the table for the first time, adding all required features\n   *  @param {object} settings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnInitialise(settings) {\n    var i,\n        iLen,\n        iAjaxStart = settings.iInitDisplayStart;\n    var columns = settings.aoColumns,\n        column;\n    var features = settings.oFeatures;\n    var deferLoading = settings.bDeferLoading; // value modified by the draw\n\n    /* Ensure that the table data is fully initialised */\n\n    if (!settings.bInitialised) {\n      setTimeout(function () {\n        _fnInitialise(settings);\n      }, 200);\n      return;\n    }\n    /* Show the display HTML options */\n\n\n    _fnAddOptionsHtml(settings);\n    /* Build and draw the header / footer for the table */\n\n\n    _fnBuildHead(settings);\n\n    _fnDrawHead(settings, settings.aoHeader);\n\n    _fnDrawHead(settings, settings.aoFooter);\n    /* Okay to show that something is going on now */\n\n\n    _fnProcessingDisplay(settings, true);\n    /* Calculate sizes for columns */\n\n\n    if (features.bAutoWidth) {\n      _fnCalculateColumnWidths(settings);\n    }\n\n    for (i = 0, iLen = columns.length; i < iLen; i++) {\n      column = columns[i];\n\n      if (column.sWidth) {\n        column.nTh.style.width = _fnStringToCss(column.sWidth);\n      }\n    }\n\n    _fnCallbackFire(settings, null, 'preInit', [settings]); // If there is default sorting required - let's do it. The sort function\n    // will do the drawing for us. Otherwise we draw the table regardless of the\n    // Ajax source - this allows the table to look initialised for Ajax sourcing\n    // data (show 'loading' message possibly)\n\n\n    _fnReDraw(settings); // Server-side processing init complete is done by _fnAjaxUpdateDraw\n\n\n    var dataSrc = _fnDataSource(settings);\n\n    if (dataSrc != 'ssp' || deferLoading) {\n      // if there is an ajax source load the data\n      if (dataSrc == 'ajax') {\n        _fnBuildAjax(settings, [], function (json) {\n          var aData = _fnAjaxDataSrc(settings, json); // Got the data - add it to the table\n\n\n          for (i = 0; i < aData.length; i++) {\n            _fnAddData(settings, aData[i]);\n          } // Reset the init display for cookie saving. We've already done\n          // a filter, and therefore cleared it before. So we need to make\n          // it appear 'fresh'\n\n\n          settings.iInitDisplayStart = iAjaxStart;\n\n          _fnReDraw(settings);\n\n          _fnProcessingDisplay(settings, false);\n\n          _fnInitComplete(settings, json);\n        }, settings);\n      } else {\n        _fnProcessingDisplay(settings, false);\n\n        _fnInitComplete(settings);\n      }\n    }\n  }\n  /**\n   * Draw the table for the first time, adding all required features\n   *  @param {object} oSettings dataTables settings object\n   *  @param {object} [json] JSON from the server that completed the table, if using Ajax source\n   *    with client-side processing (optional)\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnInitComplete(settings, json) {\n    settings._bInitComplete = true; // When data was added after the initialisation (data or Ajax) we need to\n    // calculate the column sizing\n\n    if (json || settings.oInit.aaData) {\n      _fnAdjustColumnSizing(settings);\n    }\n\n    _fnCallbackFire(settings, null, 'plugin-init', [settings, json]);\n\n    _fnCallbackFire(settings, 'aoInitComplete', 'init', [settings, json]);\n  }\n\n  function _fnLengthChange(settings, val) {\n    var len = parseInt(val, 10);\n    settings._iDisplayLength = len;\n\n    _fnLengthOverflow(settings); // Fire length change event\n\n\n    _fnCallbackFire(settings, null, 'length', [settings, len]);\n  }\n  /**\n   * Generate the node required for user display length changing\n   *  @param {object} settings dataTables settings object\n   *  @returns {node} Display length feature node\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnFeatureHtmlLength(settings) {\n    var classes = settings.oClasses,\n        tableId = settings.sTableId,\n        menu = settings.aLengthMenu,\n        d2 = $.isArray(menu[0]),\n        lengths = d2 ? menu[0] : menu,\n        language = d2 ? menu[1] : menu;\n    var select = $('<select/>', {\n      'name': tableId + '_length',\n      'aria-controls': tableId,\n      'class': classes.sLengthSelect\n    });\n\n    for (var i = 0, ien = lengths.length; i < ien; i++) {\n      select[0][i] = new Option(typeof language[i] === 'number' ? settings.fnFormatNumber(language[i]) : language[i], lengths[i]);\n    }\n\n    var div = $('<div><label/></div>').addClass(classes.sLength);\n\n    if (!settings.aanFeatures.l) {\n      div[0].id = tableId + '_length';\n    }\n\n    div.children().append(settings.oLanguage.sLengthMenu.replace('_MENU_', select[0].outerHTML)); // Can't use `select` variable as user might provide their own and the\n    // reference is broken by the use of outerHTML\n\n    $('select', div).val(settings._iDisplayLength).on('change.DT', function (e) {\n      _fnLengthChange(settings, $(this).val());\n\n      _fnDraw(settings);\n    }); // Update node value whenever anything changes the table's length\n\n    $(settings.nTable).on('length.dt.DT', function (e, s, len) {\n      if (settings === s) {\n        $('select', div).val(len);\n      }\n    });\n    return div[0];\n  }\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * Note that most of the paging logic is done in\n   * DataTable.ext.pager\n   */\n\n  /**\n   * Generate the node required for default pagination\n   *  @param {object} oSettings dataTables settings object\n   *  @returns {node} Pagination feature node\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnFeatureHtmlPaginate(settings) {\n    var type = settings.sPaginationType,\n        plugin = DataTable.ext.pager[type],\n        modern = typeof plugin === 'function',\n        redraw = function redraw(settings) {\n      _fnDraw(settings);\n    },\n        node = $('<div/>').addClass(settings.oClasses.sPaging + type)[0],\n        features = settings.aanFeatures;\n\n    if (!modern) {\n      plugin.fnInit(settings, node, redraw);\n    }\n    /* Add a draw callback for the pagination on first instance, to update the paging display */\n\n\n    if (!features.p) {\n      node.id = settings.sTableId + '_paginate';\n      settings.aoDrawCallback.push({\n        \"fn\": function fn(settings) {\n          if (modern) {\n            var start = settings._iDisplayStart,\n                len = settings._iDisplayLength,\n                visRecords = settings.fnRecordsDisplay(),\n                all = len === -1,\n                page = all ? 0 : Math.ceil(start / len),\n                pages = all ? 1 : Math.ceil(visRecords / len),\n                buttons = plugin(page, pages),\n                i,\n                ien;\n\n            for (i = 0, ien = features.p.length; i < ien; i++) {\n              _fnRenderer(settings, 'pageButton')(settings, features.p[i], i, buttons, page, pages);\n            }\n          } else {\n            plugin.fnUpdate(settings, redraw);\n          }\n        },\n        \"sName\": \"pagination\"\n      });\n    }\n\n    return node;\n  }\n  /**\n   * Alter the display settings to change the page\n   *  @param {object} settings DataTables settings object\n   *  @param {string|int} action Paging action to take: \"first\", \"previous\",\n   *    \"next\" or \"last\" or page number to jump to (integer)\n   *  @param [bool] redraw Automatically draw the update or not\n   *  @returns {bool} true page has changed, false - no change\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnPageChange(settings, action, redraw) {\n    var start = settings._iDisplayStart,\n        len = settings._iDisplayLength,\n        records = settings.fnRecordsDisplay();\n\n    if (records === 0 || len === -1) {\n      start = 0;\n    } else if (typeof action === \"number\") {\n      start = action * len;\n\n      if (start > records) {\n        start = 0;\n      }\n    } else if (action == \"first\") {\n      start = 0;\n    } else if (action == \"previous\") {\n      start = len >= 0 ? start - len : 0;\n\n      if (start < 0) {\n        start = 0;\n      }\n    } else if (action == \"next\") {\n      if (start + len < records) {\n        start += len;\n      }\n    } else if (action == \"last\") {\n      start = Math.floor((records - 1) / len) * len;\n    } else {\n      _fnLog(settings, 0, \"Unknown paging action: \" + action, 5);\n    }\n\n    var changed = settings._iDisplayStart !== start;\n    settings._iDisplayStart = start;\n\n    if (changed) {\n      _fnCallbackFire(settings, null, 'page', [settings]);\n\n      if (redraw) {\n        _fnDraw(settings);\n      }\n    }\n\n    return changed;\n  }\n  /**\n   * Generate the node required for the processing node\n   *  @param {object} settings dataTables settings object\n   *  @returns {node} Processing element\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnFeatureHtmlProcessing(settings) {\n    return $('<div/>', {\n      'id': !settings.aanFeatures.r ? settings.sTableId + '_processing' : null,\n      'class': settings.oClasses.sProcessing\n    }).html(settings.oLanguage.sProcessing).insertBefore(settings.nTable)[0];\n  }\n  /**\n   * Display or hide the processing indicator\n   *  @param {object} settings dataTables settings object\n   *  @param {bool} show Show the processing indicator (true) or not (false)\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnProcessingDisplay(settings, show) {\n    if (settings.oFeatures.bProcessing) {\n      $(settings.aanFeatures.r).css('display', show ? 'block' : 'none');\n    }\n\n    _fnCallbackFire(settings, null, 'processing', [settings, show]);\n  }\n  /**\n   * Add any control elements for the table - specifically scrolling\n   *  @param {object} settings dataTables settings object\n   *  @returns {node} Node to add to the DOM\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnFeatureHtmlTable(settings) {\n    var table = $(settings.nTable); // Add the ARIA grid role to the table\n\n    table.attr('role', 'grid'); // Scrolling from here on in\n\n    var scroll = settings.oScroll;\n\n    if (scroll.sX === '' && scroll.sY === '') {\n      return settings.nTable;\n    }\n\n    var scrollX = scroll.sX;\n    var scrollY = scroll.sY;\n    var classes = settings.oClasses;\n    var caption = table.children('caption');\n    var captionSide = caption.length ? caption[0]._captionSide : null;\n    var headerClone = $(table[0].cloneNode(false));\n    var footerClone = $(table[0].cloneNode(false));\n    var footer = table.children('tfoot');\n    var _div = '<div/>';\n\n    var size = function size(s) {\n      return !s ? null : _fnStringToCss(s);\n    };\n\n    if (!footer.length) {\n      footer = null;\n    }\n    /*\n     * The HTML structure that we want to generate in this function is:\n     *  div - scroller\n     *    div - scroll head\n     *      div - scroll head inner\n     *        table - scroll head table\n     *          thead - thead\n     *    div - scroll body\n     *      table - table (master table)\n     *        thead - thead clone for sizing\n     *        tbody - tbody\n     *    div - scroll foot\n     *      div - scroll foot inner\n     *        table - scroll foot table\n     *          tfoot - tfoot\n     */\n\n\n    var scroller = $(_div, {\n      'class': classes.sScrollWrapper\n    }).append($(_div, {\n      'class': classes.sScrollHead\n    }).css({\n      overflow: 'hidden',\n      position: 'relative',\n      border: 0,\n      width: scrollX ? size(scrollX) : '100%'\n    }).append($(_div, {\n      'class': classes.sScrollHeadInner\n    }).css({\n      'box-sizing': 'content-box',\n      width: scroll.sXInner || '100%'\n    }).append(headerClone.removeAttr('id').css('margin-left', 0).append(captionSide === 'top' ? caption : null).append(table.children('thead'))))).append($(_div, {\n      'class': classes.sScrollBody\n    }).css({\n      position: 'relative',\n      overflow: 'auto',\n      width: size(scrollX)\n    }).append(table));\n\n    if (footer) {\n      scroller.append($(_div, {\n        'class': classes.sScrollFoot\n      }).css({\n        overflow: 'hidden',\n        border: 0,\n        width: scrollX ? size(scrollX) : '100%'\n      }).append($(_div, {\n        'class': classes.sScrollFootInner\n      }).append(footerClone.removeAttr('id').css('margin-left', 0).append(captionSide === 'bottom' ? caption : null).append(table.children('tfoot')))));\n    }\n\n    var children = scroller.children();\n    var scrollHead = children[0];\n    var scrollBody = children[1];\n    var scrollFoot = footer ? children[2] : null; // When the body is scrolled, then we also want to scroll the headers\n\n    if (scrollX) {\n      $(scrollBody).on('scroll.DT', function (e) {\n        var scrollLeft = this.scrollLeft;\n        scrollHead.scrollLeft = scrollLeft;\n\n        if (footer) {\n          scrollFoot.scrollLeft = scrollLeft;\n        }\n      });\n    }\n\n    $(scrollBody).css(scrollY && scroll.bCollapse ? 'max-height' : 'height', scrollY);\n    settings.nScrollHead = scrollHead;\n    settings.nScrollBody = scrollBody;\n    settings.nScrollFoot = scrollFoot; // On redraw - align columns\n\n    settings.aoDrawCallback.push({\n      \"fn\": _fnScrollDraw,\n      \"sName\": \"scrolling\"\n    });\n    return scroller[0];\n  }\n  /**\n   * Update the header, footer and body tables for resizing - i.e. column\n   * alignment.\n   *\n   * Welcome to the most horrible function DataTables. The process that this\n   * function follows is basically:\n   *   1. Re-create the table inside the scrolling div\n   *   2. Take live measurements from the DOM\n   *   3. Apply the measurements to align the columns\n   *   4. Clean up\n   *\n   *  @param {object} settings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnScrollDraw(settings) {\n    // Given that this is such a monster function, a lot of variables are use\n    // to try and keep the minimised size as small as possible\n    var scroll = settings.oScroll,\n        scrollX = scroll.sX,\n        scrollXInner = scroll.sXInner,\n        scrollY = scroll.sY,\n        barWidth = scroll.iBarWidth,\n        divHeader = $(settings.nScrollHead),\n        divHeaderStyle = divHeader[0].style,\n        divHeaderInner = divHeader.children('div'),\n        divHeaderInnerStyle = divHeaderInner[0].style,\n        divHeaderTable = divHeaderInner.children('table'),\n        divBodyEl = settings.nScrollBody,\n        divBody = $(divBodyEl),\n        divBodyStyle = divBodyEl.style,\n        divFooter = $(settings.nScrollFoot),\n        divFooterInner = divFooter.children('div'),\n        divFooterTable = divFooterInner.children('table'),\n        header = $(settings.nTHead),\n        table = $(settings.nTable),\n        tableEl = table[0],\n        tableStyle = tableEl.style,\n        footer = settings.nTFoot ? $(settings.nTFoot) : null,\n        browser = settings.oBrowser,\n        ie67 = browser.bScrollOversize,\n        dtHeaderCells = _pluck(settings.aoColumns, 'nTh'),\n        headerTrgEls,\n        footerTrgEls,\n        headerSrcEls,\n        footerSrcEls,\n        headerCopy,\n        footerCopy,\n        headerWidths = [],\n        footerWidths = [],\n        headerContent = [],\n        footerContent = [],\n        idx,\n        correction,\n        sanityWidth,\n        zeroOut = function zeroOut(nSizer) {\n      var style = nSizer.style;\n      style.paddingTop = \"0\";\n      style.paddingBottom = \"0\";\n      style.borderTopWidth = \"0\";\n      style.borderBottomWidth = \"0\";\n      style.height = 0;\n    }; // If the scrollbar visibility has changed from the last draw, we need to\n    // adjust the column sizes as the table width will have changed to account\n    // for the scrollbar\n\n\n    var scrollBarVis = divBodyEl.scrollHeight > divBodyEl.clientHeight;\n\n    if (settings.scrollBarVis !== scrollBarVis && settings.scrollBarVis !== undefined) {\n      settings.scrollBarVis = scrollBarVis;\n\n      _fnAdjustColumnSizing(settings);\n\n      return; // adjust column sizing will call this function again\n    } else {\n      settings.scrollBarVis = scrollBarVis;\n    }\n    /*\n     * 1. Re-create the table inside the scrolling div\n     */\n    // Remove the old minimised thead and tfoot elements in the inner table\n\n\n    table.children('thead, tfoot').remove();\n\n    if (footer) {\n      footerCopy = footer.clone().prependTo(table);\n      footerTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized\n\n      footerSrcEls = footerCopy.find('tr');\n    } // Clone the current header and footer elements and then place it into the inner table\n\n\n    headerCopy = header.clone().prependTo(table);\n    headerTrgEls = header.find('tr'); // original header is in its own table\n\n    headerSrcEls = headerCopy.find('tr');\n    headerCopy.find('th, td').removeAttr('tabindex');\n    /*\n     * 2. Take live measurements from the DOM - do not alter the DOM itself!\n     */\n    // Remove old sizing and apply the calculated column widths\n    // Get the unique column headers in the newly created (cloned) header. We want to apply the\n    // calculated sizes to this header\n\n    if (!scrollX) {\n      divBodyStyle.width = '100%';\n      divHeader[0].style.width = '100%';\n    }\n\n    $.each(_fnGetUniqueThs(settings, headerCopy), function (i, el) {\n      idx = _fnVisibleToColumnIndex(settings, i);\n      el.style.width = settings.aoColumns[idx].sWidth;\n    });\n\n    if (footer) {\n      _fnApplyToChildren(function (n) {\n        n.style.width = \"\";\n      }, footerSrcEls);\n    } // Size the table as a whole\n\n\n    sanityWidth = table.outerWidth();\n\n    if (scrollX === \"\") {\n      // No x scrolling\n      tableStyle.width = \"100%\"; // IE7 will make the width of the table when 100% include the scrollbar\n      // - which is shouldn't. When there is a scrollbar we need to take this\n      // into account.\n\n      if (ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight || divBody.css('overflow-y') == \"scroll\")) {\n        tableStyle.width = _fnStringToCss(table.outerWidth() - barWidth);\n      } // Recalculate the sanity width\n\n\n      sanityWidth = table.outerWidth();\n    } else if (scrollXInner !== \"\") {\n      // legacy x scroll inner has been given - use it\n      tableStyle.width = _fnStringToCss(scrollXInner); // Recalculate the sanity width\n\n      sanityWidth = table.outerWidth();\n    } // Hidden header should have zero height, so remove padding and borders. Then\n    // set the width based on the real headers\n    // Apply all styles in one pass\n\n\n    _fnApplyToChildren(zeroOut, headerSrcEls); // Read all widths in next pass\n\n\n    _fnApplyToChildren(function (nSizer) {\n      headerContent.push(nSizer.innerHTML);\n      headerWidths.push(_fnStringToCss($(nSizer).css('width')));\n    }, headerSrcEls); // Apply all widths in final pass\n\n\n    _fnApplyToChildren(function (nToSize, i) {\n      // Only apply widths to the DataTables detected header cells - this\n      // prevents complex headers from having contradictory sizes applied\n      if ($.inArray(nToSize, dtHeaderCells) !== -1) {\n        nToSize.style.width = headerWidths[i];\n      }\n    }, headerTrgEls);\n\n    $(headerSrcEls).height(0);\n    /* Same again with the footer if we have one */\n\n    if (footer) {\n      _fnApplyToChildren(zeroOut, footerSrcEls);\n\n      _fnApplyToChildren(function (nSizer) {\n        footerContent.push(nSizer.innerHTML);\n        footerWidths.push(_fnStringToCss($(nSizer).css('width')));\n      }, footerSrcEls);\n\n      _fnApplyToChildren(function (nToSize, i) {\n        nToSize.style.width = footerWidths[i];\n      }, footerTrgEls);\n\n      $(footerSrcEls).height(0);\n    }\n    /*\n     * 3. Apply the measurements\n     */\n    // \"Hide\" the header and footer that we used for the sizing. We need to keep\n    // the content of the cell so that the width applied to the header and body\n    // both match, but we want to hide it completely. We want to also fix their\n    // width to what they currently are\n\n\n    _fnApplyToChildren(function (nSizer, i) {\n      nSizer.innerHTML = '<div class=\"dataTables_sizing\">' + headerContent[i] + '</div>';\n      nSizer.childNodes[0].style.height = \"0\";\n      nSizer.childNodes[0].style.overflow = \"hidden\";\n      nSizer.style.width = headerWidths[i];\n    }, headerSrcEls);\n\n    if (footer) {\n      _fnApplyToChildren(function (nSizer, i) {\n        nSizer.innerHTML = '<div class=\"dataTables_sizing\">' + footerContent[i] + '</div>';\n        nSizer.childNodes[0].style.height = \"0\";\n        nSizer.childNodes[0].style.overflow = \"hidden\";\n        nSizer.style.width = footerWidths[i];\n      }, footerSrcEls);\n    } // Sanity check that the table is of a sensible width. If not then we are going to get\n    // misalignment - try to prevent this by not allowing the table to shrink below its min width\n\n\n    if (table.outerWidth() < sanityWidth) {\n      // The min width depends upon if we have a vertical scrollbar visible or not */\n      correction = divBodyEl.scrollHeight > divBodyEl.offsetHeight || divBody.css('overflow-y') == \"scroll\" ? sanityWidth + barWidth : sanityWidth; // IE6/7 are a law unto themselves...\n\n      if (ie67 && (divBodyEl.scrollHeight > divBodyEl.offsetHeight || divBody.css('overflow-y') == \"scroll\")) {\n        tableStyle.width = _fnStringToCss(correction - barWidth);\n      } // And give the user a warning that we've stopped the table getting too small\n\n\n      if (scrollX === \"\" || scrollXInner !== \"\") {\n        _fnLog(settings, 1, 'Possible column misalignment', 6);\n      }\n    } else {\n      correction = '100%';\n    } // Apply to the container elements\n\n\n    divBodyStyle.width = _fnStringToCss(correction);\n    divHeaderStyle.width = _fnStringToCss(correction);\n\n    if (footer) {\n      settings.nScrollFoot.style.width = _fnStringToCss(correction);\n    }\n    /*\n     * 4. Clean up\n     */\n\n\n    if (!scrollY) {\n      /* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting\n       * the scrollbar height from the visible display, rather than adding it on. We need to\n       * set the height in order to sort this. Don't want to do it in any other browsers.\n       */\n      if (ie67) {\n        divBodyStyle.height = _fnStringToCss(tableEl.offsetHeight + barWidth);\n      }\n    }\n    /* Finally set the width's of the header and footer tables */\n\n\n    var iOuterWidth = table.outerWidth();\n    divHeaderTable[0].style.width = _fnStringToCss(iOuterWidth);\n    divHeaderInnerStyle.width = _fnStringToCss(iOuterWidth); // Figure out if there are scrollbar present - if so then we need a the header and footer to\n    // provide a bit more space to allow \"overflow\" scrolling (i.e. past the scrollbar)\n\n    var bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == \"scroll\";\n    var padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right');\n    divHeaderInnerStyle[padding] = bScrolling ? barWidth + \"px\" : \"0px\";\n\n    if (footer) {\n      divFooterTable[0].style.width = _fnStringToCss(iOuterWidth);\n      divFooterInner[0].style.width = _fnStringToCss(iOuterWidth);\n      divFooterInner[0].style[padding] = bScrolling ? barWidth + \"px\" : \"0px\";\n    } // Correct DOM ordering for colgroup - comes before the thead\n\n\n    table.children('colgroup').insertBefore(table.children('thead'));\n    /* Adjust the position of the header in case we loose the y-scrollbar */\n\n    divBody.scroll(); // If sorting or filtering has occurred, jump the scrolling back to the top\n    // only if we aren't holding the position\n\n    if ((settings.bSorted || settings.bFiltered) && !settings._drawHold) {\n      divBodyEl.scrollTop = 0;\n    }\n  }\n  /**\n   * Apply a given function to the display child nodes of an element array (typically\n   * TD children of TR rows\n   *  @param {function} fn Method to apply to the objects\n   *  @param array {nodes} an1 List of elements to look through for display children\n   *  @param array {nodes} an2 Another list (identical structure to the first) - optional\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnApplyToChildren(fn, an1, an2) {\n    var index = 0,\n        i = 0,\n        iLen = an1.length;\n    var nNode1, nNode2;\n\n    while (i < iLen) {\n      nNode1 = an1[i].firstChild;\n      nNode2 = an2 ? an2[i].firstChild : null;\n\n      while (nNode1) {\n        if (nNode1.nodeType === 1) {\n          if (an2) {\n            fn(nNode1, nNode2, index);\n          } else {\n            fn(nNode1, index);\n          }\n\n          index++;\n        }\n\n        nNode1 = nNode1.nextSibling;\n        nNode2 = an2 ? nNode2.nextSibling : null;\n      }\n\n      i++;\n    }\n  }\n\n  var __re_html_remove = /<.*?>/g;\n  /**\n   * Calculate the width of columns for the table\n   *  @param {object} oSettings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n  function _fnCalculateColumnWidths(oSettings) {\n    var table = oSettings.nTable,\n        columns = oSettings.aoColumns,\n        scroll = oSettings.oScroll,\n        scrollY = scroll.sY,\n        scrollX = scroll.sX,\n        scrollXInner = scroll.sXInner,\n        columnCount = columns.length,\n        visibleColumns = _fnGetColumns(oSettings, 'bVisible'),\n        headerCells = $('th', oSettings.nTHead),\n        tableWidthAttr = table.getAttribute('width'),\n        // from DOM element\n    tableContainer = table.parentNode,\n        userInputs = false,\n        i,\n        column,\n        columnIdx,\n        width,\n        outerWidth,\n        browser = oSettings.oBrowser,\n        ie67 = browser.bScrollOversize;\n\n    var styleWidth = table.style.width;\n\n    if (styleWidth && styleWidth.indexOf('%') !== -1) {\n      tableWidthAttr = styleWidth;\n    }\n    /* Convert any user input sizes into pixel sizes */\n\n\n    for (i = 0; i < visibleColumns.length; i++) {\n      column = columns[visibleColumns[i]];\n\n      if (column.sWidth !== null) {\n        column.sWidth = _fnConvertToWidth(column.sWidthOrig, tableContainer);\n        userInputs = true;\n      }\n    }\n    /* If the number of columns in the DOM equals the number that we have to\n     * process in DataTables, then we can use the offsets that are created by\n     * the web- browser. No custom sizes can be set in order for this to happen,\n     * nor scrolling used\n     */\n\n\n    if (ie67 || !userInputs && !scrollX && !scrollY && columnCount == _fnVisbleColumns(oSettings) && columnCount == headerCells.length) {\n      for (i = 0; i < columnCount; i++) {\n        var colIdx = _fnVisibleToColumnIndex(oSettings, i);\n\n        if (colIdx !== null) {\n          columns[colIdx].sWidth = _fnStringToCss(headerCells.eq(i).width());\n        }\n      }\n    } else {\n      // Otherwise construct a single row, worst case, table with the widest\n      // node in the data, assign any user defined widths, then insert it into\n      // the DOM and allow the browser to do all the hard work of calculating\n      // table widths\n      var tmpTable = $(table).clone() // don't use cloneNode - IE8 will remove events on the main table\n      .css('visibility', 'hidden').removeAttr('id'); // Clean up the table body\n\n      tmpTable.find('tbody tr').remove();\n      var tr = $('<tr/>').appendTo(tmpTable.find('tbody')); // Clone the table header and footer - we can't use the header / footer\n      // from the cloned table, since if scrolling is active, the table's\n      // real header and footer are contained in different table tags\n\n      tmpTable.find('thead, tfoot').remove();\n      tmpTable.append($(oSettings.nTHead).clone()).append($(oSettings.nTFoot).clone()); // Remove any assigned widths from the footer (from scrolling)\n\n      tmpTable.find('tfoot th, tfoot td').css('width', ''); // Apply custom sizing to the cloned header\n\n      headerCells = _fnGetUniqueThs(oSettings, tmpTable.find('thead')[0]);\n\n      for (i = 0; i < visibleColumns.length; i++) {\n        column = columns[visibleColumns[i]];\n        headerCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ? _fnStringToCss(column.sWidthOrig) : ''; // For scrollX we need to force the column width otherwise the\n        // browser will collapse it. If this width is smaller than the\n        // width the column requires, then it will have no effect\n\n        if (column.sWidthOrig && scrollX) {\n          $(headerCells[i]).append($('<div/>').css({\n            width: column.sWidthOrig,\n            margin: 0,\n            padding: 0,\n            border: 0,\n            height: 1\n          }));\n        }\n      } // Find the widest cell for each column and put it into the table\n\n\n      if (oSettings.aoData.length) {\n        for (i = 0; i < visibleColumns.length; i++) {\n          columnIdx = visibleColumns[i];\n          column = columns[columnIdx];\n          $(_fnGetWidestNode(oSettings, columnIdx)).clone(false).append(column.sContentPadding).appendTo(tr);\n        }\n      } // Tidy the temporary table - remove name attributes so there aren't\n      // duplicated in the dom (radio elements for example)\n\n\n      $('[name]', tmpTable).removeAttr('name'); // Table has been built, attach to the document so we can work with it.\n      // A holding element is used, positioned at the top of the container\n      // with minimal height, so it has no effect on if the container scrolls\n      // or not. Otherwise it might trigger scrolling when it actually isn't\n      // needed\n\n      var holder = $('<div/>').css(scrollX || scrollY ? {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        height: 1,\n        right: 0,\n        overflow: 'hidden'\n      } : {}).append(tmpTable).appendTo(tableContainer); // When scrolling (X or Y) we want to set the width of the table as \n      // appropriate. However, when not scrolling leave the table width as it\n      // is. This results in slightly different, but I think correct behaviour\n\n      if (scrollX && scrollXInner) {\n        tmpTable.width(scrollXInner);\n      } else if (scrollX) {\n        tmpTable.css('width', 'auto');\n        tmpTable.removeAttr('width'); // If there is no width attribute or style, then allow the table to\n        // collapse\n\n        if (tmpTable.width() < tableContainer.clientWidth && tableWidthAttr) {\n          tmpTable.width(tableContainer.clientWidth);\n        }\n      } else if (scrollY) {\n        tmpTable.width(tableContainer.clientWidth);\n      } else if (tableWidthAttr) {\n        tmpTable.width(tableWidthAttr);\n      } // Get the width of each column in the constructed table - we need to\n      // know the inner width (so it can be assigned to the other table's\n      // cells) and the outer width so we can calculate the full width of the\n      // table. This is safe since DataTables requires a unique cell for each\n      // column, but if ever a header can span multiple columns, this will\n      // need to be modified.\n\n\n      var total = 0;\n\n      for (i = 0; i < visibleColumns.length; i++) {\n        var cell = $(headerCells[i]);\n        var border = cell.outerWidth() - cell.width(); // Use getBounding... where possible (not IE8-) because it can give\n        // sub-pixel accuracy, which we then want to round up!\n\n        var bounding = browser.bBounding ? Math.ceil(headerCells[i].getBoundingClientRect().width) : cell.outerWidth(); // Total is tracked to remove any sub-pixel errors as the outerWidth\n        // of the table might not equal the total given here (IE!).\n\n        total += bounding; // Width for each column to use\n\n        columns[visibleColumns[i]].sWidth = _fnStringToCss(bounding - border);\n      }\n\n      table.style.width = _fnStringToCss(total); // Finished with the table - ditch it\n\n      holder.remove();\n    } // If there is a width attr, we want to attach an event listener which\n    // allows the table sizing to automatically adjust when the window is\n    // resized. Use the width attr rather than CSS, since we can't know if the\n    // CSS is a relative value or absolute - DOM read is always px.\n\n\n    if (tableWidthAttr) {\n      table.style.width = _fnStringToCss(tableWidthAttr);\n    }\n\n    if ((tableWidthAttr || scrollX) && !oSettings._reszEvt) {\n      var bindResize = function bindResize() {\n        $(window).on('resize.DT-' + oSettings.sInstance, _fnThrottle(function () {\n          _fnAdjustColumnSizing(oSettings);\n        }));\n      }; // IE6/7 will crash if we bind a resize event handler on page load.\n      // To be removed in 1.11 which drops IE6/7 support\n\n\n      if (ie67) {\n        setTimeout(bindResize, 1000);\n      } else {\n        bindResize();\n      }\n\n      oSettings._reszEvt = true;\n    }\n  }\n  /**\n   * Throttle the calls to a function. Arguments and context are maintained for\n   * the throttled function\n   *  @param {function} fn Function to be called\n   *  @param {int} [freq=200] call frequency in mS\n   *  @returns {function} wrapped function\n   *  @memberof DataTable#oApi\n   */\n\n\n  var _fnThrottle = DataTable.util.throttle;\n  /**\n   * Convert a CSS unit width to pixels (e.g. 2em)\n   *  @param {string} width width to be converted\n   *  @param {node} parent parent to get the with for (required for relative widths) - optional\n   *  @returns {int} width in pixels\n   *  @memberof DataTable#oApi\n   */\n\n  function _fnConvertToWidth(width, parent) {\n    if (!width) {\n      return 0;\n    }\n\n    var n = $('<div/>').css('width', _fnStringToCss(width)).appendTo(parent || document.body);\n    var val = n[0].offsetWidth;\n    n.remove();\n    return val;\n  }\n  /**\n   * Get the widest node\n   *  @param {object} settings dataTables settings object\n   *  @param {int} colIdx column of interest\n   *  @returns {node} widest table node\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnGetWidestNode(settings, colIdx) {\n    var idx = _fnGetMaxLenString(settings, colIdx);\n\n    if (idx < 0) {\n      return null;\n    }\n\n    var data = settings.aoData[idx];\n    return !data.nTr ? // Might not have been created when deferred rendering\n    $('<td/>').html(_fnGetCellData(settings, idx, colIdx, 'display'))[0] : data.anCells[colIdx];\n  }\n  /**\n   * Get the maximum strlen for each data column\n   *  @param {object} settings dataTables settings object\n   *  @param {int} colIdx column of interest\n   *  @returns {string} max string length for each column\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnGetMaxLenString(settings, colIdx) {\n    var s,\n        max = -1,\n        maxIdx = -1;\n\n    for (var i = 0, ien = settings.aoData.length; i < ien; i++) {\n      s = _fnGetCellData(settings, i, colIdx, 'display') + '';\n      s = s.replace(__re_html_remove, '');\n      s = s.replace(/&nbsp;/g, ' ');\n\n      if (s.length > max) {\n        max = s.length;\n        maxIdx = i;\n      }\n    }\n\n    return maxIdx;\n  }\n  /**\n   * Append a CSS unit (only if required) to a string\n   *  @param {string} value to css-ify\n   *  @returns {string} value with css unit\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnStringToCss(s) {\n    if (s === null) {\n      return '0px';\n    }\n\n    if (typeof s == 'number') {\n      return s < 0 ? '0px' : s + 'px';\n    } // Check it has a unit character already\n\n\n    return s.match(/\\d$/) ? s + 'px' : s;\n  }\n\n  function _fnSortFlatten(settings) {\n    var i,\n        iLen,\n        k,\n        kLen,\n        aSort = [],\n        aiOrig = [],\n        aoColumns = settings.aoColumns,\n        aDataSort,\n        iCol,\n        sType,\n        srcCol,\n        fixed = settings.aaSortingFixed,\n        fixedObj = $.isPlainObject(fixed),\n        nestedSort = [],\n        add = function add(a) {\n      if (a.length && !$.isArray(a[0])) {\n        // 1D array\n        nestedSort.push(a);\n      } else {\n        // 2D array\n        $.merge(nestedSort, a);\n      }\n    }; // Build the sort array, with pre-fix and post-fix options if they have been\n    // specified\n\n\n    if ($.isArray(fixed)) {\n      add(fixed);\n    }\n\n    if (fixedObj && fixed.pre) {\n      add(fixed.pre);\n    }\n\n    add(settings.aaSorting);\n\n    if (fixedObj && fixed.post) {\n      add(fixed.post);\n    }\n\n    for (i = 0; i < nestedSort.length; i++) {\n      srcCol = nestedSort[i][0];\n      aDataSort = aoColumns[srcCol].aDataSort;\n\n      for (k = 0, kLen = aDataSort.length; k < kLen; k++) {\n        iCol = aDataSort[k];\n        sType = aoColumns[iCol].sType || 'string';\n\n        if (nestedSort[i]._idx === undefined) {\n          nestedSort[i]._idx = $.inArray(nestedSort[i][1], aoColumns[iCol].asSorting);\n        }\n\n        aSort.push({\n          src: srcCol,\n          col: iCol,\n          dir: nestedSort[i][1],\n          index: nestedSort[i]._idx,\n          type: sType,\n          formatter: DataTable.ext.type.order[sType + \"-pre\"]\n        });\n      }\n    }\n\n    return aSort;\n  }\n  /**\n   * Change the order of the table\n   *  @param {object} oSettings dataTables settings object\n   *  @memberof DataTable#oApi\n   *  @todo This really needs split up!\n   */\n\n\n  function _fnSort(oSettings) {\n    var i,\n        ien,\n        iLen,\n        j,\n        jLen,\n        k,\n        kLen,\n        sDataType,\n        nTh,\n        aiOrig = [],\n        oExtSort = DataTable.ext.type.order,\n        aoData = oSettings.aoData,\n        aoColumns = oSettings.aoColumns,\n        aDataSort,\n        data,\n        iCol,\n        sType,\n        oSort,\n        formatters = 0,\n        sortCol,\n        displayMaster = oSettings.aiDisplayMaster,\n        aSort; // Resolve any column types that are unknown due to addition or invalidation\n    // @todo Can this be moved into a 'data-ready' handler which is called when\n    //   data is going to be used in the table?\n\n    _fnColumnTypes(oSettings);\n\n    aSort = _fnSortFlatten(oSettings);\n\n    for (i = 0, ien = aSort.length; i < ien; i++) {\n      sortCol = aSort[i]; // Track if we can use the fast sort algorithm\n\n      if (sortCol.formatter) {\n        formatters++;\n      } // Load the data needed for the sort, for each cell\n\n\n      _fnSortData(oSettings, sortCol.col);\n    }\n    /* No sorting required if server-side or no sorting array */\n\n\n    if (_fnDataSource(oSettings) != 'ssp' && aSort.length !== 0) {\n      // Create a value - key array of the current row positions such that we can use their\n      // current position during the sort, if values match, in order to perform stable sorting\n      for (i = 0, iLen = displayMaster.length; i < iLen; i++) {\n        aiOrig[displayMaster[i]] = i;\n      }\n      /* Do the sort - here we want multi-column sorting based on a given data source (column)\n       * and sorting function (from oSort) in a certain direction. It's reasonably complex to\n       * follow on it's own, but this is what we want (example two column sorting):\n       *  fnLocalSorting = function(a,b){\n       *    var iTest;\n       *    iTest = oSort['string-asc']('data11', 'data12');\n       *      if (iTest !== 0)\n       *        return iTest;\n       *    iTest = oSort['numeric-desc']('data21', 'data22');\n       *    if (iTest !== 0)\n       *      return iTest;\n       *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );\n       *  }\n       * Basically we have a test for each sorting column, if the data in that column is equal,\n       * test the next column. If all columns match, then we use a numeric sort on the row\n       * positions in the original data array to provide a stable sort.\n       *\n       * Note - I know it seems excessive to have two sorting methods, but the first is around\n       * 15% faster, so the second is only maintained for backwards compatibility with sorting\n       * methods which do not have a pre-sort formatting function.\n       */\n\n\n      if (formatters === aSort.length) {\n        // All sort types have formatting functions\n        displayMaster.sort(function (a, b) {\n          var x,\n              y,\n              k,\n              test,\n              sort,\n              len = aSort.length,\n              dataA = aoData[a]._aSortData,\n              dataB = aoData[b]._aSortData;\n\n          for (k = 0; k < len; k++) {\n            sort = aSort[k];\n            x = dataA[sort.col];\n            y = dataB[sort.col];\n            test = x < y ? -1 : x > y ? 1 : 0;\n\n            if (test !== 0) {\n              return sort.dir === 'asc' ? test : -test;\n            }\n          }\n\n          x = aiOrig[a];\n          y = aiOrig[b];\n          return x < y ? -1 : x > y ? 1 : 0;\n        });\n      } else {\n        // Depreciated - remove in 1.11 (providing a plug-in option)\n        // Not all sort types have formatting methods, so we have to call their sorting\n        // methods.\n        displayMaster.sort(function (a, b) {\n          var x,\n              y,\n              k,\n              l,\n              test,\n              sort,\n              fn,\n              len = aSort.length,\n              dataA = aoData[a]._aSortData,\n              dataB = aoData[b]._aSortData;\n\n          for (k = 0; k < len; k++) {\n            sort = aSort[k];\n            x = dataA[sort.col];\n            y = dataB[sort.col];\n            fn = oExtSort[sort.type + \"-\" + sort.dir] || oExtSort[\"string-\" + sort.dir];\n            test = fn(x, y);\n\n            if (test !== 0) {\n              return test;\n            }\n          }\n\n          x = aiOrig[a];\n          y = aiOrig[b];\n          return x < y ? -1 : x > y ? 1 : 0;\n        });\n      }\n    }\n    /* Tell the draw function that we have sorted the data */\n\n\n    oSettings.bSorted = true;\n  }\n\n  function _fnSortAria(settings) {\n    var label;\n    var nextSort;\n    var columns = settings.aoColumns;\n\n    var aSort = _fnSortFlatten(settings);\n\n    var oAria = settings.oLanguage.oAria; // ARIA attributes - need to loop all columns, to update all (removing old\n    // attributes as needed)\n\n    for (var i = 0, iLen = columns.length; i < iLen; i++) {\n      var col = columns[i];\n      var asSorting = col.asSorting;\n      var sTitle = col.sTitle.replace(/<.*?>/g, \"\");\n      var th = col.nTh; // IE7 is throwing an error when setting these properties with jQuery's\n      // attr() and removeAttr() methods...\n\n      th.removeAttribute('aria-sort');\n      /* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */\n\n      if (col.bSortable) {\n        if (aSort.length > 0 && aSort[0].col == i) {\n          th.setAttribute('aria-sort', aSort[0].dir == \"asc\" ? \"ascending\" : \"descending\");\n          nextSort = asSorting[aSort[0].index + 1] || asSorting[0];\n        } else {\n          nextSort = asSorting[0];\n        }\n\n        label = sTitle + (nextSort === \"asc\" ? oAria.sSortAscending : oAria.sSortDescending);\n      } else {\n        label = sTitle;\n      }\n\n      th.setAttribute('aria-label', label);\n    }\n  }\n  /**\n   * Function to run on user sort request\n   *  @param {object} settings dataTables settings object\n   *  @param {node} attachTo node to attach the handler to\n   *  @param {int} colIdx column sorting index\n   *  @param {boolean} [append=false] Append the requested sort to the existing\n   *    sort if true (i.e. multi-column sort)\n   *  @param {function} [callback] callback function\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnSortListener(settings, colIdx, append, callback) {\n    var col = settings.aoColumns[colIdx];\n    var sorting = settings.aaSorting;\n    var asSorting = col.asSorting;\n    var nextSortIdx;\n\n    var next = function next(a, overflow) {\n      var idx = a._idx;\n\n      if (idx === undefined) {\n        idx = $.inArray(a[1], asSorting);\n      }\n\n      return idx + 1 < asSorting.length ? idx + 1 : overflow ? null : 0;\n    }; // Convert to 2D array if needed\n\n\n    if (typeof sorting[0] === 'number') {\n      sorting = settings.aaSorting = [sorting];\n    } // If appending the sort then we are multi-column sorting\n\n\n    if (append && settings.oFeatures.bSortMulti) {\n      // Are we already doing some kind of sort on this column?\n      var sortIdx = $.inArray(colIdx, _pluck(sorting, '0'));\n\n      if (sortIdx !== -1) {\n        // Yes, modify the sort\n        nextSortIdx = next(sorting[sortIdx], true);\n\n        if (nextSortIdx === null && sorting.length === 1) {\n          nextSortIdx = 0; // can't remove sorting completely\n        }\n\n        if (nextSortIdx === null) {\n          sorting.splice(sortIdx, 1);\n        } else {\n          sorting[sortIdx][1] = asSorting[nextSortIdx];\n          sorting[sortIdx]._idx = nextSortIdx;\n        }\n      } else {\n        // No sort on this column yet\n        sorting.push([colIdx, asSorting[0], 0]);\n        sorting[sorting.length - 1]._idx = 0;\n      }\n    } else if (sorting.length && sorting[0][0] == colIdx) {\n      // Single column - already sorting on this column, modify the sort\n      nextSortIdx = next(sorting[0]);\n      sorting.length = 1;\n      sorting[0][1] = asSorting[nextSortIdx];\n      sorting[0]._idx = nextSortIdx;\n    } else {\n      // Single column - sort only on this column\n      sorting.length = 0;\n      sorting.push([colIdx, asSorting[0]]);\n      sorting[0]._idx = 0;\n    } // Run the sort by calling a full redraw\n\n\n    _fnReDraw(settings); // callback used for async user interaction\n\n\n    if (typeof callback == 'function') {\n      callback(settings);\n    }\n  }\n  /**\n   * Attach a sort handler (click) to a node\n   *  @param {object} settings dataTables settings object\n   *  @param {node} attachTo node to attach the handler to\n   *  @param {int} colIdx column sorting index\n   *  @param {function} [callback] callback function\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnSortAttachListener(settings, attachTo, colIdx, callback) {\n    var col = settings.aoColumns[colIdx];\n\n    _fnBindAction(attachTo, {}, function (e) {\n      /* If the column is not sortable - don't to anything */\n      if (col.bSortable === false) {\n        return;\n      } // If processing is enabled use a timeout to allow the processing\n      // display to be shown - otherwise to it synchronously\n\n\n      if (settings.oFeatures.bProcessing) {\n        _fnProcessingDisplay(settings, true);\n\n        setTimeout(function () {\n          _fnSortListener(settings, colIdx, e.shiftKey, callback); // In server-side processing, the draw callback will remove the\n          // processing display\n\n\n          if (_fnDataSource(settings) !== 'ssp') {\n            _fnProcessingDisplay(settings, false);\n          }\n        }, 0);\n      } else {\n        _fnSortListener(settings, colIdx, e.shiftKey, callback);\n      }\n    });\n  }\n  /**\n   * Set the sorting classes on table's body, Note: it is safe to call this function\n   * when bSort and bSortClasses are false\n   *  @param {object} oSettings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnSortingClasses(settings) {\n    var oldSort = settings.aLastSort;\n    var sortClass = settings.oClasses.sSortColumn;\n\n    var sort = _fnSortFlatten(settings);\n\n    var features = settings.oFeatures;\n    var i, ien, colIdx;\n\n    if (features.bSort && features.bSortClasses) {\n      // Remove old sorting classes\n      for (i = 0, ien = oldSort.length; i < ien; i++) {\n        colIdx = oldSort[i].src; // Remove column sorting\n\n        $(_pluck(settings.aoData, 'anCells', colIdx)).removeClass(sortClass + (i < 2 ? i + 1 : 3));\n      } // Add new column sorting\n\n\n      for (i = 0, ien = sort.length; i < ien; i++) {\n        colIdx = sort[i].src;\n        $(_pluck(settings.aoData, 'anCells', colIdx)).addClass(sortClass + (i < 2 ? i + 1 : 3));\n      }\n    }\n\n    settings.aLastSort = sort;\n  } // Get the data to sort a column, be it from cache, fresh (populating the\n  // cache), or from a sort formatter\n\n\n  function _fnSortData(settings, idx) {\n    // Custom sorting function - provided by the sort data type\n    var column = settings.aoColumns[idx];\n    var customSort = DataTable.ext.order[column.sSortDataType];\n    var customData;\n\n    if (customSort) {\n      customData = customSort.call(settings.oInstance, settings, idx, _fnColumnIndexToVisible(settings, idx));\n    } // Use / populate cache\n\n\n    var row, cellData;\n    var formatter = DataTable.ext.type.order[column.sType + \"-pre\"];\n\n    for (var i = 0, ien = settings.aoData.length; i < ien; i++) {\n      row = settings.aoData[i];\n\n      if (!row._aSortData) {\n        row._aSortData = [];\n      }\n\n      if (!row._aSortData[idx] || customSort) {\n        cellData = customSort ? customData[i] : // If there was a custom sort function, use data from there\n        _fnGetCellData(settings, i, idx, 'sort');\n        row._aSortData[idx] = formatter ? formatter(cellData) : cellData;\n      }\n    }\n  }\n  /**\n   * Save the state of a table\n   *  @param {object} oSettings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnSaveState(settings) {\n    if (!settings.oFeatures.bStateSave || settings.bDestroying) {\n      return;\n    }\n    /* Store the interesting variables */\n\n\n    var state = {\n      time: +new Date(),\n      start: settings._iDisplayStart,\n      length: settings._iDisplayLength,\n      order: $.extend(true, [], settings.aaSorting),\n      search: _fnSearchToCamel(settings.oPreviousSearch),\n      columns: $.map(settings.aoColumns, function (col, i) {\n        return {\n          visible: col.bVisible,\n          search: _fnSearchToCamel(settings.aoPreSearchCols[i])\n        };\n      })\n    };\n\n    _fnCallbackFire(settings, \"aoStateSaveParams\", 'stateSaveParams', [settings, state]);\n\n    settings.oSavedState = state;\n    settings.fnStateSaveCallback.call(settings.oInstance, settings, state);\n  }\n  /**\n   * Attempt to load a saved table state\n   *  @param {object} oSettings dataTables settings object\n   *  @param {object} oInit DataTables init object so we can override settings\n   *  @param {function} callback Callback to execute when the state has been loaded\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnLoadState(settings, oInit, callback) {\n    var i, ien;\n    var columns = settings.aoColumns;\n\n    var loaded = function loaded(s) {\n      if (!s || !s.time) {\n        callback();\n        return;\n      } // Allow custom and plug-in manipulation functions to alter the saved data set and\n      // cancelling of loading by returning false\n\n\n      var abStateLoad = _fnCallbackFire(settings, 'aoStateLoadParams', 'stateLoadParams', [settings, s]);\n\n      if ($.inArray(false, abStateLoad) !== -1) {\n        callback();\n        return;\n      } // Reject old data\n\n\n      var duration = settings.iStateDuration;\n\n      if (duration > 0 && s.time < +new Date() - duration * 1000) {\n        callback();\n        return;\n      } // Number of columns have changed - all bets are off, no restore of settings\n\n\n      if (s.columns && columns.length !== s.columns.length) {\n        callback();\n        return;\n      } // Store the saved state so it might be accessed at any time\n\n\n      settings.oLoadedState = $.extend(true, {}, s); // Restore key features - todo - for 1.11 this needs to be done by\n      // subscribed events\n\n      if (s.start !== undefined) {\n        settings._iDisplayStart = s.start;\n        settings.iInitDisplayStart = s.start;\n      }\n\n      if (s.length !== undefined) {\n        settings._iDisplayLength = s.length;\n      } // Order\n\n\n      if (s.order !== undefined) {\n        settings.aaSorting = [];\n        $.each(s.order, function (i, col) {\n          settings.aaSorting.push(col[0] >= columns.length ? [0, col[1]] : col);\n        });\n      } // Search\n\n\n      if (s.search !== undefined) {\n        $.extend(settings.oPreviousSearch, _fnSearchToHung(s.search));\n      } // Columns\n      //\n\n\n      if (s.columns) {\n        for (i = 0, ien = s.columns.length; i < ien; i++) {\n          var col = s.columns[i]; // Visibility\n\n          if (col.visible !== undefined) {\n            columns[i].bVisible = col.visible;\n          } // Search\n\n\n          if (col.search !== undefined) {\n            $.extend(settings.aoPreSearchCols[i], _fnSearchToHung(col.search));\n          }\n        }\n      }\n\n      _fnCallbackFire(settings, 'aoStateLoaded', 'stateLoaded', [settings, s]);\n\n      callback();\n    };\n\n    if (!settings.oFeatures.bStateSave) {\n      callback();\n      return;\n    }\n\n    var state = settings.fnStateLoadCallback.call(settings.oInstance, settings, loaded);\n\n    if (state !== undefined) {\n      loaded(state);\n    } // otherwise, wait for the loaded callback to be executed\n\n  }\n  /**\n   * Return the settings object for a particular table\n   *  @param {node} table table we are using as a dataTable\n   *  @returns {object} Settings object - or null if not found\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnSettingsFromNode(table) {\n    var settings = DataTable.settings;\n    var idx = $.inArray(table, _pluck(settings, 'nTable'));\n    return idx !== -1 ? settings[idx] : null;\n  }\n  /**\n   * Log an error message\n   *  @param {object} settings dataTables settings object\n   *  @param {int} level log error messages, or display them to the user\n   *  @param {string} msg error message\n   *  @param {int} tn Technical note id to get more information about the error.\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnLog(settings, level, msg, tn) {\n    msg = 'DataTables warning: ' + (settings ? 'table id=' + settings.sTableId + ' - ' : '') + msg;\n\n    if (tn) {\n      msg += '. For more information about this error, please see ' + 'http://datatables.net/tn/' + tn;\n    }\n\n    if (!level) {\n      // Backwards compatibility pre 1.10\n      var ext = DataTable.ext;\n      var type = ext.sErrMode || ext.errMode;\n\n      if (settings) {\n        _fnCallbackFire(settings, null, 'error', [settings, tn, msg]);\n      }\n\n      if (type == 'alert') {\n        alert(msg);\n      } else if (type == 'throw') {\n        throw new Error(msg);\n      } else if (typeof type == 'function') {\n        type(settings, tn, msg);\n      }\n    } else if (window.console && console.log) {\n      console.log(msg);\n    }\n  }\n  /**\n   * See if a property is defined on one object, if so assign it to the other object\n   *  @param {object} ret target object\n   *  @param {object} src source object\n   *  @param {string} name property\n   *  @param {string} [mappedName] name to map too - optional, name used if not given\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnMap(ret, src, name, mappedName) {\n    if ($.isArray(name)) {\n      $.each(name, function (i, val) {\n        if ($.isArray(val)) {\n          _fnMap(ret, src, val[0], val[1]);\n        } else {\n          _fnMap(ret, src, val);\n        }\n      });\n      return;\n    }\n\n    if (mappedName === undefined) {\n      mappedName = name;\n    }\n\n    if (src[name] !== undefined) {\n      ret[mappedName] = src[name];\n    }\n  }\n  /**\n   * Extend objects - very similar to jQuery.extend, but deep copy objects, and\n   * shallow copy arrays. The reason we need to do this, is that we don't want to\n   * deep copy array init values (such as aaSorting) since the dev wouldn't be\n   * able to override them, but we do want to deep copy arrays.\n   *  @param {object} out Object to extend\n   *  @param {object} extender Object from which the properties will be applied to\n   *      out\n   *  @param {boolean} breakRefs If true, then arrays will be sliced to take an\n   *      independent copy with the exception of the `data` or `aaData` parameters\n   *      if they are present. This is so you can pass in a collection to\n   *      DataTables and have that used as your data source without breaking the\n   *      references\n   *  @returns {object} out Reference, just for convenience - out === the return.\n   *  @memberof DataTable#oApi\n   *  @todo This doesn't take account of arrays inside the deep copied objects.\n   */\n\n\n  function _fnExtend(out, extender, breakRefs) {\n    var val;\n\n    for (var prop in extender) {\n      if (extender.hasOwnProperty(prop)) {\n        val = extender[prop];\n\n        if ($.isPlainObject(val)) {\n          if (!$.isPlainObject(out[prop])) {\n            out[prop] = {};\n          }\n\n          $.extend(true, out[prop], val);\n        } else if (breakRefs && prop !== 'data' && prop !== 'aaData' && $.isArray(val)) {\n          out[prop] = val.slice();\n        } else {\n          out[prop] = val;\n        }\n      }\n    }\n\n    return out;\n  }\n  /**\n   * Bind an event handers to allow a click or return key to activate the callback.\n   * This is good for accessibility since a return on the keyboard will have the\n   * same effect as a click, if the element has focus.\n   *  @param {element} n Element to bind the action to\n   *  @param {object} oData Data object to pass to the triggered function\n   *  @param {function} fn Callback function for when the event is triggered\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnBindAction(n, oData, fn) {\n    $(n).on('click.DT', oData, function (e) {\n      $(n).blur(); // Remove focus outline for mouse users\n\n      fn(e);\n    }).on('keypress.DT', oData, function (e) {\n      if (e.which === 13) {\n        e.preventDefault();\n        fn(e);\n      }\n    }).on('selectstart.DT', function () {\n      /* Take the brutal approach to cancelling text selection */\n      return false;\n    });\n  }\n  /**\n   * Register a callback function. Easily allows a callback function to be added to\n   * an array store of callback functions that can then all be called together.\n   *  @param {object} oSettings dataTables settings object\n   *  @param {string} sStore Name of the array storage for the callbacks in oSettings\n   *  @param {function} fn Function to be called back\n   *  @param {string} sName Identifying name for the callback (i.e. a label)\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnCallbackReg(oSettings, sStore, fn, sName) {\n    if (fn) {\n      oSettings[sStore].push({\n        \"fn\": fn,\n        \"sName\": sName\n      });\n    }\n  }\n  /**\n   * Fire callback functions and trigger events. Note that the loop over the\n   * callback array store is done backwards! Further note that you do not want to\n   * fire off triggers in time sensitive applications (for example cell creation)\n   * as its slow.\n   *  @param {object} settings dataTables settings object\n   *  @param {string} callbackArr Name of the array storage for the callbacks in\n   *      oSettings\n   *  @param {string} eventName Name of the jQuery custom event to trigger. If\n   *      null no trigger is fired\n   *  @param {array} args Array of arguments to pass to the callback function /\n   *      trigger\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnCallbackFire(settings, callbackArr, eventName, args) {\n    var ret = [];\n\n    if (callbackArr) {\n      ret = $.map(settings[callbackArr].slice().reverse(), function (val, i) {\n        return val.fn.apply(settings.oInstance, args);\n      });\n    }\n\n    if (eventName !== null) {\n      var e = $.Event(eventName + '.dt');\n      $(settings.nTable).trigger(e, args);\n      ret.push(e.result);\n    }\n\n    return ret;\n  }\n\n  function _fnLengthOverflow(settings) {\n    var start = settings._iDisplayStart,\n        end = settings.fnDisplayEnd(),\n        len = settings._iDisplayLength;\n    /* If we have space to show extra rows (backing up from the end point - then do so */\n\n    if (start >= end) {\n      start = end - len;\n    } // Keep the start record on the current page\n\n\n    start -= start % len;\n\n    if (len === -1 || start < 0) {\n      start = 0;\n    }\n\n    settings._iDisplayStart = start;\n  }\n\n  function _fnRenderer(settings, type) {\n    var renderer = settings.renderer;\n    var host = DataTable.ext.renderer[type];\n\n    if ($.isPlainObject(renderer) && renderer[type]) {\n      // Specific renderer for this type. If available use it, otherwise use\n      // the default.\n      return host[renderer[type]] || host._;\n    } else if (typeof renderer === 'string') {\n      // Common renderer - if there is one available for this type use it,\n      // otherwise use the default\n      return host[renderer] || host._;\n    } // Use the default\n\n\n    return host._;\n  }\n  /**\n   * Detect the data source being used for the table. Used to simplify the code\n   * a little (ajax) and to make it compress a little smaller.\n   *\n   *  @param {object} settings dataTables settings object\n   *  @returns {string} Data source\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnDataSource(settings) {\n    if (settings.oFeatures.bServerSide) {\n      return 'ssp';\n    } else if (settings.ajax || settings.sAjaxSource) {\n      return 'ajax';\n    }\n\n    return 'dom';\n  }\n  /**\n   * Computed structure of the DataTables API, defined by the options passed to\n   * `DataTable.Api.register()` when building the API.\n   *\n   * The structure is built in order to speed creation and extension of the Api\n   * objects since the extensions are effectively pre-parsed.\n   *\n   * The array is an array of objects with the following structure, where this\n   * base array represents the Api prototype base:\n   *\n   *     [\n   *       {\n   *         name:      'data'                -- string   - Property name\n   *         val:       function () {},       -- function - Api method (or undefined if just an object\n   *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\n   *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\n   *       },\n   *       {\n   *         name:     'row'\n   *         val:       {},\n   *         methodExt: [ ... ],\n   *         propExt:   [\n   *           {\n   *             name:      'data'\n   *             val:       function () {},\n   *             methodExt: [ ... ],\n   *             propExt:   [ ... ]\n   *           },\n   *           ...\n   *         ]\n   *       }\n   *     ]\n   *\n   * @type {Array}\n   * @ignore\n   */\n\n\n  var __apiStruct = [];\n  /**\n   * `Array.prototype` reference.\n   *\n   * @type object\n   * @ignore\n   */\n\n  var __arrayProto = Array.prototype;\n  /**\n   * Abstraction for `context` parameter of the `Api` constructor to allow it to\n   * take several different forms for ease of use.\n   *\n   * Each of the input parameter types will be converted to a DataTables settings\n   * object where possible.\n   *\n   * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one\n   *   of:\n   *\n   *   * `string` - jQuery selector. Any DataTables' matching the given selector\n   *     with be found and used.\n   *   * `node` - `TABLE` node which has already been formed into a DataTable.\n   *   * `jQuery` - A jQuery object of `TABLE` nodes.\n   *   * `object` - DataTables settings object\n   *   * `DataTables.Api` - API instance\n   * @return {array|null} Matching DataTables settings objects. `null` or\n   *   `undefined` is returned if no matching DataTable is found.\n   * @ignore\n   */\n\n  var _toSettings = function _toSettings(mixed) {\n    var idx, jq;\n    var settings = DataTable.settings;\n    var tables = $.map(settings, function (el, i) {\n      return el.nTable;\n    });\n\n    if (!mixed) {\n      return [];\n    } else if (mixed.nTable && mixed.oApi) {\n      // DataTables settings object\n      return [mixed];\n    } else if (mixed.nodeName && mixed.nodeName.toLowerCase() === 'table') {\n      // Table node\n      idx = $.inArray(mixed, tables);\n      return idx !== -1 ? [settings[idx]] : null;\n    } else if (mixed && typeof mixed.settings === 'function') {\n      return mixed.settings().toArray();\n    } else if (typeof mixed === 'string') {\n      // jQuery selector\n      jq = $(mixed);\n    } else if (mixed instanceof $) {\n      // jQuery object (also DataTables instance)\n      jq = mixed;\n    }\n\n    if (jq) {\n      return jq.map(function (i) {\n        idx = $.inArray(this, tables);\n        return idx !== -1 ? settings[idx] : null;\n      }).toArray();\n    }\n  };\n  /**\n   * DataTables API class - used to control and interface with  one or more\n   * DataTables enhanced tables.\n   *\n   * The API class is heavily based on jQuery, presenting a chainable interface\n   * that you can use to interact with tables. Each instance of the API class has\n   * a \"context\" - i.e. the tables that it will operate on. This could be a single\n   * table, all tables on a page or a sub-set thereof.\n   *\n   * Additionally the API is designed to allow you to easily work with the data in\n   * the tables, retrieving and manipulating it as required. This is done by\n   * presenting the API class as an array like interface. The contents of the\n   * array depend upon the actions requested by each method (for example\n   * `rows().nodes()` will return an array of nodes, while `rows().data()` will\n   * return an array of objects or arrays depending upon your table's\n   * configuration). The API object has a number of array like methods (`push`,\n   * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,\n   * `unique` etc) to assist your working with the data held in a table.\n   *\n   * Most methods (those which return an Api instance) are chainable, which means\n   * the return from a method call also has all of the methods available that the\n   * top level object had. For example, these two calls are equivalent:\n   *\n   *     // Not chained\n   *     api.row.add( {...} );\n   *     api.draw();\n   *\n   *     // Chained\n   *     api.row.add( {...} ).draw();\n   *\n   * @class DataTable.Api\n   * @param {array|object|string|jQuery} context DataTable identifier. This is\n   *   used to define which DataTables enhanced tables this API will operate on.\n   *   Can be one of:\n   *\n   *   * `string` - jQuery selector. Any DataTables' matching the given selector\n   *     with be found and used.\n   *   * `node` - `TABLE` node which has already been formed into a DataTable.\n   *   * `jQuery` - A jQuery object of `TABLE` nodes.\n   *   * `object` - DataTables settings object\n   * @param {array} [data] Data to initialise the Api instance with.\n   *\n   * @example\n   *   // Direct initialisation during DataTables construction\n   *   var api = $('#example').DataTable();\n   *\n   * @example\n   *   // Initialisation using a DataTables jQuery object\n   *   var api = $('#example').dataTable().api();\n   *\n   * @example\n   *   // Initialisation as a constructor\n   *   var api = new $.fn.DataTable.Api( 'table.dataTable' );\n   */\n\n\n  _Api2 = function _Api(context, data) {\n    if (!(this instanceof _Api2)) {\n      return new _Api2(context, data);\n    }\n\n    var settings = [];\n\n    var ctxSettings = function ctxSettings(o) {\n      var a = _toSettings(o);\n\n      if (a) {\n        settings = settings.concat(a);\n      }\n    };\n\n    if ($.isArray(context)) {\n      for (var i = 0, ien = context.length; i < ien; i++) {\n        ctxSettings(context[i]);\n      }\n    } else {\n      ctxSettings(context);\n    } // Remove duplicates\n\n\n    this.context = _unique(settings); // Initial data\n\n    if (data) {\n      $.merge(this, data);\n    } // selector\n\n\n    this.selector = {\n      rows: null,\n      cols: null,\n      opts: null\n    };\n\n    _Api2.extend(this, this, __apiStruct);\n  };\n\n  DataTable.Api = _Api2; // Don't destroy the existing prototype, just extend it. Required for jQuery 2's\n  // isPlainObject.\n\n  $.extend(_Api2.prototype, {\n    any: function any() {\n      return this.count() !== 0;\n    },\n    concat: __arrayProto.concat,\n    context: [],\n    // array of table settings objects\n    count: function count() {\n      return this.flatten().length;\n    },\n    each: function each(fn) {\n      for (var i = 0, ien = this.length; i < ien; i++) {\n        fn.call(this, this[i], i, this);\n      }\n\n      return this;\n    },\n    eq: function eq(idx) {\n      var ctx = this.context;\n      return ctx.length > idx ? new _Api2(ctx[idx], this[idx]) : null;\n    },\n    filter: function filter(fn) {\n      var a = [];\n\n      if (__arrayProto.filter) {\n        a = __arrayProto.filter.call(this, fn, this);\n      } else {\n        // Compatibility for browsers without EMCA-252-5 (JS 1.6)\n        for (var i = 0, ien = this.length; i < ien; i++) {\n          if (fn.call(this, this[i], i, this)) {\n            a.push(this[i]);\n          }\n        }\n      }\n\n      return new _Api2(this.context, a);\n    },\n    flatten: function flatten() {\n      var a = [];\n      return new _Api2(this.context, a.concat.apply(a, this.toArray()));\n    },\n    join: __arrayProto.join,\n    indexOf: __arrayProto.indexOf || function (obj, start) {\n      for (var i = start || 0, ien = this.length; i < ien; i++) {\n        if (this[i] === obj) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n    iterator: function iterator(flatten, type, fn, alwaysNew) {\n      var a = [],\n          ret,\n          i,\n          ien,\n          j,\n          jen,\n          context = this.context,\n          rows,\n          items,\n          item,\n          selector = this.selector; // Argument shifting\n\n      if (typeof flatten === 'string') {\n        alwaysNew = fn;\n        fn = type;\n        type = flatten;\n        flatten = false;\n      }\n\n      for (i = 0, ien = context.length; i < ien; i++) {\n        var apiInst = new _Api2(context[i]);\n\n        if (type === 'table') {\n          ret = fn.call(apiInst, context[i], i);\n\n          if (ret !== undefined) {\n            a.push(ret);\n          }\n        } else if (type === 'columns' || type === 'rows') {\n          // this has same length as context - one entry for each table\n          ret = fn.call(apiInst, context[i], this[i], i);\n\n          if (ret !== undefined) {\n            a.push(ret);\n          }\n        } else if (type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell') {\n          // columns and rows share the same structure.\n          // 'this' is an array of column indexes for each context\n          items = this[i];\n\n          if (type === 'column-rows') {\n            rows = _selector_row_indexes(context[i], selector.opts);\n          }\n\n          for (j = 0, jen = items.length; j < jen; j++) {\n            item = items[j];\n\n            if (type === 'cell') {\n              ret = fn.call(apiInst, context[i], item.row, item.column, i, j);\n            } else {\n              ret = fn.call(apiInst, context[i], item, i, j, rows);\n            }\n\n            if (ret !== undefined) {\n              a.push(ret);\n            }\n          }\n        }\n      }\n\n      if (a.length || alwaysNew) {\n        var api = new _Api2(context, flatten ? a.concat.apply([], a) : a);\n        var apiSelector = api.selector;\n        apiSelector.rows = selector.rows;\n        apiSelector.cols = selector.cols;\n        apiSelector.opts = selector.opts;\n        return api;\n      }\n\n      return this;\n    },\n    lastIndexOf: __arrayProto.lastIndexOf || function (obj, start) {\n      // Bit cheeky...\n      return this.indexOf.apply(this.toArray.reverse(), arguments);\n    },\n    length: 0,\n    map: function map(fn) {\n      var a = [];\n\n      if (__arrayProto.map) {\n        a = __arrayProto.map.call(this, fn, this);\n      } else {\n        // Compatibility for browsers without EMCA-252-5 (JS 1.6)\n        for (var i = 0, ien = this.length; i < ien; i++) {\n          a.push(fn.call(this, this[i], i));\n        }\n      }\n\n      return new _Api2(this.context, a);\n    },\n    pluck: function pluck(prop) {\n      return this.map(function (el) {\n        return el[prop];\n      });\n    },\n    pop: __arrayProto.pop,\n    push: __arrayProto.push,\n    // Does not return an API instance\n    reduce: __arrayProto.reduce || function (fn, init) {\n      return _fnReduce(this, fn, init, 0, this.length, 1);\n    },\n    reduceRight: __arrayProto.reduceRight || function (fn, init) {\n      return _fnReduce(this, fn, init, this.length - 1, -1, -1);\n    },\n    reverse: __arrayProto.reverse,\n    // Object with rows, columns and opts\n    selector: null,\n    shift: __arrayProto.shift,\n    slice: function slice() {\n      return new _Api2(this.context, this);\n    },\n    sort: __arrayProto.sort,\n    // ? name - order?\n    splice: __arrayProto.splice,\n    toArray: function toArray() {\n      return __arrayProto.slice.call(this);\n    },\n    to$: function to$() {\n      return $(this);\n    },\n    toJQuery: function toJQuery() {\n      return $(this);\n    },\n    unique: function unique() {\n      return new _Api2(this.context, _unique(this));\n    },\n    unshift: __arrayProto.unshift\n  });\n\n  _Api2.extend = function (scope, obj, ext) {\n    // Only extend API instances and static properties of the API\n    if (!ext.length || !obj || !(obj instanceof _Api2) && !obj.__dt_wrapper) {\n      return;\n    }\n\n    var i,\n        ien,\n        j,\n        jen,\n        struct,\n        inner,\n        methodScoping = function methodScoping(scope, fn, struc) {\n      return function () {\n        var ret = fn.apply(scope, arguments); // Method extension\n\n        _Api2.extend(ret, ret, struc.methodExt);\n\n        return ret;\n      };\n    };\n\n    for (i = 0, ien = ext.length; i < ien; i++) {\n      struct = ext[i]; // Value\n\n      obj[struct.name] = typeof struct.val === 'function' ? methodScoping(scope, struct.val, struct) : $.isPlainObject(struct.val) ? {} : struct.val;\n      obj[struct.name].__dt_wrapper = true; // Property extension\n\n      _Api2.extend(scope, obj[struct.name], struct.propExt);\n    }\n  }; // @todo - Is there need for an augment function?\n  // _Api.augment = function ( inst, name )\n  // {\n  // \t// Find src object in the structure from the name\n  // \tvar parts = name.split('.');\n  // \t_Api.extend( inst, obj );\n  // };\n  //     [\n  //       {\n  //         name:      'data'                -- string   - Property name\n  //         val:       function () {},       -- function - Api method (or undefined if just an object\n  //         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\n  //         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\n  //       },\n  //       {\n  //         name:     'row'\n  //         val:       {},\n  //         methodExt: [ ... ],\n  //         propExt:   [\n  //           {\n  //             name:      'data'\n  //             val:       function () {},\n  //             methodExt: [ ... ],\n  //             propExt:   [ ... ]\n  //           },\n  //           ...\n  //         ]\n  //       }\n  //     ]\n\n\n  _Api2.register = _api_register = function _api_register(name, val) {\n    if ($.isArray(name)) {\n      for (var j = 0, jen = name.length; j < jen; j++) {\n        _Api2.register(name[j], val);\n      }\n\n      return;\n    }\n\n    var i,\n        ien,\n        heir = name.split('.'),\n        struct = __apiStruct,\n        key,\n        method;\n\n    var find = function find(src, name) {\n      for (var i = 0, ien = src.length; i < ien; i++) {\n        if (src[i].name === name) {\n          return src[i];\n        }\n      }\n\n      return null;\n    };\n\n    for (i = 0, ien = heir.length; i < ien; i++) {\n      method = heir[i].indexOf('()') !== -1;\n      key = method ? heir[i].replace('()', '') : heir[i];\n      var src = find(struct, key);\n\n      if (!src) {\n        src = {\n          name: key,\n          val: {},\n          methodExt: [],\n          propExt: []\n        };\n        struct.push(src);\n      }\n\n      if (i === ien - 1) {\n        src.val = val;\n      } else {\n        struct = method ? src.methodExt : src.propExt;\n      }\n    }\n  };\n\n  _Api2.registerPlural = _api_registerPlural = function _api_registerPlural(pluralName, singularName, val) {\n    _Api2.register(pluralName, val);\n\n    _Api2.register(singularName, function () {\n      var ret = val.apply(this, arguments);\n\n      if (ret === this) {\n        // Returned item is the API instance that was passed in, return it\n        return this;\n      } else if (ret instanceof _Api2) {\n        // New API instance returned, want the value from the first item\n        // in the returned array for the singular result.\n        return ret.length ? $.isArray(ret[0]) ? new _Api2(ret.context, ret[0]) : // Array results are 'enhanced'\n        ret[0] : undefined;\n      } // Non-API return - just fire it back\n\n\n      return ret;\n    });\n  };\n  /**\n   * Selector for HTML tables. Apply the given selector to the give array of\n   * DataTables settings objects.\n   *\n   * @param {string|integer} [selector] jQuery selector string or integer\n   * @param  {array} Array of DataTables settings objects to be filtered\n   * @return {array}\n   * @ignore\n   */\n\n\n  var __table_selector = function __table_selector(selector, a) {\n    // Integer is used to pick out a table by index\n    if (typeof selector === 'number') {\n      return [a[selector]];\n    } // Perform a jQuery selector on the table nodes\n\n\n    var nodes = $.map(a, function (el, i) {\n      return el.nTable;\n    });\n    return $(nodes).filter(selector).map(function (i) {\n      // Need to translate back from the table node to the settings\n      var idx = $.inArray(this, nodes);\n      return a[idx];\n    }).toArray();\n  };\n  /**\n   * Context selector for the API's context (i.e. the tables the API instance\n   * refers to.\n   *\n   * @name    DataTable.Api#tables\n   * @param {string|integer} [selector] Selector to pick which tables the iterator\n   *   should operate on. If not given, all tables in the current context are\n   *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to\n   *   select multiple tables or as an integer to select a single table.\n   * @returns {DataTable.Api} Returns a new API instance if a selector is given.\n   */\n\n\n  _api_register('tables()', function (selector) {\n    // A new instance is created if there was a selector specified\n    return selector ? new _Api2(__table_selector(selector, this.context)) : this;\n  });\n\n  _api_register('table()', function (selector) {\n    var tables = this.tables(selector);\n    var ctx = tables.context; // Truncate to the first matched table\n\n    return ctx.length ? new _Api2(ctx[0]) : tables;\n  });\n\n  _api_registerPlural('tables().nodes()', 'table().node()', function () {\n    return this.iterator('table', function (ctx) {\n      return ctx.nTable;\n    }, 1);\n  });\n\n  _api_registerPlural('tables().body()', 'table().body()', function () {\n    return this.iterator('table', function (ctx) {\n      return ctx.nTBody;\n    }, 1);\n  });\n\n  _api_registerPlural('tables().header()', 'table().header()', function () {\n    return this.iterator('table', function (ctx) {\n      return ctx.nTHead;\n    }, 1);\n  });\n\n  _api_registerPlural('tables().footer()', 'table().footer()', function () {\n    return this.iterator('table', function (ctx) {\n      return ctx.nTFoot;\n    }, 1);\n  });\n\n  _api_registerPlural('tables().containers()', 'table().container()', function () {\n    return this.iterator('table', function (ctx) {\n      return ctx.nTableWrapper;\n    }, 1);\n  });\n  /**\n   * Redraw the tables in the current context.\n   */\n\n\n  _api_register('draw()', function (paging) {\n    return this.iterator('table', function (settings) {\n      if (paging === 'page') {\n        _fnDraw(settings);\n      } else {\n        if (typeof paging === 'string') {\n          paging = paging === 'full-hold' ? false : true;\n        }\n\n        _fnReDraw(settings, paging === false);\n      }\n    });\n  });\n  /**\n   * Get the current page index.\n   *\n   * @return {integer} Current page index (zero based)\n   */\n\n  /**\n  * Set the current page.\n  *\n  * Note that if you attempt to show a page which does not exist, DataTables will\n  * not throw an error, but rather reset the paging.\n  *\n  * @param {integer|string} action The paging action to take. This can be one of:\n  *  * `integer` - The page index to jump to\n  *  * `string` - An action to take:\n  *    * `first` - Jump to first page.\n  *    * `next` - Jump to the next page\n  *    * `previous` - Jump to previous page\n  *    * `last` - Jump to the last page.\n  * @returns {DataTables.Api} this\n  */\n\n\n  _api_register('page()', function (action) {\n    if (action === undefined) {\n      return this.page.info().page; // not an expensive call\n    } // else, have an action to take on all tables\n\n\n    return this.iterator('table', function (settings) {\n      _fnPageChange(settings, action);\n    });\n  });\n  /**\n   * Paging information for the first table in the current context.\n   *\n   * If you require paging information for another table, use the `table()` method\n   * with a suitable selector.\n   *\n   * @return {object} Object with the following properties set:\n   *  * `page` - Current page index (zero based - i.e. the first page is `0`)\n   *  * `pages` - Total number of pages\n   *  * `start` - Display index for the first record shown on the current page\n   *  * `end` - Display index for the last record shown on the current page\n   *  * `length` - Display length (number of records). Note that generally `start\n   *    + length = end`, but this is not always true, for example if there are\n   *    only 2 records to show on the final page, with a length of 10.\n   *  * `recordsTotal` - Full data set length\n   *  * `recordsDisplay` - Data set length once the current filtering criterion\n   *    are applied.\n   */\n\n\n  _api_register('page.info()', function (action) {\n    if (this.context.length === 0) {\n      return undefined;\n    }\n\n    var settings = this.context[0],\n        start = settings._iDisplayStart,\n        len = settings.oFeatures.bPaginate ? settings._iDisplayLength : -1,\n        visRecords = settings.fnRecordsDisplay(),\n        all = len === -1;\n    return {\n      \"page\": all ? 0 : Math.floor(start / len),\n      \"pages\": all ? 1 : Math.ceil(visRecords / len),\n      \"start\": start,\n      \"end\": settings.fnDisplayEnd(),\n      \"length\": len,\n      \"recordsTotal\": settings.fnRecordsTotal(),\n      \"recordsDisplay\": visRecords,\n      \"serverSide\": _fnDataSource(settings) === 'ssp'\n    };\n  });\n  /**\n   * Get the current page length.\n   *\n   * @return {integer} Current page length. Note `-1` indicates that all records\n   *   are to be shown.\n   */\n\n  /**\n  * Set the current page length.\n  *\n  * @param {integer} Page length to set. Use `-1` to show all records.\n  * @returns {DataTables.Api} this\n  */\n\n\n  _api_register('page.len()', function (len) {\n    // Note that we can't call this function 'length()' because `length`\n    // is a Javascript property of functions which defines how many arguments\n    // the function expects.\n    if (len === undefined) {\n      return this.context.length !== 0 ? this.context[0]._iDisplayLength : undefined;\n    } // else, set the page length\n\n\n    return this.iterator('table', function (settings) {\n      _fnLengthChange(settings, len);\n    });\n  });\n\n  var __reload = function __reload(settings, holdPosition, callback) {\n    // Use the draw event to trigger a callback\n    if (callback) {\n      var api = new _Api2(settings);\n      api.one('draw', function () {\n        callback(api.ajax.json());\n      });\n    }\n\n    if (_fnDataSource(settings) == 'ssp') {\n      _fnReDraw(settings, holdPosition);\n    } else {\n      _fnProcessingDisplay(settings, true); // Cancel an existing request\n\n\n      var xhr = settings.jqXHR;\n\n      if (xhr && xhr.readyState !== 4) {\n        xhr.abort();\n      } // Trigger xhr\n\n\n      _fnBuildAjax(settings, [], function (json) {\n        _fnClearTable(settings);\n\n        var data = _fnAjaxDataSrc(settings, json);\n\n        for (var i = 0, ien = data.length; i < ien; i++) {\n          _fnAddData(settings, data[i]);\n        }\n\n        _fnReDraw(settings, holdPosition);\n\n        _fnProcessingDisplay(settings, false);\n      });\n    }\n  };\n  /**\n   * Get the JSON response from the last Ajax request that DataTables made to the\n   * server. Note that this returns the JSON from the first table in the current\n   * context.\n   *\n   * @return {object} JSON received from the server.\n   */\n\n\n  _api_register('ajax.json()', function () {\n    var ctx = this.context;\n\n    if (ctx.length > 0) {\n      return ctx[0].json;\n    } // else return undefined;\n\n  });\n  /**\n   * Get the data submitted in the last Ajax request\n   */\n\n\n  _api_register('ajax.params()', function () {\n    var ctx = this.context;\n\n    if (ctx.length > 0) {\n      return ctx[0].oAjaxData;\n    } // else return undefined;\n\n  });\n  /**\n   * Reload tables from the Ajax data source. Note that this function will\n   * automatically re-draw the table when the remote data has been loaded.\n   *\n   * @param {boolean} [reset=true] Reset (default) or hold the current paging\n   *   position. A full re-sort and re-filter is performed when this method is\n   *   called, which is why the pagination reset is the default action.\n   * @returns {DataTables.Api} this\n   */\n\n\n  _api_register('ajax.reload()', function (callback, resetPaging) {\n    return this.iterator('table', function (settings) {\n      __reload(settings, resetPaging === false, callback);\n    });\n  });\n  /**\n   * Get the current Ajax URL. Note that this returns the URL from the first\n   * table in the current context.\n   *\n   * @return {string} Current Ajax source URL\n   */\n\n  /**\n  * Set the Ajax URL. Note that this will set the URL for all tables in the\n  * current context.\n  *\n  * @param {string} url URL to set.\n  * @returns {DataTables.Api} this\n  */\n\n\n  _api_register('ajax.url()', function (url) {\n    var ctx = this.context;\n\n    if (url === undefined) {\n      // get\n      if (ctx.length === 0) {\n        return undefined;\n      }\n\n      ctx = ctx[0];\n      return ctx.ajax ? $.isPlainObject(ctx.ajax) ? ctx.ajax.url : ctx.ajax : ctx.sAjaxSource;\n    } // set\n\n\n    return this.iterator('table', function (settings) {\n      if ($.isPlainObject(settings.ajax)) {\n        settings.ajax.url = url;\n      } else {\n        settings.ajax = url;\n      } // No need to consider sAjaxSource here since DataTables gives priority\n      // to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any\n      // value of `sAjaxSource` redundant.\n\n    });\n  });\n  /**\n   * Load data from the newly set Ajax URL. Note that this method is only\n   * available when `ajax.url()` is used to set a URL. Additionally, this method\n   * has the same effect as calling `ajax.reload()` but is provided for\n   * convenience when setting a new URL. Like `ajax.reload()` it will\n   * automatically redraw the table once the remote data has been loaded.\n   *\n   * @returns {DataTables.Api} this\n   */\n\n\n  _api_register('ajax.url().load()', function (callback, resetPaging) {\n    // Same as a reload, but makes sense to present it for easy access after a\n    // url change\n    return this.iterator('table', function (ctx) {\n      __reload(ctx, resetPaging === false, callback);\n    });\n  });\n\n  var _selector_run = function _selector_run(type, selector, selectFn, settings, opts) {\n    var out = [],\n        res,\n        a,\n        i,\n        ien,\n        j,\n        jen,\n        selectorType = typeof selector; // Can't just check for isArray here, as an API or jQuery instance might be\n    // given with their array like look\n\n    if (!selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined) {\n      selector = [selector];\n    }\n\n    for (i = 0, ien = selector.length; i < ien; i++) {\n      // Only split on simple strings - complex expressions will be jQuery selectors\n      a = selector[i] && selector[i].split && !selector[i].match(/[\\[\\(:]/) ? selector[i].split(',') : [selector[i]];\n\n      for (j = 0, jen = a.length; j < jen; j++) {\n        res = selectFn(typeof a[j] === 'string' ? $.trim(a[j]) : a[j]);\n\n        if (res && res.length) {\n          out = out.concat(res);\n        }\n      }\n    } // selector extensions\n\n\n    var ext = _ext.selector[type];\n\n    if (ext.length) {\n      for (i = 0, ien = ext.length; i < ien; i++) {\n        out = ext[i](settings, opts, out);\n      }\n    }\n\n    return _unique(out);\n  };\n\n  var _selector_opts = function _selector_opts(opts) {\n    if (!opts) {\n      opts = {};\n    } // Backwards compatibility for 1.9- which used the terminology filter rather\n    // than search\n\n\n    if (opts.filter && opts.search === undefined) {\n      opts.search = opts.filter;\n    }\n\n    return $.extend({\n      search: 'none',\n      order: 'current',\n      page: 'all'\n    }, opts);\n  };\n\n  var _selector_first = function _selector_first(inst) {\n    // Reduce the API instance to the first item found\n    for (var i = 0, ien = inst.length; i < ien; i++) {\n      if (inst[i].length > 0) {\n        // Assign the first element to the first item in the instance\n        // and truncate the instance and context\n        inst[0] = inst[i];\n        inst[0].length = 1;\n        inst.length = 1;\n        inst.context = [inst.context[i]];\n        return inst;\n      }\n    } // Not found - return an empty instance\n\n\n    inst.length = 0;\n    return inst;\n  };\n\n  var _selector_row_indexes = function _selector_row_indexes(settings, opts) {\n    var i,\n        ien,\n        tmp,\n        a = [],\n        displayFiltered = settings.aiDisplay,\n        displayMaster = settings.aiDisplayMaster;\n    var search = opts.search,\n        // none, applied, removed\n    order = opts.order,\n        // applied, current, index (original - compatibility with 1.9)\n    page = opts.page; // all, current\n\n    if (_fnDataSource(settings) == 'ssp') {\n      // In server-side processing mode, most options are irrelevant since\n      // rows not shown don't exist and the index order is the applied order\n      // Removed is a special case - for consistency just return an empty\n      // array\n      return search === 'removed' ? [] : _range(0, displayMaster.length);\n    } else if (page == 'current') {\n      // Current page implies that order=current and fitler=applied, since it is\n      // fairly senseless otherwise, regardless of what order and search actually\n      // are\n      for (i = settings._iDisplayStart, ien = settings.fnDisplayEnd(); i < ien; i++) {\n        a.push(displayFiltered[i]);\n      }\n    } else if (order == 'current' || order == 'applied') {\n      if (search == 'none') {\n        a = displayMaster.slice();\n      } else if (search == 'applied') {\n        a = displayFiltered.slice();\n      } else if (search == 'removed') {\n        // O(n+m) solution by creating a hash map\n        var displayFilteredMap = {};\n\n        for (var i = 0, ien = displayFiltered.length; i < ien; i++) {\n          displayFilteredMap[displayFiltered[i]] = null;\n        }\n\n        a = $.map(displayMaster, function (el) {\n          return !displayFilteredMap.hasOwnProperty(el) ? el : null;\n        });\n      }\n    } else if (order == 'index' || order == 'original') {\n      for (i = 0, ien = settings.aoData.length; i < ien; i++) {\n        if (search == 'none') {\n          a.push(i);\n        } else {\n          // applied | removed\n          tmp = $.inArray(i, displayFiltered);\n\n          if (tmp === -1 && search == 'removed' || tmp >= 0 && search == 'applied') {\n            a.push(i);\n          }\n        }\n      }\n    }\n\n    return a;\n  };\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * Rows\n   *\n   * {}          - no selector - use all available rows\n   * {integer}   - row aoData index\n   * {node}      - TR node\n   * {string}    - jQuery selector to apply to the TR elements\n   * {array}     - jQuery array of nodes, or simply an array of TR nodes\n   *\n   */\n\n\n  var __row_selector = function __row_selector(settings, selector, opts) {\n    var rows;\n\n    var run = function run(sel) {\n      var selInt = _intVal(sel);\n\n      var i, ien;\n      var aoData = settings.aoData; // Short cut - selector is a number and no options provided (default is\n      // all records, so no need to check if the index is in there, since it\n      // must be - dev error if the index doesn't exist).\n\n      if (selInt !== null && !opts) {\n        return [selInt];\n      }\n\n      if (!rows) {\n        rows = _selector_row_indexes(settings, opts);\n      }\n\n      if (selInt !== null && $.inArray(selInt, rows) !== -1) {\n        // Selector - integer\n        return [selInt];\n      } else if (sel === null || sel === undefined || sel === '') {\n        // Selector - none\n        return rows;\n      } // Selector - function\n\n\n      if (typeof sel === 'function') {\n        return $.map(rows, function (idx) {\n          var row = aoData[idx];\n          return sel(idx, row._aData, row.nTr) ? idx : null;\n        });\n      } // Selector - node\n\n\n      if (sel.nodeName) {\n        var rowIdx = sel._DT_RowIndex; // Property added by DT for fast lookup\n\n        var cellIdx = sel._DT_CellIndex;\n\n        if (rowIdx !== undefined) {\n          // Make sure that the row is actually still present in the table\n          return aoData[rowIdx] && aoData[rowIdx].nTr === sel ? [rowIdx] : [];\n        } else if (cellIdx) {\n          return aoData[cellIdx.row] && aoData[cellIdx.row].nTr === sel ? [cellIdx.row] : [];\n        } else {\n          var host = $(sel).closest('*[data-dt-row]');\n          return host.length ? [host.data('dt-row')] : [];\n        }\n      } // ID selector. Want to always be able to select rows by id, regardless\n      // of if the tr element has been created or not, so can't rely upon\n      // jQuery here - hence a custom implementation. This does not match\n      // Sizzle's fast selector or HTML4 - in HTML5 the ID can be anything,\n      // but to select it using a CSS selector engine (like Sizzle or\n      // querySelect) it would need to need to be escaped for some characters.\n      // DataTables simplifies this for row selectors since you can select\n      // only a row. A # indicates an id any anything that follows is the id -\n      // unescaped.\n\n\n      if (typeof sel === 'string' && sel.charAt(0) === '#') {\n        // get row index from id\n        var rowObj = settings.aIds[sel.replace(/^#/, '')];\n\n        if (rowObj !== undefined) {\n          return [rowObj.idx];\n        } // need to fall through to jQuery in case there is DOM id that\n        // matches\n\n      } // Get nodes in the order from the `rows` array with null values removed\n\n\n      var nodes = _removeEmpty(_pluck_order(settings.aoData, rows, 'nTr')); // Selector - jQuery selector string, array of nodes or jQuery object/\n      // As jQuery's .filter() allows jQuery objects to be passed in filter,\n      // it also allows arrays, so this will cope with all three options\n\n\n      return $(nodes).filter(sel).map(function () {\n        return this._DT_RowIndex;\n      }).toArray();\n    };\n\n    return _selector_run('row', selector, run, settings, opts);\n  };\n\n  _api_register('rows()', function (selector, opts) {\n    // argument shifting\n    if (selector === undefined) {\n      selector = '';\n    } else if ($.isPlainObject(selector)) {\n      opts = selector;\n      selector = '';\n    }\n\n    opts = _selector_opts(opts);\n    var inst = this.iterator('table', function (settings) {\n      return __row_selector(settings, selector, opts);\n    }, 1); // Want argument shifting here and in __row_selector?\n\n    inst.selector.rows = selector;\n    inst.selector.opts = opts;\n    return inst;\n  });\n\n  _api_register('rows().nodes()', function () {\n    return this.iterator('row', function (settings, row) {\n      return settings.aoData[row].nTr || undefined;\n    }, 1);\n  });\n\n  _api_register('rows().data()', function () {\n    return this.iterator(true, 'rows', function (settings, rows) {\n      return _pluck_order(settings.aoData, rows, '_aData');\n    }, 1);\n  });\n\n  _api_registerPlural('rows().cache()', 'row().cache()', function (type) {\n    return this.iterator('row', function (settings, row) {\n      var r = settings.aoData[row];\n      return type === 'search' ? r._aFilterData : r._aSortData;\n    }, 1);\n  });\n\n  _api_registerPlural('rows().invalidate()', 'row().invalidate()', function (src) {\n    return this.iterator('row', function (settings, row) {\n      _fnInvalidate(settings, row, src);\n    });\n  });\n\n  _api_registerPlural('rows().indexes()', 'row().index()', function () {\n    return this.iterator('row', function (settings, row) {\n      return row;\n    }, 1);\n  });\n\n  _api_registerPlural('rows().ids()', 'row().id()', function (hash) {\n    var a = [];\n    var context = this.context; // `iterator` will drop undefined values, but in this case we want them\n\n    for (var i = 0, ien = context.length; i < ien; i++) {\n      for (var j = 0, jen = this[i].length; j < jen; j++) {\n        var id = context[i].rowIdFn(context[i].aoData[this[i][j]]._aData);\n        a.push((hash === true ? '#' : '') + id);\n      }\n    }\n\n    return new _Api2(context, a);\n  });\n\n  _api_registerPlural('rows().remove()', 'row().remove()', function () {\n    var that = this;\n    this.iterator('row', function (settings, row, thatIdx) {\n      var data = settings.aoData;\n      var rowData = data[row];\n      var i, ien, j, jen;\n      var loopRow, loopCells;\n      data.splice(row, 1); // Update the cached indexes\n\n      for (i = 0, ien = data.length; i < ien; i++) {\n        loopRow = data[i];\n        loopCells = loopRow.anCells; // Rows\n\n        if (loopRow.nTr !== null) {\n          loopRow.nTr._DT_RowIndex = i;\n        } // Cells\n\n\n        if (loopCells !== null) {\n          for (j = 0, jen = loopCells.length; j < jen; j++) {\n            loopCells[j]._DT_CellIndex.row = i;\n          }\n        }\n      } // Delete from the display arrays\n\n\n      _fnDeleteIndex(settings.aiDisplayMaster, row);\n\n      _fnDeleteIndex(settings.aiDisplay, row);\n\n      _fnDeleteIndex(that[thatIdx], row, false); // maintain local indexes\n      // For server-side processing tables - subtract the deleted row from the count\n\n\n      if (settings._iRecordsDisplay > 0) {\n        settings._iRecordsDisplay--;\n      } // Check for an 'overflow' they case for displaying the table\n\n\n      _fnLengthOverflow(settings); // Remove the row's ID reference if there is one\n\n\n      var id = settings.rowIdFn(rowData._aData);\n\n      if (id !== undefined) {\n        delete settings.aIds[id];\n      }\n    });\n    this.iterator('table', function (settings) {\n      for (var i = 0, ien = settings.aoData.length; i < ien; i++) {\n        settings.aoData[i].idx = i;\n      }\n    });\n    return this;\n  });\n\n  _api_register('rows.add()', function (rows) {\n    var newRows = this.iterator('table', function (settings) {\n      var row, i, ien;\n      var out = [];\n\n      for (i = 0, ien = rows.length; i < ien; i++) {\n        row = rows[i];\n\n        if (row.nodeName && row.nodeName.toUpperCase() === 'TR') {\n          out.push(_fnAddTr(settings, row)[0]);\n        } else {\n          out.push(_fnAddData(settings, row));\n        }\n      }\n\n      return out;\n    }, 1); // Return an Api.rows() extended instance, so rows().nodes() etc can be used\n\n    var modRows = this.rows(-1);\n    modRows.pop();\n    $.merge(modRows, newRows);\n    return modRows;\n  });\n  /**\n   *\n   */\n\n\n  _api_register('row()', function (selector, opts) {\n    return _selector_first(this.rows(selector, opts));\n  });\n\n  _api_register('row().data()', function (data) {\n    var ctx = this.context;\n\n    if (data === undefined) {\n      // Get\n      return ctx.length && this.length ? ctx[0].aoData[this[0]]._aData : undefined;\n    } // Set\n\n\n    var row = ctx[0].aoData[this[0]];\n    row._aData = data; // If the DOM has an id, and the data source is an array\n\n    if ($.isArray(data) && row.nTr.id) {\n      _fnSetObjectDataFn(ctx[0].rowId)(data, row.nTr.id);\n    } // Automatically invalidate\n\n\n    _fnInvalidate(ctx[0], this[0], 'data');\n\n    return this;\n  });\n\n  _api_register('row().node()', function () {\n    var ctx = this.context;\n    return ctx.length && this.length ? ctx[0].aoData[this[0]].nTr || null : null;\n  });\n\n  _api_register('row.add()', function (row) {\n    // Allow a jQuery object to be passed in - only a single row is added from\n    // it though - the first element in the set\n    if (row instanceof $ && row.length) {\n      row = row[0];\n    }\n\n    var rows = this.iterator('table', function (settings) {\n      if (row.nodeName && row.nodeName.toUpperCase() === 'TR') {\n        return _fnAddTr(settings, row)[0];\n      }\n\n      return _fnAddData(settings, row);\n    }); // Return an Api.rows() extended instance, with the newly added row selected\n\n    return this.row(rows[0]);\n  });\n\n  var __details_add = function __details_add(ctx, row, data, klass) {\n    // Convert to array of TR elements\n    var rows = [];\n\n    var addRow = function addRow(r, k) {\n      // Recursion to allow for arrays of jQuery objects\n      if ($.isArray(r) || r instanceof $) {\n        for (var i = 0, ien = r.length; i < ien; i++) {\n          addRow(r[i], k);\n        }\n\n        return;\n      } // If we get a TR element, then just add it directly - up to the dev\n      // to add the correct number of columns etc\n\n\n      if (r.nodeName && r.nodeName.toLowerCase() === 'tr') {\n        rows.push(r);\n      } else {\n        // Otherwise create a row with a wrapper\n        var created = $('<tr><td/></tr>').addClass(k);\n        $('td', created).addClass(k).html(r)[0].colSpan = _fnVisbleColumns(ctx);\n        rows.push(created[0]);\n      }\n    };\n\n    addRow(data, klass);\n\n    if (row._details) {\n      row._details.detach();\n    }\n\n    row._details = $(rows); // If the children were already shown, that state should be retained\n\n    if (row._detailsShow) {\n      row._details.insertAfter(row.nTr);\n    }\n  };\n\n  var __details_remove = function __details_remove(api, idx) {\n    var ctx = api.context;\n\n    if (ctx.length) {\n      var row = ctx[0].aoData[idx !== undefined ? idx : api[0]];\n\n      if (row && row._details) {\n        row._details.remove();\n\n        row._detailsShow = undefined;\n        row._details = undefined;\n      }\n    }\n  };\n\n  var __details_display = function __details_display(api, show) {\n    var ctx = api.context;\n\n    if (ctx.length && api.length) {\n      var row = ctx[0].aoData[api[0]];\n\n      if (row._details) {\n        row._detailsShow = show;\n\n        if (show) {\n          row._details.insertAfter(row.nTr);\n        } else {\n          row._details.detach();\n        }\n\n        __details_events(ctx[0]);\n      }\n    }\n  };\n\n  var __details_events = function __details_events(settings) {\n    var api = new _Api2(settings);\n    var namespace = '.dt.DT_details';\n    var drawEvent = 'draw' + namespace;\n    var colvisEvent = 'column-visibility' + namespace;\n    var destroyEvent = 'destroy' + namespace;\n    var data = settings.aoData;\n    api.off(drawEvent + ' ' + colvisEvent + ' ' + destroyEvent);\n\n    if (_pluck(data, '_details').length > 0) {\n      // On each draw, insert the required elements into the document\n      api.on(drawEvent, function (e, ctx) {\n        if (settings !== ctx) {\n          return;\n        }\n\n        api.rows({\n          page: 'current'\n        }).eq(0).each(function (idx) {\n          // Internal data grab\n          var row = data[idx];\n\n          if (row._detailsShow) {\n            row._details.insertAfter(row.nTr);\n          }\n        });\n      }); // Column visibility change - update the colspan\n\n      api.on(colvisEvent, function (e, ctx, idx, vis) {\n        if (settings !== ctx) {\n          return;\n        } // Update the colspan for the details rows (note, only if it already has\n        // a colspan)\n\n\n        var row,\n            visible = _fnVisbleColumns(ctx);\n\n        for (var i = 0, ien = data.length; i < ien; i++) {\n          row = data[i];\n\n          if (row._details) {\n            row._details.children('td[colspan]').attr('colspan', visible);\n          }\n        }\n      }); // Table destroyed - nuke any child rows\n\n      api.on(destroyEvent, function (e, ctx) {\n        if (settings !== ctx) {\n          return;\n        }\n\n        for (var i = 0, ien = data.length; i < ien; i++) {\n          if (data[i]._details) {\n            __details_remove(api, i);\n          }\n        }\n      });\n    }\n  }; // Strings for the method names to help minification\n\n\n  var _emp = '';\n\n  var _child_obj = _emp + 'row().child';\n\n  var _child_mth = _child_obj + '()'; // data can be:\n  //  tr\n  //  string\n  //  jQuery or array of any of the above\n\n\n  _api_register(_child_mth, function (data, klass) {\n    var ctx = this.context;\n\n    if (data === undefined) {\n      // get\n      return ctx.length && this.length ? ctx[0].aoData[this[0]]._details : undefined;\n    } else if (data === true) {\n      // show\n      this.child.show();\n    } else if (data === false) {\n      // remove\n      __details_remove(this);\n    } else if (ctx.length && this.length) {\n      // set\n      __details_add(ctx[0], ctx[0].aoData[this[0]], data, klass);\n    }\n\n    return this;\n  });\n\n  _api_register([_child_obj + '.show()', _child_mth + '.show()' // only when `child()` was called with parameters (without\n  ], function (show) {\n    // it returns an object and this method is not executed)\n    __details_display(this, true);\n\n    return this;\n  });\n\n  _api_register([_child_obj + '.hide()', _child_mth + '.hide()' // only when `child()` was called with parameters (without\n  ], function () {\n    // it returns an object and this method is not executed)\n    __details_display(this, false);\n\n    return this;\n  });\n\n  _api_register([_child_obj + '.remove()', _child_mth + '.remove()' // only when `child()` was called with parameters (without\n  ], function () {\n    // it returns an object and this method is not executed)\n    __details_remove(this);\n\n    return this;\n  });\n\n  _api_register(_child_obj + '.isShown()', function () {\n    var ctx = this.context;\n\n    if (ctx.length && this.length) {\n      // _detailsShown as false or undefined will fall through to return false\n      return ctx[0].aoData[this[0]]._detailsShow || false;\n    }\n\n    return false;\n  });\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * Columns\n   *\n   * {integer}           - column index (>=0 count from left, <0 count from right)\n   * \"{integer}:visIdx\"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)\n   * \"{integer}:visible\" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)\n   * \"{string}:name\"     - column name\n   * \"{string}\"          - jQuery selector on column header nodes\n   *\n   */\n  // can be an array of these items, comma separated list, or an array of comma\n  // separated lists\n\n\n  var __re_column_selector = /^([^:]+):(name|visIdx|visible)$/; // r1 and r2 are redundant - but it means that the parameters match for the\n  // iterator callback in columns().data()\n\n  var __columnData = function __columnData(settings, column, r1, r2, rows) {\n    var a = [];\n\n    for (var row = 0, ien = rows.length; row < ien; row++) {\n      a.push(_fnGetCellData(settings, rows[row], column));\n    }\n\n    return a;\n  };\n\n  var __column_selector = function __column_selector(settings, selector, opts) {\n    var columns = settings.aoColumns,\n        names = _pluck(columns, 'sName'),\n        nodes = _pluck(columns, 'nTh');\n\n    var run = function run(s) {\n      var selInt = _intVal(s); // Selector - all\n\n\n      if (s === '') {\n        return _range(columns.length);\n      } // Selector - index\n\n\n      if (selInt !== null) {\n        return [selInt >= 0 ? selInt : // Count from left\n        columns.length + selInt // Count from right (+ because its a negative value)\n        ];\n      } // Selector = function\n\n\n      if (typeof s === 'function') {\n        var rows = _selector_row_indexes(settings, opts);\n\n        return $.map(columns, function (col, idx) {\n          return s(idx, __columnData(settings, idx, 0, 0, rows), nodes[idx]) ? idx : null;\n        });\n      } // jQuery or string selector\n\n\n      var match = typeof s === 'string' ? s.match(__re_column_selector) : '';\n\n      if (match) {\n        switch (match[2]) {\n          case 'visIdx':\n          case 'visible':\n            var idx = parseInt(match[1], 10); // Visible index given, convert to column index\n\n            if (idx < 0) {\n              // Counting from the right\n              var visColumns = $.map(columns, function (col, i) {\n                return col.bVisible ? i : null;\n              });\n              return [visColumns[visColumns.length + idx]];\n            } // Counting from the left\n\n\n            return [_fnVisibleToColumnIndex(settings, idx)];\n\n          case 'name':\n            // match by name. `names` is column index complete and in order\n            return $.map(names, function (name, i) {\n              return name === match[1] ? i : null;\n            });\n\n          default:\n            return [];\n        }\n      } // Cell in the table body\n\n\n      if (s.nodeName && s._DT_CellIndex) {\n        return [s._DT_CellIndex.column];\n      } // jQuery selector on the TH elements for the columns\n\n\n      var jqResult = $(nodes).filter(s).map(function () {\n        return $.inArray(this, nodes); // `nodes` is column index complete and in order\n      }).toArray();\n\n      if (jqResult.length || !s.nodeName) {\n        return jqResult;\n      } // Otherwise a node which might have a `dt-column` data attribute, or be\n      // a child or such an element\n\n\n      var host = $(s).closest('*[data-dt-column]');\n      return host.length ? [host.data('dt-column')] : [];\n    };\n\n    return _selector_run('column', selector, run, settings, opts);\n  };\n\n  var __setColumnVis = function __setColumnVis(settings, column, vis) {\n    var cols = settings.aoColumns,\n        col = cols[column],\n        data = settings.aoData,\n        row,\n        cells,\n        i,\n        ien,\n        tr; // Get\n\n    if (vis === undefined) {\n      return col.bVisible;\n    } // Set\n    // No change\n\n\n    if (col.bVisible === vis) {\n      return;\n    }\n\n    if (vis) {\n      // Insert column\n      // Need to decide if we should use appendChild or insertBefore\n      var insertBefore = $.inArray(true, _pluck(cols, 'bVisible'), column + 1);\n\n      for (i = 0, ien = data.length; i < ien; i++) {\n        tr = data[i].nTr;\n        cells = data[i].anCells;\n\n        if (tr) {\n          // insertBefore can act like appendChild if 2nd arg is null\n          tr.insertBefore(cells[column], cells[insertBefore] || null);\n        }\n      }\n    } else {\n      // Remove column\n      $(_pluck(settings.aoData, 'anCells', column)).detach();\n    } // Common actions\n\n\n    col.bVisible = vis;\n\n    _fnDrawHead(settings, settings.aoHeader);\n\n    _fnDrawHead(settings, settings.aoFooter); // Update colspan for no records display. Child rows and extensions will use their own\n    // listeners to do this - only need to update the empty table item here\n\n\n    if (!settings.aiDisplay.length) {\n      $(settings.nTBody).find('td[colspan]').attr('colspan', _fnVisbleColumns(settings));\n    }\n\n    _fnSaveState(settings);\n  };\n\n  _api_register('columns()', function (selector, opts) {\n    // argument shifting\n    if (selector === undefined) {\n      selector = '';\n    } else if ($.isPlainObject(selector)) {\n      opts = selector;\n      selector = '';\n    }\n\n    opts = _selector_opts(opts);\n    var inst = this.iterator('table', function (settings) {\n      return __column_selector(settings, selector, opts);\n    }, 1); // Want argument shifting here and in _row_selector?\n\n    inst.selector.cols = selector;\n    inst.selector.opts = opts;\n    return inst;\n  });\n\n  _api_registerPlural('columns().header()', 'column().header()', function (selector, opts) {\n    return this.iterator('column', function (settings, column) {\n      return settings.aoColumns[column].nTh;\n    }, 1);\n  });\n\n  _api_registerPlural('columns().footer()', 'column().footer()', function (selector, opts) {\n    return this.iterator('column', function (settings, column) {\n      return settings.aoColumns[column].nTf;\n    }, 1);\n  });\n\n  _api_registerPlural('columns().data()', 'column().data()', function () {\n    return this.iterator('column-rows', __columnData, 1);\n  });\n\n  _api_registerPlural('columns().dataSrc()', 'column().dataSrc()', function () {\n    return this.iterator('column', function (settings, column) {\n      return settings.aoColumns[column].mData;\n    }, 1);\n  });\n\n  _api_registerPlural('columns().cache()', 'column().cache()', function (type) {\n    return this.iterator('column-rows', function (settings, column, i, j, rows) {\n      return _pluck_order(settings.aoData, rows, type === 'search' ? '_aFilterData' : '_aSortData', column);\n    }, 1);\n  });\n\n  _api_registerPlural('columns().nodes()', 'column().nodes()', function () {\n    return this.iterator('column-rows', function (settings, column, i, j, rows) {\n      return _pluck_order(settings.aoData, rows, 'anCells', column);\n    }, 1);\n  });\n\n  _api_registerPlural('columns().visible()', 'column().visible()', function (vis, calc) {\n    var ret = this.iterator('column', function (settings, column) {\n      if (vis === undefined) {\n        return settings.aoColumns[column].bVisible;\n      } // else\n\n\n      __setColumnVis(settings, column, vis);\n    }); // Group the column visibility changes\n\n    if (vis !== undefined) {\n      // Second loop once the first is done for events\n      this.iterator('column', function (settings, column) {\n        _fnCallbackFire(settings, null, 'column-visibility', [settings, column, vis, calc]);\n      });\n\n      if (calc === undefined || calc) {\n        this.columns.adjust();\n      }\n    }\n\n    return ret;\n  });\n\n  _api_registerPlural('columns().indexes()', 'column().index()', function (type) {\n    return this.iterator('column', function (settings, column) {\n      return type === 'visible' ? _fnColumnIndexToVisible(settings, column) : column;\n    }, 1);\n  });\n\n  _api_register('columns.adjust()', function () {\n    return this.iterator('table', function (settings) {\n      _fnAdjustColumnSizing(settings);\n    }, 1);\n  });\n\n  _api_register('column.index()', function (type, idx) {\n    if (this.context.length !== 0) {\n      var ctx = this.context[0];\n\n      if (type === 'fromVisible' || type === 'toData') {\n        return _fnVisibleToColumnIndex(ctx, idx);\n      } else if (type === 'fromData' || type === 'toVisible') {\n        return _fnColumnIndexToVisible(ctx, idx);\n      }\n    }\n  });\n\n  _api_register('column()', function (selector, opts) {\n    return _selector_first(this.columns(selector, opts));\n  });\n\n  var __cell_selector = function __cell_selector(settings, selector, opts) {\n    var data = settings.aoData;\n\n    var rows = _selector_row_indexes(settings, opts);\n\n    var cells = _removeEmpty(_pluck_order(data, rows, 'anCells'));\n\n    var allCells = $([].concat.apply([], cells));\n    var row;\n    var columns = settings.aoColumns.length;\n    var a, i, ien, j, o, host;\n\n    var run = function run(s) {\n      var fnSelector = typeof s === 'function';\n\n      if (s === null || s === undefined || fnSelector) {\n        // All cells and function selectors\n        a = [];\n\n        for (i = 0, ien = rows.length; i < ien; i++) {\n          row = rows[i];\n\n          for (j = 0; j < columns; j++) {\n            o = {\n              row: row,\n              column: j\n            };\n\n            if (fnSelector) {\n              // Selector - function\n              host = data[row];\n\n              if (s(o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null)) {\n                a.push(o);\n              }\n            } else {\n              // Selector - all\n              a.push(o);\n            }\n          }\n        }\n\n        return a;\n      } // Selector - index\n\n\n      if ($.isPlainObject(s)) {\n        // Valid cell index and its in the array of selectable rows\n        return s.column !== undefined && s.row !== undefined && $.inArray(s.row, rows) !== -1 ? [s] : [];\n      } // Selector - jQuery filtered cells\n\n\n      var jqResult = allCells.filter(s).map(function (i, el) {\n        return {\n          // use a new object, in case someone changes the values\n          row: el._DT_CellIndex.row,\n          column: el._DT_CellIndex.column\n        };\n      }).toArray();\n\n      if (jqResult.length || !s.nodeName) {\n        return jqResult;\n      } // Otherwise the selector is a node, and there is one last option - the\n      // element might be a child of an element which has dt-row and dt-column\n      // data attributes\n\n\n      host = $(s).closest('*[data-dt-row]');\n      return host.length ? [{\n        row: host.data('dt-row'),\n        column: host.data('dt-column')\n      }] : [];\n    };\n\n    return _selector_run('cell', selector, run, settings, opts);\n  };\n\n  _api_register('cells()', function (rowSelector, columnSelector, opts) {\n    // Argument shifting\n    if ($.isPlainObject(rowSelector)) {\n      // Indexes\n      if (rowSelector.row === undefined) {\n        // Selector options in first parameter\n        opts = rowSelector;\n        rowSelector = null;\n      } else {\n        // Cell index objects in first parameter\n        opts = columnSelector;\n        columnSelector = null;\n      }\n    }\n\n    if ($.isPlainObject(columnSelector)) {\n      opts = columnSelector;\n      columnSelector = null;\n    } // Cell selector\n\n\n    if (columnSelector === null || columnSelector === undefined) {\n      return this.iterator('table', function (settings) {\n        return __cell_selector(settings, rowSelector, _selector_opts(opts));\n      });\n    } // Row + column selector\n\n\n    var columns = this.columns(columnSelector);\n    var rows = this.rows(rowSelector);\n    var a, i, ien, j, jen;\n    this.iterator('table', function (settings, idx) {\n      a = [];\n\n      for (i = 0, ien = rows[idx].length; i < ien; i++) {\n        for (j = 0, jen = columns[idx].length; j < jen; j++) {\n          a.push({\n            row: rows[idx][i],\n            column: columns[idx][j]\n          });\n        }\n      }\n    }, 1); // Now pass through the cell selector for options\n\n    var cells = this.cells(a, opts);\n    $.extend(cells.selector, {\n      cols: columnSelector,\n      rows: rowSelector,\n      opts: opts\n    });\n    return cells;\n  });\n\n  _api_registerPlural('cells().nodes()', 'cell().node()', function () {\n    return this.iterator('cell', function (settings, row, column) {\n      var data = settings.aoData[row];\n      return data && data.anCells ? data.anCells[column] : undefined;\n    }, 1);\n  });\n\n  _api_register('cells().data()', function () {\n    return this.iterator('cell', function (settings, row, column) {\n      return _fnGetCellData(settings, row, column);\n    }, 1);\n  });\n\n  _api_registerPlural('cells().cache()', 'cell().cache()', function (type) {\n    type = type === 'search' ? '_aFilterData' : '_aSortData';\n    return this.iterator('cell', function (settings, row, column) {\n      return settings.aoData[row][type][column];\n    }, 1);\n  });\n\n  _api_registerPlural('cells().render()', 'cell().render()', function (type) {\n    return this.iterator('cell', function (settings, row, column) {\n      return _fnGetCellData(settings, row, column, type);\n    }, 1);\n  });\n\n  _api_registerPlural('cells().indexes()', 'cell().index()', function () {\n    return this.iterator('cell', function (settings, row, column) {\n      return {\n        row: row,\n        column: column,\n        columnVisible: _fnColumnIndexToVisible(settings, column)\n      };\n    }, 1);\n  });\n\n  _api_registerPlural('cells().invalidate()', 'cell().invalidate()', function (src) {\n    return this.iterator('cell', function (settings, row, column) {\n      _fnInvalidate(settings, row, src, column);\n    });\n  });\n\n  _api_register('cell()', function (rowSelector, columnSelector, opts) {\n    return _selector_first(this.cells(rowSelector, columnSelector, opts));\n  });\n\n  _api_register('cell().data()', function (data) {\n    var ctx = this.context;\n    var cell = this[0];\n\n    if (data === undefined) {\n      // Get\n      return ctx.length && cell.length ? _fnGetCellData(ctx[0], cell[0].row, cell[0].column) : undefined;\n    } // Set\n\n\n    _fnSetCellData(ctx[0], cell[0].row, cell[0].column, data);\n\n    _fnInvalidate(ctx[0], cell[0].row, 'data', cell[0].column);\n\n    return this;\n  });\n  /**\n   * Get current ordering (sorting) that has been applied to the table.\n   *\n   * @returns {array} 2D array containing the sorting information for the first\n   *   table in the current context. Each element in the parent array represents\n   *   a column being sorted upon (i.e. multi-sorting with two columns would have\n   *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is\n   *   the column index that the sorting condition applies to, the second is the\n   *   direction of the sort (`desc` or `asc`) and, optionally, the third is the\n   *   index of the sorting order from the `column.sorting` initialisation array.\n   */\n\n  /**\n  * Set the ordering for the table.\n  *\n  * @param {integer} order Column index to sort upon.\n  * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)\n  * @returns {DataTables.Api} this\n  */\n\n  /**\n  * Set the ordering for the table.\n  *\n  * @param {array} order 1D array of sorting information to be applied.\n  * @param {array} [...] Optional additional sorting conditions\n  * @returns {DataTables.Api} this\n  */\n\n  /**\n  * Set the ordering for the table.\n  *\n  * @param {array} order 2D array of sorting information to be applied.\n  * @returns {DataTables.Api} this\n  */\n\n\n  _api_register('order()', function (order, dir) {\n    var ctx = this.context;\n\n    if (order === undefined) {\n      // get\n      return ctx.length !== 0 ? ctx[0].aaSorting : undefined;\n    } // set\n\n\n    if (typeof order === 'number') {\n      // Simple column / direction passed in\n      order = [[order, dir]];\n    } else if (order.length && !$.isArray(order[0])) {\n      // Arguments passed in (list of 1D arrays)\n      order = Array.prototype.slice.call(arguments);\n    } // otherwise a 2D array was passed in\n\n\n    return this.iterator('table', function (settings) {\n      settings.aaSorting = order.slice();\n    });\n  });\n  /**\n   * Attach a sort listener to an element for a given column\n   *\n   * @param {node|jQuery|string} node Identifier for the element(s) to attach the\n   *   listener to. This can take the form of a single DOM node, a jQuery\n   *   collection of nodes or a jQuery selector which will identify the node(s).\n   * @param {integer} column the column that a click on this node will sort on\n   * @param {function} [callback] callback function when sort is run\n   * @returns {DataTables.Api} this\n   */\n\n\n  _api_register('order.listener()', function (node, column, callback) {\n    return this.iterator('table', function (settings) {\n      _fnSortAttachListener(settings, node, column, callback);\n    });\n  });\n\n  _api_register('order.fixed()', function (set) {\n    if (!set) {\n      var ctx = this.context;\n      var fixed = ctx.length ? ctx[0].aaSortingFixed : undefined;\n      return $.isArray(fixed) ? {\n        pre: fixed\n      } : fixed;\n    }\n\n    return this.iterator('table', function (settings) {\n      settings.aaSortingFixed = $.extend(true, {}, set);\n    });\n  }); // Order by the selected column(s)\n\n\n  _api_register(['columns().order()', 'column().order()'], function (dir) {\n    var that = this;\n    return this.iterator('table', function (settings, i) {\n      var sort = [];\n      $.each(that[i], function (j, col) {\n        sort.push([col, dir]);\n      });\n      settings.aaSorting = sort;\n    });\n  });\n\n  _api_register('search()', function (input, regex, smart, caseInsen) {\n    var ctx = this.context;\n\n    if (input === undefined) {\n      // get\n      return ctx.length !== 0 ? ctx[0].oPreviousSearch.sSearch : undefined;\n    } // set\n\n\n    return this.iterator('table', function (settings) {\n      if (!settings.oFeatures.bFilter) {\n        return;\n      }\n\n      _fnFilterComplete(settings, $.extend({}, settings.oPreviousSearch, {\n        \"sSearch\": input + \"\",\n        \"bRegex\": regex === null ? false : regex,\n        \"bSmart\": smart === null ? true : smart,\n        \"bCaseInsensitive\": caseInsen === null ? true : caseInsen\n      }), 1);\n    });\n  });\n\n  _api_registerPlural('columns().search()', 'column().search()', function (input, regex, smart, caseInsen) {\n    return this.iterator('column', function (settings, column) {\n      var preSearch = settings.aoPreSearchCols;\n\n      if (input === undefined) {\n        // get\n        return preSearch[column].sSearch;\n      } // set\n\n\n      if (!settings.oFeatures.bFilter) {\n        return;\n      }\n\n      $.extend(preSearch[column], {\n        \"sSearch\": input + \"\",\n        \"bRegex\": regex === null ? false : regex,\n        \"bSmart\": smart === null ? true : smart,\n        \"bCaseInsensitive\": caseInsen === null ? true : caseInsen\n      });\n\n      _fnFilterComplete(settings, settings.oPreviousSearch, 1);\n    });\n  });\n  /*\n   * State API methods\n   */\n\n\n  _api_register('state()', function () {\n    return this.context.length ? this.context[0].oSavedState : null;\n  });\n\n  _api_register('state.clear()', function () {\n    return this.iterator('table', function (settings) {\n      // Save an empty object\n      settings.fnStateSaveCallback.call(settings.oInstance, settings, {});\n    });\n  });\n\n  _api_register('state.loaded()', function () {\n    return this.context.length ? this.context[0].oLoadedState : null;\n  });\n\n  _api_register('state.save()', function () {\n    return this.iterator('table', function (settings) {\n      _fnSaveState(settings);\n    });\n  });\n  /**\n   * Provide a common method for plug-ins to check the version of DataTables being\n   * used, in order to ensure compatibility.\n   *\n   *  @param {string} version Version string to check for, in the format \"X.Y.Z\".\n   *    Note that the formats \"X\" and \"X.Y\" are also acceptable.\n   *  @returns {boolean} true if this version of DataTables is greater or equal to\n   *    the required version, or false if this version of DataTales is not\n   *    suitable\n   *  @static\n   *  @dtopt API-Static\n   *\n   *  @example\n   *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );\n   */\n\n\n  DataTable.versionCheck = DataTable.fnVersionCheck = function (version) {\n    var aThis = DataTable.version.split('.');\n    var aThat = version.split('.');\n    var iThis, iThat;\n\n    for (var i = 0, iLen = aThat.length; i < iLen; i++) {\n      iThis = parseInt(aThis[i], 10) || 0;\n      iThat = parseInt(aThat[i], 10) || 0; // Parts are the same, keep comparing\n\n      if (iThis === iThat) {\n        continue;\n      } // Parts are different, return immediately\n\n\n      return iThis > iThat;\n    }\n\n    return true;\n  };\n  /**\n   * Check if a `<table>` node is a DataTable table already or not.\n   *\n   *  @param {node|jquery|string} table Table node, jQuery object or jQuery\n   *      selector for the table to test. Note that if more than more than one\n   *      table is passed on, only the first will be checked\n   *  @returns {boolean} true the table given is a DataTable, or false otherwise\n   *  @static\n   *  @dtopt API-Static\n   *\n   *  @example\n   *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {\n   *      $('#example').dataTable();\n   *    }\n   */\n\n\n  DataTable.isDataTable = DataTable.fnIsDataTable = function (table) {\n    var t = $(table).get(0);\n    var is = false;\n\n    if (table instanceof DataTable.Api) {\n      return true;\n    }\n\n    $.each(DataTable.settings, function (i, o) {\n      var head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;\n      var foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;\n\n      if (o.nTable === t || head === t || foot === t) {\n        is = true;\n      }\n    });\n    return is;\n  };\n  /**\n   * Get all DataTable tables that have been initialised - optionally you can\n   * select to get only currently visible tables.\n   *\n   *  @param {boolean} [visible=false] Flag to indicate if you want all (default)\n   *    or visible tables only.\n   *  @returns {array} Array of `table` nodes (not DataTable instances) which are\n   *    DataTables\n   *  @static\n   *  @dtopt API-Static\n   *\n   *  @example\n   *    $.each( $.fn.dataTable.tables(true), function () {\n   *      $(table).DataTable().columns.adjust();\n   *    } );\n   */\n\n\n  DataTable.tables = DataTable.fnTables = function (visible) {\n    var api = false;\n\n    if ($.isPlainObject(visible)) {\n      api = visible.api;\n      visible = visible.visible;\n    }\n\n    var a = $.map(DataTable.settings, function (o) {\n      if (!visible || visible && $(o.nTable).is(':visible')) {\n        return o.nTable;\n      }\n    });\n    return api ? new _Api2(a) : a;\n  };\n  /**\n   * Convert from camel case parameters to Hungarian notation. This is made public\n   * for the extensions to provide the same ability as DataTables core to accept\n   * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase\n   * parameters.\n   *\n   *  @param {object} src The model object which holds all parameters that can be\n   *    mapped.\n   *  @param {object} user The object to convert from camel case to Hungarian.\n   *  @param {boolean} force When set to `true`, properties which already have a\n   *    Hungarian value in the `user` object will be overwritten. Otherwise they\n   *    won't be.\n   */\n\n\n  DataTable.camelToHungarian = _fnCamelToHungarian;\n  /**\n   *\n   */\n\n  _api_register('$()', function (selector, opts) {\n    var rows = this.rows(opts).nodes(),\n        // Get all rows\n    jqRows = $(rows);\n    return $([].concat(jqRows.filter(selector).toArray(), jqRows.find(selector).toArray()));\n  }); // jQuery functions to operate on the tables\n\n\n  $.each(['on', 'one', 'off'], function (i, key) {\n    _api_register(key + '()', function ()\n    /* event, handler */\n    {\n      var args = Array.prototype.slice.call(arguments); // Add the `dt` namespace automatically if it isn't already present\n\n      args[0] = $.map(args[0].split(/\\s/), function (e) {\n        return !e.match(/\\.dt\\b/) ? e + '.dt' : e;\n      }).join(' ');\n      var inst = $(this.tables().nodes());\n      inst[key].apply(inst, args);\n      return this;\n    });\n  });\n\n  _api_register('clear()', function () {\n    return this.iterator('table', function (settings) {\n      _fnClearTable(settings);\n    });\n  });\n\n  _api_register('settings()', function () {\n    return new _Api2(this.context, this.context);\n  });\n\n  _api_register('init()', function () {\n    var ctx = this.context;\n    return ctx.length ? ctx[0].oInit : null;\n  });\n\n  _api_register('data()', function () {\n    return this.iterator('table', function (settings) {\n      return _pluck(settings.aoData, '_aData');\n    }).flatten();\n  });\n\n  _api_register('destroy()', function (remove) {\n    remove = remove || false;\n    return this.iterator('table', function (settings) {\n      var orig = settings.nTableWrapper.parentNode;\n      var classes = settings.oClasses;\n      var table = settings.nTable;\n      var tbody = settings.nTBody;\n      var thead = settings.nTHead;\n      var tfoot = settings.nTFoot;\n      var jqTable = $(table);\n      var jqTbody = $(tbody);\n      var jqWrapper = $(settings.nTableWrapper);\n      var rows = $.map(settings.aoData, function (r) {\n        return r.nTr;\n      });\n      var i, ien; // Flag to note that the table is currently being destroyed - no action\n      // should be taken\n\n      settings.bDestroying = true; // Fire off the destroy callbacks for plug-ins etc\n\n      _fnCallbackFire(settings, \"aoDestroyCallback\", \"destroy\", [settings]); // If not being removed from the document, make all columns visible\n\n\n      if (!remove) {\n        new _Api2(settings).columns().visible(true);\n      } // Blitz all `DT` namespaced events (these are internal events, the\n      // lowercase, `dt` events are user subscribed and they are responsible\n      // for removing them\n\n\n      jqWrapper.off('.DT').find(':not(tbody *)').off('.DT');\n      $(window).off('.DT-' + settings.sInstance); // When scrolling we had to break the table up - restore it\n\n      if (table != thead.parentNode) {\n        jqTable.children('thead').detach();\n        jqTable.append(thead);\n      }\n\n      if (tfoot && table != tfoot.parentNode) {\n        jqTable.children('tfoot').detach();\n        jqTable.append(tfoot);\n      }\n\n      settings.aaSorting = [];\n      settings.aaSortingFixed = [];\n\n      _fnSortingClasses(settings);\n\n      $(rows).removeClass(settings.asStripeClasses.join(' '));\n      $('th, td', thead).removeClass(classes.sSortable + ' ' + classes.sSortableAsc + ' ' + classes.sSortableDesc + ' ' + classes.sSortableNone); // Add the TR elements back into the table in their original order\n\n      jqTbody.children().detach();\n      jqTbody.append(rows); // Remove the DataTables generated nodes, events and classes\n\n      var removedMethod = remove ? 'remove' : 'detach';\n      jqTable[removedMethod]();\n      jqWrapper[removedMethod](); // If we need to reattach the table to the document\n\n      if (!remove && orig) {\n        // insertBefore acts like appendChild if !arg[1]\n        orig.insertBefore(table, settings.nTableReinsertBefore); // Restore the width of the original table - was read from the style property,\n        // so we can restore directly to that\n\n        jqTable.css('width', settings.sDestroyWidth).removeClass(classes.sTable); // If the were originally stripe classes - then we add them back here.\n        // Note this is not fool proof (for example if not all rows had stripe\n        // classes - but it's a good effort without getting carried away\n\n        ien = settings.asDestroyStripes.length;\n\n        if (ien) {\n          jqTbody.children().each(function (i) {\n            $(this).addClass(settings.asDestroyStripes[i % ien]);\n          });\n        }\n      }\n      /* Remove the settings object from the settings array */\n\n\n      var idx = $.inArray(settings, DataTable.settings);\n\n      if (idx !== -1) {\n        DataTable.settings.splice(idx, 1);\n      }\n    });\n  }); // Add the `every()` method for rows, columns and cells in a compact form\n\n\n  $.each(['column', 'row', 'cell'], function (i, type) {\n    _api_register(type + 's().every()', function (fn) {\n      var opts = this.selector.opts;\n      var api = this;\n      return this.iterator(type, function (settings, arg1, arg2, arg3, arg4) {\n        // Rows and columns:\n        //  arg1 - index\n        //  arg2 - table counter\n        //  arg3 - loop counter\n        //  arg4 - undefined\n        // Cells:\n        //  arg1 - row index\n        //  arg2 - column index\n        //  arg3 - table counter\n        //  arg4 - loop counter\n        fn.call(api[type](arg1, type === 'cell' ? arg2 : opts, type === 'cell' ? opts : undefined), arg1, arg2, arg3, arg4);\n      });\n    });\n  }); // i18n method for extensions to be able to use the language object from the\n  // DataTable\n\n  _api_register('i18n()', function (token, def, plural) {\n    var ctx = this.context[0];\n\n    var resolved = _fnGetObjectDataFn(token)(ctx.oLanguage);\n\n    if (resolved === undefined) {\n      resolved = def;\n    }\n\n    if (plural !== undefined && $.isPlainObject(resolved)) {\n      resolved = resolved[plural] !== undefined ? resolved[plural] : resolved._;\n    }\n\n    return resolved.replace('%d', plural); // nb: plural might be undefined,\n  });\n  /**\n   * Version string for plug-ins to check compatibility. Allowed format is\n   * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used\n   * only for non-release builds. See http://semver.org/ for more information.\n   *  @member\n   *  @type string\n   *  @default Version number\n   */\n\n\n  DataTable.version = \"1.10.19\";\n  /**\n   * Private data store, containing all of the settings objects that are\n   * created for the tables on a given page.\n   *\n   * Note that the `DataTable.settings` object is aliased to\n   * `jQuery.fn.dataTableExt` through which it may be accessed and\n   * manipulated, or `jQuery.fn.dataTable.settings`.\n   *  @member\n   *  @type array\n   *  @default []\n   *  @private\n   */\n\n  DataTable.settings = [];\n  /**\n   * Object models container, for the various models that DataTables has\n   * available to it. These models define the objects that are used to hold\n   * the active state and configuration of the table.\n   *  @namespace\n   */\n\n  DataTable.models = {};\n  /**\n   * Template object for the way in which DataTables holds information about\n   * search information for the global filter and individual column filters.\n   *  @namespace\n   */\n\n  DataTable.models.oSearch = {\n    /**\n     * Flag to indicate if the filtering should be case insensitive or not\n     *  @type boolean\n     *  @default true\n     */\n    \"bCaseInsensitive\": true,\n\n    /**\n     * Applied search term\n     *  @type string\n     *  @default <i>Empty string</i>\n     */\n    \"sSearch\": \"\",\n\n    /**\n     * Flag to indicate if the search term should be interpreted as a\n     * regular expression (true) or not (false) and therefore and special\n     * regex characters escaped.\n     *  @type boolean\n     *  @default false\n     */\n    \"bRegex\": false,\n\n    /**\n     * Flag to indicate if DataTables is to use its smart filtering or not.\n     *  @type boolean\n     *  @default true\n     */\n    \"bSmart\": true\n  };\n  /**\n   * Template object for the way in which DataTables holds information about\n   * each individual row. This is the object format used for the settings\n   * aoData array.\n   *  @namespace\n   */\n\n  DataTable.models.oRow = {\n    /**\n     * TR element for the row\n     *  @type node\n     *  @default null\n     */\n    \"nTr\": null,\n\n    /**\n     * Array of TD elements for each row. This is null until the row has been\n     * created.\n     *  @type array nodes\n     *  @default []\n     */\n    \"anCells\": null,\n\n    /**\n     * Data object from the original data source for the row. This is either\n     * an array if using the traditional form of DataTables, or an object if\n     * using mData options. The exact type will depend on the passed in\n     * data from the data source, or will be an array if using DOM a data\n     * source.\n     *  @type array|object\n     *  @default []\n     */\n    \"_aData\": [],\n\n    /**\n     * Sorting data cache - this array is ostensibly the same length as the\n     * number of columns (although each index is generated only as it is\n     * needed), and holds the data that is used for sorting each column in the\n     * row. We do this cache generation at the start of the sort in order that\n     * the formatting of the sort data need be done only once for each cell\n     * per sort. This array should not be read from or written to by anything\n     * other than the master sorting methods.\n     *  @type array\n     *  @default null\n     *  @private\n     */\n    \"_aSortData\": null,\n\n    /**\n     * Per cell filtering data cache. As per the sort data cache, used to\n     * increase the performance of the filtering in DataTables\n     *  @type array\n     *  @default null\n     *  @private\n     */\n    \"_aFilterData\": null,\n\n    /**\n     * Filtering data cache. This is the same as the cell filtering cache, but\n     * in this case a string rather than an array. This is easily computed with\n     * a join on `_aFilterData`, but is provided as a cache so the join isn't\n     * needed on every search (memory traded for performance)\n     *  @type array\n     *  @default null\n     *  @private\n     */\n    \"_sFilterRow\": null,\n\n    /**\n     * Cache of the class name that DataTables has applied to the row, so we\n     * can quickly look at this variable rather than needing to do a DOM check\n     * on className for the nTr property.\n     *  @type string\n     *  @default <i>Empty string</i>\n     *  @private\n     */\n    \"_sRowStripe\": \"\",\n\n    /**\n     * Denote if the original data source was from the DOM, or the data source\n     * object. This is used for invalidating data, so DataTables can\n     * automatically read data from the original source, unless uninstructed\n     * otherwise.\n     *  @type string\n     *  @default null\n     *  @private\n     */\n    \"src\": null,\n\n    /**\n     * Index in the aoData array. This saves an indexOf lookup when we have the\n     * object, but want to know the index\n     *  @type integer\n     *  @default -1\n     *  @private\n     */\n    \"idx\": -1\n  };\n  /**\n   * Template object for the column information object in DataTables. This object\n   * is held in the settings aoColumns array and contains all the information that\n   * DataTables needs about each individual column.\n   *\n   * Note that this object is related to {@link DataTable.defaults.column}\n   * but this one is the internal data store for DataTables's cache of columns.\n   * It should NOT be manipulated outside of DataTables. Any configuration should\n   * be done through the initialisation options.\n   *  @namespace\n   */\n\n  DataTable.models.oColumn = {\n    /**\n     * Column index. This could be worked out on-the-fly with $.inArray, but it\n     * is faster to just hold it as a variable\n     *  @type integer\n     *  @default null\n     */\n    \"idx\": null,\n\n    /**\n     * A list of the columns that sorting should occur on when this column\n     * is sorted. That this property is an array allows multi-column sorting\n     * to be defined for a column (for example first name / last name columns\n     * would benefit from this). The values are integers pointing to the\n     * columns to be sorted on (typically it will be a single integer pointing\n     * at itself, but that doesn't need to be the case).\n     *  @type array\n     */\n    \"aDataSort\": null,\n\n    /**\n     * Define the sorting directions that are applied to the column, in sequence\n     * as the column is repeatedly sorted upon - i.e. the first value is used\n     * as the sorting direction when the column if first sorted (clicked on).\n     * Sort it again (click again) and it will move on to the next index.\n     * Repeat until loop.\n     *  @type array\n     */\n    \"asSorting\": null,\n\n    /**\n     * Flag to indicate if the column is searchable, and thus should be included\n     * in the filtering or not.\n     *  @type boolean\n     */\n    \"bSearchable\": null,\n\n    /**\n     * Flag to indicate if the column is sortable or not.\n     *  @type boolean\n     */\n    \"bSortable\": null,\n\n    /**\n     * Flag to indicate if the column is currently visible in the table or not\n     *  @type boolean\n     */\n    \"bVisible\": null,\n\n    /**\n     * Store for manual type assignment using the `column.type` option. This\n     * is held in store so we can manipulate the column's `sType` property.\n     *  @type string\n     *  @default null\n     *  @private\n     */\n    \"_sManualType\": null,\n\n    /**\n     * Flag to indicate if HTML5 data attributes should be used as the data\n     * source for filtering or sorting. True is either are.\n     *  @type boolean\n     *  @default false\n     *  @private\n     */\n    \"_bAttrSrc\": false,\n\n    /**\n     * Developer definable function that is called whenever a cell is created (Ajax source,\n     * etc) or processed for input (DOM source). This can be used as a compliment to mRender\n     * allowing you to modify the DOM element (add background colour for example) when the\n     * element is available.\n     *  @type function\n     *  @param {element} nTd The TD node that has been created\n     *  @param {*} sData The Data for the cell\n     *  @param {array|object} oData The data for the whole row\n     *  @param {int} iRow The row index for the aoData data store\n     *  @default null\n     */\n    \"fnCreatedCell\": null,\n\n    /**\n     * Function to get data from a cell in a column. You should <b>never</b>\n     * access data directly through _aData internally in DataTables - always use\n     * the method attached to this property. It allows mData to function as\n     * required. This function is automatically assigned by the column\n     * initialisation method\n     *  @type function\n     *  @param {array|object} oData The data array/object for the array\n     *    (i.e. aoData[]._aData)\n     *  @param {string} sSpecific The specific data type you want to get -\n     *    'display', 'type' 'filter' 'sort'\n     *  @returns {*} The data for the cell from the given row's data\n     *  @default null\n     */\n    \"fnGetData\": null,\n\n    /**\n     * Function to set data for a cell in the column. You should <b>never</b>\n     * set the data directly to _aData internally in DataTables - always use\n     * this method. It allows mData to function as required. This function\n     * is automatically assigned by the column initialisation method\n     *  @type function\n     *  @param {array|object} oData The data array/object for the array\n     *    (i.e. aoData[]._aData)\n     *  @param {*} sValue Value to set\n     *  @default null\n     */\n    \"fnSetData\": null,\n\n    /**\n     * Property to read the value for the cells in the column from the data\n     * source array / object. If null, then the default content is used, if a\n     * function is given then the return from the function is used.\n     *  @type function|int|string|null\n     *  @default null\n     */\n    \"mData\": null,\n\n    /**\n     * Partner property to mData which is used (only when defined) to get\n     * the data - i.e. it is basically the same as mData, but without the\n     * 'set' option, and also the data fed to it is the result from mData.\n     * This is the rendering method to match the data method of mData.\n     *  @type function|int|string|null\n     *  @default null\n     */\n    \"mRender\": null,\n\n    /**\n     * Unique header TH/TD element for this column - this is what the sorting\n     * listener is attached to (if sorting is enabled.)\n     *  @type node\n     *  @default null\n     */\n    \"nTh\": null,\n\n    /**\n     * Unique footer TH/TD element for this column (if there is one). Not used\n     * in DataTables as such, but can be used for plug-ins to reference the\n     * footer for each column.\n     *  @type node\n     *  @default null\n     */\n    \"nTf\": null,\n\n    /**\n     * The class to apply to all TD elements in the table's TBODY for the column\n     *  @type string\n     *  @default null\n     */\n    \"sClass\": null,\n\n    /**\n     * When DataTables calculates the column widths to assign to each column,\n     * it finds the longest string in each column and then constructs a\n     * temporary table and reads the widths from that. The problem with this\n     * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\n     * string - thus the calculation can go wrong (doing it properly and putting\n     * it into an DOM object and measuring that is horribly(!) slow). Thus as\n     * a \"work around\" we provide this option. It will append its value to the\n     * text that is found to be the longest string for the column - i.e. padding.\n     *  @type string\n     */\n    \"sContentPadding\": null,\n\n    /**\n     * Allows a default value to be given for a column's data, and will be used\n     * whenever a null data source is encountered (this can be because mData\n     * is set to null, or because the data source itself is null).\n     *  @type string\n     *  @default null\n     */\n    \"sDefaultContent\": null,\n\n    /**\n     * Name for the column, allowing reference to the column by name as well as\n     * by index (needs a lookup to work by name).\n     *  @type string\n     */\n    \"sName\": null,\n\n    /**\n     * Custom sorting data type - defines which of the available plug-ins in\n     * afnSortData the custom sorting will use - if any is defined.\n     *  @type string\n     *  @default std\n     */\n    \"sSortDataType\": 'std',\n\n    /**\n     * Class to be applied to the header element when sorting on this column\n     *  @type string\n     *  @default null\n     */\n    \"sSortingClass\": null,\n\n    /**\n     * Class to be applied to the header element when sorting on this column -\n     * when jQuery UI theming is used.\n     *  @type string\n     *  @default null\n     */\n    \"sSortingClassJUI\": null,\n\n    /**\n     * Title of the column - what is seen in the TH element (nTh).\n     *  @type string\n     */\n    \"sTitle\": null,\n\n    /**\n     * Column sorting and filtering type\n     *  @type string\n     *  @default null\n     */\n    \"sType\": null,\n\n    /**\n     * Width of the column\n     *  @type string\n     *  @default null\n     */\n    \"sWidth\": null,\n\n    /**\n     * Width of the column when it was first \"encountered\"\n     *  @type string\n     *  @default null\n     */\n    \"sWidthOrig\": null\n  };\n  /*\n   * Developer note: The properties of the object below are given in Hungarian\n   * notation, that was used as the interface for DataTables prior to v1.10, however\n   * from v1.10 onwards the primary interface is camel case. In order to avoid\n   * breaking backwards compatibility utterly with this change, the Hungarian\n   * version is still, internally the primary interface, but is is not documented\n   * - hence the @name tags in each doc comment. This allows a Javascript function\n   * to create a map from Hungarian notation to camel case (going the other direction\n   * would require each property to be listed, which would at around 3K to the size\n   * of DataTables, while this method is about a 0.5K hit.\n   *\n   * Ultimately this does pave the way for Hungarian notation to be dropped\n   * completely, but that is a massive amount of work and will break current\n   * installs (therefore is on-hold until v2).\n   */\n\n  /**\n   * Initialisation options that can be given to DataTables at initialisation\n   * time.\n   *  @namespace\n   */\n\n  DataTable.defaults = {\n    /**\n     * An array of data to use for the table, passed in at initialisation which\n     * will be used in preference to any data which is already in the DOM. This is\n     * particularly useful for constructing tables purely in Javascript, for\n     * example with a custom Ajax call.\n     *  @type array\n     *  @default null\n     *\n     *  @dtopt Option\n     *  @name DataTable.defaults.data\n     *\n     *  @example\n     *    // Using a 2D array data source\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"data\": [\n     *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],\n     *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],\n     *        ],\n     *        \"columns\": [\n     *          { \"title\": \"Engine\" },\n     *          { \"title\": \"Browser\" },\n     *          { \"title\": \"Platform\" },\n     *          { \"title\": \"Version\" },\n     *          { \"title\": \"Grade\" }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using an array of objects as a data source (`data`)\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"data\": [\n     *          {\n     *            \"engine\":   \"Trident\",\n     *            \"browser\":  \"Internet Explorer 4.0\",\n     *            \"platform\": \"Win 95+\",\n     *            \"version\":  4,\n     *            \"grade\":    \"X\"\n     *          },\n     *          {\n     *            \"engine\":   \"Trident\",\n     *            \"browser\":  \"Internet Explorer 5.0\",\n     *            \"platform\": \"Win 95+\",\n     *            \"version\":  5,\n     *            \"grade\":    \"C\"\n     *          }\n     *        ],\n     *        \"columns\": [\n     *          { \"title\": \"Engine\",   \"data\": \"engine\" },\n     *          { \"title\": \"Browser\",  \"data\": \"browser\" },\n     *          { \"title\": \"Platform\", \"data\": \"platform\" },\n     *          { \"title\": \"Version\",  \"data\": \"version\" },\n     *          { \"title\": \"Grade\",    \"data\": \"grade\" }\n     *        ]\n     *      } );\n     *    } );\n     */\n    \"aaData\": null,\n\n    /**\n     * If ordering is enabled, then DataTables will perform a first pass sort on\n     * initialisation. You can define which column(s) the sort is performed\n     * upon, and the sorting direction, with this variable. The `sorting` array\n     * should contain an array for each column to be sorted initially containing\n     * the column's index and a direction string ('asc' or 'desc').\n     *  @type array\n     *  @default [[0,'asc']]\n     *\n     *  @dtopt Option\n     *  @name DataTable.defaults.order\n     *\n     *  @example\n     *    // Sort by 3rd column first, and then 4th column\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"order\": [[2,'asc'], [3,'desc']]\n     *      } );\n     *    } );\n     *\n     *    // No initial sorting\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"order\": []\n     *      } );\n     *    } );\n     */\n    \"aaSorting\": [[0, 'asc']],\n\n    /**\n     * This parameter is basically identical to the `sorting` parameter, but\n     * cannot be overridden by user interaction with the table. What this means\n     * is that you could have a column (visible or hidden) which the sorting\n     * will always be forced on first - any sorting after that (from the user)\n     * will then be performed as required. This can be useful for grouping rows\n     * together.\n     *  @type array\n     *  @default null\n     *\n     *  @dtopt Option\n     *  @name DataTable.defaults.orderFixed\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"orderFixed\": [[0,'asc']]\n     *      } );\n     *    } )\n     */\n    \"aaSortingFixed\": [],\n\n    /**\n     * DataTables can be instructed to load data to display in the table from a\n     * Ajax source. This option defines how that Ajax call is made and where to.\n     *\n     * The `ajax` property has three different modes of operation, depending on\n     * how it is defined. These are:\n     *\n     * * `string` - Set the URL from where the data should be loaded from.\n     * * `object` - Define properties for `jQuery.ajax`.\n     * * `function` - Custom data get function\n     *\n     * `string`\n     * --------\n     *\n     * As a string, the `ajax` property simply defines the URL from which\n     * DataTables will load data.\n     *\n     * `object`\n     * --------\n     *\n     * As an object, the parameters in the object are passed to\n     * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control\n     * of the Ajax request. DataTables has a number of default parameters which\n     * you can override using this option. Please refer to the jQuery\n     * documentation for a full description of the options available, although\n     * the following parameters provide additional options in DataTables or\n     * require special consideration:\n     *\n     * * `data` - As with jQuery, `data` can be provided as an object, but it\n     *   can also be used as a function to manipulate the data DataTables sends\n     *   to the server. The function takes a single parameter, an object of\n     *   parameters with the values that DataTables has readied for sending. An\n     *   object may be returned which will be merged into the DataTables\n     *   defaults, or you can add the items to the object that was passed in and\n     *   not return anything from the function. This supersedes `fnServerParams`\n     *   from DataTables 1.9-.\n     *\n     * * `dataSrc` - By default DataTables will look for the property `data` (or\n     *   `aaData` for compatibility with DataTables 1.9-) when obtaining data\n     *   from an Ajax source or for server-side processing - this parameter\n     *   allows that property to be changed. You can use Javascript dotted\n     *   object notation to get a data source for multiple levels of nesting, or\n     *   it my be used as a function. As a function it takes a single parameter,\n     *   the JSON returned from the server, which can be manipulated as\n     *   required, with the returned value being that used by DataTables as the\n     *   data source for the table. This supersedes `sAjaxDataProp` from\n     *   DataTables 1.9-.\n     *\n     * * `success` - Should not be overridden it is used internally in\n     *   DataTables. To manipulate / transform the data returned by the server\n     *   use `ajax.dataSrc`, or use `ajax` as a function (see below).\n     *\n     * `function`\n     * ----------\n     *\n     * As a function, making the Ajax call is left up to yourself allowing\n     * complete control of the Ajax request. Indeed, if desired, a method other\n     * than Ajax could be used to obtain the required data, such as Web storage\n     * or an AIR database.\n     *\n     * The function is given four parameters and no return is required. The\n     * parameters are:\n     *\n     * 1. _object_ - Data to send to the server\n     * 2. _function_ - Callback function that must be executed when the required\n     *    data has been obtained. That data should be passed into the callback\n     *    as the only parameter\n     * 3. _object_ - DataTables settings object for the table\n     *\n     * Note that this supersedes `fnServerData` from DataTables 1.9-.\n     *\n     *  @type string|object|function\n     *  @default null\n     *\n     *  @dtopt Option\n     *  @name DataTable.defaults.ajax\n     *  @since 1.10.0\n     *\n     * @example\n     *   // Get JSON data from a file via Ajax.\n     *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).\n     *   $('#example').dataTable( {\n     *     \"ajax\": \"data.json\"\n     *   } );\n     *\n     * @example\n     *   // Get JSON data from a file via Ajax, using `dataSrc` to change\n     *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)\n     *   $('#example').dataTable( {\n     *     \"ajax\": {\n     *       \"url\": \"data.json\",\n     *       \"dataSrc\": \"tableData\"\n     *     }\n     *   } );\n     *\n     * @example\n     *   // Get JSON data from a file via Ajax, using `dataSrc` to read data\n     *   // from a plain array rather than an array in an object\n     *   $('#example').dataTable( {\n     *     \"ajax\": {\n     *       \"url\": \"data.json\",\n     *       \"dataSrc\": \"\"\n     *     }\n     *   } );\n     *\n     * @example\n     *   // Manipulate the data returned from the server - add a link to data\n     *   // (note this can, should, be done using `render` for the column - this\n     *   // is just a simple example of how the data can be manipulated).\n     *   $('#example').dataTable( {\n     *     \"ajax\": {\n     *       \"url\": \"data.json\",\n     *       \"dataSrc\": function ( json ) {\n     *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {\n     *           json[i][0] = '<a href=\"/message/'+json[i][0]+'>View message</a>';\n     *         }\n     *         return json;\n     *       }\n     *     }\n     *   } );\n     *\n     * @example\n     *   // Add data to the request\n     *   $('#example').dataTable( {\n     *     \"ajax\": {\n     *       \"url\": \"data.json\",\n     *       \"data\": function ( d ) {\n     *         return {\n     *           \"extra_search\": $('#extra').val()\n     *         };\n     *       }\n     *     }\n     *   } );\n     *\n     * @example\n     *   // Send request as POST\n     *   $('#example').dataTable( {\n     *     \"ajax\": {\n     *       \"url\": \"data.json\",\n     *       \"type\": \"POST\"\n     *     }\n     *   } );\n     *\n     * @example\n     *   // Get the data from localStorage (could interface with a form for\n     *   // adding, editing and removing rows).\n     *   $('#example').dataTable( {\n     *     \"ajax\": function (data, callback, settings) {\n     *       callback(\n     *         JSON.parse( localStorage.getItem('dataTablesData') )\n     *       );\n     *     }\n     *   } );\n     */\n    \"ajax\": null,\n\n    /**\n     * This parameter allows you to readily specify the entries in the length drop\n     * down menu that DataTables shows when pagination is enabled. It can be\n     * either a 1D array of options which will be used for both the displayed\n     * option and the value, or a 2D array which will use the array in the first\n     * position as the value, and the array in the second position as the\n     * displayed options (useful for language strings such as 'All').\n     *\n     * Note that the `pageLength` property will be automatically set to the\n     * first value given in this array, unless `pageLength` is also provided.\n     *  @type array\n     *  @default [ 10, 25, 50, 100 ]\n     *\n     *  @dtopt Option\n     *  @name DataTable.defaults.lengthMenu\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"lengthMenu\": [[10, 25, 50, -1], [10, 25, 50, \"All\"]]\n     *      } );\n     *    } );\n     */\n    \"aLengthMenu\": [10, 25, 50, 100],\n\n    /**\n     * The `columns` option in the initialisation parameter allows you to define\n     * details about the way individual columns behave. For a full list of\n     * column options that can be set, please see\n     * {@link DataTable.defaults.column}. Note that if you use `columns` to\n     * define your columns, you must have an entry in the array for every single\n     * column that you have in your table (these can be null if you don't which\n     * to specify any options).\n     *  @member\n     *\n     *  @name DataTable.defaults.column\n     */\n    \"aoColumns\": null,\n\n    /**\n     * Very similar to `columns`, `columnDefs` allows you to target a specific\n     * column, multiple columns, or all columns, using the `targets` property of\n     * each object in the array. This allows great flexibility when creating\n     * tables, as the `columnDefs` arrays can be of any length, targeting the\n     * columns you specifically want. `columnDefs` may use any of the column\n     * options available: {@link DataTable.defaults.column}, but it _must_\n     * have `targets` defined in each object in the array. Values in the `targets`\n     * array may be:\n     *   <ul>\n     *     <li>a string - class name will be matched on the TH for the column</li>\n     *     <li>0 or a positive integer - column index counting from the left</li>\n     *     <li>a negative integer - column index counting from the right</li>\n     *     <li>the string \"_all\" - all columns (i.e. assign a default)</li>\n     *   </ul>\n     *  @member\n     *\n     *  @name DataTable.defaults.columnDefs\n     */\n    \"aoColumnDefs\": null,\n\n    /**\n     * Basically the same as `search`, this parameter defines the individual column\n     * filtering state at initialisation time. The array must be of the same size\n     * as the number of columns, and each element be an object with the parameters\n     * `search` and `escapeRegex` (the latter is optional). 'null' is also\n     * accepted and the default will be used.\n     *  @type array\n     *  @default []\n     *\n     *  @dtopt Option\n     *  @name DataTable.defaults.searchCols\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"searchCols\": [\n     *          null,\n     *          { \"search\": \"My filter\" },\n     *          null,\n     *          { \"search\": \"^[0-9]\", \"escapeRegex\": false }\n     *        ]\n     *      } );\n     *    } )\n     */\n    \"aoSearchCols\": [],\n\n    /**\n     * An array of CSS classes that should be applied to displayed rows. This\n     * array may be of any length, and DataTables will apply each class\n     * sequentially, looping when required.\n     *  @type array\n     *  @default null <i>Will take the values determined by the `oClasses.stripe*`\n     *    options</i>\n     *\n     *  @dtopt Option\n     *  @name DataTable.defaults.stripeClasses\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"stripeClasses\": [ 'strip1', 'strip2', 'strip3' ]\n     *      } );\n     *    } )\n     */\n    \"asStripeClasses\": null,\n\n    /**\n     * Enable or disable automatic column width calculation. This can be disabled\n     * as an optimisation (it takes some time to calculate the widths) if the\n     * tables widths are passed in using `columns`.\n     *  @type boolean\n     *  @default true\n     *\n     *  @dtopt Features\n     *  @name DataTable.defaults.autoWidth\n     *\n     *  @example\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"autoWidth\": false\n     *      } );\n     *    } );\n     */\n    \"bAutoWidth\": true,\n\n    /**\n     * Deferred rendering can provide DataTables with a huge speed boost when you\n     * are using an Ajax or JS data source for the table. This option, when set to\n     * true, will cause DataTables to defer the creation of the table elements for\n     * each row until they are needed for a draw - saving a significant amount of\n     * time.\n     *  @type boolean\n     *  @default false\n     *\n     *  @dtopt Features\n     *  @name DataTable.defaults.deferRender\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"ajax\": \"sources/arrays.txt\",\n     *        \"deferRender\": true\n     *      } );\n     *    } );\n     */\n    \"bDeferRender\": false,\n\n    /**\n     * Replace a DataTable which matches the given selector and replace it with\n     * one which has the properties of the new initialisation object passed. If no\n     * table matches the selector, then the new DataTable will be constructed as\n     * per normal.\n     *  @type boolean\n     *  @default false\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.destroy\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"srollY\": \"200px\",\n     *        \"paginate\": false\n     *      } );\n     *\n     *      // Some time later....\n     *      $('#example').dataTable( {\n     *        \"filter\": false,\n     *        \"destroy\": true\n     *      } );\n     *    } );\n     */\n    \"bDestroy\": false,\n\n    /**\n     * Enable or disable filtering of data. Filtering in DataTables is \"smart\" in\n     * that it allows the end user to input multiple words (space separated) and\n     * will match a row containing those words, even if not in the order that was\n     * specified (this allow matching across multiple columns). Note that if you\n     * wish to use filtering in DataTables this must remain 'true' - to remove the\n     * default filtering input box and retain filtering abilities, please use\n     * {@link DataTable.defaults.dom}.\n     *  @type boolean\n     *  @default true\n     *\n     *  @dtopt Features\n     *  @name DataTable.defaults.searching\n     *\n     *  @example\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"searching\": false\n     *      } );\n     *    } );\n     */\n    \"bFilter\": true,\n\n    /**\n     * Enable or disable the table information display. This shows information\n     * about the data that is currently visible on the page, including information\n     * about filtered data if that action is being performed.\n     *  @type boolean\n     *  @default true\n     *\n     *  @dtopt Features\n     *  @name DataTable.defaults.info\n     *\n     *  @example\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"info\": false\n     *      } );\n     *    } );\n     */\n    \"bInfo\": true,\n\n    /**\n     * Allows the end user to select the size of a formatted page from a select\n     * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).\n     *  @type boolean\n     *  @default true\n     *\n     *  @dtopt Features\n     *  @name DataTable.defaults.lengthChange\n     *\n     *  @example\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"lengthChange\": false\n     *      } );\n     *    } );\n     */\n    \"bLengthChange\": true,\n\n    /**\n     * Enable or disable pagination.\n     *  @type boolean\n     *  @default true\n     *\n     *  @dtopt Features\n     *  @name DataTable.defaults.paging\n     *\n     *  @example\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"paging\": false\n     *      } );\n     *    } );\n     */\n    \"bPaginate\": true,\n\n    /**\n     * Enable or disable the display of a 'processing' indicator when the table is\n     * being processed (e.g. a sort). This is particularly useful for tables with\n     * large amounts of data where it can take a noticeable amount of time to sort\n     * the entries.\n     *  @type boolean\n     *  @default false\n     *\n     *  @dtopt Features\n     *  @name DataTable.defaults.processing\n     *\n     *  @example\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"processing\": true\n     *      } );\n     *    } );\n     */\n    \"bProcessing\": false,\n\n    /**\n     * Retrieve the DataTables object for the given selector. Note that if the\n     * table has already been initialised, this parameter will cause DataTables\n     * to simply return the object that has already been set up - it will not take\n     * account of any changes you might have made to the initialisation object\n     * passed to DataTables (setting this parameter to true is an acknowledgement\n     * that you understand this). `destroy` can be used to reinitialise a table if\n     * you need.\n     *  @type boolean\n     *  @default false\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.retrieve\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      initTable();\n     *      tableActions();\n     *    } );\n     *\n     *    function initTable ()\n     *    {\n     *      return $('#example').dataTable( {\n     *        \"scrollY\": \"200px\",\n     *        \"paginate\": false,\n     *        \"retrieve\": true\n     *      } );\n     *    }\n     *\n     *    function tableActions ()\n     *    {\n     *      var table = initTable();\n     *      // perform API operations with oTable\n     *    }\n     */\n    \"bRetrieve\": false,\n\n    /**\n     * When vertical (y) scrolling is enabled, DataTables will force the height of\n     * the table's viewport to the given height at all times (useful for layout).\n     * However, this can look odd when filtering data down to a small data set,\n     * and the footer is left \"floating\" further down. This parameter (when\n     * enabled) will cause DataTables to collapse the table's viewport down when\n     * the result set will fit within the given Y height.\n     *  @type boolean\n     *  @default false\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.scrollCollapse\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"scrollY\": \"200\",\n     *        \"scrollCollapse\": true\n     *      } );\n     *    } );\n     */\n    \"bScrollCollapse\": false,\n\n    /**\n     * Configure DataTables to use server-side processing. Note that the\n     * `ajax` parameter must also be given in order to give DataTables a\n     * source to obtain the required data for each draw.\n     *  @type boolean\n     *  @default false\n     *\n     *  @dtopt Features\n     *  @dtopt Server-side\n     *  @name DataTable.defaults.serverSide\n     *\n     *  @example\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"serverSide\": true,\n     *        \"ajax\": \"xhr.php\"\n     *      } );\n     *    } );\n     */\n    \"bServerSide\": false,\n\n    /**\n     * Enable or disable sorting of columns. Sorting of individual columns can be\n     * disabled by the `sortable` option for each column.\n     *  @type boolean\n     *  @default true\n     *\n     *  @dtopt Features\n     *  @name DataTable.defaults.ordering\n     *\n     *  @example\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"ordering\": false\n     *      } );\n     *    } );\n     */\n    \"bSort\": true,\n\n    /**\n     * Enable or display DataTables' ability to sort multiple columns at the\n     * same time (activated by shift-click by the user).\n     *  @type boolean\n     *  @default true\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.orderMulti\n     *\n     *  @example\n     *    // Disable multiple column sorting ability\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"orderMulti\": false\n     *      } );\n     *    } );\n     */\n    \"bSortMulti\": true,\n\n    /**\n     * Allows control over whether DataTables should use the top (true) unique\n     * cell that is found for a single column, or the bottom (false - default).\n     * This is useful when using complex headers.\n     *  @type boolean\n     *  @default false\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.orderCellsTop\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"orderCellsTop\": true\n     *      } );\n     *    } );\n     */\n    \"bSortCellsTop\": false,\n\n    /**\n     * Enable or disable the addition of the classes `sorting\\_1`, `sorting\\_2` and\n     * `sorting\\_3` to the columns which are currently being sorted on. This is\n     * presented as a feature switch as it can increase processing time (while\n     * classes are removed and added) so for large data sets you might want to\n     * turn this off.\n     *  @type boolean\n     *  @default true\n     *\n     *  @dtopt Features\n     *  @name DataTable.defaults.orderClasses\n     *\n     *  @example\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"orderClasses\": false\n     *      } );\n     *    } );\n     */\n    \"bSortClasses\": true,\n\n    /**\n     * Enable or disable state saving. When enabled HTML5 `localStorage` will be\n     * used to save table display information such as pagination information,\n     * display length, filtering and sorting. As such when the end user reloads\n     * the page the display display will match what thy had previously set up.\n     *\n     * Due to the use of `localStorage` the default state saving is not supported\n     * in IE6 or 7. If state saving is required in those browsers, use\n     * `stateSaveCallback` to provide a storage solution such as cookies.\n     *  @type boolean\n     *  @default false\n     *\n     *  @dtopt Features\n     *  @name DataTable.defaults.stateSave\n     *\n     *  @example\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"stateSave\": true\n     *      } );\n     *    } );\n     */\n    \"bStateSave\": false,\n\n    /**\n     * This function is called when a TR element is created (and all TD child\n     * elements have been inserted), or registered if using a DOM source, allowing\n     * manipulation of the TR element (adding classes etc).\n     *  @type function\n     *  @param {node} row \"TR\" element for the current row\n     *  @param {array} data Raw data array for this row\n     *  @param {int} dataIndex The index of this row in the internal aoData array\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.createdRow\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"createdRow\": function( row, data, dataIndex ) {\n     *          // Bold the grade for all 'A' grade browsers\n     *          if ( data[4] == \"A\" )\n     *          {\n     *            $('td:eq(4)', row).html( '<b>A</b>' );\n     *          }\n     *        }\n     *      } );\n     *    } );\n     */\n    \"fnCreatedRow\": null,\n\n    /**\n     * This function is called on every 'draw' event, and allows you to\n     * dynamically modify any aspect you want about the created DOM.\n     *  @type function\n     *  @param {object} settings DataTables settings object\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.drawCallback\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"drawCallback\": function( settings ) {\n     *          alert( 'DataTables has redrawn the table' );\n     *        }\n     *      } );\n     *    } );\n     */\n    \"fnDrawCallback\": null,\n\n    /**\n     * Identical to fnHeaderCallback() but for the table footer this function\n     * allows you to modify the table footer on every 'draw' event.\n     *  @type function\n     *  @param {node} foot \"TR\" element for the footer\n     *  @param {array} data Full table data (as derived from the original HTML)\n     *  @param {int} start Index for the current display starting point in the\n     *    display array\n     *  @param {int} end Index for the current display ending point in the\n     *    display array\n     *  @param {array int} display Index array to translate the visual position\n     *    to the full data array\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.footerCallback\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"footerCallback\": function( tfoot, data, start, end, display ) {\n     *          tfoot.getElementsByTagName('th')[0].innerHTML = \"Starting index is \"+start;\n     *        }\n     *      } );\n     *    } )\n     */\n    \"fnFooterCallback\": null,\n\n    /**\n     * When rendering large numbers in the information element for the table\n     * (i.e. \"Showing 1 to 10 of 57 entries\") DataTables will render large numbers\n     * to have a comma separator for the 'thousands' units (e.g. 1 million is\n     * rendered as \"1,000,000\") to help readability for the end user. This\n     * function will override the default method DataTables uses.\n     *  @type function\n     *  @member\n     *  @param {int} toFormat number to be formatted\n     *  @returns {string} formatted string for DataTables to show the number\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.formatNumber\n     *\n     *  @example\n     *    // Format a number using a single quote for the separator (note that\n     *    // this can also be done with the language.thousands option)\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"formatNumber\": function ( toFormat ) {\n     *          return toFormat.toString().replace(\n     *            /\\B(?=(\\d{3})+(?!\\d))/g, \"'\"\n     *          );\n     *        };\n     *      } );\n     *    } );\n     */\n    \"fnFormatNumber\": function fnFormatNumber(toFormat) {\n      return toFormat.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, this.oLanguage.sThousands);\n    },\n\n    /**\n     * This function is called on every 'draw' event, and allows you to\n     * dynamically modify the header row. This can be used to calculate and\n     * display useful information about the table.\n     *  @type function\n     *  @param {node} head \"TR\" element for the header\n     *  @param {array} data Full table data (as derived from the original HTML)\n     *  @param {int} start Index for the current display starting point in the\n     *    display array\n     *  @param {int} end Index for the current display ending point in the\n     *    display array\n     *  @param {array int} display Index array to translate the visual position\n     *    to the full data array\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.headerCallback\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"fheaderCallback\": function( head, data, start, end, display ) {\n     *          head.getElementsByTagName('th')[0].innerHTML = \"Displaying \"+(end-start)+\" records\";\n     *        }\n     *      } );\n     *    } )\n     */\n    \"fnHeaderCallback\": null,\n\n    /**\n     * The information element can be used to convey information about the current\n     * state of the table. Although the internationalisation options presented by\n     * DataTables are quite capable of dealing with most customisations, there may\n     * be times where you wish to customise the string further. This callback\n     * allows you to do exactly that.\n     *  @type function\n     *  @param {object} oSettings DataTables settings object\n     *  @param {int} start Starting position in data for the draw\n     *  @param {int} end End position in data for the draw\n     *  @param {int} max Total number of rows in the table (regardless of\n     *    filtering)\n     *  @param {int} total Total number of rows in the data set, after filtering\n     *  @param {string} pre The string that DataTables has formatted using it's\n     *    own rules\n     *  @returns {string} The string to be displayed in the information element.\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.infoCallback\n     *\n     *  @example\n     *    $('#example').dataTable( {\n     *      \"infoCallback\": function( settings, start, end, max, total, pre ) {\n     *        return start +\" to \"+ end;\n     *      }\n     *    } );\n     */\n    \"fnInfoCallback\": null,\n\n    /**\n     * Called when the table has been initialised. Normally DataTables will\n     * initialise sequentially and there will be no need for this function,\n     * however, this does not hold true when using external language information\n     * since that is obtained using an async XHR call.\n     *  @type function\n     *  @param {object} settings DataTables settings object\n     *  @param {object} json The JSON object request from the server - only\n     *    present if client-side Ajax sourced data is used\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.initComplete\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"initComplete\": function(settings, json) {\n     *          alert( 'DataTables has finished its initialisation.' );\n     *        }\n     *      } );\n     *    } )\n     */\n    \"fnInitComplete\": null,\n\n    /**\n     * Called at the very start of each table draw and can be used to cancel the\n     * draw by returning false, any other return (including undefined) results in\n     * the full draw occurring).\n     *  @type function\n     *  @param {object} settings DataTables settings object\n     *  @returns {boolean} False will cancel the draw, anything else (including no\n     *    return) will allow it to complete.\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.preDrawCallback\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"preDrawCallback\": function( settings ) {\n     *          if ( $('#test').val() == 1 ) {\n     *            return false;\n     *          }\n     *        }\n     *      } );\n     *    } );\n     */\n    \"fnPreDrawCallback\": null,\n\n    /**\n     * This function allows you to 'post process' each row after it have been\n     * generated for each table draw, but before it is rendered on screen. This\n     * function might be used for setting the row class name etc.\n     *  @type function\n     *  @param {node} row \"TR\" element for the current row\n     *  @param {array} data Raw data array for this row\n     *  @param {int} displayIndex The display index for the current table draw\n     *  @param {int} displayIndexFull The index of the data in the full list of\n     *    rows (after filtering)\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.rowCallback\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"rowCallback\": function( row, data, displayIndex, displayIndexFull ) {\n     *          // Bold the grade for all 'A' grade browsers\n     *          if ( data[4] == \"A\" ) {\n     *            $('td:eq(4)', row).html( '<b>A</b>' );\n     *          }\n     *        }\n     *      } );\n     *    } );\n     */\n    \"fnRowCallback\": null,\n\n    /**\n     * __Deprecated__ The functionality provided by this parameter has now been\n     * superseded by that provided through `ajax`, which should be used instead.\n     *\n     * This parameter allows you to override the default function which obtains\n     * the data from the server so something more suitable for your application.\n     * For example you could use POST data, or pull information from a Gears or\n     * AIR database.\n     *  @type function\n     *  @member\n     *  @param {string} source HTTP source to obtain the data from (`ajax`)\n     *  @param {array} data A key/value pair object containing the data to send\n     *    to the server\n     *  @param {function} callback to be called on completion of the data get\n     *    process that will draw the data on the page.\n     *  @param {object} settings DataTables settings object\n     *\n     *  @dtopt Callbacks\n     *  @dtopt Server-side\n     *  @name DataTable.defaults.serverData\n     *\n     *  @deprecated 1.10. Please use `ajax` for this functionality now.\n     */\n    \"fnServerData\": null,\n\n    /**\n     * __Deprecated__ The functionality provided by this parameter has now been\n     * superseded by that provided through `ajax`, which should be used instead.\n     *\n     *  It is often useful to send extra data to the server when making an Ajax\n     * request - for example custom filtering information, and this callback\n     * function makes it trivial to send extra information to the server. The\n     * passed in parameter is the data set that has been constructed by\n     * DataTables, and you can add to this or modify it as you require.\n     *  @type function\n     *  @param {array} data Data array (array of objects which are name/value\n     *    pairs) that has been constructed by DataTables and will be sent to the\n     *    server. In the case of Ajax sourced data with server-side processing\n     *    this will be an empty array, for server-side processing there will be a\n     *    significant number of parameters!\n     *  @returns {undefined} Ensure that you modify the data array passed in,\n     *    as this is passed by reference.\n     *\n     *  @dtopt Callbacks\n     *  @dtopt Server-side\n     *  @name DataTable.defaults.serverParams\n     *\n     *  @deprecated 1.10. Please use `ajax` for this functionality now.\n     */\n    \"fnServerParams\": null,\n\n    /**\n     * Load the table state. With this function you can define from where, and how, the\n     * state of a table is loaded. By default DataTables will load from `localStorage`\n     * but you might wish to use a server-side database or cookies.\n     *  @type function\n     *  @member\n     *  @param {object} settings DataTables settings object\n     *  @param {object} callback Callback that can be executed when done. It\n     *    should be passed the loaded state object.\n     *  @return {object} The DataTables state object to be loaded\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.stateLoadCallback\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"stateSave\": true,\n     *        \"stateLoadCallback\": function (settings, callback) {\n     *          $.ajax( {\n     *            \"url\": \"/state_load\",\n     *            \"dataType\": \"json\",\n     *            \"success\": function (json) {\n     *              callback( json );\n     *            }\n     *          } );\n     *        }\n     *      } );\n     *    } );\n     */\n    \"fnStateLoadCallback\": function fnStateLoadCallback(settings) {\n      try {\n        return JSON.parse((settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem('DataTables_' + settings.sInstance + '_' + location.pathname));\n      } catch (e) {}\n    },\n\n    /**\n     * Callback which allows modification of the saved state prior to loading that state.\n     * This callback is called when the table is loading state from the stored data, but\n     * prior to the settings object being modified by the saved state. Note that for\n     * plug-in authors, you should use the `stateLoadParams` event to load parameters for\n     * a plug-in.\n     *  @type function\n     *  @param {object} settings DataTables settings object\n     *  @param {object} data The state object that is to be loaded\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.stateLoadParams\n     *\n     *  @example\n     *    // Remove a saved filter, so filtering is never loaded\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"stateSave\": true,\n     *        \"stateLoadParams\": function (settings, data) {\n     *          data.oSearch.sSearch = \"\";\n     *        }\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Disallow state loading by returning false\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"stateSave\": true,\n     *        \"stateLoadParams\": function (settings, data) {\n     *          return false;\n     *        }\n     *      } );\n     *    } );\n     */\n    \"fnStateLoadParams\": null,\n\n    /**\n     * Callback that is called when the state has been loaded from the state saving method\n     * and the DataTables settings object has been modified as a result of the loaded state.\n     *  @type function\n     *  @param {object} settings DataTables settings object\n     *  @param {object} data The state object that was loaded\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.stateLoaded\n     *\n     *  @example\n     *    // Show an alert with the filtering value that was saved\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"stateSave\": true,\n     *        \"stateLoaded\": function (settings, data) {\n     *          alert( 'Saved filter was: '+data.oSearch.sSearch );\n     *        }\n     *      } );\n     *    } );\n     */\n    \"fnStateLoaded\": null,\n\n    /**\n     * Save the table state. This function allows you to define where and how the state\n     * information for the table is stored By default DataTables will use `localStorage`\n     * but you might wish to use a server-side database or cookies.\n     *  @type function\n     *  @member\n     *  @param {object} settings DataTables settings object\n     *  @param {object} data The state object to be saved\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.stateSaveCallback\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"stateSave\": true,\n     *        \"stateSaveCallback\": function (settings, data) {\n     *          // Send an Ajax request to the server with the state object\n     *          $.ajax( {\n     *            \"url\": \"/state_save\",\n     *            \"data\": data,\n     *            \"dataType\": \"json\",\n     *            \"method\": \"POST\"\n     *            \"success\": function () {}\n     *          } );\n     *        }\n     *      } );\n     *    } );\n     */\n    \"fnStateSaveCallback\": function fnStateSaveCallback(settings, data) {\n      try {\n        (settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem('DataTables_' + settings.sInstance + '_' + location.pathname, JSON.stringify(data));\n      } catch (e) {}\n    },\n\n    /**\n     * Callback which allows modification of the state to be saved. Called when the table\n     * has changed state a new state save is required. This method allows modification of\n     * the state saving object prior to actually doing the save, including addition or\n     * other state properties or modification. Note that for plug-in authors, you should\n     * use the `stateSaveParams` event to save parameters for a plug-in.\n     *  @type function\n     *  @param {object} settings DataTables settings object\n     *  @param {object} data The state object to be saved\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.stateSaveParams\n     *\n     *  @example\n     *    // Remove a saved filter, so filtering is never saved\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"stateSave\": true,\n     *        \"stateSaveParams\": function (settings, data) {\n     *          data.oSearch.sSearch = \"\";\n     *        }\n     *      } );\n     *    } );\n     */\n    \"fnStateSaveParams\": null,\n\n    /**\n     * Duration for which the saved state information is considered valid. After this period\n     * has elapsed the state will be returned to the default.\n     * Value is given in seconds.\n     *  @type int\n     *  @default 7200 <i>(2 hours)</i>\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.stateDuration\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"stateDuration\": 60*60*24; // 1 day\n     *      } );\n     *    } )\n     */\n    \"iStateDuration\": 7200,\n\n    /**\n     * When enabled DataTables will not make a request to the server for the first\n     * page draw - rather it will use the data already on the page (no sorting etc\n     * will be applied to it), thus saving on an XHR at load time. `deferLoading`\n     * is used to indicate that deferred loading is required, but it is also used\n     * to tell DataTables how many records there are in the full table (allowing\n     * the information element and pagination to be displayed correctly). In the case\n     * where a filtering is applied to the table on initial load, this can be\n     * indicated by giving the parameter as an array, where the first element is\n     * the number of records available after filtering and the second element is the\n     * number of records without filtering (allowing the table information element\n     * to be shown correctly).\n     *  @type int | array\n     *  @default null\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.deferLoading\n     *\n     *  @example\n     *    // 57 records available in the table, no filtering applied\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"serverSide\": true,\n     *        \"ajax\": \"scripts/server_processing.php\",\n     *        \"deferLoading\": 57\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // 57 records after filtering, 100 without filtering (an initial filter applied)\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"serverSide\": true,\n     *        \"ajax\": \"scripts/server_processing.php\",\n     *        \"deferLoading\": [ 57, 100 ],\n     *        \"search\": {\n     *          \"search\": \"my_filter\"\n     *        }\n     *      } );\n     *    } );\n     */\n    \"iDeferLoading\": null,\n\n    /**\n     * Number of rows to display on a single page when using pagination. If\n     * feature enabled (`lengthChange`) then the end user will be able to override\n     * this to a custom setting using a pop-up menu.\n     *  @type int\n     *  @default 10\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.pageLength\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"pageLength\": 50\n     *      } );\n     *    } )\n     */\n    \"iDisplayLength\": 10,\n\n    /**\n     * Define the starting point for data display when using DataTables with\n     * pagination. Note that this parameter is the number of records, rather than\n     * the page number, so if you have 10 records per page and want to start on\n     * the third page, it should be \"20\".\n     *  @type int\n     *  @default 0\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.displayStart\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"displayStart\": 20\n     *      } );\n     *    } )\n     */\n    \"iDisplayStart\": 0,\n\n    /**\n     * By default DataTables allows keyboard navigation of the table (sorting, paging,\n     * and filtering) by adding a `tabindex` attribute to the required elements. This\n     * allows you to tab through the controls and press the enter key to activate them.\n     * The tabindex is default 0, meaning that the tab follows the flow of the document.\n     * You can overrule this using this parameter if you wish. Use a value of -1 to\n     * disable built-in keyboard navigation.\n     *  @type int\n     *  @default 0\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.tabIndex\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"tabIndex\": 1\n     *      } );\n     *    } );\n     */\n    \"iTabIndex\": 0,\n\n    /**\n     * Classes that DataTables assigns to the various components and features\n     * that it adds to the HTML table. This allows classes to be configured\n     * during initialisation in addition to through the static\n     * {@link DataTable.ext.oStdClasses} object).\n     *  @namespace\n     *  @name DataTable.defaults.classes\n     */\n    \"oClasses\": {},\n\n    /**\n     * All strings that DataTables uses in the user interface that it creates\n     * are defined in this object, allowing you to modified them individually or\n     * completely replace them all as required.\n     *  @namespace\n     *  @name DataTable.defaults.language\n     */\n    \"oLanguage\": {\n      /**\n       * Strings that are used for WAI-ARIA labels and controls only (these are not\n       * actually visible on the page, but will be read by screenreaders, and thus\n       * must be internationalised as well).\n       *  @namespace\n       *  @name DataTable.defaults.language.aria\n       */\n      \"oAria\": {\n        /**\n         * ARIA label that is added to the table headers when the column may be\n         * sorted ascending by activing the column (click or return when focused).\n         * Note that the column header is prefixed to this string.\n         *  @type string\n         *  @default : activate to sort column ascending\n         *\n         *  @dtopt Language\n         *  @name DataTable.defaults.language.aria.sortAscending\n         *\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"language\": {\n         *          \"aria\": {\n         *            \"sortAscending\": \" - click/return to sort ascending\"\n         *          }\n         *        }\n         *      } );\n         *    } );\n         */\n        \"sSortAscending\": \": activate to sort column ascending\",\n\n        /**\n         * ARIA label that is added to the table headers when the column may be\n         * sorted descending by activing the column (click or return when focused).\n         * Note that the column header is prefixed to this string.\n         *  @type string\n         *  @default : activate to sort column ascending\n         *\n         *  @dtopt Language\n         *  @name DataTable.defaults.language.aria.sortDescending\n         *\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"language\": {\n         *          \"aria\": {\n         *            \"sortDescending\": \" - click/return to sort descending\"\n         *          }\n         *        }\n         *      } );\n         *    } );\n         */\n        \"sSortDescending\": \": activate to sort column descending\"\n      },\n\n      /**\n       * Pagination string used by DataTables for the built-in pagination\n       * control types.\n       *  @namespace\n       *  @name DataTable.defaults.language.paginate\n       */\n      \"oPaginate\": {\n        /**\n         * Text to use when using the 'full_numbers' type of pagination for the\n         * button to take the user to the first page.\n         *  @type string\n         *  @default First\n         *\n         *  @dtopt Language\n         *  @name DataTable.defaults.language.paginate.first\n         *\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"language\": {\n         *          \"paginate\": {\n         *            \"first\": \"First page\"\n         *          }\n         *        }\n         *      } );\n         *    } );\n         */\n        \"sFirst\": \"First\",\n\n        /**\n         * Text to use when using the 'full_numbers' type of pagination for the\n         * button to take the user to the last page.\n         *  @type string\n         *  @default Last\n         *\n         *  @dtopt Language\n         *  @name DataTable.defaults.language.paginate.last\n         *\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"language\": {\n         *          \"paginate\": {\n         *            \"last\": \"Last page\"\n         *          }\n         *        }\n         *      } );\n         *    } );\n         */\n        \"sLast\": \"Last\",\n\n        /**\n         * Text to use for the 'next' pagination button (to take the user to the\n         * next page).\n         *  @type string\n         *  @default Next\n         *\n         *  @dtopt Language\n         *  @name DataTable.defaults.language.paginate.next\n         *\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"language\": {\n         *          \"paginate\": {\n         *            \"next\": \"Next page\"\n         *          }\n         *        }\n         *      } );\n         *    } );\n         */\n        \"sNext\": \"Next\",\n\n        /**\n         * Text to use for the 'previous' pagination button (to take the user to\n         * the previous page).\n         *  @type string\n         *  @default Previous\n         *\n         *  @dtopt Language\n         *  @name DataTable.defaults.language.paginate.previous\n         *\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"language\": {\n         *          \"paginate\": {\n         *            \"previous\": \"Previous page\"\n         *          }\n         *        }\n         *      } );\n         *    } );\n         */\n        \"sPrevious\": \"Previous\"\n      },\n\n      /**\n       * This string is shown in preference to `zeroRecords` when the table is\n       * empty of data (regardless of filtering). Note that this is an optional\n       * parameter - if it is not given, the value of `zeroRecords` will be used\n       * instead (either the default or given value).\n       *  @type string\n       *  @default No data available in table\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.emptyTable\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"emptyTable\": \"No data available in table\"\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sEmptyTable\": \"No data available in table\",\n\n      /**\n       * This string gives information to the end user about the information\n       * that is current on display on the page. The following tokens can be\n       * used in the string and will be dynamically replaced as the table\n       * display updates. This tokens can be placed anywhere in the string, or\n       * removed as needed by the language requires:\n       *\n       * * `\\_START\\_` - Display index of the first record on the current page\n       * * `\\_END\\_` - Display index of the last record on the current page\n       * * `\\_TOTAL\\_` - Number of records in the table after filtering\n       * * `\\_MAX\\_` - Number of records in the table without filtering\n       * * `\\_PAGE\\_` - Current page number\n       * * `\\_PAGES\\_` - Total number of pages of data in the table\n       *\n       *  @type string\n       *  @default Showing _START_ to _END_ of _TOTAL_ entries\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.info\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"info\": \"Showing page _PAGE_ of _PAGES_\"\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sInfo\": \"Showing _START_ to _END_ of _TOTAL_ entries\",\n\n      /**\n       * Display information string for when the table is empty. Typically the\n       * format of this string should match `info`.\n       *  @type string\n       *  @default Showing 0 to 0 of 0 entries\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.infoEmpty\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"infoEmpty\": \"No entries to show\"\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sInfoEmpty\": \"Showing 0 to 0 of 0 entries\",\n\n      /**\n       * When a user filters the information in a table, this string is appended\n       * to the information (`info`) to give an idea of how strong the filtering\n       * is. The variable _MAX_ is dynamically updated.\n       *  @type string\n       *  @default (filtered from _MAX_ total entries)\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.infoFiltered\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"infoFiltered\": \" - filtering from _MAX_ records\"\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sInfoFiltered\": \"(filtered from _MAX_ total entries)\",\n\n      /**\n       * If can be useful to append extra information to the info string at times,\n       * and this variable does exactly that. This information will be appended to\n       * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are\n       * being used) at all times.\n       *  @type string\n       *  @default <i>Empty string</i>\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.infoPostFix\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"infoPostFix\": \"All records shown are derived from real information.\"\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sInfoPostFix\": \"\",\n\n      /**\n       * This decimal place operator is a little different from the other\n       * language options since DataTables doesn't output floating point\n       * numbers, so it won't ever use this for display of a number. Rather,\n       * what this parameter does is modify the sort methods of the table so\n       * that numbers which are in a format which has a character other than\n       * a period (`.`) as a decimal place will be sorted numerically.\n       *\n       * Note that numbers with different decimal places cannot be shown in\n       * the same table and still be sortable, the table must be consistent.\n       * However, multiple different tables on the page can use different\n       * decimal place characters.\n       *  @type string\n       *  @default \n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.decimal\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"decimal\": \",\"\n       *          \"thousands\": \".\"\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sDecimal\": \"\",\n\n      /**\n       * DataTables has a build in number formatter (`formatNumber`) which is\n       * used to format large numbers that are used in the table information.\n       * By default a comma is used, but this can be trivially changed to any\n       * character you wish with this parameter.\n       *  @type string\n       *  @default ,\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.thousands\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"thousands\": \"'\"\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sThousands\": \",\",\n\n      /**\n       * Detail the action that will be taken when the drop down menu for the\n       * pagination length option is changed. The '_MENU_' variable is replaced\n       * with a default select list of 10, 25, 50 and 100, and can be replaced\n       * with a custom select box if required.\n       *  @type string\n       *  @default Show _MENU_ entries\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.lengthMenu\n       *\n       *  @example\n       *    // Language change only\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"lengthMenu\": \"Display _MENU_ records\"\n       *        }\n       *      } );\n       *    } );\n       *\n       *  @example\n       *    // Language and options change\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"lengthMenu\": 'Display <select>'+\n       *            '<option value=\"10\">10</option>'+\n       *            '<option value=\"20\">20</option>'+\n       *            '<option value=\"30\">30</option>'+\n       *            '<option value=\"40\">40</option>'+\n       *            '<option value=\"50\">50</option>'+\n       *            '<option value=\"-1\">All</option>'+\n       *            '</select> records'\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sLengthMenu\": \"Show _MENU_ entries\",\n\n      /**\n       * When using Ajax sourced data and during the first draw when DataTables is\n       * gathering the data, this message is shown in an empty row in the table to\n       * indicate to the end user the the data is being loaded. Note that this\n       * parameter is not used when loading data by server-side processing, just\n       * Ajax sourced data with client-side processing.\n       *  @type string\n       *  @default Loading...\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.loadingRecords\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"loadingRecords\": \"Please wait - loading...\"\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sLoadingRecords\": \"Loading...\",\n\n      /**\n       * Text which is displayed when the table is processing a user action\n       * (usually a sort command or similar).\n       *  @type string\n       *  @default Processing...\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.processing\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"processing\": \"DataTables is currently busy\"\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sProcessing\": \"Processing...\",\n\n      /**\n       * Details the actions that will be taken when the user types into the\n       * filtering input text box. The variable \"_INPUT_\", if used in the string,\n       * is replaced with the HTML text box for the filtering input allowing\n       * control over where it appears in the string. If \"_INPUT_\" is not given\n       * then the input box is appended to the string automatically.\n       *  @type string\n       *  @default Search:\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.search\n       *\n       *  @example\n       *    // Input text box will be appended at the end automatically\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"search\": \"Filter records:\"\n       *        }\n       *      } );\n       *    } );\n       *\n       *  @example\n       *    // Specify where the filter should appear\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"search\": \"Apply filter _INPUT_ to table\"\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sSearch\": \"Search:\",\n\n      /**\n       * Assign a `placeholder` attribute to the search `input` element\n       *  @type string\n       *  @default \n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.searchPlaceholder\n       */\n      \"sSearchPlaceholder\": \"\",\n\n      /**\n       * All of the language information can be stored in a file on the\n       * server-side, which DataTables will look up if this parameter is passed.\n       * It must store the URL of the language file, which is in a JSON format,\n       * and the object has the same properties as the oLanguage object in the\n       * initialiser object (i.e. the above parameters). Please refer to one of\n       * the example language files to see how this works in action.\n       *  @type string\n       *  @default <i>Empty string - i.e. disabled</i>\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.url\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"url\": \"http://www.sprymedia.co.uk/dataTables/lang.txt\"\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sUrl\": \"\",\n\n      /**\n       * Text shown inside the table records when the is no information to be\n       * displayed after filtering. `emptyTable` is shown when there is simply no\n       * information in the table at all (regardless of filtering).\n       *  @type string\n       *  @default No matching records found\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.zeroRecords\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"zeroRecords\": \"No records to display\"\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sZeroRecords\": \"No matching records found\"\n    },\n\n    /**\n     * This parameter allows you to have define the global filtering state at\n     * initialisation time. As an object the `search` parameter must be\n     * defined, but all other parameters are optional. When `regex` is true,\n     * the search string will be treated as a regular expression, when false\n     * (default) it will be treated as a straight string. When `smart`\n     * DataTables will use it's smart filtering methods (to word match at\n     * any point in the data), when false this will not be done.\n     *  @namespace\n     *  @extends DataTable.models.oSearch\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.search\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"search\": {\"search\": \"Initial search\"}\n     *      } );\n     *    } )\n     */\n    \"oSearch\": $.extend({}, DataTable.models.oSearch),\n\n    /**\n     * __Deprecated__ The functionality provided by this parameter has now been\n     * superseded by that provided through `ajax`, which should be used instead.\n     *\n     * By default DataTables will look for the property `data` (or `aaData` for\n     * compatibility with DataTables 1.9-) when obtaining data from an Ajax\n     * source or for server-side processing - this parameter allows that\n     * property to be changed. You can use Javascript dotted object notation to\n     * get a data source for multiple levels of nesting.\n     *  @type string\n     *  @default data\n     *\n     *  @dtopt Options\n     *  @dtopt Server-side\n     *  @name DataTable.defaults.ajaxDataProp\n     *\n     *  @deprecated 1.10. Please use `ajax` for this functionality now.\n     */\n    \"sAjaxDataProp\": \"data\",\n\n    /**\n     * __Deprecated__ The functionality provided by this parameter has now been\n     * superseded by that provided through `ajax`, which should be used instead.\n     *\n     * You can instruct DataTables to load data from an external\n     * source using this parameter (use aData if you want to pass data in you\n     * already have). Simply provide a url a JSON object can be obtained from.\n     *  @type string\n     *  @default null\n     *\n     *  @dtopt Options\n     *  @dtopt Server-side\n     *  @name DataTable.defaults.ajaxSource\n     *\n     *  @deprecated 1.10. Please use `ajax` for this functionality now.\n     */\n    \"sAjaxSource\": null,\n\n    /**\n     * This initialisation variable allows you to specify exactly where in the\n     * DOM you want DataTables to inject the various controls it adds to the page\n     * (for example you might want the pagination controls at the top of the\n     * table). DIV elements (with or without a custom class) can also be added to\n     * aid styling. The follow syntax is used:\n     *   <ul>\n     *     <li>The following options are allowed:\n     *       <ul>\n     *         <li>'l' - Length changing</li>\n     *         <li>'f' - Filtering input</li>\n     *         <li>'t' - The table!</li>\n     *         <li>'i' - Information</li>\n     *         <li>'p' - Pagination</li>\n     *         <li>'r' - pRocessing</li>\n     *       </ul>\n     *     </li>\n     *     <li>The following constants are allowed:\n     *       <ul>\n     *         <li>'H' - jQueryUI theme \"header\" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>\n     *         <li>'F' - jQueryUI theme \"footer\" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>\n     *       </ul>\n     *     </li>\n     *     <li>The following syntax is expected:\n     *       <ul>\n     *         <li>'&lt;' and '&gt;' - div elements</li>\n     *         <li>'&lt;\"class\" and '&gt;' - div with a class</li>\n     *         <li>'&lt;\"#id\" and '&gt;' - div with an ID</li>\n     *       </ul>\n     *     </li>\n     *     <li>Examples:\n     *       <ul>\n     *         <li>'&lt;\"wrapper\"flipt&gt;'</li>\n     *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>\n     *       </ul>\n     *     </li>\n     *   </ul>\n     *  @type string\n     *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>\n     *    <\"H\"lfr>t<\"F\"ip> <i>(when `jQueryUI` is true)</i>\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.dom\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"dom\": '&lt;\"top\"i&gt;rt&lt;\"bottom\"flp&gt;&lt;\"clear\"&gt;'\n     *      } );\n     *    } );\n     */\n    \"sDom\": \"lfrtip\",\n\n    /**\n     * Search delay option. This will throttle full table searches that use the\n     * DataTables provided search input element (it does not effect calls to\n     * `dt-api search()`, providing a delay before the search is made.\n     *  @type integer\n     *  @default 0\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.searchDelay\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"searchDelay\": 200\n     *      } );\n     *    } )\n     */\n    \"searchDelay\": null,\n\n    /**\n     * DataTables features six different built-in options for the buttons to\n     * display for pagination control:\n     *\n     * * `numbers` - Page number buttons only\n     * * `simple` - 'Previous' and 'Next' buttons only\n     * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers\n     * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons\n     * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus page numbers\n     * * `first_last_numbers` - 'First' and 'Last' buttons, plus page numbers\n     *  \n     * Further methods can be added using {@link DataTable.ext.oPagination}.\n     *  @type string\n     *  @default simple_numbers\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.pagingType\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"pagingType\": \"full_numbers\"\n     *      } );\n     *    } )\n     */\n    \"sPaginationType\": \"simple_numbers\",\n\n    /**\n     * Enable horizontal scrolling. When a table is too wide to fit into a\n     * certain layout, or you have a large number of columns in the table, you\n     * can enable x-scrolling to show the table in a viewport, which can be\n     * scrolled. This property can be `true` which will allow the table to\n     * scroll horizontally when needed, or any CSS unit, or a number (in which\n     * case it will be treated as a pixel measurement). Setting as simply `true`\n     * is recommended.\n     *  @type boolean|string\n     *  @default <i>blank string - i.e. disabled</i>\n     *\n     *  @dtopt Features\n     *  @name DataTable.defaults.scrollX\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"scrollX\": true,\n     *        \"scrollCollapse\": true\n     *      } );\n     *    } );\n     */\n    \"sScrollX\": \"\",\n\n    /**\n     * This property can be used to force a DataTable to use more width than it\n     * might otherwise do when x-scrolling is enabled. For example if you have a\n     * table which requires to be well spaced, this parameter is useful for\n     * \"over-sizing\" the table, and thus forcing scrolling. This property can by\n     * any CSS unit, or a number (in which case it will be treated as a pixel\n     * measurement).\n     *  @type string\n     *  @default <i>blank string - i.e. disabled</i>\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.scrollXInner\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"scrollX\": \"100%\",\n     *        \"scrollXInner\": \"110%\"\n     *      } );\n     *    } );\n     */\n    \"sScrollXInner\": \"\",\n\n    /**\n     * Enable vertical scrolling. Vertical scrolling will constrain the DataTable\n     * to the given height, and enable scrolling for any data which overflows the\n     * current viewport. This can be used as an alternative to paging to display\n     * a lot of data in a small area (although paging and scrolling can both be\n     * enabled at the same time). This property can be any CSS unit, or a number\n     * (in which case it will be treated as a pixel measurement).\n     *  @type string\n     *  @default <i>blank string - i.e. disabled</i>\n     *\n     *  @dtopt Features\n     *  @name DataTable.defaults.scrollY\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"scrollY\": \"200px\",\n     *        \"paginate\": false\n     *      } );\n     *    } );\n     */\n    \"sScrollY\": \"\",\n\n    /**\n     * __Deprecated__ The functionality provided by this parameter has now been\n     * superseded by that provided through `ajax`, which should be used instead.\n     *\n     * Set the HTTP method that is used to make the Ajax call for server-side\n     * processing or Ajax sourced data.\n     *  @type string\n     *  @default GET\n     *\n     *  @dtopt Options\n     *  @dtopt Server-side\n     *  @name DataTable.defaults.serverMethod\n     *\n     *  @deprecated 1.10. Please use `ajax` for this functionality now.\n     */\n    \"sServerMethod\": \"GET\",\n\n    /**\n     * DataTables makes use of renderers when displaying HTML elements for\n     * a table. These renderers can be added or modified by plug-ins to\n     * generate suitable mark-up for a site. For example the Bootstrap\n     * integration plug-in for DataTables uses a paging button renderer to\n     * display pagination buttons in the mark-up required by Bootstrap.\n     *\n     * For further information about the renderers available see\n     * DataTable.ext.renderer\n     *  @type string|object\n     *  @default null\n     *\n     *  @name DataTable.defaults.renderer\n     *\n     */\n    \"renderer\": null,\n\n    /**\n     * Set the data property name that DataTables should use to get a row's id\n     * to set as the `id` property in the node.\n     *  @type string\n     *  @default DT_RowId\n     *\n     *  @name DataTable.defaults.rowId\n     */\n    \"rowId\": \"DT_RowId\"\n  };\n\n  _fnHungarianMap(DataTable.defaults);\n  /*\n   * Developer note - See note in model.defaults.js about the use of Hungarian\n   * notation and camel case.\n   */\n\n  /**\n   * Column options that can be given to DataTables at initialisation time.\n   *  @namespace\n   */\n\n\n  DataTable.defaults.column = {\n    /**\n     * Define which column(s) an order will occur on for this column. This\n     * allows a column's ordering to take multiple columns into account when\n     * doing a sort or use the data from a different column. For example first\n     * name / last name columns make sense to do a multi-column sort over the\n     * two columns.\n     *  @type array|int\n     *  @default null <i>Takes the value of the column index automatically</i>\n     *\n     *  @name DataTable.defaults.column.orderData\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columnDefs`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [\n     *          { \"orderData\": [ 0, 1 ], \"targets\": [ 0 ] },\n     *          { \"orderData\": [ 1, 0 ], \"targets\": [ 1 ] },\n     *          { \"orderData\": 2, \"targets\": [ 2 ] }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          { \"orderData\": [ 0, 1 ] },\n     *          { \"orderData\": [ 1, 0 ] },\n     *          { \"orderData\": 2 },\n     *          null,\n     *          null\n     *        ]\n     *      } );\n     *    } );\n     */\n    \"aDataSort\": null,\n    \"iDataSort\": -1,\n\n    /**\n     * You can control the default ordering direction, and even alter the\n     * behaviour of the sort handler (i.e. only allow ascending ordering etc)\n     * using this parameter.\n     *  @type array\n     *  @default [ 'asc', 'desc' ]\n     *\n     *  @name DataTable.defaults.column.orderSequence\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columnDefs`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [\n     *          { \"orderSequence\": [ \"asc\" ], \"targets\": [ 1 ] },\n     *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ], \"targets\": [ 2 ] },\n     *          { \"orderSequence\": [ \"desc\" ], \"targets\": [ 3 ] }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          null,\n     *          { \"orderSequence\": [ \"asc\" ] },\n     *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ] },\n     *          { \"orderSequence\": [ \"desc\" ] },\n     *          null\n     *        ]\n     *      } );\n     *    } );\n     */\n    \"asSorting\": ['asc', 'desc'],\n\n    /**\n     * Enable or disable filtering on the data in this column.\n     *  @type boolean\n     *  @default true\n     *\n     *  @name DataTable.defaults.column.searchable\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columnDefs`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [\n     *          { \"searchable\": false, \"targets\": [ 0 ] }\n     *        ] } );\n     *    } );\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          { \"searchable\": false },\n     *          null,\n     *          null,\n     *          null,\n     *          null\n     *        ] } );\n     *    } );\n     */\n    \"bSearchable\": true,\n\n    /**\n     * Enable or disable ordering on this column.\n     *  @type boolean\n     *  @default true\n     *\n     *  @name DataTable.defaults.column.orderable\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columnDefs`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [\n     *          { \"orderable\": false, \"targets\": [ 0 ] }\n     *        ] } );\n     *    } );\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          { \"orderable\": false },\n     *          null,\n     *          null,\n     *          null,\n     *          null\n     *        ] } );\n     *    } );\n     */\n    \"bSortable\": true,\n\n    /**\n     * Enable or disable the display of this column.\n     *  @type boolean\n     *  @default true\n     *\n     *  @name DataTable.defaults.column.visible\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columnDefs`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [\n     *          { \"visible\": false, \"targets\": [ 0 ] }\n     *        ] } );\n     *    } );\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          { \"visible\": false },\n     *          null,\n     *          null,\n     *          null,\n     *          null\n     *        ] } );\n     *    } );\n     */\n    \"bVisible\": true,\n\n    /**\n     * Developer definable function that is called whenever a cell is created (Ajax source,\n     * etc) or processed for input (DOM source). This can be used as a compliment to mRender\n     * allowing you to modify the DOM element (add background colour for example) when the\n     * element is available.\n     *  @type function\n     *  @param {element} td The TD node that has been created\n     *  @param {*} cellData The Data for the cell\n     *  @param {array|object} rowData The data for the whole row\n     *  @param {int} row The row index for the aoData data store\n     *  @param {int} col The column index for aoColumns\n     *\n     *  @name DataTable.defaults.column.createdCell\n     *  @dtopt Columns\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [ {\n     *          \"targets\": [3],\n     *          \"createdCell\": function (td, cellData, rowData, row, col) {\n     *            if ( cellData == \"1.7\" ) {\n     *              $(td).css('color', 'blue')\n     *            }\n     *          }\n     *        } ]\n     *      });\n     *    } );\n     */\n    \"fnCreatedCell\": null,\n\n    /**\n     * This parameter has been replaced by `data` in DataTables to ensure naming\n     * consistency. `dataProp` can still be used, as there is backwards\n     * compatibility in DataTables for this option, but it is strongly\n     * recommended that you use `data` in preference to `dataProp`.\n     *  @name DataTable.defaults.column.dataProp\n     */\n\n    /**\n     * This property can be used to read data from any data source property,\n     * including deeply nested objects / properties. `data` can be given in a\n     * number of different ways which effect its behaviour:\n     *\n     * * `integer` - treated as an array index for the data source. This is the\n     *   default that DataTables uses (incrementally increased for each column).\n     * * `string` - read an object property from the data source. There are\n     *   three 'special' options that can be used in the string to alter how\n     *   DataTables reads the data from the source object:\n     *    * `.` - Dotted Javascript notation. Just as you use a `.` in\n     *      Javascript to read from nested objects, so to can the options\n     *      specified in `data`. For example: `browser.version` or\n     *      `browser.name`. If your object parameter name contains a period, use\n     *      `\\\\` to escape it - i.e. `first\\\\.name`.\n     *    * `[]` - Array notation. DataTables can automatically combine data\n     *      from and array source, joining the data with the characters provided\n     *      between the two brackets. For example: `name[, ]` would provide a\n     *      comma-space separated list from the source array. If no characters\n     *      are provided between the brackets, the original array source is\n     *      returned.\n     *    * `()` - Function notation. Adding `()` to the end of a parameter will\n     *      execute a function of the name given. For example: `browser()` for a\n     *      simple function on the data source, `browser.version()` for a\n     *      function in a nested property or even `browser().version` to get an\n     *      object property if the function called returns an object. Note that\n     *      function notation is recommended for use in `render` rather than\n     *      `data` as it is much simpler to use as a renderer.\n     * * `null` - use the original data source for the row rather than plucking\n     *   data directly from it. This action has effects on two other\n     *   initialisation options:\n     *    * `defaultContent` - When null is given as the `data` option and\n     *      `defaultContent` is specified for the column, the value defined by\n     *      `defaultContent` will be used for the cell.\n     *    * `render` - When null is used for the `data` option and the `render`\n     *      option is specified for the column, the whole data source for the\n     *      row is used for the renderer.\n     * * `function` - the function given will be executed whenever DataTables\n     *   needs to set or get the data for a cell in the column. The function\n     *   takes three parameters:\n     *    * Parameters:\n     *      * `{array|object}` The data source for the row\n     *      * `{string}` The type call data requested - this will be 'set' when\n     *        setting data or 'filter', 'display', 'type', 'sort' or undefined\n     *        when gathering data. Note that when `undefined` is given for the\n     *        type DataTables expects to get the raw data for the object back<\n     *      * `{*}` Data to set when the second parameter is 'set'.\n     *    * Return:\n     *      * The return value from the function is not required when 'set' is\n     *        the type of call, but otherwise the return is what will be used\n     *        for the data requested.\n     *\n     * Note that `data` is a getter and setter option. If you just require\n     * formatting of data for output, you will likely want to use `render` which\n     * is simply a getter and thus simpler to use.\n     *\n     * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The\n     * name change reflects the flexibility of this property and is consistent\n     * with the naming of mRender. If 'mDataProp' is given, then it will still\n     * be used by DataTables, as it automatically maps the old name to the new\n     * if required.\n     *\n     *  @type string|int|function|null\n     *  @default null <i>Use automatically calculated column index</i>\n     *\n     *  @name DataTable.defaults.column.data\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Read table data from objects\n     *    // JSON structure for each row:\n     *    //   {\n     *    //      \"engine\": {value},\n     *    //      \"browser\": {value},\n     *    //      \"platform\": {value},\n     *    //      \"version\": {value},\n     *    //      \"grade\": {value}\n     *    //   }\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"ajaxSource\": \"sources/objects.txt\",\n     *        \"columns\": [\n     *          { \"data\": \"engine\" },\n     *          { \"data\": \"browser\" },\n     *          { \"data\": \"platform\" },\n     *          { \"data\": \"version\" },\n     *          { \"data\": \"grade\" }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Read information from deeply nested objects\n     *    // JSON structure for each row:\n     *    //   {\n     *    //      \"engine\": {value},\n     *    //      \"browser\": {value},\n     *    //      \"platform\": {\n     *    //         \"inner\": {value}\n     *    //      },\n     *    //      \"details\": [\n     *    //         {value}, {value}\n     *    //      ]\n     *    //   }\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"ajaxSource\": \"sources/deep.txt\",\n     *        \"columns\": [\n     *          { \"data\": \"engine\" },\n     *          { \"data\": \"browser\" },\n     *          { \"data\": \"platform.inner\" },\n     *          { \"data\": \"details.0\" },\n     *          { \"data\": \"details.1\" }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using `data` as a function to provide different information for\n     *    // sorting, filtering and display. In this case, currency (price)\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [ {\n     *          \"targets\": [ 0 ],\n     *          \"data\": function ( source, type, val ) {\n     *            if (type === 'set') {\n     *              source.price = val;\n     *              // Store the computed dislay and filter values for efficiency\n     *              source.price_display = val==\"\" ? \"\" : \"$\"+numberFormat(val);\n     *              source.price_filter  = val==\"\" ? \"\" : \"$\"+numberFormat(val)+\" \"+val;\n     *              return;\n     *            }\n     *            else if (type === 'display') {\n     *              return source.price_display;\n     *            }\n     *            else if (type === 'filter') {\n     *              return source.price_filter;\n     *            }\n     *            // 'sort', 'type' and undefined all just use the integer\n     *            return source.price;\n     *          }\n     *        } ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using default content\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [ {\n     *          \"targets\": [ 0 ],\n     *          \"data\": null,\n     *          \"defaultContent\": \"Click to edit\"\n     *        } ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using array notation - outputting a list from an array\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [ {\n     *          \"targets\": [ 0 ],\n     *          \"data\": \"name[, ]\"\n     *        } ]\n     *      } );\n     *    } );\n     *\n     */\n    \"mData\": null,\n\n    /**\n     * This property is the rendering partner to `data` and it is suggested that\n     * when you want to manipulate data for display (including filtering,\n     * sorting etc) without altering the underlying data for the table, use this\n     * property. `render` can be considered to be the the read only companion to\n     * `data` which is read / write (then as such more complex). Like `data`\n     * this option can be given in a number of different ways to effect its\n     * behaviour:\n     *\n     * * `integer` - treated as an array index for the data source. This is the\n     *   default that DataTables uses (incrementally increased for each column).\n     * * `string` - read an object property from the data source. There are\n     *   three 'special' options that can be used in the string to alter how\n     *   DataTables reads the data from the source object:\n     *    * `.` - Dotted Javascript notation. Just as you use a `.` in\n     *      Javascript to read from nested objects, so to can the options\n     *      specified in `data`. For example: `browser.version` or\n     *      `browser.name`. If your object parameter name contains a period, use\n     *      `\\\\` to escape it - i.e. `first\\\\.name`.\n     *    * `[]` - Array notation. DataTables can automatically combine data\n     *      from and array source, joining the data with the characters provided\n     *      between the two brackets. For example: `name[, ]` would provide a\n     *      comma-space separated list from the source array. If no characters\n     *      are provided between the brackets, the original array source is\n     *      returned.\n     *    * `()` - Function notation. Adding `()` to the end of a parameter will\n     *      execute a function of the name given. For example: `browser()` for a\n     *      simple function on the data source, `browser.version()` for a\n     *      function in a nested property or even `browser().version` to get an\n     *      object property if the function called returns an object.\n     * * `object` - use different data for the different data types requested by\n     *   DataTables ('filter', 'display', 'type' or 'sort'). The property names\n     *   of the object is the data type the property refers to and the value can\n     *   defined using an integer, string or function using the same rules as\n     *   `render` normally does. Note that an `_` option _must_ be specified.\n     *   This is the default value to use if you haven't specified a value for\n     *   the data type requested by DataTables.\n     * * `function` - the function given will be executed whenever DataTables\n     *   needs to set or get the data for a cell in the column. The function\n     *   takes three parameters:\n     *    * Parameters:\n     *      * {array|object} The data source for the row (based on `data`)\n     *      * {string} The type call data requested - this will be 'filter',\n     *        'display', 'type' or 'sort'.\n     *      * {array|object} The full data source for the row (not based on\n     *        `data`)\n     *    * Return:\n     *      * The return value from the function is what will be used for the\n     *        data requested.\n     *\n     *  @type string|int|function|object|null\n     *  @default null Use the data source value.\n     *\n     *  @name DataTable.defaults.column.render\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Create a comma separated list from an array of objects\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"ajaxSource\": \"sources/deep.txt\",\n     *        \"columns\": [\n     *          { \"data\": \"engine\" },\n     *          { \"data\": \"browser\" },\n     *          {\n     *            \"data\": \"platform\",\n     *            \"render\": \"[, ].name\"\n     *          }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Execute a function to obtain data\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [ {\n     *          \"targets\": [ 0 ],\n     *          \"data\": null, // Use the full data source object for the renderer's source\n     *          \"render\": \"browserName()\"\n     *        } ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // As an object, extracting different data for the different types\n     *    // This would be used with a data source such as:\n     *    //   { \"phone\": 5552368, \"phone_filter\": \"5552368 555-2368\", \"phone_display\": \"555-2368\" }\n     *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`\n     *    // (which has both forms) is used for filtering for if a user inputs either format, while\n     *    // the formatted phone number is the one that is shown in the table.\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [ {\n     *          \"targets\": [ 0 ],\n     *          \"data\": null, // Use the full data source object for the renderer's source\n     *          \"render\": {\n     *            \"_\": \"phone\",\n     *            \"filter\": \"phone_filter\",\n     *            \"display\": \"phone_display\"\n     *          }\n     *        } ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Use as a function to create a link from the data source\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [ {\n     *          \"targets\": [ 0 ],\n     *          \"data\": \"download_link\",\n     *          \"render\": function ( data, type, full ) {\n     *            return '<a href=\"'+data+'\">Download</a>';\n     *          }\n     *        } ]\n     *      } );\n     *    } );\n     */\n    \"mRender\": null,\n\n    /**\n     * Change the cell type created for the column - either TD cells or TH cells. This\n     * can be useful as TH cells have semantic meaning in the table body, allowing them\n     * to act as a header for a row (you may wish to add scope='row' to the TH elements).\n     *  @type string\n     *  @default td\n     *\n     *  @name DataTable.defaults.column.cellType\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Make the first column use TH cells\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [ {\n     *          \"targets\": [ 0 ],\n     *          \"cellType\": \"th\"\n     *        } ]\n     *      } );\n     *    } );\n     */\n    \"sCellType\": \"td\",\n\n    /**\n     * Class to give to each cell in this column.\n     *  @type string\n     *  @default <i>Empty string</i>\n     *\n     *  @name DataTable.defaults.column.class\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columnDefs`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [\n     *          { \"class\": \"my_class\", \"targets\": [ 0 ] }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          { \"class\": \"my_class\" },\n     *          null,\n     *          null,\n     *          null,\n     *          null\n     *        ]\n     *      } );\n     *    } );\n     */\n    \"sClass\": \"\",\n\n    /**\n     * When DataTables calculates the column widths to assign to each column,\n     * it finds the longest string in each column and then constructs a\n     * temporary table and reads the widths from that. The problem with this\n     * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\n     * string - thus the calculation can go wrong (doing it properly and putting\n     * it into an DOM object and measuring that is horribly(!) slow). Thus as\n     * a \"work around\" we provide this option. It will append its value to the\n     * text that is found to be the longest string for the column - i.e. padding.\n     * Generally you shouldn't need this!\n     *  @type string\n     *  @default <i>Empty string<i>\n     *\n     *  @name DataTable.defaults.column.contentPadding\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          null,\n     *          null,\n     *          null,\n     *          {\n     *            \"contentPadding\": \"mmm\"\n     *          }\n     *        ]\n     *      } );\n     *    } );\n     */\n    \"sContentPadding\": \"\",\n\n    /**\n     * Allows a default value to be given for a column's data, and will be used\n     * whenever a null data source is encountered (this can be because `data`\n     * is set to null, or because the data source itself is null).\n     *  @type string\n     *  @default null\n     *\n     *  @name DataTable.defaults.column.defaultContent\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columnDefs`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [\n     *          {\n     *            \"data\": null,\n     *            \"defaultContent\": \"Edit\",\n     *            \"targets\": [ -1 ]\n     *          }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          null,\n     *          null,\n     *          null,\n     *          {\n     *            \"data\": null,\n     *            \"defaultContent\": \"Edit\"\n     *          }\n     *        ]\n     *      } );\n     *    } );\n     */\n    \"sDefaultContent\": null,\n\n    /**\n     * This parameter is only used in DataTables' server-side processing. It can\n     * be exceptionally useful to know what columns are being displayed on the\n     * client side, and to map these to database fields. When defined, the names\n     * also allow DataTables to reorder information from the server if it comes\n     * back in an unexpected order (i.e. if you switch your columns around on the\n     * client-side, your server-side code does not also need updating).\n     *  @type string\n     *  @default <i>Empty string</i>\n     *\n     *  @name DataTable.defaults.column.name\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columnDefs`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [\n     *          { \"name\": \"engine\", \"targets\": [ 0 ] },\n     *          { \"name\": \"browser\", \"targets\": [ 1 ] },\n     *          { \"name\": \"platform\", \"targets\": [ 2 ] },\n     *          { \"name\": \"version\", \"targets\": [ 3 ] },\n     *          { \"name\": \"grade\", \"targets\": [ 4 ] }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          { \"name\": \"engine\" },\n     *          { \"name\": \"browser\" },\n     *          { \"name\": \"platform\" },\n     *          { \"name\": \"version\" },\n     *          { \"name\": \"grade\" }\n     *        ]\n     *      } );\n     *    } );\n     */\n    \"sName\": \"\",\n\n    /**\n     * Defines a data source type for the ordering which can be used to read\n     * real-time information from the table (updating the internally cached\n     * version) prior to ordering. This allows ordering to occur on user\n     * editable elements such as form inputs.\n     *  @type string\n     *  @default std\n     *\n     *  @name DataTable.defaults.column.orderDataType\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columnDefs`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [\n     *          { \"orderDataType\": \"dom-text\", \"targets\": [ 2, 3 ] },\n     *          { \"type\": \"numeric\", \"targets\": [ 3 ] },\n     *          { \"orderDataType\": \"dom-select\", \"targets\": [ 4 ] },\n     *          { \"orderDataType\": \"dom-checkbox\", \"targets\": [ 5 ] }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          null,\n     *          null,\n     *          { \"orderDataType\": \"dom-text\" },\n     *          { \"orderDataType\": \"dom-text\", \"type\": \"numeric\" },\n     *          { \"orderDataType\": \"dom-select\" },\n     *          { \"orderDataType\": \"dom-checkbox\" }\n     *        ]\n     *      } );\n     *    } );\n     */\n    \"sSortDataType\": \"std\",\n\n    /**\n     * The title of this column.\n     *  @type string\n     *  @default null <i>Derived from the 'TH' value for this column in the\n     *    original HTML table.</i>\n     *\n     *  @name DataTable.defaults.column.title\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columnDefs`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [\n     *          { \"title\": \"My column title\", \"targets\": [ 0 ] }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          { \"title\": \"My column title\" },\n     *          null,\n     *          null,\n     *          null,\n     *          null\n     *        ]\n     *      } );\n     *    } );\n     */\n    \"sTitle\": null,\n\n    /**\n     * The type allows you to specify how the data for this column will be\n     * ordered. Four types (string, numeric, date and html (which will strip\n     * HTML tags before ordering)) are currently available. Note that only date\n     * formats understood by Javascript's Date() object will be accepted as type\n     * date. For example: \"Mar 26, 2008 5:03 PM\". May take the values: 'string',\n     * 'numeric', 'date' or 'html' (by default). Further types can be adding\n     * through plug-ins.\n     *  @type string\n     *  @default null <i>Auto-detected from raw data</i>\n     *\n     *  @name DataTable.defaults.column.type\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columnDefs`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [\n     *          { \"type\": \"html\", \"targets\": [ 0 ] }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          { \"type\": \"html\" },\n     *          null,\n     *          null,\n     *          null,\n     *          null\n     *        ]\n     *      } );\n     *    } );\n     */\n    \"sType\": null,\n\n    /**\n     * Defining the width of the column, this parameter may take any CSS value\n     * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not\n     * been given a specific width through this interface ensuring that the table\n     * remains readable.\n     *  @type string\n     *  @default null <i>Automatic</i>\n     *\n     *  @name DataTable.defaults.column.width\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columnDefs`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [\n     *          { \"width\": \"20%\", \"targets\": [ 0 ] }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          { \"width\": \"20%\" },\n     *          null,\n     *          null,\n     *          null,\n     *          null\n     *        ]\n     *      } );\n     *    } );\n     */\n    \"sWidth\": null\n  };\n\n  _fnHungarianMap(DataTable.defaults.column);\n  /**\n   * DataTables settings object - this holds all the information needed for a\n   * given table, including configuration, data and current application of the\n   * table options. DataTables does not have a single instance for each DataTable\n   * with the settings attached to that instance, but rather instances of the\n   * DataTable \"class\" are created on-the-fly as needed (typically by a\n   * $().dataTable() call) and the settings object is then applied to that\n   * instance.\n   *\n   * Note that this object is related to {@link DataTable.defaults} but this\n   * one is the internal data store for DataTables's cache of columns. It should\n   * NOT be manipulated outside of DataTables. Any configuration should be done\n   * through the initialisation options.\n   *  @namespace\n   *  @todo Really should attach the settings object to individual instances so we\n   *    don't need to create new instances on each $().dataTable() call (if the\n   *    table already exists). It would also save passing oSettings around and\n   *    into every single function. However, this is a very significant\n   *    architecture change for DataTables and will almost certainly break\n   *    backwards compatibility with older installations. This is something that\n   *    will be done in 2.0.\n   */\n\n\n  DataTable.models.oSettings = {\n    /**\n     * Primary features of DataTables and their enablement state.\n     *  @namespace\n     */\n    \"oFeatures\": {\n      /**\n       * Flag to say if DataTables should automatically try to calculate the\n       * optimum table and columns widths (true) or not (false).\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bAutoWidth\": null,\n\n      /**\n       * Delay the creation of TR and TD elements until they are actually\n       * needed by a driven page draw. This can give a significant speed\n       * increase for Ajax source and Javascript source data, but makes no\n       * difference at all fro DOM and server-side processing tables.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bDeferRender\": null,\n\n      /**\n       * Enable filtering on the table or not. Note that if this is disabled\n       * then there is no filtering at all on the table, including fnFilter.\n       * To just remove the filtering input use sDom and remove the 'f' option.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bFilter\": null,\n\n      /**\n       * Table information element (the 'Showing x of y records' div) enable\n       * flag.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bInfo\": null,\n\n      /**\n       * Present a user control allowing the end user to change the page size\n       * when pagination is enabled.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bLengthChange\": null,\n\n      /**\n       * Pagination enabled or not. Note that if this is disabled then length\n       * changing must also be disabled.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bPaginate\": null,\n\n      /**\n       * Processing indicator enable flag whenever DataTables is enacting a\n       * user request - typically an Ajax request for server-side processing.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bProcessing\": null,\n\n      /**\n       * Server-side processing enabled flag - when enabled DataTables will\n       * get all data from the server for every draw - there is no filtering,\n       * sorting or paging done on the client-side.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bServerSide\": null,\n\n      /**\n       * Sorting enablement flag.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bSort\": null,\n\n      /**\n       * Multi-column sorting\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bSortMulti\": null,\n\n      /**\n       * Apply a class to the columns which are being sorted to provide a\n       * visual highlight or not. This can slow things down when enabled since\n       * there is a lot of DOM interaction.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bSortClasses\": null,\n\n      /**\n       * State saving enablement flag.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bStateSave\": null\n    },\n\n    /**\n     * Scrolling settings for a table.\n     *  @namespace\n     */\n    \"oScroll\": {\n      /**\n       * When the table is shorter in height than sScrollY, collapse the\n       * table container down to the height of the table (when true).\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bCollapse\": null,\n\n      /**\n       * Width of the scrollbar for the web-browser's platform. Calculated\n       * during table initialisation.\n       *  @type int\n       *  @default 0\n       */\n      \"iBarWidth\": 0,\n\n      /**\n       * Viewport width for horizontal scrolling. Horizontal scrolling is\n       * disabled if an empty string.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type string\n       */\n      \"sX\": null,\n\n      /**\n       * Width to expand the table to when using x-scrolling. Typically you\n       * should not need to use this.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type string\n       *  @deprecated\n       */\n      \"sXInner\": null,\n\n      /**\n       * Viewport height for vertical scrolling. Vertical scrolling is disabled\n       * if an empty string.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type string\n       */\n      \"sY\": null\n    },\n\n    /**\n     * Language information for the table.\n     *  @namespace\n     *  @extends DataTable.defaults.oLanguage\n     */\n    \"oLanguage\": {\n      /**\n       * Information callback function. See\n       * {@link DataTable.defaults.fnInfoCallback}\n       *  @type function\n       *  @default null\n       */\n      \"fnInfoCallback\": null\n    },\n\n    /**\n     * Browser support parameters\n     *  @namespace\n     */\n    \"oBrowser\": {\n      /**\n       * Indicate if the browser incorrectly calculates width:100% inside a\n       * scrolling element (IE6/7)\n       *  @type boolean\n       *  @default false\n       */\n      \"bScrollOversize\": false,\n\n      /**\n       * Determine if the vertical scrollbar is on the right or left of the\n       * scrolling container - needed for rtl language layout, although not\n       * all browsers move the scrollbar (Safari).\n       *  @type boolean\n       *  @default false\n       */\n      \"bScrollbarLeft\": false,\n\n      /**\n       * Flag for if `getBoundingClientRect` is fully supported or not\n       *  @type boolean\n       *  @default false\n       */\n      \"bBounding\": false,\n\n      /**\n       * Browser scrollbar width\n       *  @type integer\n       *  @default 0\n       */\n      \"barWidth\": 0\n    },\n    \"ajax\": null,\n\n    /**\n     * Array referencing the nodes which are used for the features. The\n     * parameters of this object match what is allowed by sDom - i.e.\n     *   <ul>\n     *     <li>'l' - Length changing</li>\n     *     <li>'f' - Filtering input</li>\n     *     <li>'t' - The table!</li>\n     *     <li>'i' - Information</li>\n     *     <li>'p' - Pagination</li>\n     *     <li>'r' - pRocessing</li>\n     *   </ul>\n     *  @type array\n     *  @default []\n     */\n    \"aanFeatures\": [],\n\n    /**\n     * Store data information - see {@link DataTable.models.oRow} for detailed\n     * information.\n     *  @type array\n     *  @default []\n     */\n    \"aoData\": [],\n\n    /**\n     * Array of indexes which are in the current display (after filtering etc)\n     *  @type array\n     *  @default []\n     */\n    \"aiDisplay\": [],\n\n    /**\n     * Array of indexes for display - no filtering\n     *  @type array\n     *  @default []\n     */\n    \"aiDisplayMaster\": [],\n\n    /**\n     * Map of row ids to data indexes\n     *  @type object\n     *  @default {}\n     */\n    \"aIds\": {},\n\n    /**\n     * Store information about each column that is in use\n     *  @type array\n     *  @default []\n     */\n    \"aoColumns\": [],\n\n    /**\n     * Store information about the table's header\n     *  @type array\n     *  @default []\n     */\n    \"aoHeader\": [],\n\n    /**\n     * Store information about the table's footer\n     *  @type array\n     *  @default []\n     */\n    \"aoFooter\": [],\n\n    /**\n     * Store the applied global search information in case we want to force a\n     * research or compare the old search to a new one.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @namespace\n     *  @extends DataTable.models.oSearch\n     */\n    \"oPreviousSearch\": {},\n\n    /**\n     * Store the applied search for each column - see\n     * {@link DataTable.models.oSearch} for the format that is used for the\n     * filtering information for each column.\n     *  @type array\n     *  @default []\n     */\n    \"aoPreSearchCols\": [],\n\n    /**\n     * Sorting that is applied to the table. Note that the inner arrays are\n     * used in the following manner:\n     * <ul>\n     *   <li>Index 0 - column number</li>\n     *   <li>Index 1 - current sorting direction</li>\n     * </ul>\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type array\n     *  @todo These inner arrays should really be objects\n     */\n    \"aaSorting\": null,\n\n    /**\n     * Sorting that is always applied to the table (i.e. prefixed in front of\n     * aaSorting).\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type array\n     *  @default []\n     */\n    \"aaSortingFixed\": [],\n\n    /**\n     * Classes to use for the striping of a table.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type array\n     *  @default []\n     */\n    \"asStripeClasses\": null,\n\n    /**\n     * If restoring a table - we should restore its striping classes as well\n     *  @type array\n     *  @default []\n     */\n    \"asDestroyStripes\": [],\n\n    /**\n     * If restoring a table - we should restore its width\n     *  @type int\n     *  @default 0\n     */\n    \"sDestroyWidth\": 0,\n\n    /**\n     * Callback functions array for every time a row is inserted (i.e. on a draw).\n     *  @type array\n     *  @default []\n     */\n    \"aoRowCallback\": [],\n\n    /**\n     * Callback functions for the header on each draw.\n     *  @type array\n     *  @default []\n     */\n    \"aoHeaderCallback\": [],\n\n    /**\n     * Callback function for the footer on each draw.\n     *  @type array\n     *  @default []\n     */\n    \"aoFooterCallback\": [],\n\n    /**\n     * Array of callback functions for draw callback functions\n     *  @type array\n     *  @default []\n     */\n    \"aoDrawCallback\": [],\n\n    /**\n     * Array of callback functions for row created function\n     *  @type array\n     *  @default []\n     */\n    \"aoRowCreatedCallback\": [],\n\n    /**\n     * Callback functions for just before the table is redrawn. A return of\n     * false will be used to cancel the draw.\n     *  @type array\n     *  @default []\n     */\n    \"aoPreDrawCallback\": [],\n\n    /**\n     * Callback functions for when the table has been initialised.\n     *  @type array\n     *  @default []\n     */\n    \"aoInitComplete\": [],\n\n    /**\n     * Callbacks for modifying the settings to be stored for state saving, prior to\n     * saving state.\n     *  @type array\n     *  @default []\n     */\n    \"aoStateSaveParams\": [],\n\n    /**\n     * Callbacks for modifying the settings that have been stored for state saving\n     * prior to using the stored values to restore the state.\n     *  @type array\n     *  @default []\n     */\n    \"aoStateLoadParams\": [],\n\n    /**\n     * Callbacks for operating on the settings object once the saved state has been\n     * loaded\n     *  @type array\n     *  @default []\n     */\n    \"aoStateLoaded\": [],\n\n    /**\n     * Cache the table ID for quick access\n     *  @type string\n     *  @default <i>Empty string</i>\n     */\n    \"sTableId\": \"\",\n\n    /**\n     * The TABLE node for the main table\n     *  @type node\n     *  @default null\n     */\n    \"nTable\": null,\n\n    /**\n     * Permanent ref to the thead element\n     *  @type node\n     *  @default null\n     */\n    \"nTHead\": null,\n\n    /**\n     * Permanent ref to the tfoot element - if it exists\n     *  @type node\n     *  @default null\n     */\n    \"nTFoot\": null,\n\n    /**\n     * Permanent ref to the tbody element\n     *  @type node\n     *  @default null\n     */\n    \"nTBody\": null,\n\n    /**\n     * Cache the wrapper node (contains all DataTables controlled elements)\n     *  @type node\n     *  @default null\n     */\n    \"nTableWrapper\": null,\n\n    /**\n     * Indicate if when using server-side processing the loading of data\n     * should be deferred until the second draw.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type boolean\n     *  @default false\n     */\n    \"bDeferLoading\": false,\n\n    /**\n     * Indicate if all required information has been read in\n     *  @type boolean\n     *  @default false\n     */\n    \"bInitialised\": false,\n\n    /**\n     * Information about open rows. Each object in the array has the parameters\n     * 'nTr' and 'nParent'\n     *  @type array\n     *  @default []\n     */\n    \"aoOpenRows\": [],\n\n    /**\n     * Dictate the positioning of DataTables' control elements - see\n     * {@link DataTable.model.oInit.sDom}.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type string\n     *  @default null\n     */\n    \"sDom\": null,\n\n    /**\n     * Search delay (in mS)\n     *  @type integer\n     *  @default null\n     */\n    \"searchDelay\": null,\n\n    /**\n     * Which type of pagination should be used.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type string\n     *  @default two_button\n     */\n    \"sPaginationType\": \"two_button\",\n\n    /**\n     * The state duration (for `stateSave`) in seconds.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type int\n     *  @default 0\n     */\n    \"iStateDuration\": 0,\n\n    /**\n     * Array of callback functions for state saving. Each array element is an\n     * object with the following parameters:\n     *   <ul>\n     *     <li>function:fn - function to call. Takes two parameters, oSettings\n     *       and the JSON string to save that has been thus far created. Returns\n     *       a JSON string to be inserted into a json object\n     *       (i.e. '\"param\": [ 0, 1, 2]')</li>\n     *     <li>string:sName - name of callback</li>\n     *   </ul>\n     *  @type array\n     *  @default []\n     */\n    \"aoStateSave\": [],\n\n    /**\n     * Array of callback functions for state loading. Each array element is an\n     * object with the following parameters:\n     *   <ul>\n     *     <li>function:fn - function to call. Takes two parameters, oSettings\n     *       and the object stored. May return false to cancel state loading</li>\n     *     <li>string:sName - name of callback</li>\n     *   </ul>\n     *  @type array\n     *  @default []\n     */\n    \"aoStateLoad\": [],\n\n    /**\n     * State that was saved. Useful for back reference\n     *  @type object\n     *  @default null\n     */\n    \"oSavedState\": null,\n\n    /**\n     * State that was loaded. Useful for back reference\n     *  @type object\n     *  @default null\n     */\n    \"oLoadedState\": null,\n\n    /**\n     * Source url for AJAX data for the table.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type string\n     *  @default null\n     */\n    \"sAjaxSource\": null,\n\n    /**\n     * Property from a given object from which to read the table data from. This\n     * can be an empty string (when not server-side processing), in which case\n     * it is  assumed an an array is given directly.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type string\n     */\n    \"sAjaxDataProp\": null,\n\n    /**\n     * Note if draw should be blocked while getting data\n     *  @type boolean\n     *  @default true\n     */\n    \"bAjaxDataGet\": true,\n\n    /**\n     * The last jQuery XHR object that was used for server-side data gathering.\n     * This can be used for working with the XHR information in one of the\n     * callbacks\n     *  @type object\n     *  @default null\n     */\n    \"jqXHR\": null,\n\n    /**\n     * JSON returned from the server in the last Ajax request\n     *  @type object\n     *  @default undefined\n     */\n    \"json\": undefined,\n\n    /**\n     * Data submitted as part of the last Ajax request\n     *  @type object\n     *  @default undefined\n     */\n    \"oAjaxData\": undefined,\n\n    /**\n     * Function to get the server-side data.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type function\n     */\n    \"fnServerData\": null,\n\n    /**\n     * Functions which are called prior to sending an Ajax request so extra\n     * parameters can easily be sent to the server\n     *  @type array\n     *  @default []\n     */\n    \"aoServerParams\": [],\n\n    /**\n     * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if\n     * required).\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type string\n     */\n    \"sServerMethod\": null,\n\n    /**\n     * Format numbers for display.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type function\n     */\n    \"fnFormatNumber\": null,\n\n    /**\n     * List of options that can be used for the user selectable length menu.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type array\n     *  @default []\n     */\n    \"aLengthMenu\": null,\n\n    /**\n     * Counter for the draws that the table does. Also used as a tracker for\n     * server-side processing\n     *  @type int\n     *  @default 0\n     */\n    \"iDraw\": 0,\n\n    /**\n     * Indicate if a redraw is being done - useful for Ajax\n     *  @type boolean\n     *  @default false\n     */\n    \"bDrawing\": false,\n\n    /**\n     * Draw index (iDraw) of the last error when parsing the returned data\n     *  @type int\n     *  @default -1\n     */\n    \"iDrawError\": -1,\n\n    /**\n     * Paging display length\n     *  @type int\n     *  @default 10\n     */\n    \"_iDisplayLength\": 10,\n\n    /**\n     * Paging start point - aiDisplay index\n     *  @type int\n     *  @default 0\n     */\n    \"_iDisplayStart\": 0,\n\n    /**\n     * Server-side processing - number of records in the result set\n     * (i.e. before filtering), Use fnRecordsTotal rather than\n     * this property to get the value of the number of records, regardless of\n     * the server-side processing setting.\n     *  @type int\n     *  @default 0\n     *  @private\n     */\n    \"_iRecordsTotal\": 0,\n\n    /**\n     * Server-side processing - number of records in the current display set\n     * (i.e. after filtering). Use fnRecordsDisplay rather than\n     * this property to get the value of the number of records, regardless of\n     * the server-side processing setting.\n     *  @type boolean\n     *  @default 0\n     *  @private\n     */\n    \"_iRecordsDisplay\": 0,\n\n    /**\n     * The classes to use for the table\n     *  @type object\n     *  @default {}\n     */\n    \"oClasses\": {},\n\n    /**\n     * Flag attached to the settings object so you can check in the draw\n     * callback if filtering has been done in the draw. Deprecated in favour of\n     * events.\n     *  @type boolean\n     *  @default false\n     *  @deprecated\n     */\n    \"bFiltered\": false,\n\n    /**\n     * Flag attached to the settings object so you can check in the draw\n     * callback if sorting has been done in the draw. Deprecated in favour of\n     * events.\n     *  @type boolean\n     *  @default false\n     *  @deprecated\n     */\n    \"bSorted\": false,\n\n    /**\n     * Indicate that if multiple rows are in the header and there is more than\n     * one unique cell per column, if the top one (true) or bottom one (false)\n     * should be used for sorting / title by DataTables.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type boolean\n     */\n    \"bSortCellsTop\": null,\n\n    /**\n     * Initialisation object that is used for the table\n     *  @type object\n     *  @default null\n     */\n    \"oInit\": null,\n\n    /**\n     * Destroy callback functions - for plug-ins to attach themselves to the\n     * destroy so they can clean up markup and events.\n     *  @type array\n     *  @default []\n     */\n    \"aoDestroyCallback\": [],\n\n    /**\n     * Get the number of records in the current record set, before filtering\n     *  @type function\n     */\n    \"fnRecordsTotal\": function fnRecordsTotal() {\n      return _fnDataSource(this) == 'ssp' ? this._iRecordsTotal * 1 : this.aiDisplayMaster.length;\n    },\n\n    /**\n     * Get the number of records in the current record set, after filtering\n     *  @type function\n     */\n    \"fnRecordsDisplay\": function fnRecordsDisplay() {\n      return _fnDataSource(this) == 'ssp' ? this._iRecordsDisplay * 1 : this.aiDisplay.length;\n    },\n\n    /**\n     * Get the display end point - aiDisplay index\n     *  @type function\n     */\n    \"fnDisplayEnd\": function fnDisplayEnd() {\n      var len = this._iDisplayLength,\n          start = this._iDisplayStart,\n          calc = start + len,\n          records = this.aiDisplay.length,\n          features = this.oFeatures,\n          paginate = features.bPaginate;\n\n      if (features.bServerSide) {\n        return paginate === false || len === -1 ? start + records : Math.min(start + len, this._iRecordsDisplay);\n      } else {\n        return !paginate || calc > records || len === -1 ? records : calc;\n      }\n    },\n\n    /**\n     * The DataTables object for this table\n     *  @type object\n     *  @default null\n     */\n    \"oInstance\": null,\n\n    /**\n     * Unique identifier for each instance of the DataTables object. If there\n     * is an ID on the table node, then it takes that value, otherwise an\n     * incrementing internal counter is used.\n     *  @type string\n     *  @default null\n     */\n    \"sInstance\": null,\n\n    /**\n     * tabindex attribute value that is added to DataTables control elements, allowing\n     * keyboard navigation of the table and its controls.\n     */\n    \"iTabIndex\": 0,\n\n    /**\n     * DIV container for the footer scrolling table if scrolling\n     */\n    \"nScrollHead\": null,\n\n    /**\n     * DIV container for the footer scrolling table if scrolling\n     */\n    \"nScrollFoot\": null,\n\n    /**\n     * Last applied sort\n     *  @type array\n     *  @default []\n     */\n    \"aLastSort\": [],\n\n    /**\n     * Stored plug-in instances\n     *  @type object\n     *  @default {}\n     */\n    \"oPlugins\": {},\n\n    /**\n     * Function used to get a row's id from the row's data\n     *  @type function\n     *  @default null\n     */\n    \"rowIdFn\": null,\n\n    /**\n     * Data location where to store a row's id\n     *  @type string\n     *  @default null\n     */\n    \"rowId\": null\n  };\n  /**\n   * Extension object for DataTables that is used to provide all extension\n   * options.\n   *\n   * Note that the `DataTable.ext` object is available through\n   * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is\n   * also aliased to `jQuery.fn.dataTableExt` for historic reasons.\n   *  @namespace\n   *  @extends DataTable.models.ext\n   */\n\n  /**\n   * DataTables extensions\n   * \n   * This namespace acts as a collection area for plug-ins that can be used to\n   * extend DataTables capabilities. Indeed many of the build in methods\n   * use this method to provide their own capabilities (sorting methods for\n   * example).\n   *\n   * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy\n   * reasons\n   *\n   *  @namespace\n   */\n\n  DataTable.ext = _ext = {\n    /**\n     * Buttons. For use with the Buttons extension for DataTables. This is\n     * defined here so other extensions can define buttons regardless of load\n     * order. It is _not_ used by DataTables core.\n     *\n     *  @type object\n     *  @default {}\n     */\n    buttons: {},\n\n    /**\n     * Element class names\n     *\n     *  @type object\n     *  @default {}\n     */\n    classes: {},\n\n    /**\n     * DataTables build type (expanded by the download builder)\n     *\n     *  @type string\n     */\n    builder: \"-source-\",\n\n    /**\n     * Error reporting.\n     * \n     * How should DataTables report an error. Can take the value 'alert',\n     * 'throw', 'none' or a function.\n     *\n     *  @type string|function\n     *  @default alert\n     */\n    errMode: \"alert\",\n\n    /**\n     * Feature plug-ins.\n     * \n     * This is an array of objects which describe the feature plug-ins that are\n     * available to DataTables. These feature plug-ins are then available for\n     * use through the `dom` initialisation option.\n     * \n     * Each feature plug-in is described by an object which must have the\n     * following properties:\n     * \n     * * `fnInit` - function that is used to initialise the plug-in,\n     * * `cFeature` - a character so the feature can be enabled by the `dom`\n     *   instillation option. This is case sensitive.\n     *\n     * The `fnInit` function has the following input parameters:\n     *\n     * 1. `{object}` DataTables settings object: see\n     *    {@link DataTable.models.oSettings}\n     *\n     * And the following return is expected:\n     * \n     * * {node|null} The element which contains your feature. Note that the\n     *   return may also be void if your plug-in does not require to inject any\n     *   DOM elements into DataTables control (`dom`) - for example this might\n     *   be useful when developing a plug-in which allows table control via\n     *   keyboard entry\n     *\n     *  @type array\n     *\n     *  @example\n     *    $.fn.dataTable.ext.features.push( {\n     *      \"fnInit\": function( oSettings ) {\n     *        return new TableTools( { \"oDTSettings\": oSettings } );\n     *      },\n     *      \"cFeature\": \"T\"\n     *    } );\n     */\n    feature: [],\n\n    /**\n     * Row searching.\n     * \n     * This method of searching is complimentary to the default type based\n     * searching, and a lot more comprehensive as it allows you complete control\n     * over the searching logic. Each element in this array is a function\n     * (parameters described below) that is called for every row in the table,\n     * and your logic decides if it should be included in the searching data set\n     * or not.\n     *\n     * Searching functions have the following input parameters:\n     *\n     * 1. `{object}` DataTables settings object: see\n     *    {@link DataTable.models.oSettings}\n     * 2. `{array|object}` Data for the row to be processed (same as the\n     *    original format that was passed in as the data source, or an array\n     *    from a DOM data source\n     * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which\n     *    can be useful to retrieve the `TR` element if you need DOM interaction.\n     *\n     * And the following return is expected:\n     *\n     * * {boolean} Include the row in the searched result set (true) or not\n     *   (false)\n     *\n     * Note that as with the main search ability in DataTables, technically this\n     * is \"filtering\", since it is subtractive. However, for consistency in\n     * naming we call it searching here.\n     *\n     *  @type array\n     *  @default []\n     *\n     *  @example\n     *    // The following example shows custom search being applied to the\n     *    // fourth column (i.e. the data[3] index) based on two input values\n     *    // from the end-user, matching the data in a certain range.\n     *    $.fn.dataTable.ext.search.push(\n     *      function( settings, data, dataIndex ) {\n     *        var min = document.getElementById('min').value * 1;\n     *        var max = document.getElementById('max').value * 1;\n     *        var version = data[3] == \"-\" ? 0 : data[3]*1;\n     *\n     *        if ( min == \"\" && max == \"\" ) {\n     *          return true;\n     *        }\n     *        else if ( min == \"\" && version < max ) {\n     *          return true;\n     *        }\n     *        else if ( min < version && \"\" == max ) {\n     *          return true;\n     *        }\n     *        else if ( min < version && version < max ) {\n     *          return true;\n     *        }\n     *        return false;\n     *      }\n     *    );\n     */\n    search: [],\n\n    /**\n     * Selector extensions\n     *\n     * The `selector` option can be used to extend the options available for the\n     * selector modifier options (`selector-modifier` object data type) that\n     * each of the three built in selector types offer (row, column and cell +\n     * their plural counterparts). For example the Select extension uses this\n     * mechanism to provide an option to select only rows, columns and cells\n     * that have been marked as selected by the end user (`{selected: true}`),\n     * which can be used in conjunction with the existing built in selector\n     * options.\n     *\n     * Each property is an array to which functions can be pushed. The functions\n     * take three attributes:\n     *\n     * * Settings object for the host table\n     * * Options object (`selector-modifier` object type)\n     * * Array of selected item indexes\n     *\n     * The return is an array of the resulting item indexes after the custom\n     * selector has been applied.\n     *\n     *  @type object\n     */\n    selector: {\n      cell: [],\n      column: [],\n      row: []\n    },\n\n    /**\n     * Internal functions, exposed for used in plug-ins.\n     * \n     * Please note that you should not need to use the internal methods for\n     * anything other than a plug-in (and even then, try to avoid if possible).\n     * The internal function may change between releases.\n     *\n     *  @type object\n     *  @default {}\n     */\n    internal: {},\n\n    /**\n     * Legacy configuration options. Enable and disable legacy options that\n     * are available in DataTables.\n     *\n     *  @type object\n     */\n    legacy: {\n      /**\n       * Enable / disable DataTables 1.9 compatible server-side processing\n       * requests\n       *\n       *  @type boolean\n       *  @default null\n       */\n      ajax: null\n    },\n\n    /**\n     * Pagination plug-in methods.\n     * \n     * Each entry in this object is a function and defines which buttons should\n     * be shown by the pagination rendering method that is used for the table:\n     * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the\n     * buttons are displayed in the document, while the functions here tell it\n     * what buttons to display. This is done by returning an array of button\n     * descriptions (what each button will do).\n     *\n     * Pagination types (the four built in options and any additional plug-in\n     * options defined here) can be used through the `paginationType`\n     * initialisation parameter.\n     *\n     * The functions defined take two parameters:\n     *\n     * 1. `{int} page` The current page index\n     * 2. `{int} pages` The number of pages in the table\n     *\n     * Each function is expected to return an array where each element of the\n     * array can be one of:\n     *\n     * * `first` - Jump to first page when activated\n     * * `last` - Jump to last page when activated\n     * * `previous` - Show previous page when activated\n     * * `next` - Show next page when activated\n     * * `{int}` - Show page of the index given\n     * * `{array}` - A nested array containing the above elements to add a\n     *   containing 'DIV' element (might be useful for styling).\n     *\n     * Note that DataTables v1.9- used this object slightly differently whereby\n     * an object with two functions would be defined for each plug-in. That\n     * ability is still supported by DataTables 1.10+ to provide backwards\n     * compatibility, but this option of use is now decremented and no longer\n     * documented in DataTables 1.10+.\n     *\n     *  @type object\n     *  @default {}\n     *\n     *  @example\n     *    // Show previous, next and current page buttons only\n     *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {\n     *      return [ 'previous', page, 'next' ];\n     *    };\n     */\n    pager: {},\n    renderer: {\n      pageButton: {},\n      header: {}\n    },\n\n    /**\n     * Ordering plug-ins - custom data source\n     * \n     * The extension options for ordering of data available here is complimentary\n     * to the default type based ordering that DataTables typically uses. It\n     * allows much greater control over the the data that is being used to\n     * order a column, but is necessarily therefore more complex.\n     * \n     * This type of ordering is useful if you want to do ordering based on data\n     * live from the DOM (for example the contents of an 'input' element) rather\n     * than just the static string that DataTables knows of.\n     * \n     * The way these plug-ins work is that you create an array of the values you\n     * wish to be ordering for the column in question and then return that\n     * array. The data in the array much be in the index order of the rows in\n     * the table (not the currently ordering order!). Which order data gathering\n     * function is run here depends on the `dt-init columns.orderDataType`\n     * parameter that is used for the column (if any).\n     *\n     * The functions defined take two parameters:\n     *\n     * 1. `{object}` DataTables settings object: see\n     *    {@link DataTable.models.oSettings}\n     * 2. `{int}` Target column index\n     *\n     * Each function is expected to return an array:\n     *\n     * * `{array}` Data for the column to be ordering upon\n     *\n     *  @type array\n     *\n     *  @example\n     *    // Ordering using `input` node values\n     *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )\n     *    {\n     *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {\n     *        return $('input', td).val();\n     *      } );\n     *    }\n     */\n    order: {},\n\n    /**\n     * Type based plug-ins.\n     *\n     * Each column in DataTables has a type assigned to it, either by automatic\n     * detection or by direct assignment using the `type` option for the column.\n     * The type of a column will effect how it is ordering and search (plug-ins\n     * can also make use of the column type if required).\n     *\n     * @namespace\n     */\n    type: {\n      /**\n       * Type detection functions.\n       *\n       * The functions defined in this object are used to automatically detect\n       * a column's type, making initialisation of DataTables super easy, even\n       * when complex data is in the table.\n       *\n       * The functions defined take two parameters:\n       *\n          *  1. `{*}` Data from the column cell to be analysed\n          *  2. `{settings}` DataTables settings object. This can be used to\n          *     perform context specific type detection - for example detection\n          *     based on language settings such as using a comma for a decimal\n          *     place. Generally speaking the options from the settings will not\n          *     be required\n       *\n       * Each function is expected to return:\n       *\n       * * `{string|null}` Data type detected, or null if unknown (and thus\n       *   pass it on to the other type detection functions.\n       *\n       *  @type array\n       *\n       *  @example\n       *    // Currency type detection plug-in:\n       *    $.fn.dataTable.ext.type.detect.push(\n       *      function ( data, settings ) {\n       *        // Check the numeric part\n       *        if ( ! data.substring(1).match(/[0-9]/) ) {\n       *          return null;\n       *        }\n       *\n       *        // Check prefixed by currency\n       *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {\n       *          return 'currency';\n       *        }\n       *        return null;\n       *      }\n       *    );\n       */\n      detect: [],\n\n      /**\n       * Type based search formatting.\n       *\n       * The type based searching functions can be used to pre-format the\n       * data to be search on. For example, it can be used to strip HTML\n       * tags or to de-format telephone numbers for numeric only searching.\n       *\n       * Note that is a search is not defined for a column of a given type,\n       * no search formatting will be performed.\n       * \n       * Pre-processing of searching data plug-ins - When you assign the sType\n       * for a column (or have it automatically detected for you by DataTables\n       * or a type detection plug-in), you will typically be using this for\n       * custom sorting, but it can also be used to provide custom searching\n       * by allowing you to pre-processing the data and returning the data in\n       * the format that should be searched upon. This is done by adding\n       * functions this object with a parameter name which matches the sType\n       * for that target column. This is the corollary of <i>afnSortData</i>\n       * for searching data.\n       *\n       * The functions defined take a single parameter:\n       *\n          *  1. `{*}` Data from the column cell to be prepared for searching\n       *\n       * Each function is expected to return:\n       *\n       * * `{string|null}` Formatted string that will be used for the searching.\n       *\n       *  @type object\n       *  @default {}\n       *\n       *  @example\n       *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {\n       *      return d.replace(/\\n/g,\" \").replace( /<.*?>/g, \"\" );\n       *    }\n       */\n      search: {},\n\n      /**\n       * Type based ordering.\n       *\n       * The column type tells DataTables what ordering to apply to the table\n       * when a column is sorted upon. The order for each type that is defined,\n       * is defined by the functions available in this object.\n       *\n       * Each ordering option can be described by three properties added to\n       * this object:\n       *\n       * * `{type}-pre` - Pre-formatting function\n       * * `{type}-asc` - Ascending order function\n       * * `{type}-desc` - Descending order function\n       *\n       * All three can be used together, only `{type}-pre` or only\n       * `{type}-asc` and `{type}-desc` together. It is generally recommended\n       * that only `{type}-pre` is used, as this provides the optimal\n       * implementation in terms of speed, although the others are provided\n       * for compatibility with existing Javascript sort functions.\n       *\n       * `{type}-pre`: Functions defined take a single parameter:\n       *\n          *  1. `{*}` Data from the column cell to be prepared for ordering\n       *\n       * And return:\n       *\n       * * `{*}` Data to be sorted upon\n       *\n       * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort\n       * functions, taking two parameters:\n       *\n          *  1. `{*}` Data to compare to the second parameter\n          *  2. `{*}` Data to compare to the first parameter\n       *\n       * And returning:\n       *\n       * * `{*}` Ordering match: <0 if first parameter should be sorted lower\n       *   than the second parameter, ===0 if the two parameters are equal and\n       *   >0 if the first parameter should be sorted height than the second\n       *   parameter.\n       * \n       *  @type object\n       *  @default {}\n       *\n       *  @example\n       *    // Numeric ordering of formatted numbers with a pre-formatter\n       *    $.extend( $.fn.dataTable.ext.type.order, {\n       *      \"string-pre\": function(x) {\n       *        a = (a === \"-\" || a === \"\") ? 0 : a.replace( /[^\\d\\-\\.]/g, \"\" );\n       *        return parseFloat( a );\n       *      }\n       *    } );\n       *\n       *  @example\n       *    // Case-sensitive string ordering, with no pre-formatting method\n       *    $.extend( $.fn.dataTable.ext.order, {\n       *      \"string-case-asc\": function(x,y) {\n       *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n       *      },\n       *      \"string-case-desc\": function(x,y) {\n       *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));\n       *      }\n       *    } );\n       */\n      order: {}\n    },\n\n    /**\n     * Unique DataTables instance counter\n     *\n     * @type int\n     * @private\n     */\n    _unique: 0,\n    //\n    // Depreciated\n    // The following properties are retained for backwards compatiblity only.\n    // The should not be used in new projects and will be removed in a future\n    // version\n    //\n\n    /**\n     * Version check function.\n     *  @type function\n     *  @depreciated Since 1.10\n     */\n    fnVersionCheck: DataTable.fnVersionCheck,\n\n    /**\n     * Index for what 'this' index API functions should use\n     *  @type int\n     *  @deprecated Since v1.10\n     */\n    iApiIndex: 0,\n\n    /**\n     * jQuery UI class container\n     *  @type object\n     *  @deprecated Since v1.10\n     */\n    oJUIClasses: {},\n\n    /**\n     * Software version\n     *  @type string\n     *  @deprecated Since v1.10\n     */\n    sVersion: DataTable.version\n  }; //\n  // Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts\n  //\n\n  $.extend(_ext, {\n    afnFiltering: _ext.search,\n    aTypes: _ext.type.detect,\n    ofnSearch: _ext.type.search,\n    oSort: _ext.type.order,\n    afnSortData: _ext.order,\n    aoFeatures: _ext.feature,\n    oApi: _ext.internal,\n    oStdClasses: _ext.classes,\n    oPagination: _ext.pager\n  });\n  $.extend(DataTable.ext.classes, {\n    \"sTable\": \"dataTable\",\n    \"sNoFooter\": \"no-footer\",\n\n    /* Paging buttons */\n    \"sPageButton\": \"paginate_button\",\n    \"sPageButtonActive\": \"current\",\n    \"sPageButtonDisabled\": \"disabled\",\n\n    /* Striping classes */\n    \"sStripeOdd\": \"odd\",\n    \"sStripeEven\": \"even\",\n\n    /* Empty row */\n    \"sRowEmpty\": \"dataTables_empty\",\n\n    /* Features */\n    \"sWrapper\": \"dataTables_wrapper\",\n    \"sFilter\": \"dataTables_filter\",\n    \"sInfo\": \"dataTables_info\",\n    \"sPaging\": \"dataTables_paginate paging_\",\n\n    /* Note that the type is postfixed */\n    \"sLength\": \"dataTables_length\",\n    \"sProcessing\": \"dataTables_processing\",\n\n    /* Sorting */\n    \"sSortAsc\": \"sorting_asc\",\n    \"sSortDesc\": \"sorting_desc\",\n    \"sSortable\": \"sorting\",\n\n    /* Sortable in both directions */\n    \"sSortableAsc\": \"sorting_asc_disabled\",\n    \"sSortableDesc\": \"sorting_desc_disabled\",\n    \"sSortableNone\": \"sorting_disabled\",\n    \"sSortColumn\": \"sorting_\",\n\n    /* Note that an int is postfixed for the sorting order */\n\n    /* Filtering */\n    \"sFilterInput\": \"\",\n\n    /* Page length */\n    \"sLengthSelect\": \"\",\n\n    /* Scrolling */\n    \"sScrollWrapper\": \"dataTables_scroll\",\n    \"sScrollHead\": \"dataTables_scrollHead\",\n    \"sScrollHeadInner\": \"dataTables_scrollHeadInner\",\n    \"sScrollBody\": \"dataTables_scrollBody\",\n    \"sScrollFoot\": \"dataTables_scrollFoot\",\n    \"sScrollFootInner\": \"dataTables_scrollFootInner\",\n\n    /* Misc */\n    \"sHeaderTH\": \"\",\n    \"sFooterTH\": \"\",\n    // Deprecated\n    \"sSortJUIAsc\": \"\",\n    \"sSortJUIDesc\": \"\",\n    \"sSortJUI\": \"\",\n    \"sSortJUIAscAllowed\": \"\",\n    \"sSortJUIDescAllowed\": \"\",\n    \"sSortJUIWrapper\": \"\",\n    \"sSortIcon\": \"\",\n    \"sJUIHeader\": \"\",\n    \"sJUIFooter\": \"\"\n  });\n  var extPagination = DataTable.ext.pager;\n\n  function _numbers(page, pages) {\n    var numbers = [],\n        buttons = extPagination.numbers_length,\n        half = Math.floor(buttons / 2),\n        i = 1;\n\n    if (pages <= buttons) {\n      numbers = _range(0, pages);\n    } else if (page <= half) {\n      numbers = _range(0, buttons - 2);\n      numbers.push('ellipsis');\n      numbers.push(pages - 1);\n    } else if (page >= pages - 1 - half) {\n      numbers = _range(pages - (buttons - 2), pages);\n      numbers.splice(0, 0, 'ellipsis'); // no unshift in ie6\n\n      numbers.splice(0, 0, 0);\n    } else {\n      numbers = _range(page - half + 2, page + half - 1);\n      numbers.push('ellipsis');\n      numbers.push(pages - 1);\n      numbers.splice(0, 0, 'ellipsis');\n      numbers.splice(0, 0, 0);\n    }\n\n    numbers.DT_el = 'span';\n    return numbers;\n  }\n\n  $.extend(extPagination, {\n    simple: function simple(page, pages) {\n      return ['previous', 'next'];\n    },\n    full: function full(page, pages) {\n      return ['first', 'previous', 'next', 'last'];\n    },\n    numbers: function numbers(page, pages) {\n      return [_numbers(page, pages)];\n    },\n    simple_numbers: function simple_numbers(page, pages) {\n      return ['previous', _numbers(page, pages), 'next'];\n    },\n    full_numbers: function full_numbers(page, pages) {\n      return ['first', 'previous', _numbers(page, pages), 'next', 'last'];\n    },\n    first_last_numbers: function first_last_numbers(page, pages) {\n      return ['first', _numbers(page, pages), 'last'];\n    },\n    // For testing and plug-ins to use\n    _numbers: _numbers,\n    // Number of number buttons (including ellipsis) to show. _Must be odd!_\n    numbers_length: 7\n  });\n  $.extend(true, DataTable.ext.renderer, {\n    pageButton: {\n      _: function _(settings, host, idx, buttons, page, pages) {\n        var classes = settings.oClasses;\n        var lang = settings.oLanguage.oPaginate;\n        var aria = settings.oLanguage.oAria.paginate || {};\n        var btnDisplay,\n            btnClass,\n            counter = 0;\n\n        var attach = function attach(container, buttons) {\n          var i, ien, node, button;\n\n          var clickHandler = function clickHandler(e) {\n            _fnPageChange(settings, e.data.action, true);\n          };\n\n          for (i = 0, ien = buttons.length; i < ien; i++) {\n            button = buttons[i];\n\n            if ($.isArray(button)) {\n              var inner = $('<' + (button.DT_el || 'div') + '/>').appendTo(container);\n              attach(inner, button);\n            } else {\n              btnDisplay = null;\n              btnClass = '';\n\n              switch (button) {\n                case 'ellipsis':\n                  container.append('<span class=\"ellipsis\">&#x2026;</span>');\n                  break;\n\n                case 'first':\n                  btnDisplay = lang.sFirst;\n                  btnClass = button + (page > 0 ? '' : ' ' + classes.sPageButtonDisabled);\n                  break;\n\n                case 'previous':\n                  btnDisplay = lang.sPrevious;\n                  btnClass = button + (page > 0 ? '' : ' ' + classes.sPageButtonDisabled);\n                  break;\n\n                case 'next':\n                  btnDisplay = lang.sNext;\n                  btnClass = button + (page < pages - 1 ? '' : ' ' + classes.sPageButtonDisabled);\n                  break;\n\n                case 'last':\n                  btnDisplay = lang.sLast;\n                  btnClass = button + (page < pages - 1 ? '' : ' ' + classes.sPageButtonDisabled);\n                  break;\n\n                default:\n                  btnDisplay = button + 1;\n                  btnClass = page === button ? classes.sPageButtonActive : '';\n                  break;\n              }\n\n              if (btnDisplay !== null) {\n                node = $('<a>', {\n                  'class': classes.sPageButton + ' ' + btnClass,\n                  'aria-controls': settings.sTableId,\n                  'aria-label': aria[button],\n                  'data-dt-idx': counter,\n                  'tabindex': settings.iTabIndex,\n                  'id': idx === 0 && typeof button === 'string' ? settings.sTableId + '_' + button : null\n                }).html(btnDisplay).appendTo(container);\n\n                _fnBindAction(node, {\n                  action: button\n                }, clickHandler);\n\n                counter++;\n              }\n            }\n          }\n        }; // IE9 throws an 'unknown error' if document.activeElement is used\n        // inside an iframe or frame. Try / catch the error. Not good for\n        // accessibility, but neither are frames.\n\n\n        var activeEl;\n\n        try {\n          // Because this approach is destroying and recreating the paging\n          // elements, focus is lost on the select button which is bad for\n          // accessibility. So we want to restore focus once the draw has\n          // completed\n          activeEl = $(host).find(document.activeElement).data('dt-idx');\n        } catch (e) {}\n\n        attach($(host).empty(), buttons);\n\n        if (activeEl !== undefined) {\n          $(host).find('[data-dt-idx=' + activeEl + ']').focus();\n        }\n      }\n    }\n  }); // Built in type detection. See model.ext.aTypes for information about\n  // what is required from this methods.\n\n  $.extend(DataTable.ext.type.detect, [// Plain numbers - first since V8 detects some plain numbers as dates\n  // e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).\n  function (d, settings) {\n    var decimal = settings.oLanguage.sDecimal;\n    return _isNumber(d, decimal) ? 'num' + decimal : null;\n  }, // Dates (only those recognised by the browser's Date.parse)\n  function (d, settings) {\n    // V8 tries _very_ hard to make a string passed into `Date.parse()`\n    // valid, so we need to use a regex to restrict date formats. Use a\n    // plug-in for anything other than ISO8601 style strings\n    if (d && !(d instanceof Date) && !_re_date.test(d)) {\n      return null;\n    }\n\n    var parsed = Date.parse(d);\n    return parsed !== null && !isNaN(parsed) || _empty(d) ? 'date' : null;\n  }, // Formatted numbers\n  function (d, settings) {\n    var decimal = settings.oLanguage.sDecimal;\n    return _isNumber(d, decimal, true) ? 'num-fmt' + decimal : null;\n  }, // HTML numeric\n  function (d, settings) {\n    var decimal = settings.oLanguage.sDecimal;\n    return _htmlNumeric(d, decimal) ? 'html-num' + decimal : null;\n  }, // HTML numeric, formatted\n  function (d, settings) {\n    var decimal = settings.oLanguage.sDecimal;\n    return _htmlNumeric(d, decimal, true) ? 'html-num-fmt' + decimal : null;\n  }, // HTML (this is strict checking - there must be html)\n  function (d, settings) {\n    return _empty(d) || typeof d === 'string' && d.indexOf('<') !== -1 ? 'html' : null;\n  }]); // Filter formatting functions. See model.ext.ofnSearch for information about\n  // what is required from these methods.\n  // \n  // Note that additional search methods are added for the html numbers and\n  // html formatted numbers by `_addNumericSort()` when we know what the decimal\n  // place is\n\n  $.extend(DataTable.ext.type.search, {\n    html: function html(data) {\n      return _empty(data) ? data : typeof data === 'string' ? data.replace(_re_new_lines, \" \").replace(_re_html, \"\") : '';\n    },\n    string: function string(data) {\n      return _empty(data) ? data : typeof data === 'string' ? data.replace(_re_new_lines, \" \") : data;\n    }\n  });\n\n  var __numericReplace = function __numericReplace(d, decimalPlace, re1, re2) {\n    if (d !== 0 && (!d || d === '-')) {\n      return -Infinity;\n    } // If a decimal place other than `.` is used, it needs to be given to the\n    // function so we can detect it and replace with a `.` which is the only\n    // decimal place Javascript recognises - it is not locale aware.\n\n\n    if (decimalPlace) {\n      d = _numToDecimal(d, decimalPlace);\n    }\n\n    if (d.replace) {\n      if (re1) {\n        d = d.replace(re1, '');\n      }\n\n      if (re2) {\n        d = d.replace(re2, '');\n      }\n    }\n\n    return d * 1;\n  }; // Add the numeric 'deformatting' functions for sorting and search. This is done\n  // in a function to provide an easy ability for the language options to add\n  // additional methods if a non-period decimal place is used.\n\n\n  function _addNumericSort(decimalPlace) {\n    $.each({\n      // Plain numbers\n      \"num\": function num(d) {\n        return __numericReplace(d, decimalPlace);\n      },\n      // Formatted numbers\n      \"num-fmt\": function numFmt(d) {\n        return __numericReplace(d, decimalPlace, _re_formatted_numeric);\n      },\n      // HTML numeric\n      \"html-num\": function htmlNum(d) {\n        return __numericReplace(d, decimalPlace, _re_html);\n      },\n      // HTML numeric, formatted\n      \"html-num-fmt\": function htmlNumFmt(d) {\n        return __numericReplace(d, decimalPlace, _re_html, _re_formatted_numeric);\n      }\n    }, function (key, fn) {\n      // Add the ordering method\n      _ext.type.order[key + decimalPlace + '-pre'] = fn; // For HTML types add a search formatter that will strip the HTML\n\n      if (key.match(/^html\\-/)) {\n        _ext.type.search[key + decimalPlace] = _ext.type.search.html;\n      }\n    });\n  } // Default sort methods\n\n\n  $.extend(_ext.type.order, {\n    // Dates\n    \"date-pre\": function datePre(d) {\n      var ts = Date.parse(d);\n      return isNaN(ts) ? -Infinity : ts;\n    },\n    // html\n    \"html-pre\": function htmlPre(a) {\n      return _empty(a) ? '' : a.replace ? a.replace(/<.*?>/g, \"\").toLowerCase() : a + '';\n    },\n    // string\n    \"string-pre\": function stringPre(a) {\n      // This is a little complex, but faster than always calling toString,\n      // http://jsperf.com/tostring-v-check\n      return _empty(a) ? '' : typeof a === 'string' ? a.toLowerCase() : !a.toString ? '' : a.toString();\n    },\n    // string-asc and -desc are retained only for compatibility with the old\n    // sort methods\n    \"string-asc\": function stringAsc(x, y) {\n      return x < y ? -1 : x > y ? 1 : 0;\n    },\n    \"string-desc\": function stringDesc(x, y) {\n      return x < y ? 1 : x > y ? -1 : 0;\n    }\n  }); // Numeric sorting types - order doesn't matter here\n\n  _addNumericSort('');\n\n  $.extend(true, DataTable.ext.renderer, {\n    header: {\n      _: function _(settings, cell, column, classes) {\n        // No additional mark-up required\n        // Attach a sort listener to update on sort - note that using the\n        // `DT` namespace will allow the event to be removed automatically\n        // on destroy, while the `dt` namespaced event is the one we are\n        // listening for\n        $(settings.nTable).on('order.dt.DT', function (e, ctx, sorting, columns) {\n          if (settings !== ctx) {\n            // need to check this this is the host\n            return; // table, not a nested one\n          }\n\n          var colIdx = column.idx;\n          cell.removeClass(column.sSortingClass + ' ' + classes.sSortAsc + ' ' + classes.sSortDesc).addClass(columns[colIdx] == 'asc' ? classes.sSortAsc : columns[colIdx] == 'desc' ? classes.sSortDesc : column.sSortingClass);\n        });\n      },\n      jqueryui: function jqueryui(settings, cell, column, classes) {\n        $('<div/>').addClass(classes.sSortJUIWrapper).append(cell.contents()).append($('<span/>').addClass(classes.sSortIcon + ' ' + column.sSortingClassJUI)).appendTo(cell); // Attach a sort listener to update on sort\n\n        $(settings.nTable).on('order.dt.DT', function (e, ctx, sorting, columns) {\n          if (settings !== ctx) {\n            return;\n          }\n\n          var colIdx = column.idx;\n          cell.removeClass(classes.sSortAsc + \" \" + classes.sSortDesc).addClass(columns[colIdx] == 'asc' ? classes.sSortAsc : columns[colIdx] == 'desc' ? classes.sSortDesc : column.sSortingClass);\n          cell.find('span.' + classes.sSortIcon).removeClass(classes.sSortJUIAsc + \" \" + classes.sSortJUIDesc + \" \" + classes.sSortJUI + \" \" + classes.sSortJUIAscAllowed + \" \" + classes.sSortJUIDescAllowed).addClass(columns[colIdx] == 'asc' ? classes.sSortJUIAsc : columns[colIdx] == 'desc' ? classes.sSortJUIDesc : column.sSortingClassJUI);\n        });\n      }\n    }\n  });\n  /*\n   * Public helper functions. These aren't used internally by DataTables, or\n   * called by any of the options passed into DataTables, but they can be used\n   * externally by developers working with DataTables. They are helper functions\n   * to make working with DataTables a little bit easier.\n   */\n\n  var __htmlEscapeEntities = function __htmlEscapeEntities(d) {\n    return typeof d === 'string' ? d.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;') : d;\n  };\n  /**\n   * Helpers for `columns.render`.\n   *\n   * The options defined here can be used with the `columns.render` initialisation\n   * option to provide a display renderer. The following functions are defined:\n   *\n   * * `number` - Will format numeric data (defined by `columns.data`) for\n   *   display, retaining the original unformatted data for sorting and filtering.\n   *   It takes 5 parameters:\n   *   * `string` - Thousands grouping separator\n   *   * `string` - Decimal point indicator\n   *   * `integer` - Number of decimal points to show\n   *   * `string` (optional) - Prefix.\n   *   * `string` (optional) - Postfix (/suffix).\n   * * `text` - Escape HTML to help prevent XSS attacks. It has no optional\n   *   parameters.\n   *\n   * @example\n   *   // Column definition using the number renderer\n   *   {\n   *     data: \"salary\",\n   *     render: $.fn.dataTable.render.number( '\\'', '.', 0, '$' )\n   *   }\n   *\n   * @namespace\n   */\n\n\n  DataTable.render = {\n    number: function number(thousands, decimal, precision, prefix, postfix) {\n      return {\n        display: function display(d) {\n          if (typeof d !== 'number' && typeof d !== 'string') {\n            return d;\n          }\n\n          var negative = d < 0 ? '-' : '';\n          var flo = parseFloat(d); // If NaN then there isn't much formatting that we can do - just\n          // return immediately, escaping any HTML (this was supposed to\n          // be a number after all)\n\n          if (isNaN(flo)) {\n            return __htmlEscapeEntities(d);\n          }\n\n          flo = flo.toFixed(precision);\n          d = Math.abs(flo);\n          var intPart = parseInt(d, 10);\n          var floatPart = precision ? decimal + (d - intPart).toFixed(precision).substring(2) : '';\n          return negative + (prefix || '') + intPart.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousands) + floatPart + (postfix || '');\n        }\n      };\n    },\n    text: function text() {\n      return {\n        display: __htmlEscapeEntities,\n        filter: __htmlEscapeEntities\n      };\n    }\n  };\n  /*\n   * This is really a good bit rubbish this method of exposing the internal methods\n   * publicly... - To be fixed in 2.0 using methods on the prototype\n   */\n\n  /**\n   * Create a wrapper function for exporting an internal functions to an external API.\n   *  @param {string} fn API function name\n   *  @returns {function} wrapped function\n   *  @memberof DataTable#internal\n   */\n\n  function _fnExternApiFunc(fn) {\n    return function () {\n      var args = [_fnSettingsFromNode(this[DataTable.ext.iApiIndex])].concat(Array.prototype.slice.call(arguments));\n      return DataTable.ext.internal[fn].apply(this, args);\n    };\n  }\n  /**\n   * Reference to internal functions for use by plug-in developers. Note that\n   * these methods are references to internal functions and are considered to be\n   * private. If you use these methods, be aware that they are liable to change\n   * between versions.\n   *  @namespace\n   */\n\n\n  $.extend(DataTable.ext.internal, {\n    _fnExternApiFunc: _fnExternApiFunc,\n    _fnBuildAjax: _fnBuildAjax,\n    _fnAjaxUpdate: _fnAjaxUpdate,\n    _fnAjaxParameters: _fnAjaxParameters,\n    _fnAjaxUpdateDraw: _fnAjaxUpdateDraw,\n    _fnAjaxDataSrc: _fnAjaxDataSrc,\n    _fnAddColumn: _fnAddColumn,\n    _fnColumnOptions: _fnColumnOptions,\n    _fnAdjustColumnSizing: _fnAdjustColumnSizing,\n    _fnVisibleToColumnIndex: _fnVisibleToColumnIndex,\n    _fnColumnIndexToVisible: _fnColumnIndexToVisible,\n    _fnVisbleColumns: _fnVisbleColumns,\n    _fnGetColumns: _fnGetColumns,\n    _fnColumnTypes: _fnColumnTypes,\n    _fnApplyColumnDefs: _fnApplyColumnDefs,\n    _fnHungarianMap: _fnHungarianMap,\n    _fnCamelToHungarian: _fnCamelToHungarian,\n    _fnLanguageCompat: _fnLanguageCompat,\n    _fnBrowserDetect: _fnBrowserDetect,\n    _fnAddData: _fnAddData,\n    _fnAddTr: _fnAddTr,\n    _fnNodeToDataIndex: _fnNodeToDataIndex,\n    _fnNodeToColumnIndex: _fnNodeToColumnIndex,\n    _fnGetCellData: _fnGetCellData,\n    _fnSetCellData: _fnSetCellData,\n    _fnSplitObjNotation: _fnSplitObjNotation,\n    _fnGetObjectDataFn: _fnGetObjectDataFn,\n    _fnSetObjectDataFn: _fnSetObjectDataFn,\n    _fnGetDataMaster: _fnGetDataMaster,\n    _fnClearTable: _fnClearTable,\n    _fnDeleteIndex: _fnDeleteIndex,\n    _fnInvalidate: _fnInvalidate,\n    _fnGetRowElements: _fnGetRowElements,\n    _fnCreateTr: _fnCreateTr,\n    _fnBuildHead: _fnBuildHead,\n    _fnDrawHead: _fnDrawHead,\n    _fnDraw: _fnDraw,\n    _fnReDraw: _fnReDraw,\n    _fnAddOptionsHtml: _fnAddOptionsHtml,\n    _fnDetectHeader: _fnDetectHeader,\n    _fnGetUniqueThs: _fnGetUniqueThs,\n    _fnFeatureHtmlFilter: _fnFeatureHtmlFilter,\n    _fnFilterComplete: _fnFilterComplete,\n    _fnFilterCustom: _fnFilterCustom,\n    _fnFilterColumn: _fnFilterColumn,\n    _fnFilter: _fnFilter,\n    _fnFilterCreateSearch: _fnFilterCreateSearch,\n    _fnEscapeRegex: _fnEscapeRegex,\n    _fnFilterData: _fnFilterData,\n    _fnFeatureHtmlInfo: _fnFeatureHtmlInfo,\n    _fnUpdateInfo: _fnUpdateInfo,\n    _fnInfoMacros: _fnInfoMacros,\n    _fnInitialise: _fnInitialise,\n    _fnInitComplete: _fnInitComplete,\n    _fnLengthChange: _fnLengthChange,\n    _fnFeatureHtmlLength: _fnFeatureHtmlLength,\n    _fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,\n    _fnPageChange: _fnPageChange,\n    _fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,\n    _fnProcessingDisplay: _fnProcessingDisplay,\n    _fnFeatureHtmlTable: _fnFeatureHtmlTable,\n    _fnScrollDraw: _fnScrollDraw,\n    _fnApplyToChildren: _fnApplyToChildren,\n    _fnCalculateColumnWidths: _fnCalculateColumnWidths,\n    _fnThrottle: _fnThrottle,\n    _fnConvertToWidth: _fnConvertToWidth,\n    _fnGetWidestNode: _fnGetWidestNode,\n    _fnGetMaxLenString: _fnGetMaxLenString,\n    _fnStringToCss: _fnStringToCss,\n    _fnSortFlatten: _fnSortFlatten,\n    _fnSort: _fnSort,\n    _fnSortAria: _fnSortAria,\n    _fnSortListener: _fnSortListener,\n    _fnSortAttachListener: _fnSortAttachListener,\n    _fnSortingClasses: _fnSortingClasses,\n    _fnSortData: _fnSortData,\n    _fnSaveState: _fnSaveState,\n    _fnLoadState: _fnLoadState,\n    _fnSettingsFromNode: _fnSettingsFromNode,\n    _fnLog: _fnLog,\n    _fnMap: _fnMap,\n    _fnBindAction: _fnBindAction,\n    _fnCallbackReg: _fnCallbackReg,\n    _fnCallbackFire: _fnCallbackFire,\n    _fnLengthOverflow: _fnLengthOverflow,\n    _fnRenderer: _fnRenderer,\n    _fnDataSource: _fnDataSource,\n    _fnRowAttributes: _fnRowAttributes,\n    _fnExtend: _fnExtend,\n    _fnCalculateEnd: function _fnCalculateEnd() {} // Used by a lot of plug-ins, but redundant\n    // in 1.10, so this dead-end function is\n    // added to prevent errors\n\n  }); // jQuery access\n\n  $.fn.dataTable = DataTable; // Provide access to the host jQuery object (circular reference)\n\n  DataTable.$ = $; // Legacy aliases\n\n  $.fn.dataTableSettings = DataTable.settings;\n  $.fn.dataTableExt = DataTable.ext; // With a capital `D` we return a DataTables API instance rather than a\n  // jQuery object\n\n  $.fn.DataTable = function (opts) {\n    return $(this).dataTable(opts).api();\n  }; // All properties that are available to $.fn.dataTable should also be\n  // available on $.fn.DataTable\n\n\n  $.each(DataTable, function (prop, val) {\n    $.fn.DataTable[prop] = val;\n  }); // Information about events fired by DataTables - for documentation.\n\n  /**\n   * Draw event, fired whenever the table is redrawn on the page, at the same\n   * point as fnDrawCallback. This may be useful for binding events or\n   * performing calculations when the table is altered at all.\n   *  @name DataTable#draw.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n   */\n\n  /**\n   * Search event, fired when the searching applied to the table (using the\n   * built-in global search, or column filters) is altered.\n   *  @name DataTable#search.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n   */\n\n  /**\n   * Page change event, fired when the paging of the table is altered.\n   *  @name DataTable#page.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n   */\n\n  /**\n   * Order event, fired when the ordering applied to the table is altered.\n   *  @name DataTable#order.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n   */\n\n  /**\n   * DataTables initialisation complete event, fired when the table is fully\n   * drawn, including Ajax data loaded, if Ajax data is required.\n   *  @name DataTable#init.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} oSettings DataTables settings object\n   *  @param {object} json The JSON object request from the server - only\n   *    present if client-side Ajax sourced data is used</li></ol>\n   */\n\n  /**\n   * State save event, fired when the table has changed state a new state save\n   * is required. This event allows modification of the state saving object\n   * prior to actually doing the save, including addition or other state\n   * properties (for plug-ins) or modification of a DataTables core property.\n   *  @name DataTable#stateSaveParams.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} oSettings DataTables settings object\n   *  @param {object} json The state information to be saved\n   */\n\n  /**\n   * State load event, fired when the table is loading state from the stored\n   * data, but prior to the settings object being modified by the saved state\n   * - allowing modification of the saved state is required or loading of\n   * state for a plug-in.\n   *  @name DataTable#stateLoadParams.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} oSettings DataTables settings object\n   *  @param {object} json The saved state information\n   */\n\n  /**\n   * State loaded event, fired when state has been loaded from stored data and\n   * the settings object has been modified by the loaded data.\n   *  @name DataTable#stateLoaded.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} oSettings DataTables settings object\n   *  @param {object} json The saved state information\n   */\n\n  /**\n   * Processing event, fired when DataTables is doing some kind of processing\n   * (be it, order, searcg or anything else). It can be used to indicate to\n   * the end user that there is something happening, or that something has\n   * finished.\n   *  @name DataTable#processing.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} oSettings DataTables settings object\n   *  @param {boolean} bShow Flag for if DataTables is doing processing or not\n   */\n\n  /**\n   * Ajax (XHR) event, fired whenever an Ajax request is completed from a\n   * request to made to the server for new data. This event is called before\n   * DataTables processed the returned data, so it can also be used to pre-\n   * process the data returned from the server, if needed.\n   *\n   * Note that this trigger is called in `fnServerData`, if you override\n   * `fnServerData` and which to use this event, you need to trigger it in you\n   * success function.\n   *  @name DataTable#xhr.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n   *  @param {object} json JSON returned from the server\n   *\n   *  @example\n   *     // Use a custom property returned from the server in another DOM element\n   *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {\n   *       $('#status').html( json.status );\n   *     } );\n   *\n   *  @example\n   *     // Pre-process the data returned from the server\n   *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {\n   *       for ( var i=0, ien=json.aaData.length ; i<ien ; i++ ) {\n   *         json.aaData[i].sum = json.aaData[i].one + json.aaData[i].two;\n   *       }\n   *       // Note no return - manipulate the data directly in the JSON object.\n   *     } );\n   */\n\n  /**\n   * Destroy event, fired when the DataTable is destroyed by calling fnDestroy\n   * or passing the bDestroy:true parameter in the initialisation object. This\n   * can be used to remove bound events, added DOM nodes, etc.\n   *  @name DataTable#destroy.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n   */\n\n  /**\n   * Page length change event, fired when number of records to show on each\n   * page (the length) is changed.\n   *  @name DataTable#length.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n   *  @param {integer} len New length\n   */\n\n  /**\n   * Column sizing has changed.\n   *  @name DataTable#column-sizing.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n   */\n\n  /**\n   * Column visibility has changed.\n   *  @name DataTable#column-visibility.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n   *  @param {int} column Column index\n   *  @param {bool} vis `false` if column now hidden, or `true` if visible\n   */\n\n  return $.fn.dataTable;\n});","/*! DataTables Bootstrap 3 integration\n * ©2011-2015 SpryMedia Ltd - datatables.net/license\n */\n\n/**\n * DataTables integration for Bootstrap 3. This requires Bootstrap 3 and\n * DataTables 1.10 or newer.\n *\n * This file sets the defaults and adds options to DataTables to style its\n * controls using Bootstrap. See http://datatables.net/manual/styling/bootstrap\n * for further information.\n */\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['jquery', 'datatables.net'], function ($) {\n      return factory($, window, document);\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = function (root, $) {\n      if (!root) {\n        root = window;\n      }\n\n      if (!$ || !$.fn.dataTable) {\n        // Require DataTables, which attaches to jQuery, including\n        // jQuery if needed and have a $ property so we can access the\n        // jQuery object that is used\n        $ = require('datatables.net')(root, $).$;\n      }\n\n      return factory($, root, root.document);\n    };\n  } else {\n    // Browser\n    factory(jQuery, window, document);\n  }\n})(function ($, window, document, undefined) {\n  'use strict';\n\n  var DataTable = $.fn.dataTable;\n  /* Set the defaults for DataTables initialisation */\n\n  $.extend(true, DataTable.defaults, {\n    dom: \"<'row'<'col-sm-6'l><'col-sm-6'f>>\" + \"<'row'<'col-sm-12'tr>>\" + \"<'row'<'col-sm-5'i><'col-sm-7'p>>\",\n    renderer: 'bootstrap'\n  });\n  /* Default class modification */\n\n  $.extend(DataTable.ext.classes, {\n    sWrapper: \"dataTables_wrapper form-inline dt-bootstrap\",\n    sFilterInput: \"form-control input-sm\",\n    sLengthSelect: \"form-control input-sm\",\n    sProcessing: \"dataTables_processing panel panel-default\"\n  });\n  /* Bootstrap paging button renderer */\n\n  DataTable.ext.renderer.pageButton.bootstrap = function (settings, host, idx, buttons, page, pages) {\n    var api = new DataTable.Api(settings);\n    var classes = settings.oClasses;\n    var lang = settings.oLanguage.oPaginate;\n    var aria = settings.oLanguage.oAria.paginate || {};\n    var btnDisplay,\n        btnClass,\n        counter = 0;\n\n    var attach = function attach(container, buttons) {\n      var i, ien, node, button;\n\n      var clickHandler = function clickHandler(e) {\n        e.preventDefault();\n\n        if (!$(e.currentTarget).hasClass('disabled') && api.page() != e.data.action) {\n          api.page(e.data.action).draw('page');\n        }\n      };\n\n      for (i = 0, ien = buttons.length; i < ien; i++) {\n        button = buttons[i];\n\n        if ($.isArray(button)) {\n          attach(container, button);\n        } else {\n          btnDisplay = '';\n          btnClass = '';\n\n          switch (button) {\n            case 'ellipsis':\n              btnDisplay = '&#x2026;';\n              btnClass = 'disabled';\n              break;\n\n            case 'first':\n              btnDisplay = lang.sFirst;\n              btnClass = button + (page > 0 ? '' : ' disabled');\n              break;\n\n            case 'previous':\n              btnDisplay = lang.sPrevious;\n              btnClass = button + (page > 0 ? '' : ' disabled');\n              break;\n\n            case 'next':\n              btnDisplay = lang.sNext;\n              btnClass = button + (page < pages - 1 ? '' : ' disabled');\n              break;\n\n            case 'last':\n              btnDisplay = lang.sLast;\n              btnClass = button + (page < pages - 1 ? '' : ' disabled');\n              break;\n\n            default:\n              btnDisplay = button + 1;\n              btnClass = page === button ? 'active' : '';\n              break;\n          }\n\n          if (btnDisplay) {\n            node = $('<li>', {\n              'class': classes.sPageButton + ' ' + btnClass,\n              'id': idx === 0 && typeof button === 'string' ? settings.sTableId + '_' + button : null\n            }).append($('<a>', {\n              'href': '#',\n              'aria-controls': settings.sTableId,\n              'aria-label': aria[button],\n              'data-dt-idx': counter,\n              'tabindex': settings.iTabIndex\n            }).html(btnDisplay)).appendTo(container);\n\n            settings.oApi._fnBindAction(node, {\n              action: button\n            }, clickHandler);\n\n            counter++;\n          }\n        }\n      }\n    }; // IE9 throws an 'unknown error' if document.activeElement is used\n    // inside an iframe or frame. \n\n\n    var activeEl;\n\n    try {\n      // Because this approach is destroying and recreating the paging\n      // elements, focus is lost on the select button which is bad for\n      // accessibility. So we want to restore focus once the draw has\n      // completed\n      activeEl = $(host).find(document.activeElement).data('dt-idx');\n    } catch (e) {}\n\n    attach($(host).empty().html('<ul class=\"pagination\"/>').children('ul'), buttons);\n\n    if (activeEl !== undefined) {\n      $(host).find('[data-dt-idx=' + activeEl + ']').focus();\n    }\n  };\n\n  return DataTable;\n});","/*! Buttons for DataTables 1.5.6\n * ©2016-2019 SpryMedia Ltd - datatables.net/license\n */\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['jquery', 'datatables.net'], function ($) {\n      return factory($, window, document);\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = function (root, $) {\n      if (!root) {\n        root = window;\n      }\n\n      if (!$ || !$.fn.dataTable) {\n        $ = require('datatables.net')(root, $).$;\n      }\n\n      return factory($, root, root.document);\n    };\n  } else {\n    // Browser\n    factory(jQuery, window, document);\n  }\n})(function ($, window, document, undefined) {\n  'use strict';\n\n  var DataTable = $.fn.dataTable; // Used for namespacing events added to the document by each instance, so they\n  // can be removed on destroy\n\n  var _instCounter = 0; // Button namespacing counter for namespacing events on individual buttons\n\n  var _buttonCounter = 0;\n  var _dtButtons = DataTable.ext.buttons;\n  /**\n   * [Buttons description]\n   * @param {[type]}\n   * @param {[type]}\n   */\n\n  var Buttons = function Buttons(dt, config) {\n    // If not created with a `new` keyword then we return a wrapper function that\n    // will take the settings object for a DT. This allows easy use of new instances\n    // with the `layout` option - e.g. `topLeft: $.fn.dataTable.Buttons( ... )`.\n    if (!(this instanceof Buttons)) {\n      return function (settings) {\n        return new Buttons(settings, dt).container();\n      };\n    } // If there is no config set it to an empty object\n\n\n    if (typeof config === 'undefined') {\n      config = {};\n    } // Allow a boolean true for defaults\n\n\n    if (config === true) {\n      config = {};\n    } // For easy configuration of buttons an array can be given\n\n\n    if ($.isArray(config)) {\n      config = {\n        buttons: config\n      };\n    }\n\n    this.c = $.extend(true, {}, Buttons.defaults, config); // Don't want a deep copy for the buttons\n\n    if (config.buttons) {\n      this.c.buttons = config.buttons;\n    }\n\n    this.s = {\n      dt: new DataTable.Api(dt),\n      buttons: [],\n      listenKeys: '',\n      namespace: 'dtb' + _instCounter++\n    };\n    this.dom = {\n      container: $('<' + this.c.dom.container.tag + '/>').addClass(this.c.dom.container.className)\n    };\n\n    this._constructor();\n  };\n\n  $.extend(Buttons.prototype, {\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Public methods\n     */\n\n    /**\n     * Get the action of a button\n     * @param  {int|string} Button index\n     * @return {function}\n     */\n\n    /**\n    * Set the action of a button\n    * @param  {node} node Button element\n    * @param  {function} action Function to set\n    * @return {Buttons} Self for chaining\n    */\n    action: function action(node, _action) {\n      var button = this._nodeToButton(node);\n\n      if (_action === undefined) {\n        return button.conf.action;\n      }\n\n      button.conf.action = _action;\n      return this;\n    },\n\n    /**\n     * Add an active class to the button to make to look active or get current\n     * active state.\n     * @param  {node} node Button element\n     * @param  {boolean} [flag] Enable / disable flag\n     * @return {Buttons} Self for chaining or boolean for getter\n     */\n    active: function active(node, flag) {\n      var button = this._nodeToButton(node);\n\n      var klass = this.c.dom.button.active;\n      var jqNode = $(button.node);\n\n      if (flag === undefined) {\n        return jqNode.hasClass(klass);\n      }\n\n      jqNode.toggleClass(klass, flag === undefined ? true : flag);\n      return this;\n    },\n\n    /**\n     * Add a new button\n     * @param {object} config Button configuration object, base string name or function\n     * @param {int|string} [idx] Button index for where to insert the button\n     * @return {Buttons} Self for chaining\n     */\n    add: function add(config, idx) {\n      var buttons = this.s.buttons;\n\n      if (typeof idx === 'string') {\n        var split = idx.split('-');\n        var base = this.s;\n\n        for (var i = 0, ien = split.length - 1; i < ien; i++) {\n          base = base.buttons[split[i] * 1];\n        }\n\n        buttons = base.buttons;\n        idx = split[split.length - 1] * 1;\n      }\n\n      this._expandButton(buttons, config, false, idx);\n\n      this._draw();\n\n      return this;\n    },\n\n    /**\n     * Get the container node for the buttons\n     * @return {jQuery} Buttons node\n     */\n    container: function container() {\n      return this.dom.container;\n    },\n\n    /**\n     * Disable a button\n     * @param  {node} node Button node\n     * @return {Buttons} Self for chaining\n     */\n    disable: function disable(node) {\n      var button = this._nodeToButton(node);\n\n      $(button.node).addClass(this.c.dom.button.disabled);\n      return this;\n    },\n\n    /**\n     * Destroy the instance, cleaning up event handlers and removing DOM\n     * elements\n     * @return {Buttons} Self for chaining\n     */\n    destroy: function destroy() {\n      // Key event listener\n      $('body').off('keyup.' + this.s.namespace); // Individual button destroy (so they can remove their own events if\n      // needed). Take a copy as the array is modified by `remove`\n\n      var buttons = this.s.buttons.slice();\n      var i, ien;\n\n      for (i = 0, ien = buttons.length; i < ien; i++) {\n        this.remove(buttons[i].node);\n      } // Container\n\n\n      this.dom.container.remove(); // Remove from the settings object collection\n\n      var buttonInsts = this.s.dt.settings()[0];\n\n      for (i = 0, ien = buttonInsts.length; i < ien; i++) {\n        if (buttonInsts.inst === this) {\n          buttonInsts.splice(i, 1);\n          break;\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * Enable / disable a button\n     * @param  {node} node Button node\n     * @param  {boolean} [flag=true] Enable / disable flag\n     * @return {Buttons} Self for chaining\n     */\n    enable: function enable(node, flag) {\n      if (flag === false) {\n        return this.disable(node);\n      }\n\n      var button = this._nodeToButton(node);\n\n      $(button.node).removeClass(this.c.dom.button.disabled);\n      return this;\n    },\n\n    /**\n     * Get the instance name for the button set selector\n     * @return {string} Instance name\n     */\n    name: function name() {\n      return this.c.name;\n    },\n\n    /**\n     * Get a button's node of the buttons container if no button is given\n     * @param  {node} [node] Button node\n     * @return {jQuery} Button element, or container\n     */\n    node: function node(_node) {\n      if (!_node) {\n        return this.dom.container;\n      }\n\n      var button = this._nodeToButton(_node);\n\n      return $(button.node);\n    },\n\n    /**\n     * Set / get a processing class on the selected button\n     * @param  {boolean} flag true to add, false to remove, undefined to get\n     * @return {boolean|Buttons} Getter value or this if a setter.\n     */\n    processing: function processing(node, flag) {\n      var button = this._nodeToButton(node);\n\n      if (flag === undefined) {\n        return $(button.node).hasClass('processing');\n      }\n\n      $(button.node).toggleClass('processing', flag);\n      return this;\n    },\n\n    /**\n     * Remove a button.\n     * @param  {node} node Button node\n     * @return {Buttons} Self for chaining\n     */\n    remove: function remove(node) {\n      var button = this._nodeToButton(node);\n\n      var host = this._nodeToHost(node);\n\n      var dt = this.s.dt; // Remove any child buttons first\n\n      if (button.buttons.length) {\n        for (var i = button.buttons.length - 1; i >= 0; i--) {\n          this.remove(button.buttons[i].node);\n        }\n      } // Allow the button to remove event handlers, etc\n\n\n      if (button.conf.destroy) {\n        button.conf.destroy.call(dt.button(node), dt, $(node), button.conf);\n      }\n\n      this._removeKey(button.conf);\n\n      $(button.node).remove();\n      var idx = $.inArray(button, host);\n      host.splice(idx, 1);\n      return this;\n    },\n\n    /**\n     * Get the text for a button\n     * @param  {int|string} node Button index\n     * @return {string} Button text\n     */\n\n    /**\n    * Set the text for a button\n    * @param  {int|string|function} node Button index\n    * @param  {string} label Text\n    * @return {Buttons} Self for chaining\n    */\n    text: function text(node, label) {\n      var button = this._nodeToButton(node);\n\n      var buttonLiner = this.c.dom.collection.buttonLiner;\n      var linerTag = button.inCollection && buttonLiner && buttonLiner.tag ? buttonLiner.tag : this.c.dom.buttonLiner.tag;\n      var dt = this.s.dt;\n      var jqNode = $(button.node);\n\n      var text = function text(opt) {\n        return typeof opt === 'function' ? opt(dt, jqNode, button.conf) : opt;\n      };\n\n      if (label === undefined) {\n        return text(button.conf.text);\n      }\n\n      button.conf.text = label;\n\n      if (linerTag) {\n        jqNode.children(linerTag).html(text(label));\n      } else {\n        jqNode.html(text(label));\n      }\n\n      return this;\n    },\n\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Constructor\n     */\n\n    /**\n     * Buttons constructor\n     * @private\n     */\n    _constructor: function _constructor() {\n      var that = this;\n      var dt = this.s.dt;\n      var dtSettings = dt.settings()[0];\n      var buttons = this.c.buttons;\n\n      if (!dtSettings._buttons) {\n        dtSettings._buttons = [];\n      }\n\n      dtSettings._buttons.push({\n        inst: this,\n        name: this.c.name\n      });\n\n      for (var i = 0, ien = buttons.length; i < ien; i++) {\n        this.add(buttons[i]);\n      }\n\n      dt.on('destroy', function (e, settings) {\n        if (settings === dtSettings) {\n          that.destroy();\n        }\n      }); // Global key event binding to listen for button keys\n\n      $('body').on('keyup.' + this.s.namespace, function (e) {\n        if (!document.activeElement || document.activeElement === document.body) {\n          // SUse a string of characters for fast lookup of if we need to\n          // handle this\n          var character = String.fromCharCode(e.keyCode).toLowerCase();\n\n          if (that.s.listenKeys.toLowerCase().indexOf(character) !== -1) {\n            that._keypress(character, e);\n          }\n        }\n      });\n    },\n\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Private methods\n     */\n\n    /**\n     * Add a new button to the key press listener\n     * @param {object} conf Resolved button configuration object\n     * @private\n     */\n    _addKey: function _addKey(conf) {\n      if (conf.key) {\n        this.s.listenKeys += $.isPlainObject(conf.key) ? conf.key.key : conf.key;\n      }\n    },\n\n    /**\n     * Insert the buttons into the container. Call without parameters!\n     * @param  {node} [container] Recursive only - Insert point\n     * @param  {array} [buttons] Recursive only - Buttons array\n     * @private\n     */\n    _draw: function _draw(container, buttons) {\n      if (!container) {\n        container = this.dom.container;\n        buttons = this.s.buttons;\n      }\n\n      container.children().detach();\n\n      for (var i = 0, ien = buttons.length; i < ien; i++) {\n        container.append(buttons[i].inserter);\n        container.append(' ');\n\n        if (buttons[i].buttons && buttons[i].buttons.length) {\n          this._draw(buttons[i].collection, buttons[i].buttons);\n        }\n      }\n    },\n\n    /**\n     * Create buttons from an array of buttons\n     * @param  {array} attachTo Buttons array to attach to\n     * @param  {object} button Button definition\n     * @param  {boolean} inCollection true if the button is in a collection\n     * @private\n     */\n    _expandButton: function _expandButton(attachTo, button, inCollection, attachPoint) {\n      var dt = this.s.dt;\n      var buttonCounter = 0;\n      var buttons = !$.isArray(button) ? [button] : button;\n\n      for (var i = 0, ien = buttons.length; i < ien; i++) {\n        var conf = this._resolveExtends(buttons[i]);\n\n        if (!conf) {\n          continue;\n        } // If the configuration is an array, then expand the buttons at this\n        // point\n\n\n        if ($.isArray(conf)) {\n          this._expandButton(attachTo, conf, inCollection, attachPoint);\n\n          continue;\n        }\n\n        var built = this._buildButton(conf, inCollection);\n\n        if (!built) {\n          continue;\n        }\n\n        if (attachPoint !== undefined) {\n          attachTo.splice(attachPoint, 0, built);\n          attachPoint++;\n        } else {\n          attachTo.push(built);\n        }\n\n        if (built.conf.buttons) {\n          var collectionDom = this.c.dom.collection;\n          built.collection = $('<' + collectionDom.tag + '/>').addClass(collectionDom.className).attr('role', 'menu');\n          built.conf._collection = built.collection;\n\n          this._expandButton(built.buttons, built.conf.buttons, true, attachPoint);\n        } // init call is made here, rather than buildButton as it needs to\n        // be selectable, and for that it needs to be in the buttons array\n\n\n        if (conf.init) {\n          conf.init.call(dt.button(built.node), dt, $(built.node), conf);\n        }\n\n        buttonCounter++;\n      }\n    },\n\n    /**\n     * Create an individual button\n     * @param  {object} config            Resolved button configuration\n     * @param  {boolean} inCollection `true` if a collection button\n     * @return {jQuery} Created button node (jQuery)\n     * @private\n     */\n    _buildButton: function _buildButton(config, inCollection) {\n      var buttonDom = this.c.dom.button;\n      var linerDom = this.c.dom.buttonLiner;\n      var collectionDom = this.c.dom.collection;\n      var dt = this.s.dt;\n\n      var text = function text(opt) {\n        return typeof opt === 'function' ? opt(dt, button, config) : opt;\n      };\n\n      if (inCollection && collectionDom.button) {\n        buttonDom = collectionDom.button;\n      }\n\n      if (inCollection && collectionDom.buttonLiner) {\n        linerDom = collectionDom.buttonLiner;\n      } // Make sure that the button is available based on whatever requirements\n      // it has. For example, Flash buttons require Flash\n\n\n      if (config.available && !config.available(dt, config)) {\n        return false;\n      }\n\n      var action = function action(e, dt, button, config) {\n        config.action.call(dt.button(button), e, dt, button, config);\n        $(dt.table().node()).triggerHandler('buttons-action.dt', [dt.button(button), dt, button, config]);\n      };\n\n      var tag = config.tag || buttonDom.tag;\n      var clickBlurs = config.clickBlurs === undefined ? true : config.clickBlurs;\n      var button = $('<' + tag + '/>').addClass(buttonDom.className).attr('tabindex', this.s.dt.settings()[0].iTabIndex).attr('aria-controls', this.s.dt.table().node().id).on('click.dtb', function (e) {\n        e.preventDefault();\n\n        if (!button.hasClass(buttonDom.disabled) && config.action) {\n          action(e, dt, button, config);\n        }\n\n        if (clickBlurs) {\n          button.blur();\n        }\n      }).on('keyup.dtb', function (e) {\n        if (e.keyCode === 13) {\n          if (!button.hasClass(buttonDom.disabled) && config.action) {\n            action(e, dt, button, config);\n          }\n        }\n      }); // Make `a` tags act like a link\n\n      if (tag.toLowerCase() === 'a') {\n        button.attr('href', '#');\n      } // Button tags should have `type=button` so they don't have any default behaviour\n\n\n      if (tag.toLowerCase() === 'button') {\n        button.attr('type', 'button');\n      }\n\n      if (linerDom.tag) {\n        var liner = $('<' + linerDom.tag + '/>').html(text(config.text)).addClass(linerDom.className);\n\n        if (linerDom.tag.toLowerCase() === 'a') {\n          liner.attr('href', '#');\n        }\n\n        button.append(liner);\n      } else {\n        button.html(text(config.text));\n      }\n\n      if (config.enabled === false) {\n        button.addClass(buttonDom.disabled);\n      }\n\n      if (config.className) {\n        button.addClass(config.className);\n      }\n\n      if (config.titleAttr) {\n        button.attr('title', text(config.titleAttr));\n      }\n\n      if (config.attr) {\n        button.attr(config.attr);\n      }\n\n      if (!config.namespace) {\n        config.namespace = '.dt-button-' + _buttonCounter++;\n      }\n\n      var buttonContainer = this.c.dom.buttonContainer;\n      var inserter;\n\n      if (buttonContainer && buttonContainer.tag) {\n        inserter = $('<' + buttonContainer.tag + '/>').addClass(buttonContainer.className).append(button);\n      } else {\n        inserter = button;\n      }\n\n      this._addKey(config); // Style integration callback for DOM manipulation\n      // Note that this is _not_ documented. It is currently\n      // for style integration only\n\n\n      if (this.c.buttonCreated) {\n        inserter = this.c.buttonCreated(config, inserter);\n      }\n\n      return {\n        conf: config,\n        node: button.get(0),\n        inserter: inserter,\n        buttons: [],\n        inCollection: inCollection,\n        collection: null\n      };\n    },\n\n    /**\n     * Get the button object from a node (recursive)\n     * @param  {node} node Button node\n     * @param  {array} [buttons] Button array, uses base if not defined\n     * @return {object} Button object\n     * @private\n     */\n    _nodeToButton: function _nodeToButton(node, buttons) {\n      if (!buttons) {\n        buttons = this.s.buttons;\n      }\n\n      for (var i = 0, ien = buttons.length; i < ien; i++) {\n        if (buttons[i].node === node) {\n          return buttons[i];\n        }\n\n        if (buttons[i].buttons.length) {\n          var ret = this._nodeToButton(node, buttons[i].buttons);\n\n          if (ret) {\n            return ret;\n          }\n        }\n      }\n    },\n\n    /**\n     * Get container array for a button from a button node (recursive)\n     * @param  {node} node Button node\n     * @param  {array} [buttons] Button array, uses base if not defined\n     * @return {array} Button's host array\n     * @private\n     */\n    _nodeToHost: function _nodeToHost(node, buttons) {\n      if (!buttons) {\n        buttons = this.s.buttons;\n      }\n\n      for (var i = 0, ien = buttons.length; i < ien; i++) {\n        if (buttons[i].node === node) {\n          return buttons;\n        }\n\n        if (buttons[i].buttons.length) {\n          var ret = this._nodeToHost(node, buttons[i].buttons);\n\n          if (ret) {\n            return ret;\n          }\n        }\n      }\n    },\n\n    /**\n     * Handle a key press - determine if any button's key configured matches\n     * what was typed and trigger the action if so.\n     * @param  {string} character The character pressed\n     * @param  {object} e Key event that triggered this call\n     * @private\n     */\n    _keypress: function _keypress(character, e) {\n      // Check if this button press already activated on another instance of Buttons\n      if (e._buttonsHandled) {\n        return;\n      }\n\n      var run = function run(conf, node) {\n        if (!conf.key) {\n          return;\n        }\n\n        if (conf.key === character) {\n          e._buttonsHandled = true;\n          $(node).click();\n        } else if ($.isPlainObject(conf.key)) {\n          if (conf.key.key !== character) {\n            return;\n          }\n\n          if (conf.key.shiftKey && !e.shiftKey) {\n            return;\n          }\n\n          if (conf.key.altKey && !e.altKey) {\n            return;\n          }\n\n          if (conf.key.ctrlKey && !e.ctrlKey) {\n            return;\n          }\n\n          if (conf.key.metaKey && !e.metaKey) {\n            return;\n          } // Made it this far - it is good\n\n\n          e._buttonsHandled = true;\n          $(node).click();\n        }\n      };\n\n      var recurse = function recurse(a) {\n        for (var i = 0, ien = a.length; i < ien; i++) {\n          run(a[i].conf, a[i].node);\n\n          if (a[i].buttons.length) {\n            recurse(a[i].buttons);\n          }\n        }\n      };\n\n      recurse(this.s.buttons);\n    },\n\n    /**\n     * Remove a key from the key listener for this instance (to be used when a\n     * button is removed)\n     * @param  {object} conf Button configuration\n     * @private\n     */\n    _removeKey: function _removeKey(conf) {\n      if (conf.key) {\n        var character = $.isPlainObject(conf.key) ? conf.key.key : conf.key; // Remove only one character, as multiple buttons could have the\n        // same listening key\n\n        var a = this.s.listenKeys.split('');\n        var idx = $.inArray(character, a);\n        a.splice(idx, 1);\n        this.s.listenKeys = a.join('');\n      }\n    },\n\n    /**\n     * Resolve a button configuration\n     * @param  {string|function|object} conf Button config to resolve\n     * @return {object} Button configuration\n     * @private\n     */\n    _resolveExtends: function _resolveExtends(conf) {\n      var dt = this.s.dt;\n      var i, ien;\n\n      var toConfObject = function toConfObject(base) {\n        var loop = 0; // Loop until we have resolved to a button configuration, or an\n        // array of button configurations (which will be iterated\n        // separately)\n\n        while (!$.isPlainObject(base) && !$.isArray(base)) {\n          if (base === undefined) {\n            return;\n          }\n\n          if (typeof base === 'function') {\n            base = base(dt, conf);\n\n            if (!base) {\n              return false;\n            }\n          } else if (typeof base === 'string') {\n            if (!_dtButtons[base]) {\n              throw 'Unknown button type: ' + base;\n            }\n\n            base = _dtButtons[base];\n          }\n\n          loop++;\n\n          if (loop > 30) {\n            // Protect against misconfiguration killing the browser\n            throw 'Buttons: Too many iterations';\n          }\n        }\n\n        return $.isArray(base) ? base : $.extend({}, base);\n      };\n\n      conf = toConfObject(conf);\n\n      while (conf && conf.extend) {\n        // Use `toConfObject` in case the button definition being extended\n        // is itself a string or a function\n        if (!_dtButtons[conf.extend]) {\n          throw 'Cannot extend unknown button type: ' + conf.extend;\n        }\n\n        var objArray = toConfObject(_dtButtons[conf.extend]);\n\n        if ($.isArray(objArray)) {\n          return objArray;\n        } else if (!objArray) {\n          // This is a little brutal as it might be possible to have a\n          // valid button without the extend, but if there is no extend\n          // then the host button would be acting in an undefined state\n          return false;\n        } // Stash the current class name\n\n\n        var originalClassName = objArray.className;\n        conf = $.extend({}, objArray, conf); // The extend will have overwritten the original class name if the\n        // `conf` object also assigned a class, but we want to concatenate\n        // them so they are list that is combined from all extended buttons\n\n        if (originalClassName && conf.className !== originalClassName) {\n          conf.className = originalClassName + ' ' + conf.className;\n        } // Buttons to be added to a collection  -gives the ability to define\n        // if buttons should be added to the start or end of a collection\n\n\n        var postfixButtons = conf.postfixButtons;\n\n        if (postfixButtons) {\n          if (!conf.buttons) {\n            conf.buttons = [];\n          }\n\n          for (i = 0, ien = postfixButtons.length; i < ien; i++) {\n            conf.buttons.push(postfixButtons[i]);\n          }\n\n          conf.postfixButtons = null;\n        }\n\n        var prefixButtons = conf.prefixButtons;\n\n        if (prefixButtons) {\n          if (!conf.buttons) {\n            conf.buttons = [];\n          }\n\n          for (i = 0, ien = prefixButtons.length; i < ien; i++) {\n            conf.buttons.splice(i, 0, prefixButtons[i]);\n          }\n\n          conf.prefixButtons = null;\n        } // Although we want the `conf` object to overwrite almost all of\n        // the properties of the object being extended, the `extend`\n        // property should come from the object being extended\n\n\n        conf.extend = objArray.extend;\n      }\n\n      return conf;\n    }\n  });\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * Statics\n   */\n\n  /**\n   * Show / hide a background layer behind a collection\n   * @param  {boolean} Flag to indicate if the background should be shown or\n   *   hidden \n   * @param  {string} Class to assign to the background\n   * @static\n   */\n\n  Buttons.background = function (show, className, fade, insertPoint) {\n    if (fade === undefined) {\n      fade = 400;\n    }\n\n    if (!insertPoint) {\n      insertPoint = document.body;\n    }\n\n    if (show) {\n      $('<div/>').addClass(className).css('display', 'none').insertAfter(insertPoint).stop().fadeIn(fade);\n    } else {\n      $('div.' + className).stop().fadeOut(fade, function () {\n        $(this).removeClass(className).remove();\n      });\n    }\n  };\n  /**\n   * Instance selector - select Buttons instances based on an instance selector\n   * value from the buttons assigned to a DataTable. This is only useful if\n   * multiple instances are attached to a DataTable.\n   * @param  {string|int|array} Instance selector - see `instance-selector`\n   *   documentation on the DataTables site\n   * @param  {array} Button instance array that was attached to the DataTables\n   *   settings object\n   * @return {array} Buttons instances\n   * @static\n   */\n\n\n  Buttons.instanceSelector = function (group, buttons) {\n    if (!group) {\n      return $.map(buttons, function (v) {\n        return v.inst;\n      });\n    }\n\n    var ret = [];\n    var names = $.map(buttons, function (v) {\n      return v.name;\n    }); // Flatten the group selector into an array of single options\n\n    var process = function process(input) {\n      if ($.isArray(input)) {\n        for (var i = 0, ien = input.length; i < ien; i++) {\n          process(input[i]);\n        }\n\n        return;\n      }\n\n      if (typeof input === 'string') {\n        if (input.indexOf(',') !== -1) {\n          // String selector, list of names\n          process(input.split(','));\n        } else {\n          // String selector individual name\n          var idx = $.inArray($.trim(input), names);\n\n          if (idx !== -1) {\n            ret.push(buttons[idx].inst);\n          }\n        }\n      } else if (typeof input === 'number') {\n        // Index selector\n        ret.push(buttons[input].inst);\n      }\n    };\n\n    process(group);\n    return ret;\n  };\n  /**\n   * Button selector - select one or more buttons from a selector input so some\n   * operation can be performed on them.\n   * @param  {array} Button instances array that the selector should operate on\n   * @param  {string|int|node|jQuery|array} Button selector - see\n   *   `button-selector` documentation on the DataTables site\n   * @return {array} Array of objects containing `inst` and `idx` properties of\n   *   the selected buttons so you know which instance each button belongs to.\n   * @static\n   */\n\n\n  Buttons.buttonSelector = function (insts, selector) {\n    var ret = [];\n\n    var nodeBuilder = function nodeBuilder(a, buttons, baseIdx) {\n      var button;\n      var idx;\n\n      for (var i = 0, ien = buttons.length; i < ien; i++) {\n        button = buttons[i];\n\n        if (button) {\n          idx = baseIdx !== undefined ? baseIdx + i : i + '';\n          a.push({\n            node: button.node,\n            name: button.conf.name,\n            idx: idx\n          });\n\n          if (button.buttons) {\n            nodeBuilder(a, button.buttons, idx + '-');\n          }\n        }\n      }\n    };\n\n    var run = function run(selector, inst) {\n      var i, ien;\n      var buttons = [];\n      nodeBuilder(buttons, inst.s.buttons);\n      var nodes = $.map(buttons, function (v) {\n        return v.node;\n      });\n\n      if ($.isArray(selector) || selector instanceof $) {\n        for (i = 0, ien = selector.length; i < ien; i++) {\n          run(selector[i], inst);\n        }\n\n        return;\n      }\n\n      if (selector === null || selector === undefined || selector === '*') {\n        // Select all\n        for (i = 0, ien = buttons.length; i < ien; i++) {\n          ret.push({\n            inst: inst,\n            node: buttons[i].node\n          });\n        }\n      } else if (typeof selector === 'number') {\n        // Main button index selector\n        ret.push({\n          inst: inst,\n          node: inst.s.buttons[selector].node\n        });\n      } else if (typeof selector === 'string') {\n        if (selector.indexOf(',') !== -1) {\n          // Split\n          var a = selector.split(',');\n\n          for (i = 0, ien = a.length; i < ien; i++) {\n            run($.trim(a[i]), inst);\n          }\n        } else if (selector.match(/^\\d+(\\-\\d+)*$/)) {\n          // Sub-button index selector\n          var indexes = $.map(buttons, function (v) {\n            return v.idx;\n          });\n          ret.push({\n            inst: inst,\n            node: buttons[$.inArray(selector, indexes)].node\n          });\n        } else if (selector.indexOf(':name') !== -1) {\n          // Button name selector\n          var name = selector.replace(':name', '');\n\n          for (i = 0, ien = buttons.length; i < ien; i++) {\n            if (buttons[i].name === name) {\n              ret.push({\n                inst: inst,\n                node: buttons[i].node\n              });\n            }\n          }\n        } else {\n          // jQuery selector on the nodes\n          $(nodes).filter(selector).each(function () {\n            ret.push({\n              inst: inst,\n              node: this\n            });\n          });\n        }\n      } else if (typeof selector === 'object' && selector.nodeName) {\n        // Node selector\n        var idx = $.inArray(selector, nodes);\n\n        if (idx !== -1) {\n          ret.push({\n            inst: inst,\n            node: nodes[idx]\n          });\n        }\n      }\n    };\n\n    for (var i = 0, ien = insts.length; i < ien; i++) {\n      var inst = insts[i];\n      run(selector, inst);\n    }\n\n    return ret;\n  };\n  /**\n   * Buttons defaults. For full documentation, please refer to the docs/option\n   * directory or the DataTables site.\n   * @type {Object}\n   * @static\n   */\n\n\n  Buttons.defaults = {\n    buttons: ['copy', 'excel', 'csv', 'pdf', 'print'],\n    name: 'main',\n    tabIndex: 0,\n    dom: {\n      container: {\n        tag: 'div',\n        className: 'dt-buttons'\n      },\n      collection: {\n        tag: 'div',\n        className: 'dt-button-collection'\n      },\n      button: {\n        // Flash buttons will not work with `<button>` in IE - it has to be `<a>`\n        tag: 'ActiveXObject' in window ? 'a' : 'button',\n        className: 'dt-button',\n        active: 'active',\n        disabled: 'disabled'\n      },\n      buttonLiner: {\n        tag: 'span',\n        className: ''\n      }\n    }\n  };\n  /**\n   * Version information\n   * @type {string}\n   * @static\n   */\n\n  Buttons.version = '1.5.6';\n  $.extend(_dtButtons, {\n    collection: {\n      text: function text(dt) {\n        return dt.i18n('buttons.collection', 'Collection');\n      },\n      className: 'buttons-collection',\n      init: function init(dt, button, config) {\n        button.attr('aria-expanded', false);\n      },\n      action: function action(e, dt, button, config) {\n        var close = function close() {\n          dt.buttons('[aria-haspopup=\"true\"][aria-expanded=\"true\"]').nodes().each(function () {\n            var collection = $(this).siblings('.dt-button-collection');\n\n            if (collection.length) {\n              collection.stop().fadeOut(config.fade, function () {\n                collection.detach();\n              });\n            }\n\n            $(this).attr('aria-expanded', 'false');\n          });\n          $('div.dt-button-background').off('click.dtb-collection');\n          Buttons.background(false, config.backgroundClassName, config.fade, insertPoint);\n          $('body').off('.dtb-collection');\n          dt.off('buttons-action.b-internal');\n        };\n\n        var wasExpanded = button.attr('aria-expanded') === 'true';\n        close();\n\n        if (!wasExpanded) {\n          var host = button;\n          var collectionParent = $(button).parents('div.dt-button-collection');\n          var hostPosition = host.position();\n          var tableContainer = $(dt.table().container());\n          var multiLevel = false;\n          var insertPoint = host;\n          button.attr('aria-expanded', 'true'); // Remove any old collection\n\n          if (collectionParent.length) {\n            multiLevel = $('.dt-button-collection').position();\n            insertPoint = collectionParent;\n            $('body').trigger('click.dtb-collection');\n          }\n\n          if (insertPoint.parents('body')[0] !== document.body) {\n            insertPoint = document.body.lastChild;\n          }\n\n          config._collection.find('.dt-button-collection-title').remove();\n\n          config._collection.prepend('<div class=\"dt-button-collection-title\">' + config.collectionTitle + '</div>');\n\n          config._collection.addClass(config.collectionLayout).css('display', 'none').insertAfter(insertPoint).stop().fadeIn(config.fade);\n\n          var position = config._collection.css('position');\n\n          if (multiLevel && position === 'absolute') {\n            config._collection.css({\n              top: multiLevel.top,\n              left: multiLevel.left\n            });\n          } else if (position === 'absolute') {\n            config._collection.css({\n              top: hostPosition.top + host.outerHeight(),\n              left: hostPosition.left\n            }); // calculate overflow when positioned beneath\n\n\n            var tableBottom = tableContainer.offset().top + tableContainer.height();\n\n            var listBottom = hostPosition.top + host.outerHeight() + config._collection.outerHeight();\n\n            var bottomOverflow = listBottom - tableBottom; // calculate overflow when positioned above\n\n            var listTop = hostPosition.top - config._collection.outerHeight();\n\n            var tableTop = tableContainer.offset().top;\n            var topOverflow = tableTop - listTop; // if bottom overflow is larger, move to the top because it fits better, or if dropup is requested\n\n            if (bottomOverflow > topOverflow || config.dropup) {\n              config._collection.css('top', hostPosition.top - config._collection.outerHeight() - 5);\n            } // Right alignment is enabled on a class, e.g. bootstrap:\n            // $.fn.dataTable.Buttons.defaults.dom.collection.className += \" dropdown-menu-right\"; \n\n\n            if (config._collection.hasClass(config.rightAlignClassName)) {\n              config._collection.css('left', hostPosition.left + host.outerWidth() - config._collection.outerWidth());\n            } // Right alignment in table container\n\n\n            var listRight = hostPosition.left + config._collection.outerWidth();\n\n            var tableRight = tableContainer.offset().left + tableContainer.width();\n\n            if (listRight > tableRight) {\n              config._collection.css('left', hostPosition.left - (listRight - tableRight));\n            } // Right alignment to window\n\n\n            var listOffsetRight = host.offset().left + config._collection.outerWidth();\n\n            if (listOffsetRight > $(window).width()) {\n              config._collection.css('left', hostPosition.left - (listOffsetRight - $(window).width()));\n            }\n          } else {\n            // Fix position - centre on screen\n            var top = config._collection.height() / 2;\n\n            if (top > $(window).height() / 2) {\n              top = $(window).height() / 2;\n            }\n\n            config._collection.css('marginTop', top * -1);\n          }\n\n          if (config.background) {\n            Buttons.background(true, config.backgroundClassName, config.fade, insertPoint);\n          } // Need to break the 'thread' for the collection button being\n          // activated by a click - it would also trigger this event\n\n\n          setTimeout(function () {\n            // This is bonkers, but if we don't have a click listener on the\n            // background element, iOS Safari will ignore the body click\n            // listener below. An empty function here is all that is\n            // required to make it work...\n            $('div.dt-button-background').on('click.dtb-collection', function () {});\n            $('body').on('click.dtb-collection', function (e) {\n              // andSelf is deprecated in jQ1.8, but we want 1.7 compat\n              var back = $.fn.addBack ? 'addBack' : 'andSelf';\n\n              if (!$(e.target).parents()[back]().filter(config._collection).length) {\n                close();\n              }\n            }).on('keyup.dtb-collection', function (e) {\n              if (e.keyCode === 27) {\n                close();\n              }\n            });\n\n            if (config.autoClose) {\n              dt.on('buttons-action.b-internal', function () {\n                close();\n              });\n            }\n          }, 10);\n        }\n      },\n      background: true,\n      collectionLayout: '',\n      collectionTitle: '',\n      backgroundClassName: 'dt-button-background',\n      rightAlignClassName: 'dt-button-right',\n      autoClose: false,\n      fade: 400,\n      attr: {\n        'aria-haspopup': true\n      }\n    },\n    copy: function copy(dt, conf) {\n      if (_dtButtons.copyHtml5) {\n        return 'copyHtml5';\n      }\n\n      if (_dtButtons.copyFlash && _dtButtons.copyFlash.available(dt, conf)) {\n        return 'copyFlash';\n      }\n    },\n    csv: function csv(dt, conf) {\n      // Common option that will use the HTML5 or Flash export buttons\n      if (_dtButtons.csvHtml5 && _dtButtons.csvHtml5.available(dt, conf)) {\n        return 'csvHtml5';\n      }\n\n      if (_dtButtons.csvFlash && _dtButtons.csvFlash.available(dt, conf)) {\n        return 'csvFlash';\n      }\n    },\n    excel: function excel(dt, conf) {\n      // Common option that will use the HTML5 or Flash export buttons\n      if (_dtButtons.excelHtml5 && _dtButtons.excelHtml5.available(dt, conf)) {\n        return 'excelHtml5';\n      }\n\n      if (_dtButtons.excelFlash && _dtButtons.excelFlash.available(dt, conf)) {\n        return 'excelFlash';\n      }\n    },\n    pdf: function pdf(dt, conf) {\n      // Common option that will use the HTML5 or Flash export buttons\n      if (_dtButtons.pdfHtml5 && _dtButtons.pdfHtml5.available(dt, conf)) {\n        return 'pdfHtml5';\n      }\n\n      if (_dtButtons.pdfFlash && _dtButtons.pdfFlash.available(dt, conf)) {\n        return 'pdfFlash';\n      }\n    },\n    pageLength: function pageLength(dt) {\n      var lengthMenu = dt.settings()[0].aLengthMenu;\n      var vals = $.isArray(lengthMenu[0]) ? lengthMenu[0] : lengthMenu;\n      var lang = $.isArray(lengthMenu[0]) ? lengthMenu[1] : lengthMenu;\n\n      var text = function text(dt) {\n        return dt.i18n('buttons.pageLength', {\n          \"-1\": 'Show all rows',\n          _: 'Show %d rows'\n        }, dt.page.len());\n      };\n\n      return {\n        extend: 'collection',\n        text: text,\n        className: 'buttons-page-length',\n        autoClose: true,\n        buttons: $.map(vals, function (val, i) {\n          return {\n            text: lang[i],\n            className: 'button-page-length',\n            action: function action(e, dt) {\n              dt.page.len(val).draw();\n            },\n            init: function init(dt, node, conf) {\n              var that = this;\n\n              var fn = function fn() {\n                that.active(dt.page.len() === val);\n              };\n\n              dt.on('length.dt' + conf.namespace, fn);\n              fn();\n            },\n            destroy: function destroy(dt, node, conf) {\n              dt.off('length.dt' + conf.namespace);\n            }\n          };\n        }),\n        init: function init(dt, node, conf) {\n          var that = this;\n          dt.on('length.dt' + conf.namespace, function () {\n            that.text(conf.text);\n          });\n        },\n        destroy: function destroy(dt, node, conf) {\n          dt.off('length.dt' + conf.namespace);\n        }\n      };\n    }\n  });\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * DataTables API\n   *\n   * For complete documentation, please refer to the docs/api directory or the\n   * DataTables site\n   */\n  // Buttons group and individual button selector\n\n  DataTable.Api.register('buttons()', function (group, selector) {\n    // Argument shifting\n    if (selector === undefined) {\n      selector = group;\n      group = undefined;\n    }\n\n    this.selector.buttonGroup = group;\n    var res = this.iterator(true, 'table', function (ctx) {\n      if (ctx._buttons) {\n        return Buttons.buttonSelector(Buttons.instanceSelector(group, ctx._buttons), selector);\n      }\n    }, true);\n    res._groupSelector = group;\n    return res;\n  }); // Individual button selector\n\n  DataTable.Api.register('button()', function (group, selector) {\n    // just run buttons() and truncate\n    var buttons = this.buttons(group, selector);\n\n    if (buttons.length > 1) {\n      buttons.splice(1, buttons.length);\n    }\n\n    return buttons;\n  }); // Active buttons\n\n  DataTable.Api.registerPlural('buttons().active()', 'button().active()', function (flag) {\n    if (flag === undefined) {\n      return this.map(function (set) {\n        return set.inst.active(set.node);\n      });\n    }\n\n    return this.each(function (set) {\n      set.inst.active(set.node, flag);\n    });\n  }); // Get / set button action\n\n  DataTable.Api.registerPlural('buttons().action()', 'button().action()', function (action) {\n    if (action === undefined) {\n      return this.map(function (set) {\n        return set.inst.action(set.node);\n      });\n    }\n\n    return this.each(function (set) {\n      set.inst.action(set.node, action);\n    });\n  }); // Enable / disable buttons\n\n  DataTable.Api.register(['buttons().enable()', 'button().enable()'], function (flag) {\n    return this.each(function (set) {\n      set.inst.enable(set.node, flag);\n    });\n  }); // Disable buttons\n\n  DataTable.Api.register(['buttons().disable()', 'button().disable()'], function () {\n    return this.each(function (set) {\n      set.inst.disable(set.node);\n    });\n  }); // Get button nodes\n\n  DataTable.Api.registerPlural('buttons().nodes()', 'button().node()', function () {\n    var jq = $(); // jQuery will automatically reduce duplicates to a single entry\n\n    $(this.each(function (set) {\n      jq = jq.add(set.inst.node(set.node));\n    }));\n    return jq;\n  }); // Get / set button processing state\n\n  DataTable.Api.registerPlural('buttons().processing()', 'button().processing()', function (flag) {\n    if (flag === undefined) {\n      return this.map(function (set) {\n        return set.inst.processing(set.node);\n      });\n    }\n\n    return this.each(function (set) {\n      set.inst.processing(set.node, flag);\n    });\n  }); // Get / set button text (i.e. the button labels)\n\n  DataTable.Api.registerPlural('buttons().text()', 'button().text()', function (label) {\n    if (label === undefined) {\n      return this.map(function (set) {\n        return set.inst.text(set.node);\n      });\n    }\n\n    return this.each(function (set) {\n      set.inst.text(set.node, label);\n    });\n  }); // Trigger a button's action\n\n  DataTable.Api.registerPlural('buttons().trigger()', 'button().trigger()', function () {\n    return this.each(function (set) {\n      set.inst.node(set.node).trigger('click');\n    });\n  }); // Get the container elements\n\n  DataTable.Api.registerPlural('buttons().containers()', 'buttons().container()', function () {\n    var jq = $();\n    var groupSelector = this._groupSelector; // We need to use the group selector directly, since if there are no buttons\n    // the result set will be empty\n\n    this.iterator(true, 'table', function (ctx) {\n      if (ctx._buttons) {\n        var insts = Buttons.instanceSelector(groupSelector, ctx._buttons);\n\n        for (var i = 0, ien = insts.length; i < ien; i++) {\n          jq = jq.add(insts[i].container());\n        }\n      }\n    });\n    return jq;\n  }); // Add a new button\n\n  DataTable.Api.register('button().add()', function (idx, conf) {\n    var ctx = this.context; // Don't use `this` as it could be empty - select the instances directly\n\n    if (ctx.length) {\n      var inst = Buttons.instanceSelector(this._groupSelector, ctx[0]._buttons);\n\n      if (inst.length) {\n        inst[0].add(conf, idx);\n      }\n    }\n\n    return this.button(this._groupSelector, idx);\n  }); // Destroy the button sets selected\n\n  DataTable.Api.register('buttons().destroy()', function () {\n    this.pluck('inst').unique().each(function (inst) {\n      inst.destroy();\n    });\n    return this;\n  }); // Remove a button\n\n  DataTable.Api.registerPlural('buttons().remove()', 'buttons().remove()', function () {\n    this.each(function (set) {\n      set.inst.remove(set.node);\n    });\n    return this;\n  }); // Information box that can be used by buttons\n\n  var _infoTimer;\n\n  DataTable.Api.register('buttons.info()', function (title, message, time) {\n    var that = this;\n\n    if (title === false) {\n      $('#datatables_buttons_info').fadeOut(function () {\n        $(this).remove();\n      });\n      clearTimeout(_infoTimer);\n      _infoTimer = null;\n      return this;\n    }\n\n    if (_infoTimer) {\n      clearTimeout(_infoTimer);\n    }\n\n    if ($('#datatables_buttons_info').length) {\n      $('#datatables_buttons_info').remove();\n    }\n\n    title = title ? '<h2>' + title + '</h2>' : '';\n    $('<div id=\"datatables_buttons_info\" class=\"dt-button-info\"/>').html(title).append($('<div/>')[typeof message === 'string' ? 'html' : 'append'](message)).css('display', 'none').appendTo('body').fadeIn();\n\n    if (time !== undefined && time !== 0) {\n      _infoTimer = setTimeout(function () {\n        that.buttons.info(false);\n      }, time);\n    }\n\n    return this;\n  }); // Get data from the table for export - this is common to a number of plug-in\n  // buttons so it is included in the Buttons core library\n\n  DataTable.Api.register('buttons.exportData()', function (options) {\n    if (this.context.length) {\n      return _exportData(new DataTable.Api(this.context[0]), options);\n    }\n  }); // Get information about the export that is common to many of the export data\n  // types (DRY)\n\n  DataTable.Api.register('buttons.exportInfo()', function (conf) {\n    if (!conf) {\n      conf = {};\n    }\n\n    return {\n      filename: _filename(conf),\n      title: _title(conf),\n      messageTop: _message(this, conf.message || conf.messageTop, 'top'),\n      messageBottom: _message(this, conf.messageBottom, 'bottom')\n    };\n  });\n  /**\n   * Get the file name for an exported file.\n   *\n   * @param {object}\tconfig Button configuration\n   * @param {boolean} incExtension Include the file name extension\n   */\n\n  var _filename = function _filename(config) {\n    // Backwards compatibility\n    var filename = config.filename === '*' && config.title !== '*' && config.title !== undefined && config.title !== null && config.title !== '' ? config.title : config.filename;\n\n    if (typeof filename === 'function') {\n      filename = filename();\n    }\n\n    if (filename === undefined || filename === null) {\n      return null;\n    }\n\n    if (filename.indexOf('*') !== -1) {\n      filename = $.trim(filename.replace('*', $('head > title').text()));\n    } // Strip characters which the OS will object to\n\n\n    filename = filename.replace(/[^a-zA-Z0-9_\\u00A1-\\uFFFF\\.,\\-_ !\\(\\)]/g, \"\");\n\n    var extension = _stringOrFunction(config.extension);\n\n    if (!extension) {\n      extension = '';\n    }\n\n    return filename + extension;\n  };\n  /**\n   * Simply utility method to allow parameters to be given as a function\n   *\n   * @param {undefined|string|function} option Option\n   * @return {null|string} Resolved value\n   */\n\n\n  var _stringOrFunction = function _stringOrFunction(option) {\n    if (option === null || option === undefined) {\n      return null;\n    } else if (typeof option === 'function') {\n      return option();\n    }\n\n    return option;\n  };\n  /**\n   * Get the title for an exported file.\n   *\n   * @param {object} config\tButton configuration\n   */\n\n\n  var _title = function _title(config) {\n    var title = _stringOrFunction(config.title);\n\n    return title === null ? null : title.indexOf('*') !== -1 ? title.replace('*', $('head > title').text() || 'Exported data') : title;\n  };\n\n  var _message = function _message(dt, option, position) {\n    var message = _stringOrFunction(option);\n\n    if (message === null) {\n      return null;\n    }\n\n    var caption = $('caption', dt.table().container()).eq(0);\n\n    if (message === '*') {\n      var side = caption.css('caption-side');\n\n      if (side !== position) {\n        return null;\n      }\n\n      return caption.length ? caption.text() : '';\n    }\n\n    return message;\n  };\n\n  var _exportTextarea = $('<textarea/>')[0];\n\n  var _exportData = function _exportData(dt, inOpts) {\n    var config = $.extend(true, {}, {\n      rows: null,\n      columns: '',\n      modifier: {\n        search: 'applied',\n        order: 'applied'\n      },\n      orthogonal: 'display',\n      stripHtml: true,\n      stripNewlines: true,\n      decodeEntities: true,\n      trim: true,\n      format: {\n        header: function header(d) {\n          return strip(d);\n        },\n        footer: function footer(d) {\n          return strip(d);\n        },\n        body: function body(d) {\n          return strip(d);\n        }\n      },\n      customizeData: null\n    }, inOpts);\n\n    var strip = function strip(str) {\n      if (typeof str !== 'string') {\n        return str;\n      } // Always remove script tags\n\n\n      str = str.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, ''); // Always remove comments\n\n      str = str.replace(/<!\\-\\-.*?\\-\\->/g, '');\n\n      if (config.stripHtml) {\n        str = str.replace(/<[^>]*>/g, '');\n      }\n\n      if (config.trim) {\n        str = str.replace(/^\\s+|\\s+$/g, '');\n      }\n\n      if (config.stripNewlines) {\n        str = str.replace(/\\n/g, ' ');\n      }\n\n      if (config.decodeEntities) {\n        _exportTextarea.innerHTML = str;\n        str = _exportTextarea.value;\n      }\n\n      return str;\n    };\n\n    var header = dt.columns(config.columns).indexes().map(function (idx) {\n      var el = dt.column(idx).header();\n      return config.format.header(el.innerHTML, idx, el);\n    }).toArray();\n    var footer = dt.table().footer() ? dt.columns(config.columns).indexes().map(function (idx) {\n      var el = dt.column(idx).footer();\n      return config.format.footer(el ? el.innerHTML : '', idx, el);\n    }).toArray() : null; // If Select is available on this table, and any rows are selected, limit the export\n    // to the selected rows. If no rows are selected, all rows will be exported. Specify\n    // a `selected` modifier to control directly.\n\n    var modifier = $.extend({}, config.modifier);\n\n    if (dt.select && typeof dt.select.info === 'function' && modifier.selected === undefined) {\n      if (dt.rows(config.rows, $.extend({\n        selected: true\n      }, modifier)).any()) {\n        $.extend(modifier, {\n          selected: true\n        });\n      }\n    }\n\n    var rowIndexes = dt.rows(config.rows, modifier).indexes().toArray();\n    var selectedCells = dt.cells(rowIndexes, config.columns);\n    var cells = selectedCells.render(config.orthogonal).toArray();\n    var cellNodes = selectedCells.nodes().toArray();\n    var columns = header.length;\n    var rows = columns > 0 ? cells.length / columns : 0;\n    var body = [];\n    var cellCounter = 0;\n\n    for (var i = 0, ien = rows; i < ien; i++) {\n      var row = [columns];\n\n      for (var j = 0; j < columns; j++) {\n        row[j] = config.format.body(cells[cellCounter], i, j, cellNodes[cellCounter]);\n        cellCounter++;\n      }\n\n      body[i] = row;\n    }\n\n    var data = {\n      header: header,\n      footer: footer,\n      body: body\n    };\n\n    if (config.customizeData) {\n      config.customizeData(data);\n    }\n\n    return data;\n  };\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * DataTables interface\n   */\n  // Attach to DataTables objects for global access\n\n\n  $.fn.dataTable.Buttons = Buttons;\n  $.fn.DataTable.Buttons = Buttons; // DataTables creation - check if the buttons have been defined for this table,\n  // they will have been if the `B` option was used in `dom`, otherwise we should\n  // create the buttons instance here so they can be inserted into the document\n  // using the API. Listen for `init` for compatibility with pre 1.10.10, but to\n  // be removed in future.\n\n  $(document).on('init.dt plugin-init.dt', function (e, settings) {\n    if (e.namespace !== 'dt') {\n      return;\n    }\n\n    var opts = settings.oInit.buttons || DataTable.defaults.buttons;\n\n    if (opts && !settings._buttons) {\n      new Buttons(settings, opts).container();\n    }\n  });\n\n  function _init(settings) {\n    var api = new DataTable.Api(settings);\n    var opts = api.init().buttons || DataTable.defaults.buttons;\n    return new Buttons(api, opts).container();\n  } // DataTables `dom` feature option\n\n\n  DataTable.ext.feature.push({\n    fnInit: _init,\n    cFeature: \"B\"\n  }); // DataTables 2 layout feature\n\n  if (DataTable.ext.features) {\n    DataTable.ext.features.register('buttons', _init);\n  }\n\n  return Buttons;\n});","/*! Bootstrap integration for DataTables' Buttons\n * ©2016 SpryMedia Ltd - datatables.net/license\n */\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['jquery', 'datatables.net-bs', 'datatables.net-buttons'], function ($) {\n      return factory($, window, document);\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = function (root, $) {\n      if (!root) {\n        root = window;\n      }\n\n      if (!$ || !$.fn.dataTable) {\n        $ = require('datatables.net-bs')(root, $).$;\n      }\n\n      if (!$.fn.dataTable.Buttons) {\n        require('datatables.net-buttons')(root, $);\n      }\n\n      return factory($, root, root.document);\n    };\n  } else {\n    // Browser\n    factory(jQuery, window, document);\n  }\n})(function ($, window, document, undefined) {\n  'use strict';\n\n  var DataTable = $.fn.dataTable;\n  $.extend(true, DataTable.Buttons.defaults, {\n    dom: {\n      container: {\n        className: 'dt-buttons btn-group'\n      },\n      button: {\n        className: 'btn btn-default'\n      },\n      collection: {\n        tag: 'ul',\n        className: 'dt-button-collection dropdown-menu',\n        button: {\n          tag: 'li',\n          className: 'dt-button',\n          active: 'active',\n          disabled: 'disabled'\n        },\n        buttonLiner: {\n          tag: 'a',\n          className: ''\n        }\n      }\n    }\n  });\n\n  DataTable.ext.buttons.collection.text = function (dt) {\n    return dt.i18n('buttons.collection', 'Collection <span class=\"caret\"/>');\n  };\n\n  return DataTable.Buttons;\n});","/*!\n * Column visibility buttons for Buttons and DataTables.\n * 2016 SpryMedia Ltd - datatables.net/license\n */\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['jquery', 'datatables.net', 'datatables.net-buttons'], function ($) {\n      return factory($, window, document);\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = function (root, $) {\n      if (!root) {\n        root = window;\n      }\n\n      if (!$ || !$.fn.dataTable) {\n        $ = require('datatables.net')(root, $).$;\n      }\n\n      if (!$.fn.dataTable.Buttons) {\n        require('datatables.net-buttons')(root, $);\n      }\n\n      return factory($, root, root.document);\n    };\n  } else {\n    // Browser\n    factory(jQuery, window, document);\n  }\n})(function ($, window, document, undefined) {\n  'use strict';\n\n  var DataTable = $.fn.dataTable;\n  $.extend(DataTable.ext.buttons, {\n    // A collection of column visibility buttons\n    colvis: function colvis(dt, conf) {\n      return {\n        extend: 'collection',\n        text: function text(dt) {\n          return dt.i18n('buttons.colvis', 'Column visibility');\n        },\n        className: 'buttons-colvis',\n        buttons: [{\n          extend: 'columnsToggle',\n          columns: conf.columns,\n          columnText: conf.columnText\n        }]\n      };\n    },\n    // Selected columns with individual buttons - toggle column visibility\n    columnsToggle: function columnsToggle(dt, conf) {\n      var columns = dt.columns(conf.columns).indexes().map(function (idx) {\n        return {\n          extend: 'columnToggle',\n          columns: idx,\n          columnText: conf.columnText\n        };\n      }).toArray();\n      return columns;\n    },\n    // Single button to toggle column visibility\n    columnToggle: function columnToggle(dt, conf) {\n      return {\n        extend: 'columnVisibility',\n        columns: conf.columns,\n        columnText: conf.columnText\n      };\n    },\n    // Selected columns with individual buttons - set column visibility\n    columnsVisibility: function columnsVisibility(dt, conf) {\n      var columns = dt.columns(conf.columns).indexes().map(function (idx) {\n        return {\n          extend: 'columnVisibility',\n          columns: idx,\n          visibility: conf.visibility,\n          columnText: conf.columnText\n        };\n      }).toArray();\n      return columns;\n    },\n    // Single button to set column visibility\n    columnVisibility: {\n      columns: undefined,\n      // column selector\n      text: function text(dt, button, conf) {\n        return conf._columnText(dt, conf);\n      },\n      className: 'buttons-columnVisibility',\n      action: function action(e, dt, button, conf) {\n        var col = dt.columns(conf.columns);\n        var curr = col.visible();\n        col.visible(conf.visibility !== undefined ? conf.visibility : !(curr.length ? curr[0] : false));\n      },\n      init: function init(dt, button, conf) {\n        var that = this;\n        button.attr('data-cv-idx', conf.columns);\n        dt.on('column-visibility.dt' + conf.namespace, function (e, settings) {\n          if (!settings.bDestroying && settings.nTable == dt.settings()[0].nTable) {\n            that.active(dt.column(conf.columns).visible());\n          }\n        }).on('column-reorder.dt' + conf.namespace, function (e, settings, details) {\n          // Don't rename buttons based on column name if the button\n          // controls more than one column!\n          if (dt.columns(conf.columns).count() !== 1) {\n            return;\n          }\n\n          conf.columns = $.inArray(conf.columns, details.mapping);\n          button.attr('data-cv-idx', conf.columns); // Reorder buttons for new table order\n\n          button.parent().children('[data-cv-idx]').sort(function (a, b) {\n            return a.getAttribute('data-cv-idx') * 1 - b.getAttribute('data-cv-idx') * 1;\n          }).appendTo(button.parent());\n        });\n        this.active(dt.column(conf.columns).visible());\n      },\n      destroy: function destroy(dt, button, conf) {\n        dt.off('column-visibility.dt' + conf.namespace).off('column-reorder.dt' + conf.namespace);\n      },\n      _columnText: function _columnText(dt, conf) {\n        // Use DataTables' internal data structure until this is presented\n        // is a public API. The other option is to use\n        // `$( column(col).node() ).text()` but the node might not have been\n        // populated when Buttons is constructed.\n        var idx = dt.column(conf.columns).index();\n        var title = dt.settings()[0].aoColumns[idx].sTitle.replace(/\\n/g, \" \") // remove new lines\n        .replace(/<br\\s*\\/?>/gi, \" \") // replace line breaks with spaces\n        .replace(/<select(.*?)<\\/select>/g, \"\") // remove select tags, including options text\n        .replace(/<!\\-\\-.*?\\-\\->/g, \"\") // strip HTML comments\n        .replace(/<.*?>/g, \"\") // strip HTML\n        .replace(/^\\s+|\\s+$/g, \"\"); // trim\n\n        return conf.columnText ? conf.columnText(dt, idx, title) : title;\n      }\n    },\n    colvisRestore: {\n      className: 'buttons-colvisRestore',\n      text: function text(dt) {\n        return dt.i18n('buttons.colvisRestore', 'Restore visibility');\n      },\n      init: function init(dt, button, conf) {\n        conf._visOriginal = dt.columns().indexes().map(function (idx) {\n          return dt.column(idx).visible();\n        }).toArray();\n      },\n      action: function action(e, dt, button, conf) {\n        dt.columns().every(function (i) {\n          // Take into account that ColReorder might have disrupted our\n          // indexes\n          var idx = dt.colReorder && dt.colReorder.transpose ? dt.colReorder.transpose(i, 'toOriginal') : i;\n          this.visible(conf._visOriginal[idx]);\n        });\n      }\n    },\n    colvisGroup: {\n      className: 'buttons-colvisGroup',\n      action: function action(e, dt, button, conf) {\n        dt.columns(conf.show).visible(true, false);\n        dt.columns(conf.hide).visible(false, false);\n        dt.columns.adjust();\n      },\n      show: [],\n      hide: []\n    }\n  });\n  return DataTable.Buttons;\n});","/*!\n * Flash export buttons for Buttons and DataTables.\n * 2015-2017 SpryMedia Ltd - datatables.net/license\n *\n * ZeroClipbaord - MIT license\n * Copyright (c) 2012 Joseph Huckaby\n */\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['jquery', 'datatables.net', 'datatables.net-buttons'], function ($) {\n      return factory($, window, document);\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = function (root, $) {\n      if (!root) {\n        root = window;\n      }\n\n      if (!$ || !$.fn.dataTable) {\n        $ = require('datatables.net')(root, $).$;\n      }\n\n      if (!$.fn.dataTable.Buttons) {\n        require('datatables.net-buttons')(root, $);\n      }\n\n      return factory($, root, root.document);\n    };\n  } else {\n    // Browser\n    factory(jQuery, window, document);\n  }\n})(function ($, window, document, undefined) {\n  'use strict';\n\n  var DataTable = $.fn.dataTable;\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * ZeroClipboard dependency\n   */\n\n  /*\n   * ZeroClipboard 1.0.4 with modifications\n   * Author: Joseph Huckaby\n   * License: MIT\n   *\n   * Copyright (c) 2012 Joseph Huckaby\n   */\n\n  var ZeroClipboard_TableTools = {\n    version: \"1.0.4-TableTools2\",\n    clients: {},\n    // registered upload clients on page, indexed by id\n    moviePath: '',\n    // URL to movie\n    nextId: 1,\n    // ID of next movie\n    $: function $(thingy) {\n      // simple DOM lookup utility function\n      if (typeof thingy == 'string') {\n        thingy = document.getElementById(thingy);\n      }\n\n      if (!thingy.addClass) {\n        // extend element with a few useful methods\n        thingy.hide = function () {\n          this.style.display = 'none';\n        };\n\n        thingy.show = function () {\n          this.style.display = '';\n        };\n\n        thingy.addClass = function (name) {\n          this.removeClass(name);\n          this.className += ' ' + name;\n        };\n\n        thingy.removeClass = function (name) {\n          this.className = this.className.replace(new RegExp(\"\\\\s*\" + name + \"\\\\s*\"), \" \").replace(/^\\s+/, '').replace(/\\s+$/, '');\n        };\n\n        thingy.hasClass = function (name) {\n          return !!this.className.match(new RegExp(\"\\\\s*\" + name + \"\\\\s*\"));\n        };\n      }\n\n      return thingy;\n    },\n    setMoviePath: function setMoviePath(path) {\n      // set path to ZeroClipboard.swf\n      this.moviePath = path;\n    },\n    dispatch: function dispatch(id, eventName, args) {\n      // receive event from flash movie, send to client\n      var client = this.clients[id];\n\n      if (client) {\n        client.receiveEvent(eventName, args);\n      }\n    },\n    log: function log(str) {\n      console.log('Flash: ' + str);\n    },\n    register: function register(id, client) {\n      // register new client to receive events\n      this.clients[id] = client;\n    },\n    getDOMObjectPosition: function getDOMObjectPosition(obj) {\n      // get absolute coordinates for dom element\n      var info = {\n        left: 0,\n        top: 0,\n        width: obj.width ? obj.width : obj.offsetWidth,\n        height: obj.height ? obj.height : obj.offsetHeight\n      };\n\n      if (obj.style.width !== \"\") {\n        info.width = obj.style.width.replace(\"px\", \"\");\n      }\n\n      if (obj.style.height !== \"\") {\n        info.height = obj.style.height.replace(\"px\", \"\");\n      }\n\n      while (obj) {\n        info.left += obj.offsetLeft;\n        info.top += obj.offsetTop;\n        obj = obj.offsetParent;\n      }\n\n      return info;\n    },\n    Client: function Client(elem) {\n      // constructor for new simple upload client\n      this.handlers = {}; // unique ID\n\n      this.id = ZeroClipboard_TableTools.nextId++;\n      this.movieId = 'ZeroClipboard_TableToolsMovie_' + this.id; // register client with singleton to receive flash events\n\n      ZeroClipboard_TableTools.register(this.id, this); // create movie\n\n      if (elem) {\n        this.glue(elem);\n      }\n    }\n  };\n  ZeroClipboard_TableTools.Client.prototype = {\n    id: 0,\n    // unique ID for us\n    ready: false,\n    // whether movie is ready to receive events or not\n    movie: null,\n    // reference to movie object\n    clipText: '',\n    // text to copy to clipboard\n    fileName: '',\n    // default file save name\n    action: 'copy',\n    // action to perform\n    handCursorEnabled: true,\n    // whether to show hand cursor, or default pointer cursor\n    cssEffects: true,\n    // enable CSS mouse effects on dom container\n    handlers: null,\n    // user event handlers\n    sized: false,\n    sheetName: '',\n    // default sheet name for excel export\n    glue: function glue(elem, title) {\n      // glue to DOM element\n      // elem can be ID or actual DOM element object\n      this.domElement = ZeroClipboard_TableTools.$(elem); // float just above object, or zIndex 99 if dom element isn't set\n\n      var zIndex = 99;\n\n      if (this.domElement.style.zIndex) {\n        zIndex = parseInt(this.domElement.style.zIndex, 10) + 1;\n      } // find X/Y position of domElement\n\n\n      var box = ZeroClipboard_TableTools.getDOMObjectPosition(this.domElement); // create floating DIV above element\n\n      this.div = document.createElement('div');\n      var style = this.div.style;\n      style.position = 'absolute';\n      style.left = '0px';\n      style.top = '0px';\n      style.width = box.width + 'px';\n      style.height = box.height + 'px';\n      style.zIndex = zIndex;\n\n      if (typeof title != \"undefined\" && title !== \"\") {\n        this.div.title = title;\n      }\n\n      if (box.width !== 0 && box.height !== 0) {\n        this.sized = true;\n      } // style.backgroundColor = '#f00'; // debug\n\n\n      if (this.domElement) {\n        this.domElement.appendChild(this.div);\n        this.div.innerHTML = this.getHTML(box.width, box.height).replace(/&/g, '&amp;');\n      }\n    },\n    positionElement: function positionElement() {\n      var box = ZeroClipboard_TableTools.getDOMObjectPosition(this.domElement);\n      var style = this.div.style;\n      style.position = 'absolute'; //style.left = (this.domElement.offsetLeft)+'px';\n      //style.top = this.domElement.offsetTop+'px';\n\n      style.width = box.width + 'px';\n      style.height = box.height + 'px';\n\n      if (box.width !== 0 && box.height !== 0) {\n        this.sized = true;\n      } else {\n        return;\n      }\n\n      var flash = this.div.childNodes[0];\n      flash.width = box.width;\n      flash.height = box.height;\n    },\n    getHTML: function getHTML(width, height) {\n      // return HTML for movie\n      var html = '';\n      var flashvars = 'id=' + this.id + '&width=' + width + '&height=' + height;\n\n      if (navigator.userAgent.match(/MSIE/)) {\n        // IE gets an OBJECT tag\n        var protocol = location.href.match(/^https/i) ? 'https://' : 'http://';\n        html += '<object classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" codebase=\"' + protocol + 'download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=10,0,0,0\" width=\"' + width + '\" height=\"' + height + '\" id=\"' + this.movieId + '\" align=\"middle\"><param name=\"allowScriptAccess\" value=\"always\" /><param name=\"allowFullScreen\" value=\"false\" /><param name=\"movie\" value=\"' + ZeroClipboard_TableTools.moviePath + '\" /><param name=\"loop\" value=\"false\" /><param name=\"menu\" value=\"false\" /><param name=\"quality\" value=\"best\" /><param name=\"bgcolor\" value=\"#ffffff\" /><param name=\"flashvars\" value=\"' + flashvars + '\"/><param name=\"wmode\" value=\"transparent\"/></object>';\n      } else {\n        // all other browsers get an EMBED tag\n        html += '<embed id=\"' + this.movieId + '\" src=\"' + ZeroClipboard_TableTools.moviePath + '\" loop=\"false\" menu=\"false\" quality=\"best\" bgcolor=\"#ffffff\" width=\"' + width + '\" height=\"' + height + '\" name=\"' + this.movieId + '\" align=\"middle\" allowScriptAccess=\"always\" allowFullScreen=\"false\" type=\"application/x-shockwave-flash\" pluginspage=\"http://www.macromedia.com/go/getflashplayer\" flashvars=\"' + flashvars + '\" wmode=\"transparent\" />';\n      }\n\n      return html;\n    },\n    hide: function hide() {\n      // temporarily hide floater offscreen\n      if (this.div) {\n        this.div.style.left = '-2000px';\n      }\n    },\n    show: function show() {\n      // show ourselves after a call to hide()\n      this.reposition();\n    },\n    destroy: function destroy() {\n      // destroy control and floater\n      var that = this;\n\n      if (this.domElement && this.div) {\n        $(this.div).remove();\n        this.domElement = null;\n        this.div = null;\n        $.each(ZeroClipboard_TableTools.clients, function (id, client) {\n          if (client === that) {\n            delete ZeroClipboard_TableTools.clients[id];\n          }\n        });\n      }\n    },\n    reposition: function reposition(elem) {\n      // reposition our floating div, optionally to new container\n      // warning: container CANNOT change size, only position\n      if (elem) {\n        this.domElement = ZeroClipboard_TableTools.$(elem);\n\n        if (!this.domElement) {\n          this.hide();\n        }\n      }\n\n      if (this.domElement && this.div) {\n        var box = ZeroClipboard_TableTools.getDOMObjectPosition(this.domElement);\n        var style = this.div.style;\n        style.left = '' + box.left + 'px';\n        style.top = '' + box.top + 'px';\n      }\n    },\n    clearText: function clearText() {\n      // clear the text to be copy / saved\n      this.clipText = '';\n\n      if (this.ready) {\n        this.movie.clearText();\n      }\n    },\n    appendText: function appendText(newText) {\n      // append text to that which is to be copied / saved\n      this.clipText += newText;\n\n      if (this.ready) {\n        this.movie.appendText(newText);\n      }\n    },\n    setText: function setText(newText) {\n      // set text to be copied to be copied / saved\n      this.clipText = newText;\n\n      if (this.ready) {\n        this.movie.setText(newText);\n      }\n    },\n    setFileName: function setFileName(newText) {\n      // set the file name\n      this.fileName = newText;\n\n      if (this.ready) {\n        this.movie.setFileName(newText);\n      }\n    },\n    setSheetData: function setSheetData(data) {\n      // set the xlsx sheet data\n      if (this.ready) {\n        this.movie.setSheetData(JSON.stringify(data));\n      }\n    },\n    setAction: function setAction(newText) {\n      // set action (save or copy)\n      this.action = newText;\n\n      if (this.ready) {\n        this.movie.setAction(newText);\n      }\n    },\n    addEventListener: function addEventListener(eventName, func) {\n      // add user event listener for event\n      // event types: load, queueStart, fileStart, fileComplete, queueComplete, progress, error, cancel\n      eventName = eventName.toString().toLowerCase().replace(/^on/, '');\n\n      if (!this.handlers[eventName]) {\n        this.handlers[eventName] = [];\n      }\n\n      this.handlers[eventName].push(func);\n    },\n    setHandCursor: function setHandCursor(enabled) {\n      // enable hand cursor (true), or default arrow cursor (false)\n      this.handCursorEnabled = enabled;\n\n      if (this.ready) {\n        this.movie.setHandCursor(enabled);\n      }\n    },\n    setCSSEffects: function setCSSEffects(enabled) {\n      // enable or disable CSS effects on DOM container\n      this.cssEffects = !!enabled;\n    },\n    receiveEvent: function receiveEvent(eventName, args) {\n      var self; // receive event from flash\n\n      eventName = eventName.toString().toLowerCase().replace(/^on/, ''); // special behavior for certain events\n\n      switch (eventName) {\n        case 'load':\n          // movie claims it is ready, but in IE this isn't always the case...\n          // bug fix: Cannot extend EMBED DOM elements in Firefox, must use traditional function\n          this.movie = document.getElementById(this.movieId);\n\n          if (!this.movie) {\n            self = this;\n            setTimeout(function () {\n              self.receiveEvent('load', null);\n            }, 1);\n            return;\n          } // firefox on pc needs a \"kick\" in order to set these in certain cases\n\n\n          if (!this.ready && navigator.userAgent.match(/Firefox/) && navigator.userAgent.match(/Windows/)) {\n            self = this;\n            setTimeout(function () {\n              self.receiveEvent('load', null);\n            }, 100);\n            this.ready = true;\n            return;\n          }\n\n          this.ready = true;\n          this.movie.clearText();\n          this.movie.appendText(this.clipText);\n          this.movie.setFileName(this.fileName);\n          this.movie.setAction(this.action);\n          this.movie.setHandCursor(this.handCursorEnabled);\n          break;\n\n        case 'mouseover':\n          if (this.domElement && this.cssEffects) {\n            //this.domElement.addClass('hover');\n            if (this.recoverActive) {\n              this.domElement.addClass('active');\n            }\n          }\n\n          break;\n\n        case 'mouseout':\n          if (this.domElement && this.cssEffects) {\n            this.recoverActive = false;\n\n            if (this.domElement.hasClass('active')) {\n              this.domElement.removeClass('active');\n              this.recoverActive = true;\n            } //this.domElement.removeClass('hover');\n\n          }\n\n          break;\n\n        case 'mousedown':\n          if (this.domElement && this.cssEffects) {\n            this.domElement.addClass('active');\n          }\n\n          break;\n\n        case 'mouseup':\n          if (this.domElement && this.cssEffects) {\n            this.domElement.removeClass('active');\n            this.recoverActive = false;\n          }\n\n          break;\n      } // switch eventName\n\n\n      if (this.handlers[eventName]) {\n        for (var idx = 0, len = this.handlers[eventName].length; idx < len; idx++) {\n          var func = this.handlers[eventName][idx];\n\n          if (typeof func == 'function') {\n            // actual function reference\n            func(this, args);\n          } else if (typeof func == 'object' && func.length == 2) {\n            // PHP style object + method, i.e. [myObject, 'myMethod']\n            func[0][func[1]](this, args);\n          } else if (typeof func == 'string') {\n            // name of function\n            window[func](this, args);\n          }\n        } // foreach event handler defined\n\n      } // user defined handler for event\n\n    }\n  };\n\n  ZeroClipboard_TableTools.hasFlash = function () {\n    try {\n      var fo = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');\n\n      if (fo) {\n        return true;\n      }\n    } catch (e) {\n      if (navigator.mimeTypes && navigator.mimeTypes['application/x-shockwave-flash'] !== undefined && navigator.mimeTypes['application/x-shockwave-flash'].enabledPlugin) {\n        return true;\n      }\n    }\n\n    return false;\n  }; // For the Flash binding to work, ZeroClipboard_TableTools must be on the global\n  // object list\n\n\n  window.ZeroClipboard_TableTools = ZeroClipboard_TableTools;\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * Local (private) functions\n   */\n\n  /**\n   * If a Buttons instance is initlaised before it is placed into the DOM, Flash\n   * won't be able to bind to it, so we need to wait until it is available, this\n   * method abstracts that out.\n   *\n   * @param {ZeroClipboard} flash ZeroClipboard instance\n   * @param {jQuery} node  Button\n   */\n\n  var _glue = function _glue(flash, node) {\n    var id = node.attr('id');\n\n    if (node.parents('html').length) {\n      flash.glue(node[0], '');\n    } else {\n      setTimeout(function () {\n        _glue(flash, node);\n      }, 500);\n    }\n  };\n  /**\n   * Get the sheet name for Excel exports.\n   *\n   * @param {object}  config       Button configuration\n   */\n\n\n  var _sheetname = function _sheetname(config) {\n    var sheetName = 'Sheet1';\n\n    if (config.sheetName) {\n      sheetName = config.sheetName.replace(/[\\[\\]\\*\\/\\\\\\?\\:]/g, '');\n    }\n\n    return sheetName;\n  };\n  /**\n   * Set the flash text. This has to be broken up into chunks as the Javascript /\n   * Flash bridge has a size limit. There is no indication in the Flash\n   * documentation what this is, and it probably depends upon the browser.\n   * Experimentation shows that the point is around 50k when data starts to get\n   * lost, so an 8K limit used here is safe.\n   *\n   * @param {ZeroClipboard} flash ZeroClipboard instance\n   * @param {string}        data  Data to send to Flash\n   */\n\n\n  var _setText = function _setText(flash, data) {\n    var parts = data.match(/[\\s\\S]{1,8192}/g) || [];\n    flash.clearText();\n\n    for (var i = 0, len = parts.length; i < len; i++) {\n      flash.appendText(parts[i]);\n    }\n  };\n  /**\n   * Get the newline character(s)\n   *\n   * @param {object}  config Button configuration\n   * @return {string}        Newline character\n   */\n\n\n  var _newLine = function _newLine(config) {\n    return config.newline ? config.newline : navigator.userAgent.match(/Windows/) ? '\\r\\n' : '\\n';\n  };\n  /**\n   * Combine the data from the `buttons.exportData` method into a string that\n   * will be used in the export file.\n   *\n   * @param  {DataTable.Api} dt     DataTables API instance\n   * @param  {object}        config Button configuration\n   * @return {object}               The data to export\n   */\n\n\n  var _exportData = function _exportData(dt, config) {\n    var newLine = _newLine(config);\n\n    var data = dt.buttons.exportData(config.exportOptions);\n    var boundary = config.fieldBoundary;\n    var separator = config.fieldSeparator;\n    var reBoundary = new RegExp(boundary, 'g');\n    var escapeChar = config.escapeChar !== undefined ? config.escapeChar : '\\\\';\n\n    var join = function join(a) {\n      var s = ''; // If there is a field boundary, then we might need to escape it in\n      // the source data\n\n      for (var i = 0, ien = a.length; i < ien; i++) {\n        if (i > 0) {\n          s += separator;\n        }\n\n        s += boundary ? boundary + ('' + a[i]).replace(reBoundary, escapeChar + boundary) + boundary : a[i];\n      }\n\n      return s;\n    };\n\n    var header = config.header ? join(data.header) + newLine : '';\n    var footer = config.footer && data.footer ? newLine + join(data.footer) : '';\n    var body = [];\n\n    for (var i = 0, ien = data.body.length; i < ien; i++) {\n      body.push(join(data.body[i]));\n    }\n\n    return {\n      str: header + body.join(newLine) + footer,\n      rows: body.length\n    };\n  }; // Basic initialisation for the buttons is common between them\n\n\n  var flashButton = {\n    available: function available() {\n      return ZeroClipboard_TableTools.hasFlash();\n    },\n    init: function init(dt, button, config) {\n      // Insert the Flash movie\n      ZeroClipboard_TableTools.moviePath = DataTable.Buttons.swfPath;\n      var flash = new ZeroClipboard_TableTools.Client();\n      flash.setHandCursor(true);\n      flash.addEventListener('mouseDown', function (client) {\n        config._fromFlash = true;\n        dt.button(button[0]).trigger();\n        config._fromFlash = false;\n      });\n\n      _glue(flash, button);\n\n      config._flash = flash;\n    },\n    destroy: function destroy(dt, button, config) {\n      config._flash.destroy();\n    },\n    fieldSeparator: ',',\n    fieldBoundary: '\"',\n    exportOptions: {},\n    title: '*',\n    messageTop: '*',\n    messageBottom: '*',\n    filename: '*',\n    extension: '.csv',\n    header: true,\n    footer: false\n  };\n  /**\n   * Convert from numeric position to letter for column names in Excel\n   * @param  {int} n Column number\n   * @return {string} Column letter(s) name\n   */\n\n  function createCellPos(n) {\n    var ordA = 'A'.charCodeAt(0);\n    var ordZ = 'Z'.charCodeAt(0);\n    var len = ordZ - ordA + 1;\n    var s = \"\";\n\n    while (n >= 0) {\n      s = String.fromCharCode(n % len + ordA) + s;\n      n = Math.floor(n / len) - 1;\n    }\n\n    return s;\n  }\n  /**\n   * Create an XML node and add any children, attributes, etc without needing to\n   * be verbose in the DOM.\n   *\n   * @param  {object} doc      XML document\n   * @param  {string} nodeName Node name\n   * @param  {object} opts     Options - can be `attr` (attributes), `children`\n   *   (child nodes) and `text` (text content)\n   * @return {node}            Created node\n   */\n\n\n  function _createNode(doc, nodeName, opts) {\n    var tempNode = doc.createElement(nodeName);\n\n    if (opts) {\n      if (opts.attr) {\n        $(tempNode).attr(opts.attr);\n      }\n\n      if (opts.children) {\n        $.each(opts.children, function (key, value) {\n          tempNode.appendChild(value);\n        });\n      }\n\n      if (opts.text !== null && opts.text !== undefined) {\n        tempNode.appendChild(doc.createTextNode(opts.text));\n      }\n    }\n\n    return tempNode;\n  }\n  /**\n   * Get the width for an Excel column based on the contents of that column\n   * @param  {object} data Data for export\n   * @param  {int}    col  Column index\n   * @return {int}         Column width\n   */\n\n\n  function _excelColWidth(data, col) {\n    var max = data.header[col].length;\n    var len, lineSplit, str;\n\n    if (data.footer && data.footer[col].length > max) {\n      max = data.footer[col].length;\n    }\n\n    for (var i = 0, ien = data.body.length; i < ien; i++) {\n      var point = data.body[i][col];\n      str = point !== null && point !== undefined ? point.toString() : ''; // If there is a newline character, workout the width of the column\n      // based on the longest line in the string\n\n      if (str.indexOf('\\n') !== -1) {\n        lineSplit = str.split('\\n');\n        lineSplit.sort(function (a, b) {\n          return b.length - a.length;\n        });\n        len = lineSplit[0].length;\n      } else {\n        len = str.length;\n      }\n\n      if (len > max) {\n        max = len;\n      } // Max width rather than having potentially massive column widths\n\n\n      if (max > 40) {\n        return 52; // 40 * 1.3\n      }\n    }\n\n    max *= 1.3; // And a min width\n\n    return max > 6 ? max : 6;\n  }\n\n  var _serialiser = \"\";\n\n  if (typeof window.XMLSerializer === 'undefined') {\n    _serialiser = new function () {\n      this.serializeToString = function (input) {\n        return input.xml;\n      };\n    }();\n  } else {\n    _serialiser = new XMLSerializer();\n  }\n\n  var _ieExcel;\n  /**\n   * Convert XML documents in an object to strings\n   * @param  {object} obj XLSX document object\n   */\n\n\n  function _xlsxToStrings(obj) {\n    if (_ieExcel === undefined) {\n      // Detect if we are dealing with IE's _awful_ serialiser by seeing if it\n      // drop attributes\n      _ieExcel = _serialiser.serializeToString($.parseXML(excelStrings['xl/worksheets/sheet1.xml'])).indexOf('xmlns:r') === -1;\n    }\n\n    $.each(obj, function (name, val) {\n      if ($.isPlainObject(val)) {\n        _xlsxToStrings(val);\n      } else {\n        if (_ieExcel) {\n          // IE's XML serialiser will drop some name space attributes from\n          // from the root node, so we need to save them. Do this by\n          // replacing the namespace nodes with a regular attribute that\n          // we convert back when serialised. Edge does not have this\n          // issue\n          var worksheet = val.childNodes[0];\n          var i, ien;\n          var attrs = [];\n\n          for (i = worksheet.attributes.length - 1; i >= 0; i--) {\n            var attrName = worksheet.attributes[i].nodeName;\n            var attrValue = worksheet.attributes[i].nodeValue;\n\n            if (attrName.indexOf(':') !== -1) {\n              attrs.push({\n                name: attrName,\n                value: attrValue\n              });\n              worksheet.removeAttribute(attrName);\n            }\n          }\n\n          for (i = 0, ien = attrs.length; i < ien; i++) {\n            var attr = val.createAttribute(attrs[i].name.replace(':', '_dt_b_namespace_token_'));\n            attr.value = attrs[i].value;\n            worksheet.setAttributeNode(attr);\n          }\n        }\n\n        var str = _serialiser.serializeToString(val); // Fix IE's XML\n\n\n        if (_ieExcel) {\n          // IE doesn't include the XML declaration\n          if (str.indexOf('<?xml') === -1) {\n            str = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>' + str;\n          } // Return namespace attributes to being as such\n\n\n          str = str.replace(/_dt_b_namespace_token_/g, ':');\n        } // Safari, IE and Edge will put empty name space attributes onto\n        // various elements making them useless. This strips them out\n\n\n        str = str.replace(/<([^<>]*?) xmlns=\"\"([^<>]*?)>/g, '<$1 $2>');\n        obj[name] = str;\n      }\n    });\n  } // Excel - Pre-defined strings to build a basic XLSX file\n\n\n  var excelStrings = {\n    \"_rels/.rels\": '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>' + '<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">' + '<Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\" Target=\"xl/workbook.xml\"/>' + '</Relationships>',\n    \"xl/_rels/workbook.xml.rels\": '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>' + '<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">' + '<Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\" Target=\"worksheets/sheet1.xml\"/>' + '<Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\" Target=\"styles.xml\"/>' + '</Relationships>',\n    \"[Content_Types].xml\": '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>' + '<Types xmlns=\"http://schemas.openxmlformats.org/package/2006/content-types\">' + '<Default Extension=\"xml\" ContentType=\"application/xml\" />' + '<Default Extension=\"rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\" />' + '<Default Extension=\"jpeg\" ContentType=\"image/jpeg\" />' + '<Override PartName=\"/xl/workbook.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\" />' + '<Override PartName=\"/xl/worksheets/sheet1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\" />' + '<Override PartName=\"/xl/styles.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\" />' + '</Types>',\n    \"xl/workbook.xml\": '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>' + '<workbook xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\">' + '<fileVersion appName=\"xl\" lastEdited=\"5\" lowestEdited=\"5\" rupBuild=\"24816\"/>' + '<workbookPr showInkAnnotation=\"0\" autoCompressPictures=\"0\"/>' + '<bookViews>' + '<workbookView xWindow=\"0\" yWindow=\"0\" windowWidth=\"25600\" windowHeight=\"19020\" tabRatio=\"500\"/>' + '</bookViews>' + '<sheets>' + '<sheet name=\"\" sheetId=\"1\" r:id=\"rId1\"/>' + '</sheets>' + '</workbook>',\n    \"xl/worksheets/sheet1.xml\": '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>' + '<worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\">' + '<sheetData/>' + '<mergeCells count=\"0\"/>' + '</worksheet>',\n    \"xl/styles.xml\": '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + '<styleSheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\">' + '<numFmts count=\"6\">' + '<numFmt numFmtId=\"164\" formatCode=\"#,##0.00_-\\ [$$-45C]\"/>' + '<numFmt numFmtId=\"165\" formatCode=\"&quot;£&quot;#,##0.00\"/>' + '<numFmt numFmtId=\"166\" formatCode=\"[$€-2]\\ #,##0.00\"/>' + '<numFmt numFmtId=\"167\" formatCode=\"0.0%\"/>' + '<numFmt numFmtId=\"168\" formatCode=\"#,##0;(#,##0)\"/>' + '<numFmt numFmtId=\"169\" formatCode=\"#,##0.00;(#,##0.00)\"/>' + '</numFmts>' + '<fonts count=\"5\" x14ac:knownFonts=\"1\">' + '<font>' + '<sz val=\"11\" />' + '<name val=\"Calibri\" />' + '</font>' + '<font>' + '<sz val=\"11\" />' + '<name val=\"Calibri\" />' + '<color rgb=\"FFFFFFFF\" />' + '</font>' + '<font>' + '<sz val=\"11\" />' + '<name val=\"Calibri\" />' + '<b />' + '</font>' + '<font>' + '<sz val=\"11\" />' + '<name val=\"Calibri\" />' + '<i />' + '</font>' + '<font>' + '<sz val=\"11\" />' + '<name val=\"Calibri\" />' + '<u />' + '</font>' + '</fonts>' + '<fills count=\"6\">' + '<fill>' + '<patternFill patternType=\"none\" />' + '</fill>' + '<fill>' + // Excel appears to use this as a dotted background regardless of values but\n    '<patternFill patternType=\"none\" />' + // to be valid to the schema, use a patternFill\n    '</fill>' + '<fill>' + '<patternFill patternType=\"solid\">' + '<fgColor rgb=\"FFD9D9D9\" />' + '<bgColor indexed=\"64\" />' + '</patternFill>' + '</fill>' + '<fill>' + '<patternFill patternType=\"solid\">' + '<fgColor rgb=\"FFD99795\" />' + '<bgColor indexed=\"64\" />' + '</patternFill>' + '</fill>' + '<fill>' + '<patternFill patternType=\"solid\">' + '<fgColor rgb=\"ffc6efce\" />' + '<bgColor indexed=\"64\" />' + '</patternFill>' + '</fill>' + '<fill>' + '<patternFill patternType=\"solid\">' + '<fgColor rgb=\"ffc6cfef\" />' + '<bgColor indexed=\"64\" />' + '</patternFill>' + '</fill>' + '</fills>' + '<borders count=\"2\">' + '<border>' + '<left />' + '<right />' + '<top />' + '<bottom />' + '<diagonal />' + '</border>' + '<border diagonalUp=\"false\" diagonalDown=\"false\">' + '<left style=\"thin\">' + '<color auto=\"1\" />' + '</left>' + '<right style=\"thin\">' + '<color auto=\"1\" />' + '</right>' + '<top style=\"thin\">' + '<color auto=\"1\" />' + '</top>' + '<bottom style=\"thin\">' + '<color auto=\"1\" />' + '</bottom>' + '<diagonal />' + '</border>' + '</borders>' + '<cellStyleXfs count=\"1\">' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" />' + '</cellStyleXfs>' + '<cellXfs count=\"61\">' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"2\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"2\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"2\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"2\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"2\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"3\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"3\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"3\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"3\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"3\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"4\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"4\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"4\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"4\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"4\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"5\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"5\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"5\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"5\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"5\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"0\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"0\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"0\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"0\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"2\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"2\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"2\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"2\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"2\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"3\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"3\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"3\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"3\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"3\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"4\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"4\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"4\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"4\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"4\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"5\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"1\" fillId=\"5\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"2\" fillId=\"5\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"3\" fillId=\"5\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"4\" fillId=\"5\" borderId=\"1\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\"/>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyAlignment=\"1\">' + '<alignment horizontal=\"left\"/>' + '</xf>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyAlignment=\"1\">' + '<alignment horizontal=\"center\"/>' + '</xf>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyAlignment=\"1\">' + '<alignment horizontal=\"right\"/>' + '</xf>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyAlignment=\"1\">' + '<alignment horizontal=\"fill\"/>' + '</xf>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyAlignment=\"1\">' + '<alignment textRotation=\"90\"/>' + '</xf>' + '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyAlignment=\"1\">' + '<alignment wrapText=\"1\"/>' + '</xf>' + '<xf numFmtId=\"9\"   fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '<xf numFmtId=\"164\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '<xf numFmtId=\"165\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '<xf numFmtId=\"166\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '<xf numFmtId=\"167\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '<xf numFmtId=\"168\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '<xf numFmtId=\"169\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '<xf numFmtId=\"3\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '<xf numFmtId=\"4\" fontId=\"0\" fillId=\"0\" borderId=\"0\" applyFont=\"1\" applyFill=\"1\" applyBorder=\"1\" xfId=\"0\" applyNumberFormat=\"1\"/>' + '</cellXfs>' + '<cellStyles count=\"1\">' + '<cellStyle name=\"Normal\" xfId=\"0\" builtinId=\"0\" />' + '</cellStyles>' + '<dxfs count=\"0\" />' + '<tableStyles count=\"0\" defaultTableStyle=\"TableStyleMedium9\" defaultPivotStyle=\"PivotStyleMedium4\" />' + '</styleSheet>'\n  }; // Note we could use 3 `for` loops for the styles, but when gzipped there is\n  // virtually no difference in size, since the above can be easily compressed\n  // Pattern matching for special number formats. Perhaps this should be exposed\n  // via an API in future?\n\n  var _excelSpecials = [{\n    match: /^\\-?\\d+\\.\\d%$/,\n    style: 60,\n    fmt: function fmt(d) {\n      return d / 100;\n    }\n  }, // Precent with d.p.\n  {\n    match: /^\\-?\\d+\\.?\\d*%$/,\n    style: 56,\n    fmt: function fmt(d) {\n      return d / 100;\n    }\n  }, // Percent\n  {\n    match: /^\\-?\\$[\\d,]+.?\\d*$/,\n    style: 57\n  }, // Dollars\n  {\n    match: /^\\-?£[\\d,]+.?\\d*$/,\n    style: 58\n  }, // Pounds\n  {\n    match: /^\\-?€[\\d,]+.?\\d*$/,\n    style: 59\n  }, // Euros\n  {\n    match: /^\\([\\d,]+\\)$/,\n    style: 61,\n    fmt: function fmt(d) {\n      return -1 * d.replace(/[\\(\\)]/g, '');\n    }\n  }, // Negative numbers indicated by brackets\n  {\n    match: /^\\([\\d,]+\\.\\d{2}\\)$/,\n    style: 62,\n    fmt: function fmt(d) {\n      return -1 * d.replace(/[\\(\\)]/g, '');\n    }\n  }, // Negative numbers indicated by brackets - 2d.p.\n  {\n    match: /^[\\d,]+$/,\n    style: 63\n  }, // Numbers with thousand separators\n  {\n    match: /^[\\d,]+\\.\\d{2}$/,\n    style: 64 // Numbers with 2d.p. and thousands separators\n\n  }];\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * DataTables options and methods\n   */\n  // Set the default SWF path\n\n  DataTable.Buttons.swfPath = '//cdn.datatables.net/buttons/' + DataTable.Buttons.version + '/swf/flashExport.swf'; // Method to allow Flash buttons to be resized when made visible - as they are\n  // of zero height and width if initialised hidden\n\n  DataTable.Api.register('buttons.resize()', function () {\n    $.each(ZeroClipboard_TableTools.clients, function (i, client) {\n      if (client.domElement !== undefined && client.domElement.parentNode) {\n        client.positionElement();\n      }\n    });\n  });\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * Button definitions\n   */\n  // Copy to clipboard\n\n  DataTable.ext.buttons.copyFlash = $.extend({}, flashButton, {\n    className: 'buttons-copy buttons-flash',\n    text: function text(dt) {\n      return dt.i18n('buttons.copy', 'Copy');\n    },\n    action: function action(e, dt, button, config) {\n      // Check that the trigger did actually occur due to a Flash activation\n      if (!config._fromFlash) {\n        return;\n      }\n\n      this.processing(true);\n      var flash = config._flash;\n\n      var exportData = _exportData(dt, config);\n\n      var info = dt.buttons.exportInfo(config);\n\n      var newline = _newLine(config);\n\n      var output = exportData.str;\n\n      if (info.title) {\n        output = info.title + newline + newline + output;\n      }\n\n      if (info.messageTop) {\n        output = info.messageTop + newline + newline + output;\n      }\n\n      if (info.messageBottom) {\n        output = output + newline + newline + info.messageBottom;\n      }\n\n      if (config.customize) {\n        output = config.customize(output, config, dt);\n      }\n\n      flash.setAction('copy');\n\n      _setText(flash, output);\n\n      this.processing(false);\n      dt.buttons.info(dt.i18n('buttons.copyTitle', 'Copy to clipboard'), dt.i18n('buttons.copySuccess', {\n        _: 'Copied %d rows to clipboard',\n        1: 'Copied 1 row to clipboard'\n      }, data.rows), 3000);\n    },\n    fieldSeparator: '\\t',\n    fieldBoundary: ''\n  }); // CSV save file\n\n  DataTable.ext.buttons.csvFlash = $.extend({}, flashButton, {\n    className: 'buttons-csv buttons-flash',\n    text: function text(dt) {\n      return dt.i18n('buttons.csv', 'CSV');\n    },\n    action: function action(e, dt, button, config) {\n      // Set the text\n      var flash = config._flash;\n\n      var data = _exportData(dt, config);\n\n      var info = dt.buttons.exportInfo(config);\n      var output = config.customize ? config.customize(data.str, config, dt) : data.str;\n      flash.setAction('csv');\n      flash.setFileName(info.filename);\n\n      _setText(flash, output);\n    },\n    escapeChar: '\"'\n  }); // Excel save file - this is really a CSV file using UTF-8 that Excel can read\n\n  DataTable.ext.buttons.excelFlash = $.extend({}, flashButton, {\n    className: 'buttons-excel buttons-flash',\n    text: function text(dt) {\n      return dt.i18n('buttons.excel', 'Excel');\n    },\n    action: function action(e, dt, button, config) {\n      this.processing(true);\n      var flash = config._flash;\n      var rowPos = 0;\n      var rels = $.parseXML(excelStrings['xl/worksheets/sheet1.xml']); //Parses xml\n\n      var relsGet = rels.getElementsByTagName(\"sheetData\")[0];\n      var xlsx = {\n        _rels: {\n          \".rels\": $.parseXML(excelStrings['_rels/.rels'])\n        },\n        xl: {\n          _rels: {\n            \"workbook.xml.rels\": $.parseXML(excelStrings['xl/_rels/workbook.xml.rels'])\n          },\n          \"workbook.xml\": $.parseXML(excelStrings['xl/workbook.xml']),\n          \"styles.xml\": $.parseXML(excelStrings['xl/styles.xml']),\n          \"worksheets\": {\n            \"sheet1.xml\": rels\n          }\n        },\n        \"[Content_Types].xml\": $.parseXML(excelStrings['[Content_Types].xml'])\n      };\n      var data = dt.buttons.exportData(config.exportOptions);\n      var currentRow, rowNode;\n\n      var addRow = function addRow(row) {\n        currentRow = rowPos + 1;\n        rowNode = _createNode(rels, \"row\", {\n          attr: {\n            r: currentRow\n          }\n        });\n\n        for (var i = 0, ien = row.length; i < ien; i++) {\n          // Concat both the Cell Columns as a letter and the Row of the cell.\n          var cellId = createCellPos(i) + '' + currentRow;\n          var cell = null; // For null, undefined of blank cell, continue so it doesn't create the _createNode\n\n          if (row[i] === null || row[i] === undefined || row[i] === '') {\n            if (config.createEmptyCells === true) {\n              row[i] = '';\n            } else {\n              continue;\n            }\n          }\n\n          row[i] = $.trim(row[i]); // Special number formatting options\n\n          for (var j = 0, jen = _excelSpecials.length; j < jen; j++) {\n            var special = _excelSpecials[j]; // TODO Need to provide the ability for the specials to say\n            // if they are returning a string, since at the moment it is\n            // assumed to be a number\n\n            if (row[i].match && !row[i].match(/^0\\d+/) && row[i].match(special.match)) {\n              var val = row[i].replace(/[^\\d\\.\\-]/g, '');\n\n              if (special.fmt) {\n                val = special.fmt(val);\n              }\n\n              cell = _createNode(rels, 'c', {\n                attr: {\n                  r: cellId,\n                  s: special.style\n                },\n                children: [_createNode(rels, 'v', {\n                  text: val\n                })]\n              });\n              break;\n            }\n          }\n\n          if (!cell) {\n            if (typeof row[i] === 'number' || row[i].match && row[i].match(/^-?\\d+(\\.\\d+)?$/) && !row[i].match(/^0\\d+/)) {\n              // Detect numbers - don't match numbers with leading zeros\n              // or a negative anywhere but the start\n              cell = _createNode(rels, 'c', {\n                attr: {\n                  t: 'n',\n                  r: cellId\n                },\n                children: [_createNode(rels, 'v', {\n                  text: row[i]\n                })]\n              });\n            } else {\n              // String output - replace non standard characters for text output\n              var text = !row[i].replace ? row[i] : row[i].replace(/[\\x00-\\x09\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x9F]/g, '');\n              cell = _createNode(rels, 'c', {\n                attr: {\n                  t: 'inlineStr',\n                  r: cellId\n                },\n                children: {\n                  row: _createNode(rels, 'is', {\n                    children: {\n                      row: _createNode(rels, 't', {\n                        text: text\n                      })\n                    }\n                  })\n                }\n              });\n            }\n          }\n\n          rowNode.appendChild(cell);\n        }\n\n        relsGet.appendChild(rowNode);\n        rowPos++;\n      };\n\n      $('sheets sheet', xlsx.xl['workbook.xml']).attr('name', _sheetname(config));\n\n      if (config.customizeData) {\n        config.customizeData(data);\n      }\n\n      var mergeCells = function mergeCells(row, colspan) {\n        var mergeCells = $('mergeCells', rels);\n        mergeCells[0].appendChild(_createNode(rels, 'mergeCell', {\n          attr: {\n            ref: 'A' + row + ':' + createCellPos(colspan) + row\n          }\n        }));\n        mergeCells.attr('count', mergeCells.attr('count') + 1);\n        $('row:eq(' + (row - 1) + ') c', rels).attr('s', '51'); // centre\n      }; // Title and top messages\n\n\n      var exportInfo = dt.buttons.exportInfo(config);\n\n      if (exportInfo.title) {\n        addRow([exportInfo.title], rowPos);\n        mergeCells(rowPos, data.header.length - 1);\n      }\n\n      if (exportInfo.messageTop) {\n        addRow([exportInfo.messageTop], rowPos);\n        mergeCells(rowPos, data.header.length - 1);\n      } // Table itself\n\n\n      if (config.header) {\n        addRow(data.header, rowPos);\n        $('row:last c', rels).attr('s', '2'); // bold\n      }\n\n      for (var n = 0, ie = data.body.length; n < ie; n++) {\n        addRow(data.body[n], rowPos);\n      }\n\n      if (config.footer && data.footer) {\n        addRow(data.footer, rowPos);\n        $('row:last c', rels).attr('s', '2'); // bold\n      } // Below the table\n\n\n      if (exportInfo.messageBottom) {\n        addRow([exportInfo.messageBottom], rowPos);\n        mergeCells(rowPos, data.header.length - 1);\n      } // Set column widths\n\n\n      var cols = _createNode(rels, 'cols');\n\n      $('worksheet', rels).prepend(cols);\n\n      for (var i = 0, ien = data.header.length; i < ien; i++) {\n        cols.appendChild(_createNode(rels, 'col', {\n          attr: {\n            min: i + 1,\n            max: i + 1,\n            width: _excelColWidth(data, i),\n            customWidth: 1\n          }\n        }));\n      } // Let the developer customise the document if they want to\n\n\n      if (config.customize) {\n        config.customize(xlsx, config, dt);\n      }\n\n      _xlsxToStrings(xlsx);\n\n      flash.setAction('excel');\n      flash.setFileName(exportInfo.filename);\n      flash.setSheetData(xlsx);\n\n      _setText(flash, '');\n\n      this.processing(false);\n    },\n    extension: '.xlsx',\n    createEmptyCells: false\n  }); // PDF export\n\n  DataTable.ext.buttons.pdfFlash = $.extend({}, flashButton, {\n    className: 'buttons-pdf buttons-flash',\n    text: function text(dt) {\n      return dt.i18n('buttons.pdf', 'PDF');\n    },\n    action: function action(e, dt, button, config) {\n      this.processing(true); // Set the text\n\n      var flash = config._flash;\n      var data = dt.buttons.exportData(config.exportOptions);\n      var info = dt.buttons.exportInfo(config);\n      var totalWidth = dt.table().node().offsetWidth; // Calculate the column width ratios for layout of the table in the PDF\n\n      var ratios = dt.columns(config.columns).indexes().map(function (idx) {\n        return dt.column(idx).header().offsetWidth / totalWidth;\n      });\n      flash.setAction('pdf');\n      flash.setFileName(info.filename);\n\n      _setText(flash, JSON.stringify({\n        title: info.title || '',\n        messageTop: info.messageTop || '',\n        messageBottom: info.messageBottom || '',\n        colWidth: ratios.toArray(),\n        orientation: config.orientation,\n        size: config.pageSize,\n        header: config.header ? data.header : null,\n        footer: config.footer ? data.footer : null,\n        body: data.body\n      }));\n\n      this.processing(false);\n    },\n    extension: '.pdf',\n    orientation: 'portrait',\n    pageSize: 'A4',\n    newline: '\\n'\n  });\n  return DataTable.Buttons;\n});","/*! ColReorder 1.5.1\n * ©2010-2018 SpryMedia Ltd - datatables.net/license\n */\n\n/**\n * @summary     ColReorder\n * @description Provide the ability to reorder columns in a DataTable\n * @version     1.5.1\n * @file        dataTables.colReorder.js\n * @author      SpryMedia Ltd (www.sprymedia.co.uk)\n * @contact     www.sprymedia.co.uk/contact\n * @copyright   Copyright 2010-2018 SpryMedia Ltd.\n *\n * This source file is free software, available under the following license:\n *   MIT license - http://datatables.net/license/mit\n *\n * This source file is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.\n *\n * For details please refer to: http://www.datatables.net\n */\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['jquery', 'datatables.net'], function ($) {\n      return factory($, window, document);\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = function (root, $) {\n      if (!root) {\n        root = window;\n      }\n\n      if (!$ || !$.fn.dataTable) {\n        $ = require('datatables.net')(root, $).$;\n      }\n\n      return factory($, root, root.document);\n    };\n  } else {\n    // Browser\n    factory(jQuery, window, document);\n  }\n})(function ($, window, document, undefined) {\n  'use strict';\n\n  var DataTable = $.fn.dataTable;\n  /**\n   * Switch the key value pairing of an index array to be value key (i.e. the old value is now the\n   * key). For example consider [ 2, 0, 1 ] this would be returned as [ 1, 2, 0 ].\n   *  @method  fnInvertKeyValues\n   *  @param   array aIn Array to switch around\n   *  @returns array\n   */\n\n  function fnInvertKeyValues(aIn) {\n    var aRet = [];\n\n    for (var i = 0, iLen = aIn.length; i < iLen; i++) {\n      aRet[aIn[i]] = i;\n    }\n\n    return aRet;\n  }\n  /**\n   * Modify an array by switching the position of two elements\n   *  @method  fnArraySwitch\n   *  @param   array aArray Array to consider, will be modified by reference (i.e. no return)\n   *  @param   int iFrom From point\n   *  @param   int iTo Insert point\n   *  @returns void\n   */\n\n\n  function fnArraySwitch(aArray, iFrom, iTo) {\n    var mStore = aArray.splice(iFrom, 1)[0];\n    aArray.splice(iTo, 0, mStore);\n  }\n  /**\n   * Switch the positions of nodes in a parent node (note this is specifically designed for\n   * table rows). Note this function considers all element nodes under the parent!\n   *  @method  fnDomSwitch\n   *  @param   string sTag Tag to consider\n   *  @param   int iFrom Element to move\n   *  @param   int Point to element the element to (before this point), can be null for append\n   *  @returns void\n   */\n\n\n  function fnDomSwitch(nParent, iFrom, iTo) {\n    var anTags = [];\n\n    for (var i = 0, iLen = nParent.childNodes.length; i < iLen; i++) {\n      if (nParent.childNodes[i].nodeType == 1) {\n        anTags.push(nParent.childNodes[i]);\n      }\n    }\n\n    var nStore = anTags[iFrom];\n\n    if (iTo !== null) {\n      nParent.insertBefore(nStore, anTags[iTo]);\n    } else {\n      nParent.appendChild(nStore);\n    }\n  }\n  /**\n   * Plug-in for DataTables which will reorder the internal column structure by taking the column\n   * from one position (iFrom) and insert it into a given point (iTo).\n   *  @method  $.fn.dataTableExt.oApi.fnColReorder\n   *  @param   object oSettings DataTables settings object - automatically added by DataTables!\n   *  @param   int iFrom Take the column to be repositioned from this point\n   *  @param   int iTo and insert it into this point\n   *  @param   bool drop Indicate if the reorder is the final one (i.e. a drop)\n   *    not a live reorder\n   *  @param   bool invalidateRows speeds up processing if false passed\n   *  @returns void\n   */\n\n\n  $.fn.dataTableExt.oApi.fnColReorder = function (oSettings, iFrom, iTo, drop, invalidateRows) {\n    var i,\n        iLen,\n        j,\n        jLen,\n        jen,\n        iCols = oSettings.aoColumns.length,\n        nTrs,\n        oCol;\n\n    var attrMap = function attrMap(obj, prop, mapping) {\n      if (!obj[prop] || typeof obj[prop] === 'function') {\n        return;\n      }\n\n      var a = obj[prop].split('.');\n      var num = a.shift();\n\n      if (isNaN(num * 1)) {\n        return;\n      }\n\n      obj[prop] = mapping[num * 1] + '.' + a.join('.');\n    };\n    /* Sanity check in the input */\n\n\n    if (iFrom == iTo) {\n      /* Pointless reorder */\n      return;\n    }\n\n    if (iFrom < 0 || iFrom >= iCols) {\n      this.oApi._fnLog(oSettings, 1, \"ColReorder 'from' index is out of bounds: \" + iFrom);\n\n      return;\n    }\n\n    if (iTo < 0 || iTo >= iCols) {\n      this.oApi._fnLog(oSettings, 1, \"ColReorder 'to' index is out of bounds: \" + iTo);\n\n      return;\n    }\n    /*\n     * Calculate the new column array index, so we have a mapping between the old and new\n     */\n\n\n    var aiMapping = [];\n\n    for (i = 0, iLen = iCols; i < iLen; i++) {\n      aiMapping[i] = i;\n    }\n\n    fnArraySwitch(aiMapping, iFrom, iTo);\n    var aiInvertMapping = fnInvertKeyValues(aiMapping);\n    /*\n     * Convert all internal indexing to the new column order indexes\n     */\n\n    /* Sorting */\n\n    for (i = 0, iLen = oSettings.aaSorting.length; i < iLen; i++) {\n      oSettings.aaSorting[i][0] = aiInvertMapping[oSettings.aaSorting[i][0]];\n    }\n    /* Fixed sorting */\n\n\n    if (oSettings.aaSortingFixed !== null) {\n      for (i = 0, iLen = oSettings.aaSortingFixed.length; i < iLen; i++) {\n        oSettings.aaSortingFixed[i][0] = aiInvertMapping[oSettings.aaSortingFixed[i][0]];\n      }\n    }\n    /* Data column sorting (the column which the sort for a given column should take place on) */\n\n\n    for (i = 0, iLen = iCols; i < iLen; i++) {\n      oCol = oSettings.aoColumns[i];\n\n      for (j = 0, jLen = oCol.aDataSort.length; j < jLen; j++) {\n        oCol.aDataSort[j] = aiInvertMapping[oCol.aDataSort[j]];\n      } // Update the column indexes\n\n\n      oCol.idx = aiInvertMapping[oCol.idx];\n    } // Update 1.10 optimised sort class removal variable\n\n\n    $.each(oSettings.aLastSort, function (i, val) {\n      oSettings.aLastSort[i].src = aiInvertMapping[val.src];\n    });\n    /* Update the Get and Set functions for each column */\n\n    for (i = 0, iLen = iCols; i < iLen; i++) {\n      oCol = oSettings.aoColumns[i];\n\n      if (typeof oCol.mData == 'number') {\n        oCol.mData = aiInvertMapping[oCol.mData];\n      } else if ($.isPlainObject(oCol.mData)) {\n        // HTML5 data sourced\n        attrMap(oCol.mData, '_', aiInvertMapping);\n        attrMap(oCol.mData, 'filter', aiInvertMapping);\n        attrMap(oCol.mData, 'sort', aiInvertMapping);\n        attrMap(oCol.mData, 'type', aiInvertMapping);\n      }\n    }\n    /*\n     * Move the DOM elements\n     */\n\n\n    if (oSettings.aoColumns[iFrom].bVisible) {\n      /* Calculate the current visible index and the point to insert the node before. The insert\n       * before needs to take into account that there might not be an element to insert before,\n       * in which case it will be null, and an appendChild should be used\n       */\n      var iVisibleIndex = this.oApi._fnColumnIndexToVisible(oSettings, iFrom);\n\n      var iInsertBeforeIndex = null;\n      i = iTo < iFrom ? iTo : iTo + 1;\n\n      while (iInsertBeforeIndex === null && i < iCols) {\n        iInsertBeforeIndex = this.oApi._fnColumnIndexToVisible(oSettings, i);\n        i++;\n      }\n      /* Header */\n\n\n      nTrs = oSettings.nTHead.getElementsByTagName('tr');\n\n      for (i = 0, iLen = nTrs.length; i < iLen; i++) {\n        fnDomSwitch(nTrs[i], iVisibleIndex, iInsertBeforeIndex);\n      }\n      /* Footer */\n\n\n      if (oSettings.nTFoot !== null) {\n        nTrs = oSettings.nTFoot.getElementsByTagName('tr');\n\n        for (i = 0, iLen = nTrs.length; i < iLen; i++) {\n          fnDomSwitch(nTrs[i], iVisibleIndex, iInsertBeforeIndex);\n        }\n      }\n      /* Body */\n\n\n      for (i = 0, iLen = oSettings.aoData.length; i < iLen; i++) {\n        if (oSettings.aoData[i].nTr !== null) {\n          fnDomSwitch(oSettings.aoData[i].nTr, iVisibleIndex, iInsertBeforeIndex);\n        }\n      }\n    }\n    /*\n     * Move the internal array elements\n     */\n\n    /* Columns */\n\n\n    fnArraySwitch(oSettings.aoColumns, iFrom, iTo); // regenerate the get / set functions\n\n    for (i = 0, iLen = iCols; i < iLen; i++) {\n      oSettings.oApi._fnColumnOptions(oSettings, i, {});\n    }\n    /* Search columns */\n\n\n    fnArraySwitch(oSettings.aoPreSearchCols, iFrom, iTo);\n    /* Array array - internal data anodes cache */\n\n    for (i = 0, iLen = oSettings.aoData.length; i < iLen; i++) {\n      var data = oSettings.aoData[i];\n      var cells = data.anCells;\n\n      if (cells) {\n        fnArraySwitch(cells, iFrom, iTo); // Longer term, should this be moved into the DataTables' invalidate\n        // methods?\n\n        for (j = 0, jen = cells.length; j < jen; j++) {\n          if (cells[j] && cells[j]._DT_CellIndex) {\n            cells[j]._DT_CellIndex.column = j;\n          }\n        }\n      } // For DOM sourced data, the invalidate will reread the cell into\n      // the data array, but for data sources as an array, they need to\n      // be flipped\n\n\n      if (data.src !== 'dom' && $.isArray(data._aData)) {\n        fnArraySwitch(data._aData, iFrom, iTo);\n      }\n    }\n    /* Reposition the header elements in the header layout array */\n\n\n    for (i = 0, iLen = oSettings.aoHeader.length; i < iLen; i++) {\n      fnArraySwitch(oSettings.aoHeader[i], iFrom, iTo);\n    }\n\n    if (oSettings.aoFooter !== null) {\n      for (i = 0, iLen = oSettings.aoFooter.length; i < iLen; i++) {\n        fnArraySwitch(oSettings.aoFooter[i], iFrom, iTo);\n      }\n    }\n\n    if (invalidateRows || invalidateRows === undefined) {\n      $.fn.dataTable.Api(oSettings).rows().invalidate();\n    }\n    /*\n     * Update DataTables' event handlers\n     */\n\n    /* Sort listener */\n\n\n    for (i = 0, iLen = iCols; i < iLen; i++) {\n      $(oSettings.aoColumns[i].nTh).off('.DT');\n\n      this.oApi._fnSortAttachListener(oSettings, oSettings.aoColumns[i].nTh, i);\n    }\n    /* Fire an event so other plug-ins can update */\n\n\n    $(oSettings.oInstance).trigger('column-reorder.dt', [oSettings, {\n      from: iFrom,\n      to: iTo,\n      mapping: aiInvertMapping,\n      drop: drop,\n      // Old style parameters for compatibility\n      iFrom: iFrom,\n      iTo: iTo,\n      aiInvertMapping: aiInvertMapping\n    }]);\n  };\n  /**\n   * ColReorder provides column visibility control for DataTables\n   * @class ColReorder\n   * @constructor\n   * @param {object} dt DataTables settings object\n   * @param {object} opts ColReorder options\n   */\n\n\n  var ColReorder = function ColReorder(dt, opts) {\n    var settings = new $.fn.dataTable.Api(dt).settings()[0]; // Ensure that we can't initialise on the same table twice\n\n    if (settings._colReorder) {\n      return settings._colReorder;\n    } // Allow the options to be a boolean for defaults\n\n\n    if (opts === true) {\n      opts = {};\n    } // Convert from camelCase to Hungarian, just as DataTables does\n\n\n    var camelToHungarian = $.fn.dataTable.camelToHungarian;\n\n    if (camelToHungarian) {\n      camelToHungarian(ColReorder.defaults, ColReorder.defaults, true);\n      camelToHungarian(ColReorder.defaults, opts || {});\n    }\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Public class variables\n     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n    /**\n     * @namespace Settings object which contains customisable information for ColReorder instance\n     */\n\n\n    this.s = {\n      /**\n       * DataTables settings object\n       *  @property dt\n       *  @type     Object\n       *  @default  null\n       */\n      \"dt\": null,\n\n      /**\n       * Enable flag\n       *  @property dt\n       *  @type     Object\n       *  @default  null\n       */\n      \"enable\": null,\n\n      /**\n       * Initialisation object used for this instance\n       *  @property init\n       *  @type     object\n       *  @default  {}\n       */\n      \"init\": $.extend(true, {}, ColReorder.defaults, opts),\n\n      /**\n       * Number of columns to fix (not allow to be reordered)\n       *  @property fixed\n       *  @type     int\n       *  @default  0\n       */\n      \"fixed\": 0,\n\n      /**\n       * Number of columns to fix counting from right (not allow to be reordered)\n       *  @property fixedRight\n       *  @type     int\n       *  @default  0\n       */\n      \"fixedRight\": 0,\n\n      /**\n       * Callback function for once the reorder has been done\n       *  @property reorderCallback\n       *  @type     function\n       *  @default  null\n       */\n      \"reorderCallback\": null,\n\n      /**\n       * @namespace Information used for the mouse drag\n       */\n      \"mouse\": {\n        \"startX\": -1,\n        \"startY\": -1,\n        \"offsetX\": -1,\n        \"offsetY\": -1,\n        \"target\": -1,\n        \"targetIndex\": -1,\n        \"fromIndex\": -1\n      },\n\n      /**\n       * Information which is used for positioning the insert cusor and knowing where to do the\n       * insert. Array of objects with the properties:\n       *   x: x-axis position\n       *   to: insert point\n       *  @property aoTargets\n       *  @type     array\n       *  @default  []\n       */\n      \"aoTargets\": []\n    };\n    /**\n     * @namespace Common and useful DOM elements for the class instance\n     */\n\n    this.dom = {\n      /**\n       * Dragging element (the one the mouse is moving)\n       *  @property drag\n       *  @type     element\n       *  @default  null\n       */\n      \"drag\": null,\n\n      /**\n       * The insert cursor\n       *  @property pointer\n       *  @type     element\n       *  @default  null\n       */\n      \"pointer\": null\n    };\n    /* Constructor logic */\n\n    this.s.enable = this.s.init.bEnable;\n    this.s.dt = settings;\n    this.s.dt._colReorder = this;\n\n    this._fnConstruct();\n\n    return this;\n  };\n\n  $.extend(ColReorder.prototype, {\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Public methods\n     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n    /**\n     * Enable / disable end user interaction\n     */\n    fnEnable: function fnEnable(flag) {\n      if (flag === false) {\n        return fnDisable();\n      }\n\n      this.s.enable = true;\n    },\n\n    /**\n     * Disable end user interaction\n     */\n    fnDisable: function fnDisable() {\n      this.s.enable = false;\n    },\n\n    /**\n     * Reset the column ordering to the original ordering that was detected on\n     * start up.\n     *  @return {this} Returns `this` for chaining.\n     *\n     *  @example\n     *    // DataTables initialisation with ColReorder\n     *    var table = $('#example').dataTable( {\n     *        \"sDom\": 'Rlfrtip'\n     *    } );\n     *\n     *    // Add click event to a button to reset the ordering\n     *    $('#resetOrdering').click( function (e) {\n     *        e.preventDefault();\n     *        $.fn.dataTable.ColReorder( table ).fnReset();\n     *    } );\n     */\n    \"fnReset\": function fnReset() {\n      this._fnOrderColumns(this.fnOrder());\n\n      return this;\n    },\n\n    /**\n     * `Deprecated` - Get the current order of the columns, as an array.\n     *  @return {array} Array of column identifiers\n     *  @deprecated `fnOrder` should be used in preference to this method.\n     *      `fnOrder` acts as a getter/setter.\n     */\n    \"fnGetCurrentOrder\": function fnGetCurrentOrder() {\n      return this.fnOrder();\n    },\n\n    /**\n     * Get the current order of the columns, as an array. Note that the values\n     * given in the array are unique identifiers for each column. Currently\n     * these are the original ordering of the columns that was detected on\n     * start up, but this could potentially change in future.\n     *  @return {array} Array of column identifiers\n     *\n     *  @example\n     *    // Get column ordering for the table\n     *    var order = $.fn.dataTable.ColReorder( dataTable ).fnOrder();\n     */\n\n    /**\n    * Set the order of the columns, from the positions identified in the\n    * ordering array given. Note that ColReorder takes a brute force approach\n    * to reordering, so it is possible multiple reordering events will occur\n    * before the final order is settled upon.\n    *  @param {array} [set] Array of column identifiers in the new order. Note\n    *    that every column must be included, uniquely, in this array.\n    *  @return {this} Returns `this` for chaining.\n    *\n    *  @example\n    *    // Swap the first and second columns\n    *    $.fn.dataTable.ColReorder( dataTable ).fnOrder( [1, 0, 2, 3, 4] );\n    *\n    *  @example\n    *    // Move the first column to the end for the table `#example`\n    *    var curr = $.fn.dataTable.ColReorder( '#example' ).fnOrder();\n    *    var first = curr.shift();\n    *    curr.push( first );\n    *    $.fn.dataTable.ColReorder( '#example' ).fnOrder( curr );\n    *\n    *  @example\n    *    // Reverse the table's order\n    *    $.fn.dataTable.ColReorder( '#example' ).fnOrder(\n    *      $.fn.dataTable.ColReorder( '#example' ).fnOrder().reverse()\n    *    );\n    */\n    \"fnOrder\": function fnOrder(set, original) {\n      var a = [],\n          i,\n          ien,\n          j,\n          jen;\n      var columns = this.s.dt.aoColumns;\n\n      if (set === undefined) {\n        for (i = 0, ien = columns.length; i < ien; i++) {\n          a.push(columns[i]._ColReorder_iOrigCol);\n        }\n\n        return a;\n      } // The order given is based on the original indexes, rather than the\n      // existing ones, so we need to translate from the original to current\n      // before then doing the order\n\n\n      if (original) {\n        var order = this.fnOrder();\n\n        for (i = 0, ien = set.length; i < ien; i++) {\n          a.push($.inArray(set[i], order));\n        }\n\n        set = a;\n      }\n\n      this._fnOrderColumns(fnInvertKeyValues(set));\n\n      return this;\n    },\n\n    /**\n     * Convert from the original column index, to the original\n     *\n     * @param  {int|array} idx Index(es) to convert\n     * @param  {string} dir Transpose direction - `fromOriginal` / `toCurrent`\n     *   or `'toOriginal` / `fromCurrent`\n     * @return {int|array}     Converted values\n     */\n    fnTranspose: function fnTranspose(idx, dir) {\n      if (!dir) {\n        dir = 'toCurrent';\n      }\n\n      var order = this.fnOrder();\n      var columns = this.s.dt.aoColumns;\n\n      if (dir === 'toCurrent') {\n        // Given an original index, want the current\n        return !$.isArray(idx) ? $.inArray(idx, order) : $.map(idx, function (index) {\n          return $.inArray(index, order);\n        });\n      } else {\n        // Given a current index, want the original\n        return !$.isArray(idx) ? columns[idx]._ColReorder_iOrigCol : $.map(idx, function (index) {\n          return columns[index]._ColReorder_iOrigCol;\n        });\n      }\n    },\n\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Private methods (they are of course public in JS, but recommended as private)\n     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n    /**\n     * Constructor logic\n     *  @method  _fnConstruct\n     *  @returns void\n     *  @private\n     */\n    \"_fnConstruct\": function _fnConstruct() {\n      var that = this;\n      var iLen = this.s.dt.aoColumns.length;\n      var table = this.s.dt.nTable;\n      var i;\n      /* Columns discounted from reordering - counting left to right */\n\n      if (this.s.init.iFixedColumns) {\n        this.s.fixed = this.s.init.iFixedColumns;\n      }\n\n      if (this.s.init.iFixedColumnsLeft) {\n        this.s.fixed = this.s.init.iFixedColumnsLeft;\n      }\n      /* Columns discounted from reordering - counting right to left */\n\n\n      this.s.fixedRight = this.s.init.iFixedColumnsRight ? this.s.init.iFixedColumnsRight : 0;\n      /* Drop callback initialisation option */\n\n      if (this.s.init.fnReorderCallback) {\n        this.s.reorderCallback = this.s.init.fnReorderCallback;\n      }\n      /* Add event handlers for the drag and drop, and also mark the original column order */\n\n\n      for (i = 0; i < iLen; i++) {\n        if (i > this.s.fixed - 1 && i < iLen - this.s.fixedRight) {\n          this._fnMouseListener(i, this.s.dt.aoColumns[i].nTh);\n        }\n        /* Mark the original column order for later reference */\n\n\n        this.s.dt.aoColumns[i]._ColReorder_iOrigCol = i;\n      }\n      /* State saving */\n\n\n      this.s.dt.oApi._fnCallbackReg(this.s.dt, 'aoStateSaveParams', function (oS, oData) {\n        that._fnStateSave.call(that, oData);\n      }, \"ColReorder_State\");\n      /* An initial column order has been specified */\n\n\n      var aiOrder = null;\n\n      if (this.s.init.aiOrder) {\n        aiOrder = this.s.init.aiOrder.slice();\n      }\n      /* State loading, overrides the column order given */\n\n\n      if (this.s.dt.oLoadedState && typeof this.s.dt.oLoadedState.ColReorder != 'undefined' && this.s.dt.oLoadedState.ColReorder.length == this.s.dt.aoColumns.length) {\n        aiOrder = this.s.dt.oLoadedState.ColReorder;\n      }\n      /* If we have an order to apply - do so */\n\n\n      if (aiOrder) {\n        /* We might be called during or after the DataTables initialisation. If before, then we need\n         * to wait until the draw is done, if after, then do what we need to do right away\n         */\n        if (!that.s.dt._bInitComplete) {\n          var bDone = false;\n          $(table).on('draw.dt.colReorder', function () {\n            if (!that.s.dt._bInitComplete && !bDone) {\n              bDone = true;\n              var resort = fnInvertKeyValues(aiOrder);\n\n              that._fnOrderColumns.call(that, resort);\n            }\n          });\n        } else {\n          var resort = fnInvertKeyValues(aiOrder);\n\n          that._fnOrderColumns.call(that, resort);\n        }\n      } else {\n        this._fnSetColumnIndexes();\n      } // Destroy clean up\n\n\n      $(table).on('destroy.dt.colReorder', function () {\n        $(table).off('destroy.dt.colReorder draw.dt.colReorder');\n        $.each(that.s.dt.aoColumns, function (i, column) {\n          $(column.nTh).off('.ColReorder');\n          $(column.nTh).removeAttr('data-column-index');\n        });\n        that.s.dt._colReorder = null;\n        that.s = null;\n      });\n    },\n\n    /**\n     * Set the column order from an array\n     *  @method  _fnOrderColumns\n     *  @param   array a An array of integers which dictate the column order that should be applied\n     *  @returns void\n     *  @private\n     */\n    \"_fnOrderColumns\": function _fnOrderColumns(a) {\n      var changed = false;\n\n      if (a.length != this.s.dt.aoColumns.length) {\n        this.s.dt.oInstance.oApi._fnLog(this.s.dt, 1, \"ColReorder - array reorder does not \" + \"match known number of columns. Skipping.\");\n\n        return;\n      }\n\n      for (var i = 0, iLen = a.length; i < iLen; i++) {\n        var currIndex = $.inArray(i, a);\n\n        if (i != currIndex) {\n          /* Reorder our switching array */\n          fnArraySwitch(a, currIndex, i);\n          /* Do the column reorder in the table */\n\n          this.s.dt.oInstance.fnColReorder(currIndex, i, true, false);\n          changed = true;\n        }\n      }\n\n      this._fnSetColumnIndexes(); // Has anything actually changed? If not, then nothing else to do\n\n\n      if (!changed) {\n        return;\n      }\n\n      $.fn.dataTable.Api(this.s.dt).rows().invalidate();\n      /* When scrolling we need to recalculate the column sizes to allow for the shift */\n\n      if (this.s.dt.oScroll.sX !== \"\" || this.s.dt.oScroll.sY !== \"\") {\n        this.s.dt.oInstance.fnAdjustColumnSizing(false);\n      }\n      /* Save the state */\n\n\n      this.s.dt.oInstance.oApi._fnSaveState(this.s.dt);\n\n      if (this.s.reorderCallback !== null) {\n        this.s.reorderCallback.call(this);\n      }\n    },\n\n    /**\n     * Because we change the indexes of columns in the table, relative to their starting point\n     * we need to reorder the state columns to what they are at the starting point so we can\n     * then rearrange them again on state load!\n     *  @method  _fnStateSave\n     *  @param   object oState DataTables state\n     *  @returns string JSON encoded cookie string for DataTables\n     *  @private\n     */\n    \"_fnStateSave\": function _fnStateSave(oState) {\n      var i, iLen, aCopy, iOrigColumn;\n      var oSettings = this.s.dt;\n      var columns = oSettings.aoColumns;\n      oState.ColReorder = [];\n      /* Sorting */\n\n      if (oState.aaSorting) {\n        // 1.10.0-\n        for (i = 0; i < oState.aaSorting.length; i++) {\n          oState.aaSorting[i][0] = columns[oState.aaSorting[i][0]]._ColReorder_iOrigCol;\n        }\n\n        var aSearchCopy = $.extend(true, [], oState.aoSearchCols);\n\n        for (i = 0, iLen = columns.length; i < iLen; i++) {\n          iOrigColumn = columns[i]._ColReorder_iOrigCol;\n          /* Column filter */\n\n          oState.aoSearchCols[iOrigColumn] = aSearchCopy[i];\n          /* Visibility */\n\n          oState.abVisCols[iOrigColumn] = columns[i].bVisible;\n          /* Column reordering */\n\n          oState.ColReorder.push(iOrigColumn);\n        }\n      } else if (oState.order) {\n        // 1.10.1+\n        for (i = 0; i < oState.order.length; i++) {\n          oState.order[i][0] = columns[oState.order[i][0]]._ColReorder_iOrigCol;\n        }\n\n        var stateColumnsCopy = $.extend(true, [], oState.columns);\n\n        for (i = 0, iLen = columns.length; i < iLen; i++) {\n          iOrigColumn = columns[i]._ColReorder_iOrigCol;\n          /* Columns */\n\n          oState.columns[iOrigColumn] = stateColumnsCopy[i];\n          /* Column reordering */\n\n          oState.ColReorder.push(iOrigColumn);\n        }\n      }\n    },\n\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Mouse drop and drag\n     */\n\n    /**\n     * Add a mouse down listener to a particluar TH element\n     *  @method  _fnMouseListener\n     *  @param   int i Column index\n     *  @param   element nTh TH element clicked on\n     *  @returns void\n     *  @private\n     */\n    \"_fnMouseListener\": function _fnMouseListener(i, nTh) {\n      var that = this;\n      $(nTh).on('mousedown.ColReorder', function (e) {\n        if (that.s.enable) {\n          that._fnMouseDown.call(that, e, nTh);\n        }\n      }).on('touchstart.ColReorder', function (e) {\n        if (that.s.enable) {\n          that._fnMouseDown.call(that, e, nTh);\n        }\n      });\n    },\n\n    /**\n     * Mouse down on a TH element in the table header\n     *  @method  _fnMouseDown\n     *  @param   event e Mouse event\n     *  @param   element nTh TH element to be dragged\n     *  @returns void\n     *  @private\n     */\n    \"_fnMouseDown\": function _fnMouseDown(e, nTh) {\n      var that = this;\n      /* Store information about the mouse position */\n\n      var target = $(e.target).closest('th, td');\n      var offset = target.offset();\n      var idx = parseInt($(nTh).attr('data-column-index'), 10);\n\n      if (idx === undefined) {\n        return;\n      }\n\n      this.s.mouse.startX = this._fnCursorPosition(e, 'pageX');\n      this.s.mouse.startY = this._fnCursorPosition(e, 'pageY');\n      this.s.mouse.offsetX = this._fnCursorPosition(e, 'pageX') - offset.left;\n      this.s.mouse.offsetY = this._fnCursorPosition(e, 'pageY') - offset.top;\n      this.s.mouse.target = this.s.dt.aoColumns[idx].nTh; //target[0];\n\n      this.s.mouse.targetIndex = idx;\n      this.s.mouse.fromIndex = idx;\n\n      this._fnRegions();\n      /* Add event handlers to the document */\n\n\n      $(document).on('mousemove.ColReorder touchmove.ColReorder', function (e) {\n        that._fnMouseMove.call(that, e);\n      }).on('mouseup.ColReorder touchend.ColReorder', function (e) {\n        that._fnMouseUp.call(that, e);\n      });\n    },\n\n    /**\n     * Deal with a mouse move event while dragging a node\n     *  @method  _fnMouseMove\n     *  @param   event e Mouse event\n     *  @returns void\n     *  @private\n     */\n    \"_fnMouseMove\": function _fnMouseMove(e) {\n      var that = this;\n\n      if (this.dom.drag === null) {\n        /* Only create the drag element if the mouse has moved a specific distance from the start\n         * point - this allows the user to make small mouse movements when sorting and not have a\n         * possibly confusing drag element showing up\n         */\n        if (Math.pow(Math.pow(this._fnCursorPosition(e, 'pageX') - this.s.mouse.startX, 2) + Math.pow(this._fnCursorPosition(e, 'pageY') - this.s.mouse.startY, 2), 0.5) < 5) {\n          return;\n        }\n\n        this._fnCreateDragNode();\n      }\n      /* Position the element - we respect where in the element the click occured */\n\n\n      this.dom.drag.css({\n        left: this._fnCursorPosition(e, 'pageX') - this.s.mouse.offsetX,\n        top: this._fnCursorPosition(e, 'pageY') - this.s.mouse.offsetY\n      });\n      /* Based on the current mouse position, calculate where the insert should go */\n\n      var bSet = false;\n      var lastToIndex = this.s.mouse.toIndex;\n\n      for (var i = 1, iLen = this.s.aoTargets.length; i < iLen; i++) {\n        if (this._fnCursorPosition(e, 'pageX') < this.s.aoTargets[i - 1].x + (this.s.aoTargets[i].x - this.s.aoTargets[i - 1].x) / 2) {\n          this.dom.pointer.css('left', this.s.aoTargets[i - 1].x);\n          this.s.mouse.toIndex = this.s.aoTargets[i - 1].to;\n          bSet = true;\n          break;\n        }\n      } // The insert element wasn't positioned in the array (less than\n      // operator), so we put it at the end\n\n\n      if (!bSet) {\n        this.dom.pointer.css('left', this.s.aoTargets[this.s.aoTargets.length - 1].x);\n        this.s.mouse.toIndex = this.s.aoTargets[this.s.aoTargets.length - 1].to;\n      } // Perform reordering if realtime updating is on and the column has moved\n\n\n      if (this.s.init.bRealtime && lastToIndex !== this.s.mouse.toIndex) {\n        this.s.dt.oInstance.fnColReorder(this.s.mouse.fromIndex, this.s.mouse.toIndex);\n        this.s.mouse.fromIndex = this.s.mouse.toIndex; // Not great for performance, but required to keep everything in alignment\n\n        if (this.s.dt.oScroll.sX !== \"\" || this.s.dt.oScroll.sY !== \"\") {\n          this.s.dt.oInstance.fnAdjustColumnSizing(false);\n        }\n\n        this._fnRegions();\n      }\n    },\n\n    /**\n     * Finish off the mouse drag and insert the column where needed\n     *  @method  _fnMouseUp\n     *  @param   event e Mouse event\n     *  @returns void\n     *  @private\n     */\n    \"_fnMouseUp\": function _fnMouseUp(e) {\n      var that = this;\n      $(document).off('.ColReorder');\n\n      if (this.dom.drag !== null) {\n        /* Remove the guide elements */\n        this.dom.drag.remove();\n        this.dom.pointer.remove();\n        this.dom.drag = null;\n        this.dom.pointer = null;\n        /* Actually do the reorder */\n\n        this.s.dt.oInstance.fnColReorder(this.s.mouse.fromIndex, this.s.mouse.toIndex, true);\n\n        this._fnSetColumnIndexes();\n        /* When scrolling we need to recalculate the column sizes to allow for the shift */\n\n\n        if (this.s.dt.oScroll.sX !== \"\" || this.s.dt.oScroll.sY !== \"\") {\n          this.s.dt.oInstance.fnAdjustColumnSizing(false);\n        }\n        /* Save the state */\n\n\n        this.s.dt.oInstance.oApi._fnSaveState(this.s.dt);\n\n        if (this.s.reorderCallback !== null) {\n          this.s.reorderCallback.call(this);\n        }\n      }\n    },\n\n    /**\n     * Calculate a cached array with the points of the column inserts, and the\n     * 'to' points\n     *  @method  _fnRegions\n     *  @returns void\n     *  @private\n     */\n    \"_fnRegions\": function _fnRegions() {\n      var aoColumns = this.s.dt.aoColumns;\n      this.s.aoTargets.splice(0, this.s.aoTargets.length);\n      this.s.aoTargets.push({\n        \"x\": $(this.s.dt.nTable).offset().left,\n        \"to\": 0\n      });\n      var iToPoint = 0;\n      var total = this.s.aoTargets[0].x;\n\n      for (var i = 0, iLen = aoColumns.length; i < iLen; i++) {\n        /* For the column / header in question, we want it's position to remain the same if the\n         * position is just to it's immediate left or right, so we only increment the counter for\n         * other columns\n         */\n        if (i != this.s.mouse.fromIndex) {\n          iToPoint++;\n        }\n\n        if (aoColumns[i].bVisible && aoColumns[i].nTh.style.display !== 'none') {\n          total += $(aoColumns[i].nTh).outerWidth();\n          this.s.aoTargets.push({\n            \"x\": total,\n            \"to\": iToPoint\n          });\n        }\n      }\n      /* Disallow columns for being reordered by drag and drop, counting right to left */\n\n\n      if (this.s.fixedRight !== 0) {\n        this.s.aoTargets.splice(this.s.aoTargets.length - this.s.fixedRight);\n      }\n      /* Disallow columns for being reordered by drag and drop, counting left to right */\n\n\n      if (this.s.fixed !== 0) {\n        this.s.aoTargets.splice(0, this.s.fixed);\n      }\n    },\n\n    /**\n     * Copy the TH element that is being drags so the user has the idea that they are actually\n     * moving it around the page.\n     *  @method  _fnCreateDragNode\n     *  @returns void\n     *  @private\n     */\n    \"_fnCreateDragNode\": function _fnCreateDragNode() {\n      var scrolling = this.s.dt.oScroll.sX !== \"\" || this.s.dt.oScroll.sY !== \"\";\n      var origCell = this.s.dt.aoColumns[this.s.mouse.targetIndex].nTh;\n      var origTr = origCell.parentNode;\n      var origThead = origTr.parentNode;\n      var origTable = origThead.parentNode;\n      var cloneCell = $(origCell).clone(); // This is a slightly odd combination of jQuery and DOM, but it is the\n      // fastest and least resource intensive way I could think of cloning\n      // the table with just a single header cell in it.\n\n      this.dom.drag = $(origTable.cloneNode(false)).addClass('DTCR_clonedTable').append($(origThead.cloneNode(false)).append($(origTr.cloneNode(false)).append(cloneCell[0]))).css({\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: $(origCell).outerWidth(),\n        height: $(origCell).outerHeight()\n      }).appendTo('body');\n      this.dom.pointer = $('<div></div>').addClass('DTCR_pointer').css({\n        position: 'absolute',\n        top: scrolling ? $('div.dataTables_scroll', this.s.dt.nTableWrapper).offset().top : $(this.s.dt.nTable).offset().top,\n        height: scrolling ? $('div.dataTables_scroll', this.s.dt.nTableWrapper).height() : $(this.s.dt.nTable).height()\n      }).appendTo('body');\n    },\n\n    /**\n     * Add a data attribute to the column headers, so we know the index of\n     * the row to be reordered. This allows fast detection of the index, and\n     * for this plug-in to work with FixedHeader which clones the nodes.\n     *  @private\n     */\n    \"_fnSetColumnIndexes\": function _fnSetColumnIndexes() {\n      $.each(this.s.dt.aoColumns, function (i, column) {\n        $(column.nTh).attr('data-column-index', i);\n      });\n    },\n\n    /**\n     * Get cursor position regardless of mouse or touch input\n     * @param  {Event}  e    jQuery Event\n     * @param  {string} prop Property to get\n     * @return {number}      Value\n     */\n    _fnCursorPosition: function _fnCursorPosition(e, prop) {\n      if (e.type.indexOf('touch') !== -1) {\n        return e.originalEvent.touches[0][prop];\n      }\n\n      return e[prop];\n    }\n  });\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * Static parameters\n   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n  /**\n   * ColReorder default settings for initialisation\n   *  @namespace\n   *  @static\n   */\n\n  ColReorder.defaults = {\n    /**\n     * Predefined ordering for the columns that will be applied automatically\n     * on initialisation. If not specified then the order that the columns are\n     * found to be in the HTML is the order used.\n     *  @type array\n     *  @default null\n     *  @static\n     */\n    aiOrder: null,\n\n    /**\n     * ColReorder enable on initialisation\n     *  @type boolean\n     *  @default true\n     *  @static\n     */\n    bEnable: true,\n\n    /**\n     * Redraw the table's column ordering as the end user draws the column\n     * (`true`) or wait until the mouse is released (`false` - default). Note\n     * that this will perform a redraw on each reordering, which involves an\n     * Ajax request each time if you are using server-side processing in\n     * DataTables.\n     *  @type boolean\n     *  @default false\n     *  @static\n     */\n    bRealtime: true,\n\n    /**\n     * Indicate how many columns should be fixed in position (counting from the\n     * left). This will typically be 1 if used, but can be as high as you like.\n     *  @type int\n     *  @default 0\n     *  @static\n     */\n    iFixedColumnsLeft: 0,\n\n    /**\n     * As `iFixedColumnsRight` but counting from the right.\n     *  @type int\n     *  @default 0\n     *  @static\n     */\n    iFixedColumnsRight: 0,\n\n    /**\n     * Callback function that is fired when columns are reordered. The `column-\n     * reorder` event is preferred over this callback\n     *  @type function():void\n     *  @default null\n     *  @static\n     */\n    fnReorderCallback: null\n  };\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * Constants\n   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\n  /**\n   * ColReorder version\n   *  @constant  version\n   *  @type      String\n   *  @default   As code\n   */\n\n  ColReorder.version = \"1.5.1\";\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * DataTables interfaces\n   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n  // Expose\n\n  $.fn.dataTable.ColReorder = ColReorder;\n  $.fn.DataTable.ColReorder = ColReorder; // Register a new feature with DataTables\n\n  if (typeof $.fn.dataTable == \"function\" && typeof $.fn.dataTableExt.fnVersionCheck == \"function\" && $.fn.dataTableExt.fnVersionCheck('1.10.8')) {\n    $.fn.dataTableExt.aoFeatures.push({\n      \"fnInit\": function fnInit(settings) {\n        var table = settings.oInstance;\n\n        if (!settings._colReorder) {\n          var dtInit = settings.oInit;\n          var opts = dtInit.colReorder || dtInit.oColReorder || {};\n          new ColReorder(settings, opts);\n        } else {\n          table.oApi._fnLog(settings, 1, \"ColReorder attempted to initialise twice. Ignoring second\");\n        }\n\n        return null;\n        /* No node for DataTables to insert */\n      },\n      \"cFeature\": \"R\",\n      \"sFeature\": \"ColReorder\"\n    });\n  } else {\n    alert(\"Warning: ColReorder requires DataTables 1.10.8 or greater - www.datatables.net/download\");\n  } // Attach a listener to the document which listens for DataTables initialisation\n  // events so we can automatically initialise\n\n\n  $(document).on('preInit.dt.colReorder', function (e, settings) {\n    if (e.namespace !== 'dt') {\n      return;\n    }\n\n    var init = settings.oInit.colReorder;\n    var defaults = DataTable.defaults.colReorder;\n\n    if (init || defaults) {\n      var opts = $.extend({}, init, defaults);\n\n      if (init !== false) {\n        new ColReorder(settings, opts);\n      }\n    }\n  }); // API augmentation\n\n  $.fn.dataTable.Api.register('colReorder.reset()', function () {\n    return this.iterator('table', function (ctx) {\n      ctx._colReorder.fnReset();\n    });\n  });\n  $.fn.dataTable.Api.register('colReorder.order()', function (set, original) {\n    if (set) {\n      return this.iterator('table', function (ctx) {\n        ctx._colReorder.fnOrder(set, original);\n      });\n    }\n\n    return this.context.length ? this.context[0]._colReorder.fnOrder() : null;\n  });\n  $.fn.dataTable.Api.register('colReorder.transpose()', function (idx, dir) {\n    return this.context.length && this.context[0]._colReorder ? this.context[0]._colReorder.fnTranspose(idx, dir) : idx;\n  });\n  $.fn.dataTable.Api.register('colReorder.move()', function (from, to, drop, invalidateRows) {\n    if (this.context.length) {\n      this.context[0]._colReorder.s.dt.oInstance.fnColReorder(from, to, drop, invalidateRows);\n    }\n\n    return this;\n  });\n  $.fn.dataTable.Api.register('colReorder.enable()', function (flag) {\n    return this.iterator('table', function (ctx) {\n      if (ctx._colReorder) {\n        ctx._colReorder.fnEnable(flag);\n      }\n    });\n  });\n  $.fn.dataTable.Api.register('colReorder.disable()', function () {\n    return this.iterator('table', function (ctx) {\n      if (ctx._colReorder) {\n        ctx._colReorder.fnDisable();\n      }\n    });\n  });\n  return ColReorder;\n});","/*!\n * Print button for Buttons and DataTables.\n * 2016 SpryMedia Ltd - datatables.net/license\n */\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['jquery', 'datatables.net', 'datatables.net-buttons'], function ($) {\n      return factory($, window, document);\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = function (root, $) {\n      if (!root) {\n        root = window;\n      }\n\n      if (!$ || !$.fn.dataTable) {\n        $ = require('datatables.net')(root, $).$;\n      }\n\n      if (!$.fn.dataTable.Buttons) {\n        require('datatables.net-buttons')(root, $);\n      }\n\n      return factory($, root, root.document);\n    };\n  } else {\n    // Browser\n    factory(jQuery, window, document);\n  }\n})(function ($, window, document, undefined) {\n  'use strict';\n\n  var DataTable = $.fn.dataTable;\n\n  var _link = document.createElement('a');\n  /**\n   * Clone link and style tags, taking into account the need to change the source\n   * path.\n   *\n   * @param  {node}     el Element to convert\n   */\n\n\n  var _styleToAbs = function _styleToAbs(el) {\n    var url;\n    var clone = $(el).clone()[0];\n    var linkHost;\n\n    if (clone.nodeName.toLowerCase() === 'link') {\n      clone.href = _relToAbs(clone.href);\n    }\n\n    return clone.outerHTML;\n  };\n  /**\n   * Convert a URL from a relative to an absolute address so it will work\n   * correctly in the popup window which has no base URL.\n   *\n   * @param  {string} href URL\n   */\n\n\n  var _relToAbs = function _relToAbs(href) {\n    // Assign to a link on the original page so the browser will do all the\n    // hard work of figuring out where the file actually is\n    _link.href = href;\n    var linkHost = _link.host; // IE doesn't have a trailing slash on the host\n    // Chrome has it on the pathname\n\n    if (linkHost.indexOf('/') === -1 && _link.pathname.indexOf('/') !== 0) {\n      linkHost += '/';\n    }\n\n    return _link.protocol + \"//\" + linkHost + _link.pathname + _link.search;\n  };\n\n  DataTable.ext.buttons.print = {\n    className: 'buttons-print',\n    text: function text(dt) {\n      return dt.i18n('buttons.print', 'Print');\n    },\n    action: function action(e, dt, button, config) {\n      var data = dt.buttons.exportData($.extend({\n        decodeEntities: false\n      }, config.exportOptions) // XSS protection\n      );\n      var exportInfo = dt.buttons.exportInfo(config);\n      var columnClasses = dt.columns(config.exportOptions.columns).flatten().map(function (idx) {\n        return dt.settings()[0].aoColumns[dt.column(idx).index()].sClass;\n      }).toArray();\n\n      var addRow = function addRow(d, tag) {\n        var str = '<tr>';\n\n        for (var i = 0, ien = d.length; i < ien; i++) {\n          // null and undefined aren't useful in the print output\n          var dataOut = d[i] === null || d[i] === undefined ? '' : d[i];\n          var classAttr = columnClasses[i] ? 'class=\"' + columnClasses[i] + '\"' : '';\n          str += '<' + tag + ' ' + classAttr + '>' + dataOut + '</' + tag + '>';\n        }\n\n        return str + '</tr>';\n      }; // Construct a table for printing\n\n\n      var html = '<table class=\"' + dt.table().node().className + '\">';\n\n      if (config.header) {\n        html += '<thead>' + addRow(data.header, 'th') + '</thead>';\n      }\n\n      html += '<tbody>';\n\n      for (var i = 0, ien = data.body.length; i < ien; i++) {\n        html += addRow(data.body[i], 'td');\n      }\n\n      html += '</tbody>';\n\n      if (config.footer && data.footer) {\n        html += '<tfoot>' + addRow(data.footer, 'th') + '</tfoot>';\n      }\n\n      html += '</table>'; // Open a new window for the printable table\n\n      var win = window.open('', '');\n      win.document.close(); // Inject the title and also a copy of the style and link tags from this\n      // document so the table can retain its base styling. Note that we have\n      // to use string manipulation as IE won't allow elements to be created\n      // in the host document and then appended to the new window.\n\n      var head = '<title>' + exportInfo.title + '</title>';\n      $('style, link').each(function () {\n        head += _styleToAbs(this);\n      });\n\n      try {\n        win.document.head.innerHTML = head; // Work around for Edge\n      } catch (e) {\n        $(win.document.head).html(head); // Old IE\n      } // Inject the table and other surrounding information\n\n\n      win.document.body.innerHTML = '<h1>' + exportInfo.title + '</h1>' + '<div>' + (exportInfo.messageTop || '') + '</div>' + html + '<div>' + (exportInfo.messageBottom || '') + '</div>';\n      $(win.document.body).addClass('dt-print-view');\n      $('img', win.document.body).each(function (i, img) {\n        img.setAttribute('src', _relToAbs(img.getAttribute('src')));\n      });\n\n      if (config.customize) {\n        config.customize(win, config, dt);\n      } // Allow stylesheets time to load\n\n\n      var autoPrint = function autoPrint() {\n        if (config.autoPrint) {\n          win.print(); // blocking - so close will not\n\n          win.close(); // execute until this is done\n        }\n      };\n\n      if (navigator.userAgent.match(/Trident\\/\\d.\\d/)) {\n        // IE needs to call this without a setTimeout\n        autoPrint();\n      } else {\n        win.setTimeout(autoPrint, 1000);\n      }\n    },\n    title: '*',\n    messageTop: '*',\n    messageBottom: '*',\n    exportOptions: {},\n    header: true,\n    footer: false,\n    autoPrint: true,\n    customize: null\n  };\n  return DataTable.Buttons;\n});","/*! Bootstrap integration for DataTables' Responsive\n * ©2015-2016 SpryMedia Ltd - datatables.net/license\n */\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['jquery', 'datatables.net-bs', 'datatables.net-responsive'], function ($) {\n      return factory($, window, document);\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = function (root, $) {\n      if (!root) {\n        root = window;\n      }\n\n      if (!$ || !$.fn.dataTable) {\n        $ = require('datatables.net-bs')(root, $).$;\n      }\n\n      if (!$.fn.dataTable.Responsive) {\n        require('datatables.net-responsive')(root, $);\n      }\n\n      return factory($, root, root.document);\n    };\n  } else {\n    // Browser\n    factory(jQuery, window, document);\n  }\n})(function ($, window, document, undefined) {\n  'use strict';\n\n  var DataTable = $.fn.dataTable;\n  var _display = DataTable.Responsive.display;\n  var _original = _display.modal;\n\n  var _modal = $('<div class=\"modal fade dtr-bs-modal\" role=\"dialog\">' + '<div class=\"modal-dialog\" role=\"document\">' + '<div class=\"modal-content\">' + '<div class=\"modal-header\">' + '<button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>' + '</div>' + '<div class=\"modal-body\"/>' + '</div>' + '</div>' + '</div>');\n\n  _display.modal = function (options) {\n    return function (row, update, render) {\n      if (!$.fn.modal) {\n        _original(row, update, render);\n      } else {\n        if (!update) {\n          if (options && options.header) {\n            var header = _modal.find('div.modal-header');\n\n            var button = header.find('button').detach();\n            header.empty().append('<h4 class=\"modal-title\">' + options.header(row) + '</h4>').prepend(button);\n          }\n\n          _modal.find('div.modal-body').empty().append(render());\n\n          _modal.appendTo('body').modal();\n        }\n      }\n    };\n  };\n\n  return DataTable.Responsive;\n});","/*! Bootstrap 3 styling wrapper for Select\n * ©2018 SpryMedia Ltd - datatables.net/license\n */\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['jquery', 'datatables.net-bs', 'datatables.net-select'], function ($) {\n      return factory($, window, document);\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = function (root, $) {\n      if (!root) {\n        root = window;\n      }\n\n      if (!$ || !$.fn.dataTable) {\n        $ = require('datatables.net-bs')(root, $).$;\n      }\n\n      if (!$.fn.dataTable.select) {\n        require('datatables.net-select')(root, $);\n      }\n\n      return factory($, root, root.document);\n    };\n  } else {\n    // Browser\n    factory(jQuery, window, document);\n  }\n})(function ($, window, document, undefined) {\n  return $.fn.dataTable;\n});","/*! Responsive 2.2.3\n * 2014-2018 SpryMedia Ltd - datatables.net/license\n */\n\n/**\n * @summary     Responsive\n * @description Responsive tables plug-in for DataTables\n * @version     2.2.3\n * @file        dataTables.responsive.js\n * @author      SpryMedia Ltd (www.sprymedia.co.uk)\n * @contact     www.sprymedia.co.uk/contact\n * @copyright   Copyright 2014-2018 SpryMedia Ltd.\n *\n * This source file is free software, available under the following license:\n *   MIT license - http://datatables.net/license/mit\n *\n * This source file is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.\n *\n * For details please refer to: http://www.datatables.net\n */\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['jquery', 'datatables.net'], function ($) {\n      return factory($, window, document);\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = function (root, $) {\n      if (!root) {\n        root = window;\n      }\n\n      if (!$ || !$.fn.dataTable) {\n        $ = require('datatables.net')(root, $).$;\n      }\n\n      return factory($, root, root.document);\n    };\n  } else {\n    // Browser\n    factory(jQuery, window, document);\n  }\n})(function ($, window, document, undefined) {\n  'use strict';\n\n  var DataTable = $.fn.dataTable;\n  /**\n   * Responsive is a plug-in for the DataTables library that makes use of\n   * DataTables' ability to change the visibility of columns, changing the\n   * visibility of columns so the displayed columns fit into the table container.\n   * The end result is that complex tables will be dynamically adjusted to fit\n   * into the viewport, be it on a desktop, tablet or mobile browser.\n   *\n   * Responsive for DataTables has two modes of operation, which can used\n   * individually or combined:\n   *\n   * * Class name based control - columns assigned class names that match the\n   *   breakpoint logic can be shown / hidden as required for each breakpoint.\n   * * Automatic control - columns are automatically hidden when there is no\n   *   room left to display them. Columns removed from the right.\n   *\n   * In additional to column visibility control, Responsive also has built into\n   * options to use DataTables' child row display to show / hide the information\n   * from the table that has been hidden. There are also two modes of operation\n   * for this child row display:\n   *\n   * * Inline - when the control element that the user can use to show / hide\n   *   child rows is displayed inside the first column of the table.\n   * * Column - where a whole column is dedicated to be the show / hide control.\n   *\n   * Initialisation of Responsive is performed by:\n   *\n   * * Adding the class `responsive` or `dt-responsive` to the table. In this case\n   *   Responsive will automatically be initialised with the default configuration\n   *   options when the DataTable is created.\n   * * Using the `responsive` option in the DataTables configuration options. This\n   *   can also be used to specify the configuration options, or simply set to\n   *   `true` to use the defaults.\n   *\n   *  @class\n   *  @param {object} settings DataTables settings object for the host table\n   *  @param {object} [opts] Configuration options\n   *  @requires jQuery 1.7+\n   *  @requires DataTables 1.10.3+\n   *\n   *  @example\n   *      $('#example').DataTable( {\n   *        responsive: true\n   *      } );\n   *    } );\n   */\n\n  var Responsive = function Responsive(settings, opts) {\n    // Sanity check that we are using DataTables 1.10 or newer\n    if (!DataTable.versionCheck || !DataTable.versionCheck('1.10.10')) {\n      throw 'DataTables Responsive requires DataTables 1.10.10 or newer';\n    }\n\n    this.s = {\n      dt: new DataTable.Api(settings),\n      columns: [],\n      current: []\n    }; // Check if responsive has already been initialised on this table\n\n    if (this.s.dt.settings()[0].responsive) {\n      return;\n    } // details is an object, but for simplicity the user can give it as a string\n    // or a boolean\n\n\n    if (opts && typeof opts.details === 'string') {\n      opts.details = {\n        type: opts.details\n      };\n    } else if (opts && opts.details === false) {\n      opts.details = {\n        type: false\n      };\n    } else if (opts && opts.details === true) {\n      opts.details = {\n        type: 'inline'\n      };\n    }\n\n    this.c = $.extend(true, {}, Responsive.defaults, DataTable.defaults.responsive, opts);\n    settings.responsive = this;\n\n    this._constructor();\n  };\n\n  $.extend(Responsive.prototype, {\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Constructor\n     */\n\n    /**\n     * Initialise the Responsive instance\n     *\n     * @private\n     */\n    _constructor: function _constructor() {\n      var that = this;\n      var dt = this.s.dt;\n      var dtPrivateSettings = dt.settings()[0];\n      var oldWindowWidth = $(window).width();\n      dt.settings()[0]._responsive = this; // Use DataTables' throttle function to avoid processor thrashing on\n      // resize\n\n      $(window).on('resize.dtr orientationchange.dtr', DataTable.util.throttle(function () {\n        // iOS has a bug whereby resize can fire when only scrolling\n        // See: http://stackoverflow.com/questions/8898412\n        var width = $(window).width();\n\n        if (width !== oldWindowWidth) {\n          that._resize();\n\n          oldWindowWidth = width;\n        }\n      })); // DataTables doesn't currently trigger an event when a row is added, so\n      // we need to hook into its private API to enforce the hidden rows when\n      // new data is added\n\n      dtPrivateSettings.oApi._fnCallbackReg(dtPrivateSettings, 'aoRowCreatedCallback', function (tr, data, idx) {\n        if ($.inArray(false, that.s.current) !== -1) {\n          $('>td, >th', tr).each(function (i) {\n            var idx = dt.column.index('toData', i);\n\n            if (that.s.current[idx] === false) {\n              $(this).css('display', 'none');\n            }\n          });\n        }\n      }); // Destroy event handler\n\n\n      dt.on('destroy.dtr', function () {\n        dt.off('.dtr');\n        $(dt.table().body()).off('.dtr');\n        $(window).off('resize.dtr orientationchange.dtr'); // Restore the columns that we've hidden\n\n        $.each(that.s.current, function (i, val) {\n          if (val === false) {\n            that._setColumnVis(i, true);\n          }\n        });\n      }); // Reorder the breakpoints array here in case they have been added out\n      // of order\n\n      this.c.breakpoints.sort(function (a, b) {\n        return a.width < b.width ? 1 : a.width > b.width ? -1 : 0;\n      });\n\n      this._classLogic();\n\n      this._resizeAuto(); // Details handler\n\n\n      var details = this.c.details;\n\n      if (details.type !== false) {\n        that._detailsInit(); // DataTables will trigger this event on every column it shows and\n        // hides individually\n\n\n        dt.on('column-visibility.dtr', function () {\n          // Use a small debounce to allow multiple columns to be set together\n          if (that._timer) {\n            clearTimeout(that._timer);\n          }\n\n          that._timer = setTimeout(function () {\n            that._timer = null;\n\n            that._classLogic();\n\n            that._resizeAuto();\n\n            that._resize();\n\n            that._redrawChildren();\n          }, 100);\n        }); // Redraw the details box on each draw which will happen if the data\n        // has changed. This is used until DataTables implements a native\n        // `updated` event for rows\n\n        dt.on('draw.dtr', function () {\n          that._redrawChildren();\n        });\n        $(dt.table().node()).addClass('dtr-' + details.type);\n      }\n\n      dt.on('column-reorder.dtr', function (e, settings, details) {\n        that._classLogic();\n\n        that._resizeAuto();\n\n        that._resize();\n      }); // Change in column sizes means we need to calc\n\n      dt.on('column-sizing.dtr', function () {\n        that._resizeAuto();\n\n        that._resize();\n      }); // On Ajax reload we want to reopen any child rows which are displayed\n      // by responsive\n\n      dt.on('preXhr.dtr', function () {\n        var rowIds = [];\n        dt.rows().every(function () {\n          if (this.child.isShown()) {\n            rowIds.push(this.id(true));\n          }\n        });\n        dt.one('draw.dtr', function () {\n          that._resizeAuto();\n\n          that._resize();\n\n          dt.rows(rowIds).every(function () {\n            that._detailsDisplay(this, false);\n          });\n        });\n      });\n      dt.on('init.dtr', function (e, settings, details) {\n        that._resizeAuto();\n\n        that._resize(); // If columns were hidden, then DataTables needs to adjust the\n        // column sizing\n\n\n        if ($.inArray(false, that.s.current)) {\n          dt.columns.adjust();\n        }\n      }); // First pass - draw the table for the current viewport size\n\n      this._resize();\n    },\n\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Private methods\n     */\n\n    /**\n     * Calculate the visibility for the columns in a table for a given\n     * breakpoint. The result is pre-determined based on the class logic if\n     * class names are used to control all columns, but the width of the table\n     * is also used if there are columns which are to be automatically shown\n     * and hidden.\n     *\n     * @param  {string} breakpoint Breakpoint name to use for the calculation\n     * @return {array} Array of boolean values initiating the visibility of each\n     *   column.\n     *  @private\n     */\n    _columnsVisiblity: function _columnsVisiblity(breakpoint) {\n      var dt = this.s.dt;\n      var columns = this.s.columns;\n      var i, ien; // Create an array that defines the column ordering based first on the\n      // column's priority, and secondly the column index. This allows the\n      // columns to be removed from the right if the priority matches\n\n      var order = columns.map(function (col, idx) {\n        return {\n          columnIdx: idx,\n          priority: col.priority\n        };\n      }).sort(function (a, b) {\n        if (a.priority !== b.priority) {\n          return a.priority - b.priority;\n        }\n\n        return a.columnIdx - b.columnIdx;\n      }); // Class logic - determine which columns are in this breakpoint based\n      // on the classes. If no class control (i.e. `auto`) then `-` is used\n      // to indicate this to the rest of the function\n\n      var display = $.map(columns, function (col, i) {\n        if (dt.column(i).visible() === false) {\n          return 'not-visible';\n        }\n\n        return col.auto && col.minWidth === null ? false : col.auto === true ? '-' : $.inArray(breakpoint, col.includeIn) !== -1;\n      }); // Auto column control - first pass: how much width is taken by the\n      // ones that must be included from the non-auto columns\n\n      var requiredWidth = 0;\n\n      for (i = 0, ien = display.length; i < ien; i++) {\n        if (display[i] === true) {\n          requiredWidth += columns[i].minWidth;\n        }\n      } // Second pass, use up any remaining width for other columns. For\n      // scrolling tables we need to subtract the width of the scrollbar. It\n      // may not be requires which makes this sub-optimal, but it would\n      // require another full redraw to make complete use of those extra few\n      // pixels\n\n\n      var scrolling = dt.settings()[0].oScroll;\n      var bar = scrolling.sY || scrolling.sX ? scrolling.iBarWidth : 0;\n      var widthAvailable = dt.table().container().offsetWidth - bar;\n      var usedWidth = widthAvailable - requiredWidth; // Control column needs to always be included. This makes it sub-\n      // optimal in terms of using the available with, but to stop layout\n      // thrashing or overflow. Also we need to account for the control column\n      // width first so we know how much width is available for the other\n      // columns, since the control column might not be the first one shown\n\n      for (i = 0, ien = display.length; i < ien; i++) {\n        if (columns[i].control) {\n          usedWidth -= columns[i].minWidth;\n        }\n      } // Allow columns to be shown (counting by priority and then right to\n      // left) until we run out of room\n\n\n      var empty = false;\n\n      for (i = 0, ien = order.length; i < ien; i++) {\n        var colIdx = order[i].columnIdx;\n\n        if (display[colIdx] === '-' && !columns[colIdx].control && columns[colIdx].minWidth) {\n          // Once we've found a column that won't fit we don't let any\n          // others display either, or columns might disappear in the\n          // middle of the table\n          if (empty || usedWidth - columns[colIdx].minWidth < 0) {\n            empty = true;\n            display[colIdx] = false;\n          } else {\n            display[colIdx] = true;\n          }\n\n          usedWidth -= columns[colIdx].minWidth;\n        }\n      } // Determine if the 'control' column should be shown (if there is one).\n      // This is the case when there is a hidden column (that is not the\n      // control column). The two loops look inefficient here, but they are\n      // trivial and will fly through. We need to know the outcome from the\n      // first , before the action in the second can be taken\n\n\n      var showControl = false;\n\n      for (i = 0, ien = columns.length; i < ien; i++) {\n        if (!columns[i].control && !columns[i].never && display[i] === false) {\n          showControl = true;\n          break;\n        }\n      }\n\n      for (i = 0, ien = columns.length; i < ien; i++) {\n        if (columns[i].control) {\n          display[i] = showControl;\n        } // Replace not visible string with false from the control column detection above\n\n\n        if (display[i] === 'not-visible') {\n          display[i] = false;\n        }\n      } // Finally we need to make sure that there is at least one column that\n      // is visible\n\n\n      if ($.inArray(true, display) === -1) {\n        display[0] = true;\n      }\n\n      return display;\n    },\n\n    /**\n     * Create the internal `columns` array with information about the columns\n     * for the table. This includes determining which breakpoints the column\n     * will appear in, based upon class names in the column, which makes up the\n     * vast majority of this method.\n     *\n     * @private\n     */\n    _classLogic: function _classLogic() {\n      var that = this;\n      var calc = {};\n      var breakpoints = this.c.breakpoints;\n      var dt = this.s.dt;\n      var columns = dt.columns().eq(0).map(function (i) {\n        var column = this.column(i);\n        var className = column.header().className;\n        var priority = dt.settings()[0].aoColumns[i].responsivePriority;\n\n        if (priority === undefined) {\n          var dataPriority = $(column.header()).data('priority');\n          priority = dataPriority !== undefined ? dataPriority * 1 : 10000;\n        }\n\n        return {\n          className: className,\n          includeIn: [],\n          auto: false,\n          control: false,\n          never: className.match(/\\bnever\\b/) ? true : false,\n          priority: priority\n        };\n      }); // Simply add a breakpoint to `includeIn` array, ensuring that there are\n      // no duplicates\n\n      var add = function add(colIdx, name) {\n        var includeIn = columns[colIdx].includeIn;\n\n        if ($.inArray(name, includeIn) === -1) {\n          includeIn.push(name);\n        }\n      };\n\n      var column = function column(colIdx, name, operator, matched) {\n        var size, i, ien;\n\n        if (!operator) {\n          columns[colIdx].includeIn.push(name);\n        } else if (operator === 'max-') {\n          // Add this breakpoint and all smaller\n          size = that._find(name).width;\n\n          for (i = 0, ien = breakpoints.length; i < ien; i++) {\n            if (breakpoints[i].width <= size) {\n              add(colIdx, breakpoints[i].name);\n            }\n          }\n        } else if (operator === 'min-') {\n          // Add this breakpoint and all larger\n          size = that._find(name).width;\n\n          for (i = 0, ien = breakpoints.length; i < ien; i++) {\n            if (breakpoints[i].width >= size) {\n              add(colIdx, breakpoints[i].name);\n            }\n          }\n        } else if (operator === 'not-') {\n          // Add all but this breakpoint\n          for (i = 0, ien = breakpoints.length; i < ien; i++) {\n            if (breakpoints[i].name.indexOf(matched) === -1) {\n              add(colIdx, breakpoints[i].name);\n            }\n          }\n        }\n      }; // Loop over each column and determine if it has a responsive control\n      // class\n\n\n      columns.each(function (col, i) {\n        var classNames = col.className.split(' ');\n        var hasClass = false; // Split the class name up so multiple rules can be applied if needed\n\n        for (var k = 0, ken = classNames.length; k < ken; k++) {\n          var className = $.trim(classNames[k]);\n\n          if (className === 'all') {\n            // Include in all\n            hasClass = true;\n            col.includeIn = $.map(breakpoints, function (a) {\n              return a.name;\n            });\n            return;\n          } else if (className === 'none' || col.never) {\n            // Include in none (default) and no auto\n            hasClass = true;\n            return;\n          } else if (className === 'control') {\n            // Special column that is only visible, when one of the other\n            // columns is hidden. This is used for the details control\n            hasClass = true;\n            col.control = true;\n            return;\n          }\n\n          $.each(breakpoints, function (j, breakpoint) {\n            // Does this column have a class that matches this breakpoint?\n            var brokenPoint = breakpoint.name.split('-');\n            var re = new RegExp('(min\\\\-|max\\\\-|not\\\\-)?(' + brokenPoint[0] + ')(\\\\-[_a-zA-Z0-9])?');\n            var match = className.match(re);\n\n            if (match) {\n              hasClass = true;\n\n              if (match[2] === brokenPoint[0] && match[3] === '-' + brokenPoint[1]) {\n                // Class name matches breakpoint name fully\n                column(i, breakpoint.name, match[1], match[2] + match[3]);\n              } else if (match[2] === brokenPoint[0] && !match[3]) {\n                // Class name matched primary breakpoint name with no qualifier\n                column(i, breakpoint.name, match[1], match[2]);\n              }\n            }\n          });\n        } // If there was no control class, then automatic sizing is used\n\n\n        if (!hasClass) {\n          col.auto = true;\n        }\n      });\n      this.s.columns = columns;\n    },\n\n    /**\n     * Show the details for the child row\n     *\n     * @param  {DataTables.Api} row    API instance for the row\n     * @param  {boolean}        update Update flag\n     * @private\n     */\n    _detailsDisplay: function _detailsDisplay(row, update) {\n      var that = this;\n      var dt = this.s.dt;\n      var details = this.c.details;\n\n      if (details && details.type !== false) {\n        var res = details.display(row, update, function () {\n          return details.renderer(dt, row[0], that._detailsObj(row[0]));\n        });\n\n        if (res === true || res === false) {\n          $(dt.table().node()).triggerHandler('responsive-display.dt', [dt, row, res, update]);\n        }\n      }\n    },\n\n    /**\n     * Initialisation for the details handler\n     *\n     * @private\n     */\n    _detailsInit: function _detailsInit() {\n      var that = this;\n      var dt = this.s.dt;\n      var details = this.c.details; // The inline type always uses the first child as the target\n\n      if (details.type === 'inline') {\n        details.target = 'td:first-child, th:first-child';\n      } // Keyboard accessibility\n\n\n      dt.on('draw.dtr', function () {\n        that._tabIndexes();\n      });\n\n      that._tabIndexes(); // Initial draw has already happened\n\n\n      $(dt.table().body()).on('keyup.dtr', 'td, th', function (e) {\n        if (e.keyCode === 13 && $(this).data('dtr-keyboard')) {\n          $(this).click();\n        }\n      }); // type.target can be a string jQuery selector or a column index\n\n      var target = details.target;\n      var selector = typeof target === 'string' ? target : 'td, th'; // Click handler to show / hide the details rows when they are available\n\n      $(dt.table().body()).on('click.dtr mousedown.dtr mouseup.dtr', selector, function (e) {\n        // If the table is not collapsed (i.e. there is no hidden columns)\n        // then take no action\n        if (!$(dt.table().node()).hasClass('collapsed')) {\n          return;\n        } // Check that the row is actually a DataTable's controlled node\n\n\n        if ($.inArray($(this).closest('tr').get(0), dt.rows().nodes().toArray()) === -1) {\n          return;\n        } // For column index, we determine if we should act or not in the\n        // handler - otherwise it is already okay\n\n\n        if (typeof target === 'number') {\n          var targetIdx = target < 0 ? dt.columns().eq(0).length + target : target;\n\n          if (dt.cell(this).index().column !== targetIdx) {\n            return;\n          }\n        } // $().closest() includes itself in its check\n\n\n        var row = dt.row($(this).closest('tr')); // Check event type to do an action\n\n        if (e.type === 'click') {\n          // The renderer is given as a function so the caller can execute it\n          // only when they need (i.e. if hiding there is no point is running\n          // the renderer)\n          that._detailsDisplay(row, false);\n        } else if (e.type === 'mousedown') {\n          // For mouse users, prevent the focus ring from showing\n          $(this).css('outline', 'none');\n        } else if (e.type === 'mouseup') {\n          // And then re-allow at the end of the click\n          $(this).blur().css('outline', '');\n        }\n      });\n    },\n\n    /**\n     * Get the details to pass to a renderer for a row\n     * @param  {int} rowIdx Row index\n     * @private\n     */\n    _detailsObj: function _detailsObj(rowIdx) {\n      var that = this;\n      var dt = this.s.dt;\n      return $.map(this.s.columns, function (col, i) {\n        // Never and control columns should not be passed to the renderer\n        if (col.never || col.control) {\n          return;\n        }\n\n        return {\n          title: dt.settings()[0].aoColumns[i].sTitle,\n          data: dt.cell(rowIdx, i).render(that.c.orthogonal),\n          hidden: dt.column(i).visible() && !that.s.current[i],\n          columnIndex: i,\n          rowIndex: rowIdx\n        };\n      });\n    },\n\n    /**\n     * Find a breakpoint object from a name\n     *\n     * @param  {string} name Breakpoint name to find\n     * @return {object}      Breakpoint description object\n     * @private\n     */\n    _find: function _find(name) {\n      var breakpoints = this.c.breakpoints;\n\n      for (var i = 0, ien = breakpoints.length; i < ien; i++) {\n        if (breakpoints[i].name === name) {\n          return breakpoints[i];\n        }\n      }\n    },\n\n    /**\n     * Re-create the contents of the child rows as the display has changed in\n     * some way.\n     *\n     * @private\n     */\n    _redrawChildren: function _redrawChildren() {\n      var that = this;\n      var dt = this.s.dt;\n      dt.rows({\n        page: 'current'\n      }).iterator('row', function (settings, idx) {\n        var row = dt.row(idx);\n\n        that._detailsDisplay(dt.row(idx), true);\n      });\n    },\n\n    /**\n     * Alter the table display for a resized viewport. This involves first\n     * determining what breakpoint the window currently is in, getting the\n     * column visibilities to apply and then setting them.\n     *\n     * @private\n     */\n    _resize: function _resize() {\n      var that = this;\n      var dt = this.s.dt;\n      var width = $(window).width();\n      var breakpoints = this.c.breakpoints;\n      var breakpoint = breakpoints[0].name;\n      var columns = this.s.columns;\n      var i, ien;\n      var oldVis = this.s.current.slice(); // Determine what breakpoint we are currently at\n\n      for (i = breakpoints.length - 1; i >= 0; i--) {\n        if (width <= breakpoints[i].width) {\n          breakpoint = breakpoints[i].name;\n          break;\n        }\n      } // Show the columns for that break point\n\n\n      var columnsVis = this._columnsVisiblity(breakpoint);\n\n      this.s.current = columnsVis; // Set the class before the column visibility is changed so event\n      // listeners know what the state is. Need to determine if there are\n      // any columns that are not visible but can be shown\n\n      var collapsedClass = false;\n\n      for (i = 0, ien = columns.length; i < ien; i++) {\n        if (columnsVis[i] === false && !columns[i].never && !columns[i].control && !dt.column(i).visible() === false) {\n          collapsedClass = true;\n          break;\n        }\n      }\n\n      $(dt.table().node()).toggleClass('collapsed', collapsedClass);\n      var changed = false;\n      var visible = 0;\n      dt.columns().eq(0).each(function (colIdx, i) {\n        if (columnsVis[i] === true) {\n          visible++;\n        }\n\n        if (columnsVis[i] !== oldVis[i]) {\n          changed = true;\n\n          that._setColumnVis(colIdx, columnsVis[i]);\n        }\n      });\n\n      if (changed) {\n        this._redrawChildren(); // Inform listeners of the change\n\n\n        $(dt.table().node()).trigger('responsive-resize.dt', [dt, this.s.current]); // If no records, update the \"No records\" display element\n\n        if (dt.page.info().recordsDisplay === 0) {\n          $('td', dt.table().body()).eq(0).attr('colspan', visible);\n        }\n      }\n    },\n\n    /**\n     * Determine the width of each column in the table so the auto column hiding\n     * has that information to work with. This method is never going to be 100%\n     * perfect since column widths can change slightly per page, but without\n     * seriously compromising performance this is quite effective.\n     *\n     * @private\n     */\n    _resizeAuto: function _resizeAuto() {\n      var dt = this.s.dt;\n      var columns = this.s.columns; // Are we allowed to do auto sizing?\n\n      if (!this.c.auto) {\n        return;\n      } // Are there any columns that actually need auto-sizing, or do they all\n      // have classes defined\n\n\n      if ($.inArray(true, $.map(columns, function (c) {\n        return c.auto;\n      })) === -1) {\n        return;\n      } // Need to restore all children. They will be reinstated by a re-render\n\n\n      if (!$.isEmptyObject(_childNodeStore)) {\n        $.each(_childNodeStore, function (key) {\n          var idx = key.split('-');\n\n          _childNodesRestore(dt, idx[0] * 1, idx[1] * 1);\n        });\n      } // Clone the table with the current data in it\n\n\n      var tableWidth = dt.table().node().offsetWidth;\n      var columnWidths = dt.columns;\n      var clonedTable = dt.table().node().cloneNode(false);\n      var clonedHeader = $(dt.table().header().cloneNode(false)).appendTo(clonedTable);\n      var clonedBody = $(dt.table().body()).clone(false, false).empty().appendTo(clonedTable); // use jQuery because of IE8\n      // Header\n\n      var headerCells = dt.columns().header().filter(function (idx) {\n        return dt.column(idx).visible();\n      }).to$().clone(false).css('display', 'table-cell').css('min-width', 0); // Body rows - we don't need to take account of DataTables' column\n      // visibility since we implement our own here (hence the `display` set)\n\n      $(clonedBody).append($(dt.rows({\n        page: 'current'\n      }).nodes()).clone(false)).find('th, td').css('display', ''); // Footer\n\n      var footer = dt.table().footer();\n\n      if (footer) {\n        var clonedFooter = $(footer.cloneNode(false)).appendTo(clonedTable);\n        var footerCells = dt.columns().footer().filter(function (idx) {\n          return dt.column(idx).visible();\n        }).to$().clone(false).css('display', 'table-cell');\n        $('<tr/>').append(footerCells).appendTo(clonedFooter);\n      }\n\n      $('<tr/>').append(headerCells).appendTo(clonedHeader); // In the inline case extra padding is applied to the first column to\n      // give space for the show / hide icon. We need to use this in the\n      // calculation\n\n      if (this.c.details.type === 'inline') {\n        $(clonedTable).addClass('dtr-inline collapsed');\n      } // It is unsafe to insert elements with the same name into the DOM\n      // multiple times. For example, cloning and inserting a checked radio\n      // clears the chcecked state of the original radio.\n\n\n      $(clonedTable).find('[name]').removeAttr('name'); // A position absolute table would take the table out of the flow of\n      // our container element, bypassing the height and width (Scroller)\n\n      $(clonedTable).css('position', 'relative');\n      var inserted = $('<div/>').css({\n        width: 1,\n        height: 1,\n        overflow: 'hidden',\n        clear: 'both'\n      }).append(clonedTable);\n      inserted.insertBefore(dt.table().node()); // The cloned header now contains the smallest that each column can be\n\n      headerCells.each(function (i) {\n        var idx = dt.column.index('fromVisible', i);\n        columns[idx].minWidth = this.offsetWidth || 0;\n      });\n      inserted.remove();\n    },\n\n    /**\n     * Set a column's visibility.\n     *\n     * We don't use DataTables' column visibility controls in order to ensure\n     * that column visibility can Responsive can no-exist. Since only IE8+ is\n     * supported (and all evergreen browsers of course) the control of the\n     * display attribute works well.\n     *\n     * @param {integer} col      Column index\n     * @param {boolean} showHide Show or hide (true or false)\n     * @private\n     */\n    _setColumnVis: function _setColumnVis(col, showHide) {\n      var dt = this.s.dt;\n      var display = showHide ? '' : 'none'; // empty string will remove the attr\n\n      $(dt.column(col).header()).css('display', display);\n      $(dt.column(col).footer()).css('display', display);\n      dt.column(col).nodes().to$().css('display', display); // If the are child nodes stored, we might need to reinsert them\n\n      if (!$.isEmptyObject(_childNodeStore)) {\n        dt.cells(null, col).indexes().each(function (idx) {\n          _childNodesRestore(dt, idx.row, idx.column);\n        });\n      }\n    },\n\n    /**\n     * Update the cell tab indexes for keyboard accessibility. This is called on\n     * every table draw - that is potentially inefficient, but also the least\n     * complex option given that column visibility can change on the fly. Its a\n     * shame user-focus was removed from CSS 3 UI, as it would have solved this\n     * issue with a single CSS statement.\n     *\n     * @private\n     */\n    _tabIndexes: function _tabIndexes() {\n      var dt = this.s.dt;\n      var cells = dt.cells({\n        page: 'current'\n      }).nodes().to$();\n      var ctx = dt.settings()[0];\n      var target = this.c.details.target;\n      cells.filter('[data-dtr-keyboard]').removeData('[data-dtr-keyboard]');\n\n      if (typeof target === 'number') {\n        dt.cells(null, target, {\n          page: 'current'\n        }).nodes().to$().attr('tabIndex', ctx.iTabIndex).data('dtr-keyboard', 1);\n      } else {\n        // This is a bit of a hack - we need to limit the selected nodes to just\n        // those of this table\n        if (target === 'td:first-child, th:first-child') {\n          target = '>td:first-child, >th:first-child';\n        }\n\n        $(target, dt.rows({\n          page: 'current'\n        }).nodes()).attr('tabIndex', ctx.iTabIndex).data('dtr-keyboard', 1);\n      }\n    }\n  });\n  /**\n   * List of default breakpoints. Each item in the array is an object with two\n   * properties:\n   *\n   * * `name` - the breakpoint name.\n   * * `width` - the breakpoint width\n   *\n   * @name Responsive.breakpoints\n   * @static\n   */\n\n  Responsive.breakpoints = [{\n    name: 'desktop',\n    width: Infinity\n  }, {\n    name: 'tablet-l',\n    width: 1024\n  }, {\n    name: 'tablet-p',\n    width: 768\n  }, {\n    name: 'mobile-l',\n    width: 480\n  }, {\n    name: 'mobile-p',\n    width: 320\n  }];\n  /**\n   * Display methods - functions which define how the hidden data should be shown\n   * in the table.\n   *\n   * @namespace\n   * @name Responsive.defaults\n   * @static\n   */\n\n  Responsive.display = {\n    childRow: function childRow(row, update, render) {\n      if (update) {\n        if ($(row.node()).hasClass('parent')) {\n          row.child(render(), 'child').show();\n          return true;\n        }\n      } else {\n        if (!row.child.isShown()) {\n          row.child(render(), 'child').show();\n          $(row.node()).addClass('parent');\n          return true;\n        } else {\n          row.child(false);\n          $(row.node()).removeClass('parent');\n          return false;\n        }\n      }\n    },\n    childRowImmediate: function childRowImmediate(row, update, render) {\n      if (!update && row.child.isShown() || !row.responsive.hasHidden()) {\n        // User interaction and the row is show, or nothing to show\n        row.child(false);\n        $(row.node()).removeClass('parent');\n        return false;\n      } else {\n        // Display\n        row.child(render(), 'child').show();\n        $(row.node()).addClass('parent');\n        return true;\n      }\n    },\n    // This is a wrapper so the modal options for Bootstrap and jQuery UI can\n    // have options passed into them. This specific one doesn't need to be a\n    // function but it is for consistency in the `modal` name\n    modal: function modal(options) {\n      return function (row, update, render) {\n        if (!update) {\n          // Show a modal\n          var close = function close() {\n            modal.remove(); // will tidy events for us\n\n            $(document).off('keypress.dtr');\n          };\n\n          var modal = $('<div class=\"dtr-modal\"/>').append($('<div class=\"dtr-modal-display\"/>').append($('<div class=\"dtr-modal-content\"/>').append(render())).append($('<div class=\"dtr-modal-close\">&times;</div>').click(function () {\n            close();\n          }))).append($('<div class=\"dtr-modal-background\"/>').click(function () {\n            close();\n          })).appendTo('body');\n          $(document).on('keyup.dtr', function (e) {\n            if (e.keyCode === 27) {\n              e.stopPropagation();\n              close();\n            }\n          });\n        } else {\n          $('div.dtr-modal-content').empty().append(render());\n        }\n\n        if (options && options.header) {\n          $('div.dtr-modal-content').prepend('<h2>' + options.header(row) + '</h2>');\n        }\n      };\n    }\n  };\n  var _childNodeStore = {};\n\n  function _childNodes(dt, row, col) {\n    var name = row + '-' + col;\n\n    if (_childNodeStore[name]) {\n      return _childNodeStore[name];\n    } // https://jsperf.com/childnodes-array-slice-vs-loop\n\n\n    var nodes = [];\n    var children = dt.cell(row, col).node().childNodes;\n\n    for (var i = 0, ien = children.length; i < ien; i++) {\n      nodes.push(children[i]);\n    }\n\n    _childNodeStore[name] = nodes;\n    return nodes;\n  }\n\n  function _childNodesRestore(dt, row, col) {\n    var name = row + '-' + col;\n\n    if (!_childNodeStore[name]) {\n      return;\n    }\n\n    var node = dt.cell(row, col).node();\n    var store = _childNodeStore[name];\n    var parent = store[0].parentNode;\n    var parentChildren = parent.childNodes;\n    var a = [];\n\n    for (var i = 0, ien = parentChildren.length; i < ien; i++) {\n      a.push(parentChildren[i]);\n    }\n\n    for (var j = 0, jen = a.length; j < jen; j++) {\n      node.appendChild(a[j]);\n    }\n\n    _childNodeStore[name] = undefined;\n  }\n  /**\n   * Display methods - functions which define how the hidden data should be shown\n   * in the table.\n   *\n   * @namespace\n   * @name Responsive.defaults\n   * @static\n   */\n\n\n  Responsive.renderer = {\n    listHiddenNodes: function listHiddenNodes() {\n      return function (api, rowIdx, columns) {\n        var ul = $('<ul data-dtr-index=\"' + rowIdx + '\" class=\"dtr-details\"/>');\n        var found = false;\n        var data = $.each(columns, function (i, col) {\n          if (col.hidden) {\n            $('<li data-dtr-index=\"' + col.columnIndex + '\" data-dt-row=\"' + col.rowIndex + '\" data-dt-column=\"' + col.columnIndex + '\">' + '<span class=\"dtr-title\">' + col.title + '</span> ' + '</li>').append($('<span class=\"dtr-data\"/>').append(_childNodes(api, col.rowIndex, col.columnIndex))) // api.cell( col.rowIndex, col.columnIndex ).node().childNodes ) )\n            .appendTo(ul);\n            found = true;\n          }\n        });\n        return found ? ul : false;\n      };\n    },\n    listHidden: function listHidden() {\n      return function (api, rowIdx, columns) {\n        var data = $.map(columns, function (col) {\n          return col.hidden ? '<li data-dtr-index=\"' + col.columnIndex + '\" data-dt-row=\"' + col.rowIndex + '\" data-dt-column=\"' + col.columnIndex + '\">' + '<span class=\"dtr-title\">' + col.title + '</span> ' + '<span class=\"dtr-data\">' + col.data + '</span>' + '</li>' : '';\n        }).join('');\n        return data ? $('<ul data-dtr-index=\"' + rowIdx + '\" class=\"dtr-details\"/>').append(data) : false;\n      };\n    },\n    tableAll: function tableAll(options) {\n      options = $.extend({\n        tableClass: ''\n      }, options);\n      return function (api, rowIdx, columns) {\n        var data = $.map(columns, function (col) {\n          return '<tr data-dt-row=\"' + col.rowIndex + '\" data-dt-column=\"' + col.columnIndex + '\">' + '<td>' + col.title + ':' + '</td> ' + '<td>' + col.data + '</td>' + '</tr>';\n        }).join('');\n        return $('<table class=\"' + options.tableClass + ' dtr-details\" width=\"100%\"/>').append(data);\n      };\n    }\n  };\n  /**\n   * Responsive default settings for initialisation\n   *\n   * @namespace\n   * @name Responsive.defaults\n   * @static\n   */\n\n  Responsive.defaults = {\n    /**\n     * List of breakpoints for the instance. Note that this means that each\n     * instance can have its own breakpoints. Additionally, the breakpoints\n     * cannot be changed once an instance has been creased.\n     *\n     * @type {Array}\n     * @default Takes the value of `Responsive.breakpoints`\n     */\n    breakpoints: Responsive.breakpoints,\n\n    /**\n     * Enable / disable auto hiding calculations. It can help to increase\n     * performance slightly if you disable this option, but all columns would\n     * need to have breakpoint classes assigned to them\n     *\n     * @type {Boolean}\n     * @default  `true`\n     */\n    auto: true,\n\n    /**\n     * Details control. If given as a string value, the `type` property of the\n     * default object is set to that value, and the defaults used for the rest\n     * of the object - this is for ease of implementation.\n     *\n     * The object consists of the following properties:\n     *\n     * * `display` - A function that is used to show and hide the hidden details\n     * * `renderer` - function that is called for display of the child row data.\n     *   The default function will show the data from the hidden columns\n     * * `target` - Used as the selector for what objects to attach the child\n     *   open / close to\n     * * `type` - `false` to disable the details display, `inline` or `column`\n     *   for the two control types\n     *\n     * @type {Object|string}\n     */\n    details: {\n      display: Responsive.display.childRow,\n      renderer: Responsive.renderer.listHidden(),\n      target: 0,\n      type: 'inline'\n    },\n\n    /**\n     * Orthogonal data request option. This is used to define the data type\n     * requested when Responsive gets the data to show in the child row.\n     *\n     * @type {String}\n     */\n    orthogonal: 'display'\n  };\n  /*\n   * API\n   */\n\n  var Api = $.fn.dataTable.Api; // Doesn't do anything - work around for a bug in DT... Not documented\n\n  Api.register('responsive()', function () {\n    return this;\n  });\n  Api.register('responsive.index()', function (li) {\n    li = $(li);\n    return {\n      column: li.data('dtr-index'),\n      row: li.parent().data('dtr-index')\n    };\n  });\n  Api.register('responsive.rebuild()', function () {\n    return this.iterator('table', function (ctx) {\n      if (ctx._responsive) {\n        ctx._responsive._classLogic();\n      }\n    });\n  });\n  Api.register('responsive.recalc()', function () {\n    return this.iterator('table', function (ctx) {\n      if (ctx._responsive) {\n        ctx._responsive._resizeAuto();\n\n        ctx._responsive._resize();\n      }\n    });\n  });\n  Api.register('responsive.hasHidden()', function () {\n    var ctx = this.context[0];\n    return ctx._responsive ? $.inArray(false, ctx._responsive.s.current) !== -1 : false;\n  });\n  Api.registerPlural('columns().responsiveHidden()', 'column().responsiveHidden()', function () {\n    return this.iterator('column', function (settings, column) {\n      return settings._responsive ? settings._responsive.s.current[column] : false;\n    }, 1);\n  });\n  /**\n   * Version information\n   *\n   * @name Responsive.version\n   * @static\n   */\n\n  Responsive.version = '2.2.3';\n  $.fn.dataTable.Responsive = Responsive;\n  $.fn.DataTable.Responsive = Responsive; // Attach a listener to the document which listens for DataTables initialisation\n  // events so we can automatically initialise\n\n  $(document).on('preInit.dt.dtr', function (e, settings, json) {\n    if (e.namespace !== 'dt') {\n      return;\n    }\n\n    if ($(settings.nTable).hasClass('responsive') || $(settings.nTable).hasClass('dt-responsive') || settings.oInit.responsive || DataTable.defaults.responsive) {\n      var init = settings.oInit.responsive;\n\n      if (init !== false) {\n        new Responsive(settings, $.isPlainObject(init) ? init : {});\n      }\n    }\n  });\n  return Responsive;\n});","/*! Select for DataTables 1.3.0\n * 2015-2018 SpryMedia Ltd - datatables.net/license/mit\n */\n\n/**\n * @summary     Select for DataTables\n * @description A collection of API methods, events and buttons for DataTables\n *   that provides selection options of the items in a DataTable\n * @version     1.3.0\n * @file        dataTables.select.js\n * @author      SpryMedia Ltd (www.sprymedia.co.uk)\n * @contact     datatables.net/forums\n * @copyright   Copyright 2015-2018 SpryMedia Ltd.\n *\n * This source file is free software, available under the following license:\n *   MIT license - http://datatables.net/license/mit\n *\n * This source file is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.\n *\n * For details please refer to: http://www.datatables.net/extensions/select\n */\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['jquery', 'datatables.net'], function ($) {\n      return factory($, window, document);\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = function (root, $) {\n      if (!root) {\n        root = window;\n      }\n\n      if (!$ || !$.fn.dataTable) {\n        $ = require('datatables.net')(root, $).$;\n      }\n\n      return factory($, root, root.document);\n    };\n  } else {\n    // Browser\n    factory(jQuery, window, document);\n  }\n})(function ($, window, document, undefined) {\n  'use strict';\n\n  var DataTable = $.fn.dataTable; // Version information for debugger\n\n  DataTable.select = {};\n  DataTable.select.version = '1.3.0';\n\n  DataTable.select.init = function (dt) {\n    var ctx = dt.settings()[0];\n    var init = ctx.oInit.select;\n    var defaults = DataTable.defaults.select;\n    var opts = init === undefined ? defaults : init; // Set defaults\n\n    var items = 'row';\n    var style = 'api';\n    var blurable = false;\n    var info = true;\n    var selector = 'td, th';\n    var className = 'selected';\n    var setStyle = false;\n    ctx._select = {}; // Initialisation customisations\n\n    if (opts === true) {\n      style = 'os';\n      setStyle = true;\n    } else if (typeof opts === 'string') {\n      style = opts;\n      setStyle = true;\n    } else if ($.isPlainObject(opts)) {\n      if (opts.blurable !== undefined) {\n        blurable = opts.blurable;\n      }\n\n      if (opts.info !== undefined) {\n        info = opts.info;\n      }\n\n      if (opts.items !== undefined) {\n        items = opts.items;\n      }\n\n      if (opts.style !== undefined) {\n        style = opts.style;\n        setStyle = true;\n      } else {\n        style = 'os';\n        setStyle = true;\n      }\n\n      if (opts.selector !== undefined) {\n        selector = opts.selector;\n      }\n\n      if (opts.className !== undefined) {\n        className = opts.className;\n      }\n    }\n\n    dt.select.selector(selector);\n    dt.select.items(items);\n    dt.select.style(style);\n    dt.select.blurable(blurable);\n    dt.select.info(info);\n    ctx._select.className = className; // Sort table based on selected rows. Requires Select Datatables extension\n\n    $.fn.dataTable.ext.order['select-checkbox'] = function (settings, col) {\n      return this.api().column(col, {\n        order: 'index'\n      }).nodes().map(function (td) {\n        if (settings._select.items === 'row') {\n          return $(td).parent().hasClass(settings._select.className);\n        } else if (settings._select.items === 'cell') {\n          return $(td).hasClass(settings._select.className);\n        }\n\n        return false;\n      });\n    }; // If the init options haven't enabled select, but there is a selectable\n    // class name, then enable\n\n\n    if (!setStyle && $(dt.table().node()).hasClass('selectable')) {\n      dt.select.style('os');\n    }\n  };\n  /*\n  \n  Select is a collection of API methods, event handlers, event emitters and\n  buttons (for the `Buttons` extension) for DataTables. It provides the following\n  features, with an overview of how they are implemented:\n  \n  ## Selection of rows, columns and cells. Whether an item is selected or not is\n     stored in:\n  \n  * rows: a `_select_selected` property which contains a boolean value of the\n    DataTables' `aoData` object for each row\n  * columns: a `_select_selected` property which contains a boolean value of the\n    DataTables' `aoColumns` object for each column\n  * cells: a `_selected_cells` property which contains an array of boolean values\n    of the `aoData` object for each row. The array is the same length as the\n    columns array, with each element of it representing a cell.\n  \n  This method of using boolean flags allows Select to operate when nodes have not\n  been created for rows / cells (DataTables' defer rendering feature).\n  \n  ## API methods\n  \n  A range of API methods are available for triggering selection and de-selection\n  of rows. Methods are also available to configure the selection events that can\n  be triggered by an end user (such as which items are to be selected). To a large\n  extent, these of API methods *is* Select. It is basically a collection of helper\n  functions that can be used to select items in a DataTable.\n  \n  Configuration of select is held in the object `_select` which is attached to the\n  DataTables settings object on initialisation. Select being available on a table\n  is not optional when Select is loaded, but its default is for selection only to\n  be available via the API - so the end user wouldn't be able to select rows\n  without additional configuration.\n  \n  The `_select` object contains the following properties:\n  \n  ```\n  {\n  \titems:string     - Can be `rows`, `columns` or `cells`. Defines what item \n  \t                   will be selected if the user is allowed to activate row\n  \t                   selection using the mouse.\n  \tstyle:string     - Can be `none`, `single`, `multi` or `os`. Defines the\n  \t                   interaction style when selecting items\n  \tblurable:boolean - If row selection can be cleared by clicking outside of\n  \t                   the table\n  \tinfo:boolean     - If the selection summary should be shown in the table\n  \t                   information elements\n  }\n  ```\n  \n  In addition to the API methods, Select also extends the DataTables selector\n  options for rows, columns and cells adding a `selected` option to the selector\n  options object, allowing the developer to select only selected items or\n  unselected items.\n  \n  ## Mouse selection of items\n  \n  Clicking on items can be used to select items. This is done by a simple event\n  handler that will select the items using the API methods.\n  \n   */\n\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * Local functions\n   */\n\n  /**\n   * Add one or more cells to the selection when shift clicking in OS selection\n   * style cell selection.\n   *\n   * Cell range is more complicated than row and column as we want to select\n   * in the visible grid rather than by index in sequence. For example, if you\n   * click first in cell 1-1 and then shift click in 2-2 - cells 1-2 and 2-1\n   * should also be selected (and not 1-3, 1-4. etc)\n   * \n   * @param  {DataTable.Api} dt   DataTable\n   * @param  {object}        idx  Cell index to select to\n   * @param  {object}        last Cell index to select from\n   * @private\n   */\n\n\n  function cellRange(dt, idx, last) {\n    var indexes;\n    var columnIndexes;\n    var rowIndexes;\n\n    var selectColumns = function selectColumns(start, end) {\n      if (start > end) {\n        var tmp = end;\n        end = start;\n        start = tmp;\n      }\n\n      var record = false;\n      return dt.columns(':visible').indexes().filter(function (i) {\n        if (i === start) {\n          record = true;\n        }\n\n        if (i === end) {\n          // not else if, as start might === end\n          record = false;\n          return true;\n        }\n\n        return record;\n      });\n    };\n\n    var selectRows = function selectRows(start, end) {\n      var indexes = dt.rows({\n        search: 'applied'\n      }).indexes(); // Which comes first - might need to swap\n\n      if (indexes.indexOf(start) > indexes.indexOf(end)) {\n        var tmp = end;\n        end = start;\n        start = tmp;\n      }\n\n      var record = false;\n      return indexes.filter(function (i) {\n        if (i === start) {\n          record = true;\n        }\n\n        if (i === end) {\n          record = false;\n          return true;\n        }\n\n        return record;\n      });\n    };\n\n    if (!dt.cells({\n      selected: true\n    }).any() && !last) {\n      // select from the top left cell to this one\n      columnIndexes = selectColumns(0, idx.column);\n      rowIndexes = selectRows(0, idx.row);\n    } else {\n      // Get column indexes between old and new\n      columnIndexes = selectColumns(last.column, idx.column);\n      rowIndexes = selectRows(last.row, idx.row);\n    }\n\n    indexes = dt.cells(rowIndexes, columnIndexes).flatten();\n\n    if (!dt.cells(idx, {\n      selected: true\n    }).any()) {\n      // Select range\n      dt.cells(indexes).select();\n    } else {\n      // Deselect range\n      dt.cells(indexes).deselect();\n    }\n  }\n  /**\n   * Disable mouse selection by removing the selectors\n   *\n   * @param {DataTable.Api} dt DataTable to remove events from\n   * @private\n   */\n\n\n  function disableMouseSelection(dt) {\n    var ctx = dt.settings()[0];\n    var selector = ctx._select.selector;\n    $(dt.table().container()).off('mousedown.dtSelect', selector).off('mouseup.dtSelect', selector).off('click.dtSelect', selector);\n    $('body').off('click.dtSelect' + dt.table().node().id);\n  }\n  /**\n   * Attach mouse listeners to the table to allow mouse selection of items\n   *\n   * @param {DataTable.Api} dt DataTable to remove events from\n   * @private\n   */\n\n\n  function enableMouseSelection(dt) {\n    var container = $(dt.table().container());\n    var ctx = dt.settings()[0];\n    var selector = ctx._select.selector;\n    var matchSelection;\n    container.on('mousedown.dtSelect', selector, function (e) {\n      // Disallow text selection for shift clicking on the table so multi\n      // element selection doesn't look terrible!\n      if (e.shiftKey || e.metaKey || e.ctrlKey) {\n        container.css('-moz-user-select', 'none').one('selectstart.dtSelect', selector, function () {\n          return false;\n        });\n      }\n\n      if (window.getSelection) {\n        matchSelection = window.getSelection();\n      }\n    }).on('mouseup.dtSelect', selector, function () {\n      // Allow text selection to occur again, Mozilla style (tested in FF\n      // 35.0.1 - still required)\n      container.css('-moz-user-select', '');\n    }).on('click.dtSelect', selector, function (e) {\n      var items = dt.select.items();\n      var idx; // If text was selected (click and drag), then we shouldn't change\n      // the row's selected state\n\n      if (matchSelection) {\n        var selection = window.getSelection(); // If the element that contains the selection is not in the table, we can ignore it\n        // This can happen if the developer selects text from the click event\n\n        if (!selection.anchorNode || $(selection.anchorNode).closest('table')[0] === dt.table().node()) {\n          if (selection !== matchSelection) {\n            return;\n          }\n        }\n      }\n\n      var ctx = dt.settings()[0];\n      var wrapperClass = $.trim(dt.settings()[0].oClasses.sWrapper).replace(/ +/g, '.'); // Ignore clicks inside a sub-table\n\n      if ($(e.target).closest('div.' + wrapperClass)[0] != dt.table().container()) {\n        return;\n      }\n\n      var cell = dt.cell($(e.target).closest('td, th')); // Check the cell actually belongs to the host DataTable (so child\n      // rows, etc, are ignored)\n\n      if (!cell.any()) {\n        return;\n      }\n\n      var event = $.Event('user-select.dt');\n      eventTrigger(dt, event, [items, cell, e]);\n\n      if (event.isDefaultPrevented()) {\n        return;\n      }\n\n      var cellIndex = cell.index();\n\n      if (items === 'row') {\n        idx = cellIndex.row;\n        typeSelect(e, dt, ctx, 'row', idx);\n      } else if (items === 'column') {\n        idx = cell.index().column;\n        typeSelect(e, dt, ctx, 'column', idx);\n      } else if (items === 'cell') {\n        idx = cell.index();\n        typeSelect(e, dt, ctx, 'cell', idx);\n      }\n\n      ctx._select_lastCell = cellIndex;\n    }); // Blurable\n\n    $('body').on('click.dtSelect' + dt.table().node().id, function (e) {\n      if (ctx._select.blurable) {\n        // If the click was inside the DataTables container, don't blur\n        if ($(e.target).parents().filter(dt.table().container()).length) {\n          return;\n        } // Ignore elements which have been removed from the DOM (i.e. paging\n        // buttons)\n\n\n        if ($(e.target).parents('html').length === 0) {\n          return;\n        } // Don't blur in Editor form\n\n\n        if ($(e.target).parents('div.DTE').length) {\n          return;\n        }\n\n        clear(ctx, true);\n      }\n    });\n  }\n  /**\n   * Trigger an event on a DataTable\n   *\n   * @param {DataTable.Api} api      DataTable to trigger events on\n   * @param  {boolean}      selected true if selected, false if deselected\n   * @param  {string}       type     Item type acting on\n   * @param  {boolean}      any      Require that there are values before\n   *     triggering\n   * @private\n   */\n\n\n  function eventTrigger(api, type, args, any) {\n    if (any && !api.flatten().length) {\n      return;\n    }\n\n    if (typeof type === 'string') {\n      type = type + '.dt';\n    }\n\n    args.unshift(api);\n    $(api.table().node()).trigger(type, args);\n  }\n  /**\n   * Update the information element of the DataTable showing information about the\n   * items selected. This is done by adding tags to the existing text\n   * \n   * @param {DataTable.Api} api DataTable to update\n   * @private\n   */\n\n\n  function info(api) {\n    var ctx = api.settings()[0];\n\n    if (!ctx._select.info || !ctx.aanFeatures.i) {\n      return;\n    }\n\n    if (api.select.style() === 'api') {\n      return;\n    }\n\n    var rows = api.rows({\n      selected: true\n    }).flatten().length;\n    var columns = api.columns({\n      selected: true\n    }).flatten().length;\n    var cells = api.cells({\n      selected: true\n    }).flatten().length;\n\n    var add = function add(el, name, num) {\n      el.append($('<span class=\"select-item\"/>').append(api.i18n('select.' + name + 's', {\n        _: '%d ' + name + 's selected',\n        0: '',\n        1: '1 ' + name + ' selected'\n      }, num)));\n    }; // Internal knowledge of DataTables to loop over all information elements\n\n\n    $.each(ctx.aanFeatures.i, function (i, el) {\n      el = $(el);\n      var output = $('<span class=\"select-info\"/>');\n      add(output, 'row', rows);\n      add(output, 'column', columns);\n      add(output, 'cell', cells);\n      var exisiting = el.children('span.select-info');\n\n      if (exisiting.length) {\n        exisiting.remove();\n      }\n\n      if (output.text() !== '') {\n        el.append(output);\n      }\n    });\n  }\n  /**\n   * Initialisation of a new table. Attach event handlers and callbacks to allow\n   * Select to operate correctly.\n   *\n   * This will occur _after_ the initial DataTables initialisation, although\n   * before Ajax data is rendered, if there is ajax data\n   *\n   * @param  {DataTable.settings} ctx Settings object to operate on\n   * @private\n   */\n\n\n  function init(ctx) {\n    var api = new DataTable.Api(ctx); // Row callback so that classes can be added to rows and cells if the item\n    // was selected before the element was created. This will happen with the\n    // `deferRender` option enabled.\n    // \n    // This method of attaching to `aoRowCreatedCallback` is a hack until\n    // DataTables has proper events for row manipulation If you are reviewing\n    // this code to create your own plug-ins, please do not do this!\n\n    ctx.aoRowCreatedCallback.push({\n      fn: function fn(row, data, index) {\n        var i, ien;\n        var d = ctx.aoData[index]; // Row\n\n        if (d._select_selected) {\n          $(row).addClass(ctx._select.className);\n        } // Cells and columns - if separated out, we would need to do two\n        // loops, so it makes sense to combine them into a single one\n\n\n        for (i = 0, ien = ctx.aoColumns.length; i < ien; i++) {\n          if (ctx.aoColumns[i]._select_selected || d._selected_cells && d._selected_cells[i]) {\n            $(d.anCells[i]).addClass(ctx._select.className);\n          }\n        }\n      },\n      sName: 'select-deferRender'\n    }); // On Ajax reload we want to reselect all rows which are currently selected,\n    // if there is an rowId (i.e. a unique value to identify each row with)\n\n    api.on('preXhr.dt.dtSelect', function () {\n      // note that column selection doesn't need to be cached and then\n      // reselected, as they are already selected\n      var rows = api.rows({\n        selected: true\n      }).ids(true).filter(function (d) {\n        return d !== undefined;\n      });\n      var cells = api.cells({\n        selected: true\n      }).eq(0).map(function (cellIdx) {\n        var id = api.row(cellIdx.row).id(true);\n        return id ? {\n          row: id,\n          column: cellIdx.column\n        } : undefined;\n      }).filter(function (d) {\n        return d !== undefined;\n      }); // On the next draw, reselect the currently selected items\n\n      api.one('draw.dt.dtSelect', function () {\n        api.rows(rows).select(); // `cells` is not a cell index selector, so it needs a loop\n\n        if (cells.any()) {\n          cells.each(function (id) {\n            api.cells(id.row, id.column).select();\n          });\n        }\n      });\n    }); // Update the table information element with selected item summary\n\n    api.on('draw.dtSelect.dt select.dtSelect.dt deselect.dtSelect.dt info.dt', function () {\n      info(api);\n    }); // Clean up and release\n\n    api.on('destroy.dtSelect', function () {\n      disableMouseSelection(api);\n      api.off('.dtSelect');\n    });\n  }\n  /**\n   * Add one or more items (rows or columns) to the selection when shift clicking\n   * in OS selection style\n   *\n   * @param  {DataTable.Api} dt   DataTable\n   * @param  {string}        type Row or column range selector\n   * @param  {object}        idx  Item index to select to\n   * @param  {object}        last Item index to select from\n   * @private\n   */\n\n\n  function rowColumnRange(dt, type, idx, last) {\n    // Add a range of rows from the last selected row to this one\n    var indexes = dt[type + 's']({\n      search: 'applied'\n    }).indexes();\n    var idx1 = $.inArray(last, indexes);\n    var idx2 = $.inArray(idx, indexes);\n\n    if (!dt[type + 's']({\n      selected: true\n    }).any() && idx1 === -1) {\n      // select from top to here - slightly odd, but both Windows and Mac OS\n      // do this\n      indexes.splice($.inArray(idx, indexes) + 1, indexes.length);\n    } else {\n      // reverse so we can shift click 'up' as well as down\n      if (idx1 > idx2) {\n        var tmp = idx2;\n        idx2 = idx1;\n        idx1 = tmp;\n      }\n\n      indexes.splice(idx2 + 1, indexes.length);\n      indexes.splice(0, idx1);\n    }\n\n    if (!dt[type](idx, {\n      selected: true\n    }).any()) {\n      // Select range\n      dt[type + 's'](indexes).select();\n    } else {\n      // Deselect range - need to keep the clicked on row selected\n      indexes.splice($.inArray(idx, indexes), 1);\n      dt[type + 's'](indexes).deselect();\n    }\n  }\n  /**\n   * Clear all selected items\n   *\n   * @param  {DataTable.settings} ctx Settings object of the host DataTable\n   * @param  {boolean} [force=false] Force the de-selection to happen, regardless\n   *     of selection style\n   * @private\n   */\n\n\n  function clear(ctx, force) {\n    if (force || ctx._select.style === 'single') {\n      var api = new DataTable.Api(ctx);\n      api.rows({\n        selected: true\n      }).deselect();\n      api.columns({\n        selected: true\n      }).deselect();\n      api.cells({\n        selected: true\n      }).deselect();\n    }\n  }\n  /**\n   * Select items based on the current configuration for style and items.\n   *\n   * @param  {object}             e    Mouse event object\n   * @param  {DataTables.Api}     dt   DataTable\n   * @param  {DataTable.settings} ctx  Settings object of the host DataTable\n   * @param  {string}             type Items to select\n   * @param  {int|object}         idx  Index of the item to select\n   * @private\n   */\n\n\n  function typeSelect(e, dt, ctx, type, idx) {\n    var style = dt.select.style();\n    var isSelected = dt[type](idx, {\n      selected: true\n    }).any();\n\n    if (style === 'os') {\n      if (e.ctrlKey || e.metaKey) {\n        // Add or remove from the selection\n        dt[type](idx).select(!isSelected);\n      } else if (e.shiftKey) {\n        if (type === 'cell') {\n          cellRange(dt, idx, ctx._select_lastCell || null);\n        } else {\n          rowColumnRange(dt, type, idx, ctx._select_lastCell ? ctx._select_lastCell[type] : null);\n        }\n      } else {\n        // No cmd or shift click - deselect if selected, or select\n        // this row only\n        var selected = dt[type + 's']({\n          selected: true\n        });\n\n        if (isSelected && selected.flatten().length === 1) {\n          dt[type](idx).deselect();\n        } else {\n          selected.deselect();\n          dt[type](idx).select();\n        }\n      }\n    } else if (style == 'multi+shift') {\n      if (e.shiftKey) {\n        if (type === 'cell') {\n          cellRange(dt, idx, ctx._select_lastCell || null);\n        } else {\n          rowColumnRange(dt, type, idx, ctx._select_lastCell ? ctx._select_lastCell[type] : null);\n        }\n      } else {\n        dt[type](idx).select(!isSelected);\n      }\n    } else {\n      dt[type](idx).select(!isSelected);\n    }\n  }\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * DataTables selectors\n   */\n  // row and column are basically identical just assigned to different properties\n  // and checking a different array, so we can dynamically create the functions to\n  // reduce the code size\n\n\n  $.each([{\n    type: 'row',\n    prop: 'aoData'\n  }, {\n    type: 'column',\n    prop: 'aoColumns'\n  }], function (i, o) {\n    DataTable.ext.selector[o.type].push(function (settings, opts, indexes) {\n      var selected = opts.selected;\n      var data;\n      var out = [];\n\n      if (selected !== true && selected !== false) {\n        return indexes;\n      }\n\n      for (var i = 0, ien = indexes.length; i < ien; i++) {\n        data = settings[o.prop][indexes[i]];\n\n        if (selected === true && data._select_selected === true || selected === false && !data._select_selected) {\n          out.push(indexes[i]);\n        }\n      }\n\n      return out;\n    });\n  });\n  DataTable.ext.selector.cell.push(function (settings, opts, cells) {\n    var selected = opts.selected;\n    var rowData;\n    var out = [];\n\n    if (selected === undefined) {\n      return cells;\n    }\n\n    for (var i = 0, ien = cells.length; i < ien; i++) {\n      rowData = settings.aoData[cells[i].row];\n\n      if (selected === true && rowData._selected_cells && rowData._selected_cells[cells[i].column] === true || selected === false && (!rowData._selected_cells || !rowData._selected_cells[cells[i].column])) {\n        out.push(cells[i]);\n      }\n    }\n\n    return out;\n  });\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * DataTables API\n   *\n   * For complete documentation, please refer to the docs/api directory or the\n   * DataTables site\n   */\n  // Local variables to improve compression\n\n  var apiRegister = DataTable.Api.register;\n  var apiRegisterPlural = DataTable.Api.registerPlural;\n  apiRegister('select()', function () {\n    return this.iterator('table', function (ctx) {\n      DataTable.select.init(new DataTable.Api(ctx));\n    });\n  });\n  apiRegister('select.blurable()', function (flag) {\n    if (flag === undefined) {\n      return this.context[0]._select.blurable;\n    }\n\n    return this.iterator('table', function (ctx) {\n      ctx._select.blurable = flag;\n    });\n  });\n  apiRegister('select.info()', function (flag) {\n    if (info === undefined) {\n      return this.context[0]._select.info;\n    }\n\n    return this.iterator('table', function (ctx) {\n      ctx._select.info = flag;\n    });\n  });\n  apiRegister('select.items()', function (items) {\n    if (items === undefined) {\n      return this.context[0]._select.items;\n    }\n\n    return this.iterator('table', function (ctx) {\n      ctx._select.items = items;\n      eventTrigger(new DataTable.Api(ctx), 'selectItems', [items]);\n    });\n  }); // Takes effect from the _next_ selection. None disables future selection, but\n  // does not clear the current selection. Use the `deselect` methods for that\n\n  apiRegister('select.style()', function (style) {\n    if (style === undefined) {\n      return this.context[0]._select.style;\n    }\n\n    return this.iterator('table', function (ctx) {\n      ctx._select.style = style;\n\n      if (!ctx._select_init) {\n        init(ctx);\n      } // Add / remove mouse event handlers. They aren't required when only\n      // API selection is available\n\n\n      var dt = new DataTable.Api(ctx);\n      disableMouseSelection(dt);\n\n      if (style !== 'api') {\n        enableMouseSelection(dt);\n      }\n\n      eventTrigger(new DataTable.Api(ctx), 'selectStyle', [style]);\n    });\n  });\n  apiRegister('select.selector()', function (selector) {\n    if (selector === undefined) {\n      return this.context[0]._select.selector;\n    }\n\n    return this.iterator('table', function (ctx) {\n      disableMouseSelection(new DataTable.Api(ctx));\n      ctx._select.selector = selector;\n\n      if (ctx._select.style !== 'api') {\n        enableMouseSelection(new DataTable.Api(ctx));\n      }\n    });\n  });\n  apiRegisterPlural('rows().select()', 'row().select()', function (select) {\n    var api = this;\n\n    if (select === false) {\n      return this.deselect();\n    }\n\n    this.iterator('row', function (ctx, idx) {\n      clear(ctx);\n      ctx.aoData[idx]._select_selected = true;\n      $(ctx.aoData[idx].nTr).addClass(ctx._select.className);\n    });\n    this.iterator('table', function (ctx, i) {\n      eventTrigger(api, 'select', ['row', api[i]], true);\n    });\n    return this;\n  });\n  apiRegisterPlural('columns().select()', 'column().select()', function (select) {\n    var api = this;\n\n    if (select === false) {\n      return this.deselect();\n    }\n\n    this.iterator('column', function (ctx, idx) {\n      clear(ctx);\n      ctx.aoColumns[idx]._select_selected = true;\n      var column = new DataTable.Api(ctx).column(idx);\n      $(column.header()).addClass(ctx._select.className);\n      $(column.footer()).addClass(ctx._select.className);\n      column.nodes().to$().addClass(ctx._select.className);\n    });\n    this.iterator('table', function (ctx, i) {\n      eventTrigger(api, 'select', ['column', api[i]], true);\n    });\n    return this;\n  });\n  apiRegisterPlural('cells().select()', 'cell().select()', function (select) {\n    var api = this;\n\n    if (select === false) {\n      return this.deselect();\n    }\n\n    this.iterator('cell', function (ctx, rowIdx, colIdx) {\n      clear(ctx);\n      var data = ctx.aoData[rowIdx];\n\n      if (data._selected_cells === undefined) {\n        data._selected_cells = [];\n      }\n\n      data._selected_cells[colIdx] = true;\n\n      if (data.anCells) {\n        $(data.anCells[colIdx]).addClass(ctx._select.className);\n      }\n    });\n    this.iterator('table', function (ctx, i) {\n      eventTrigger(api, 'select', ['cell', api[i]], true);\n    });\n    return this;\n  });\n  apiRegisterPlural('rows().deselect()', 'row().deselect()', function () {\n    var api = this;\n    this.iterator('row', function (ctx, idx) {\n      ctx.aoData[idx]._select_selected = false;\n      $(ctx.aoData[idx].nTr).removeClass(ctx._select.className);\n    });\n    this.iterator('table', function (ctx, i) {\n      eventTrigger(api, 'deselect', ['row', api[i]], true);\n    });\n    return this;\n  });\n  apiRegisterPlural('columns().deselect()', 'column().deselect()', function () {\n    var api = this;\n    this.iterator('column', function (ctx, idx) {\n      ctx.aoColumns[idx]._select_selected = false;\n      var api = new DataTable.Api(ctx);\n      var column = api.column(idx);\n      $(column.header()).removeClass(ctx._select.className);\n      $(column.footer()).removeClass(ctx._select.className); // Need to loop over each cell, rather than just using\n      // `column().nodes()` as cells which are individually selected should\n      // not have the `selected` class removed from them\n\n      api.cells(null, idx).indexes().each(function (cellIdx) {\n        var data = ctx.aoData[cellIdx.row];\n        var cellSelected = data._selected_cells;\n\n        if (data.anCells && (!cellSelected || !cellSelected[cellIdx.column])) {\n          $(data.anCells[cellIdx.column]).removeClass(ctx._select.className);\n        }\n      });\n    });\n    this.iterator('table', function (ctx, i) {\n      eventTrigger(api, 'deselect', ['column', api[i]], true);\n    });\n    return this;\n  });\n  apiRegisterPlural('cells().deselect()', 'cell().deselect()', function () {\n    var api = this;\n    this.iterator('cell', function (ctx, rowIdx, colIdx) {\n      var data = ctx.aoData[rowIdx];\n      data._selected_cells[colIdx] = false; // Remove class only if the cells exist, and the cell is not column\n      // selected, in which case the class should remain (since it is selected\n      // in the column)\n\n      if (data.anCells && !ctx.aoColumns[colIdx]._select_selected) {\n        $(data.anCells[colIdx]).removeClass(ctx._select.className);\n      }\n    });\n    this.iterator('table', function (ctx, i) {\n      eventTrigger(api, 'deselect', ['cell', api[i]], true);\n    });\n    return this;\n  });\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * Buttons\n   */\n\n  function i18n(label, def) {\n    return function (dt) {\n      return dt.i18n('buttons.' + label, def);\n    };\n  } // Common events with suitable namespaces\n\n\n  function namespacedEvents(config) {\n    var unique = config._eventNamespace;\n    return 'draw.dt.DT' + unique + ' select.dt.DT' + unique + ' deselect.dt.DT' + unique;\n  }\n\n  function enabled(dt, config) {\n    if ($.inArray('rows', config.limitTo) !== -1 && dt.rows({\n      selected: true\n    }).any()) {\n      return true;\n    }\n\n    if ($.inArray('columns', config.limitTo) !== -1 && dt.columns({\n      selected: true\n    }).any()) {\n      return true;\n    }\n\n    if ($.inArray('cells', config.limitTo) !== -1 && dt.cells({\n      selected: true\n    }).any()) {\n      return true;\n    }\n\n    return false;\n  }\n\n  var _buttonNamespace = 0;\n  $.extend(DataTable.ext.buttons, {\n    selected: {\n      text: i18n('selected', 'Selected'),\n      className: 'buttons-selected',\n      limitTo: ['rows', 'columns', 'cells'],\n      init: function init(dt, node, config) {\n        var that = this;\n        config._eventNamespace = '.select' + _buttonNamespace++; // .DT namespace listeners are removed by DataTables automatically\n        // on table destroy\n\n        dt.on(namespacedEvents(config), function () {\n          that.enable(enabled(dt, config));\n        });\n        this.disable();\n      },\n      destroy: function destroy(dt, node, config) {\n        dt.off(config._eventNamespace);\n      }\n    },\n    selectedSingle: {\n      text: i18n('selectedSingle', 'Selected single'),\n      className: 'buttons-selected-single',\n      init: function init(dt, node, config) {\n        var that = this;\n        config._eventNamespace = '.select' + _buttonNamespace++;\n        dt.on(namespacedEvents(config), function () {\n          var count = dt.rows({\n            selected: true\n          }).flatten().length + dt.columns({\n            selected: true\n          }).flatten().length + dt.cells({\n            selected: true\n          }).flatten().length;\n          that.enable(count === 1);\n        });\n        this.disable();\n      },\n      destroy: function destroy(dt, node, config) {\n        dt.off(config._eventNamespace);\n      }\n    },\n    selectAll: {\n      text: i18n('selectAll', 'Select all'),\n      className: 'buttons-select-all',\n      action: function action() {\n        var items = this.select.items();\n        this[items + 's']().select();\n      }\n    },\n    selectNone: {\n      text: i18n('selectNone', 'Deselect all'),\n      className: 'buttons-select-none',\n      action: function action() {\n        clear(this.settings()[0], true);\n      },\n      init: function init(dt, node, config) {\n        var that = this;\n        config._eventNamespace = '.select' + _buttonNamespace++;\n        dt.on(namespacedEvents(config), function () {\n          var count = dt.rows({\n            selected: true\n          }).flatten().length + dt.columns({\n            selected: true\n          }).flatten().length + dt.cells({\n            selected: true\n          }).flatten().length;\n          that.enable(count > 0);\n        });\n        this.disable();\n      },\n      destroy: function destroy(dt, node, config) {\n        dt.off(config._eventNamespace);\n      }\n    }\n  });\n  $.each(['Row', 'Column', 'Cell'], function (i, item) {\n    var lc = item.toLowerCase();\n    DataTable.ext.buttons['select' + item + 's'] = {\n      text: i18n('select' + item + 's', 'Select ' + lc + 's'),\n      className: 'buttons-select-' + lc + 's',\n      action: function action() {\n        this.select.items(lc);\n      },\n      init: function init(dt) {\n        var that = this;\n        dt.on('selectItems.dt.DT', function (e, ctx, items) {\n          that.active(items === lc);\n        });\n      }\n    };\n  });\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * Initialisation\n   */\n  // DataTables creation - check if select has been defined in the options. Note\n  // this required that the table be in the document! If it isn't then something\n  // needs to trigger this method unfortunately. The next major release of\n  // DataTables will rework the events and address this.\n\n  $(document).on('preInit.dt.dtSelect', function (e, ctx) {\n    if (e.namespace !== 'dt') {\n      return;\n    }\n\n    DataTable.select.init(new DataTable.Api(ctx));\n  });\n  return DataTable.select;\n});"],"sourceRoot":""}